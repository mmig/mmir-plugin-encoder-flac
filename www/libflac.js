// libflac.js - port of libflac to JavaScript using emscripten
// by F. Petersen - based on the the port of libmp3 from Andreas Krennmair <ak@synflood.at>

var Flac = (function() {
// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function(x) {
      console.log(x);
    };
    Module['printErr'] = function(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++;
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] !== 'N') {
        // not namespaced
        if (func[i] === 'K') i++;
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      } else {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      }
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i)
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_toFloat32 = Math.toFloat32;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 11136;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var ___progname;
var __ZTVN10__cxxabiv120__si_class_type_infoE;
var __ZTVN10__cxxabiv117__class_type_infoE;
var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
var __ZNSt20bad_array_new_lengthC1Ev;
var __ZNSt20bad_array_new_lengthD1Ev;
var __ZNSt20bad_array_new_lengthD2Ev;
var _err;
var _errx;
var _warn;
var _warnx;
var _verr;
var _verrx;
var _vwarn;
var _vwarnx;
/* memory initializer */ allocate([111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,115,0,0,0,0,0,0,0,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,99,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,136,41,0,0,0,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,111,112,116,105,111,110,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,46,42,115,0,117,110,107,110,111,119,110,32,111,112,116,105,111,110,32,45,45,32,37,115,0,0,0,0,117,110,107,110,111,119,110,32,111,112,116,105,111,110,32,45,45,32,37,99,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,97,109,98,105,103,117,111,117,115,32,111,112,116,105,111,110,32,45,45,32,37,46,42,115,0,0,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,82,69,78,65,77,69,95,69,82,82,79,82,0,0,0,0,0,0,37,115,58,32,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,79,75,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,85,78,73,78,73,84,73,65,76,73,90,69,68,0,0,0,0,0,0,76,69,70,84,95,83,73,68,69,0,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,87,82,73,84,69,95,69,82,82,79,82,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,77,69,77,79,82,89,95,65,76,76,79,67,65,84,73,79,78,95,69,82,82,79,82,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,77,69,77,79,82,89,95,65,76,76,79,67,65,84,73,79,78,95,69,82,82,79,82,0,0,0,0,73,78,68,69,80,69,78,68,69,78,84,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,83,69,69,75,95,69,82,82,79,82,0,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,70,82,65,77,73,78,71,95,69,82,82,79,82,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,65,66,79,82,84,69,68,0,0,0,0,76,80,67,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,82,69,65,68,95,69,82,82,79,82,0,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,79,95,69,82,82,79,82,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,83,69,69,75,95,69,82,82,79,82,0,70,73,88,69,68,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,66,65,68,95,77,69,84,65,68,65,84,65,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,79,75,0,0,0,0,0,0,0,0,100,101,115,99,114,105,112,116,105,111,110,32,115,116,114,105,110,103,32,109,117,115,116,32,98,101,32,118,97,108,105,100,32,85,84,70,45,56,0,0,77,73,77,69,32,116,121,112,101,32,115,116,114,105,110,103,32,109,117,115,116,32,99,111,110,116,97,105,110,32,111,110,108,121,32,112,114,105,110,116,97,98,108,101,32,65,83,67,73,73,32,99,104,97,114,97,99,116,101,114,115,32,40,48,120,50,48,45,48,120,55,101,41,0,0,0,0,0,0,0,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,105,110,100,101,120,32,110,117,109,98,101,114,115,32,109,117,115,116,32,105,110,99,114,101,97,115,101,32,98,121,32,49,0,0,0,0,0,0,0,0,80,79,83,73,88,76,89,95,67,79,82,82,69,67,84,0,45,45,62,0,0,0,0,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,105,110,100,101,120,32,111,102,102,115,101,116,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,67,76,73,69,78,84,95,69,82,82,79,82,0,0,0,0,0,0,0,105,109,97,103,101,47,112,110,103,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,79,71,71,95,69,82,82,79,82,0,0,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,39,115,32,102,105,114,115,116,32,105,110,100,101,120,32,110,117,109,98,101,114,32,109,117,115,116,32,98,101,32,48,32,111,114,32,49,0,0,0,0,0,119,43,98,0,0,0,0,0,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,111,110,101,32,105,110,100,101,120,32,112,111,105,110,116,0,0,0,0,0,0,86,69,82,66,65,84,73,77,0,0,0,0,0,0,0,0,119,101,108,99,104,0,0,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,111,102,102,115,101,116,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,0,0,0,116,117,107,101,121,40,0,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,108,101,97,100,45,111,117,116,32,111,102,102,115,101,116,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,116,114,105,97,110,103,108,101,0,0,0,0,0,0,0,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,110,117,109,98,101,114,32,109,117,115,116,32,98,101,32,49,45,57,57,32,111,114,32,49,55,48,0,0,0,0,0,0,0,0,114,101,99,116,97,110,103,108,101,0,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,78,79,84,95,87,82,73,84,65,66,76,69,0,0,0,0,0,0,99,117,101,32,115,104,101,101,116,32,109,97,121,32,110,111,116,32,104,97,118,101,32,97,32,116,114,97,99,107,32,110,117,109,98,101,114,32,48,0,110,117,116,116,97,108,108,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,109,117,115,116,32,104,97,118,101,32,97,32,108,101,97,100,45,111,117,116,32,116,114,97,99,107,32,110,117,109,98,101,114,32,49,55,48,32,40,48,120,65,65,41,0,0,0,0,107,97,105,115,101,114,95,98,101,115,115,101,108,0,0,0,99,117,101,32,115,104,101,101,116,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,111,110,101,32,116,114,97,99,107,32,40,116,104,101,32,108,101,97,100,45,111,117,116,41,0,0,0,104,97,110,110,0,0,0,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,108,101,97,100,45,105,110,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,0,104,97,109,109,105,110,103,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,109,117,115,116,32,104,97,118,101,32,97,32,108,101,97,100,45,105,110,32,108,101,110,103,116,104,32,111,102,32,97,116,32,108,101,97,115,116,32,50,32,115,101,99,111,110,100,115,0,0,0,0,0,0,0,0,67,79,78,83,84,65,78,84,0,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,86,69,82,73,70,89,95,77,73,83,77,65,84,67,72,95,73,78,95,65,85,68,73,79,95,68,65,84,65,0,0,0,0,0,0,103,97,117,115,115,40,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,69,78,68,95,79,70,95,83,84,82,69,65,77,0,0,0,0,0,0,80,117,98,108,105,115,104,101,114,47,83,116,117,100,105,111,32,108,111,103,111,116,121,112,101,0,0,0,0,0,0,0,102,108,97,116,116,111,112,0,66,97,110,100,47,97,114,116,105,115,116,32,108,111,103,111,116,121,112,101,0,0,0,0,37,48,49,117,0,0,0,0,99,111,110,110,101,115,0,0,73,108,108,117,115,116,114,97,116,105,111,110,0,0,0,0,73,68,51,0,0,0,0,0,98,108,97,99,107,109,97,110,95,104,97,114,114,105,115,95,52,116,101,114,109,95,57,50,100,98,0,0,0,0,0,0,65,32,98,114,105,103,104,116,32,99,111,108,111,117,114,101,100,32,102,105,115,104,0,0,114,43,98,0,0,0,0,0,98,108,97,99,107,109,97,110,0,0,0,0,0,0,0,0,77,111,118,105,101,47,118,105,100,101,111,32,115,99,114,101,101,110,32,99,97,112,116,117,114,101,0,0,0,0,0,0,114,98,0,0,0,0,0,0,68,117,114,105,110,103,32,112,101,114,102,111,114,109,97,110,99,101,0,0,0,0,0,0,98,97,114,116,108,101,116,116,95,104,97,110,110,0,0,0,37,48,49,117,0,0,0,0,119,43,98,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,78,79,84,95,65,95,70,76,65,67,95,70,73,76,69,0,0,0,98,97,114,116,108,101,116,116,0,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,68,117,114,105,110,103,32,114,101,99,111,114,100,105,110,103,0,0,0,0,0,0,0,0,37,115,47,37,115,37,115,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,84,69,76,76,95,83,84,65,84,85,83,95,85,78,83,85,80,80,79,82,84,69,68,0,0,0,0,82,101,99,111,114,100,105,110,103,32,76,111,99,97,116,105,111,110,0,0,0,0,0,0,37,115,37,115,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,84,69,76,76,95,83,84,65,84,85,83,95,69,82,82,79,82,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,69,82,82,79,82,95,83,84,65,84,85,83,95,85,78,80,65,82,83,69,65,66,76,69,95,83,84,82,69,65,77,0,0,0,0,76,121,114,105,99,105,115,116,47,116,101,120,116,32,119,114,105,116,101,114,0,0,0,0,46,109,101,116,97,100,97,116,97,95,101,100,105,116,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,84,69,76,76,95,83,84,65,84,85,83,95,79,75,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,69,82,82,79,82,95,83,84,65,84,85,83,95,70,82,65,77,69,95,67,82,67,95,77,73,83,77,65,84,67,72,0,0,0,0,67,111,109,112,111,115,101,114,0,0,0,0,0,0,0,0,99,104,111,119,110,40,102,105,108,101,110,97,109,101,44,32,45,49,44,32,115,116,97,116,115,45,62,115,116,95,103,105,100,41,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,86,69,82,73,70,89,95,68,69,67,79,68,69,82,95,69,82,82,79,82,0,0,0,0,0,0,0,80,65,82,84,73,84,73,79,78,69,68,95,82,73,67,69,50,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,83,69,69,75,95,83,84,65,84,85,83,95,85,78,83,85,80,80,79,82,84,69,68,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,69,82,82,79,82,95,83,84,65,84,85,83,95,66,65,68,95,72,69,65,68,69,82,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,82,69,65,68,95,70,82,65,77,69,0,66,97,110,100,47,79,114,99,104,101,115,116,114,97,0,0,99,104,111,119,110,40,102,105,108,101,110,97,109,101,44,32,115,116,97,116,115,45,62,115,116,95,117,105,100,44,32,45,49,41,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,83,69,69,75,95,83,84,65,84,85,83,95,69,82,82,79,82,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,69,82,82,79,82,95,83,84,65,84,85,83,95,76,79,83,84,95,83,89,78,67,0,0,0,0,0,67,111,110,100,117,99,116,111,114,0,0,0,0,0,0,0,98,105,116,119,114,105,116,101,114,32,105,115,32,78,85,76,76,10,0,0,0,0,0,0,37,115,32,58,32,37,115,10,0,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,83,69,69,75,95,83,84,65,84,85,83,95,79,75,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,87,82,73,84,69,95,83,84,65,84,85,83,95,65,66,79,82,84,0,65,114,116,105,115,116,47,112,101,114,102,111,114,109,101,114,0,0,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,87,82,79,78,71,95,87,82,73,84,69,95,67,65,76,76,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,87,82,73,84,69,95,83,84,65,84,85,83,95,70,65,84,65,76,95,69,82,82,79,82,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,87,82,73,84,69,95,83,84,65,84,85,83,95,67,79,78,84,73,78,85,69,0,0,0,0,0,0,76,101,97,100,32,97,114,116,105,115,116,47,108,101,97,100,32,112,101,114,102,111,114,109,101,114,47,115,111,108,111,105,115,116,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,82,69,65,68,95,87,82,73,84,69,95,77,73,83,77,65,84,67,72,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,87,82,73,84,69,95,83,84,65,84,85,83,95,79,75,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,76,69,78,71,84,72,95,83,84,65,84,85,83,95,85,78,83,85,80,80,79,82,84,69,68,0,0,77,101,100,105,97,32,40,101,46,103,46,32,108,97,98,101,108,32,115,105,100,101,32,111,102,32,67,68,41,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,67,65,76,76,66,65,67,75,83,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,82,69,65,68,95,83,84,65,84,85,83,95,85,78,83,85,80,80,79,82,84,69,68,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,76,69,78,71,84,72,95,83,84,65,84,85,83,95,69,82,82,79,82,0,0,0,0,0,0,0,0,76,101,97,102,108,101,116,32,112,97,103,101,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,73,78,84,69,82,78,65,76,95,69,82,82,79,82,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,69,82,82,79,82,95,79,80,69,78,73,78,71,95,70,73,76,69,0,0,0,0,0,0,0,0,67,111,118,101,114,32,40,98,97,99,107,41,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,82,69,65,68,95,83,84,65,84,85,83,95,65,66,79,82,84,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,76,69,78,71,84,72,95,83,84,65,84,85,83,95,79,75,0,0,0,37,48,56,88,58,32,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,77,69,77,79,82,89,95,65,76,76,79,67,65,84,73,79,78,95,69,82,82,79,82,0,0,0,0,0,109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,82,69,65,68,95,83,84,65,84,85,83,95,69,78,68,95,79,70,95,83,84,82,69,65,77,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,84,69,76,76,95,83,84,65,84,85,83,95,85,78,83,85,80,80,79,82,84,69,68,0,0,0,0,67,111,118,101,114,32,40,102,114,111,110,116,41,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,85,78,76,73,78,75,95,69,82,82,79,82,0,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,82,69,65,68,95,83,84,65,84,85,83,95,67,79,78,84,73,78,85,69,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,84,69,76,76,95,83,84,65,84,85,83,95,69,82,82,79,82,0,0,79,116,104,101,114,32,102,105,108,101,32,105,99,111,110,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,82,69,78,65,77,69,95,69,82,82,79,82,0,0,0,0,0,0,0,0,105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,65,76,82,69,65,68,89,95,73,78,73,84,73,65,76,73,90,69,68,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,84,69,76,76,95,83,84,65,84,85,83,95,79,75,0,0,0,0,0,37,115,10,0,0,0,0,0,51,50,120,51,50,32,112,105,120,101,108,115,32,39,102,105,108,101,32,105,99,111,110,39,32,40,80,78,71,32,111,110,108,121,41,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,87,82,73,84,69,95,69,82,82,79,82,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,79,71,71,95,69,82,82,79,82,0,0,80,65,82,84,73,84,73,79,78,69,68,95,82,73,67,69,0,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,77,69,84,65,68,65,84,65,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,83,69,69,75,95,83,84,65,84,85,83,95,85,78,83,85,80,80,79,82,84,69,68,0,0,0,0,37,115,10,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,83,69,65,82,67,72,95,70,79,82,95,70,82,65,77,69,95,83,89,78,67,0,0,0,0,0,0,79,116,104,101,114,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,83,69,69,75,95,69,82,82,79,82,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,78,79,84,95,83,84,82,69,65,77,65,66,76,69,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,83,69,69,75,95,83,84,65,84,85,83,95,69,82,82,79,82,0,0,80,73,67,84,85,82,69,0,37,48,56,88,58,32,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,82,69,65,68,95,69,82,82,79,82,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,66,76,79,67,75,95,83,73,90,69,95,84,79,79,95,83,77,65,76,76,95,70,79,82,95,76,80,67,95,79,82,68,69,82,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,83,69,69,75,95,83,84,65,84,85,83,95,79,75,0,0,0,0,0,67,85,69,83,72,69,69,84,0,0,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,66,65,68,95,77,69,84,65,68,65,84,65,0,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,81,76,80,95,67,79,69,70,70,95,80,82,69,67,73,83,73,79,78,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,82,69,65,68,95,83,84,65,84,85,83,95,65,66,79,82,84,0,0,86,79,82,66,73,83,95,67,79,77,77,69,78,84,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,78,79,84,95,87,82,73,84,65,66,76,69,0,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,77,65,88,95,76,80,67,95,79,82,68,69,82,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,82,69,65,68,95,83,84,65,84,85,83,95,69,78,68,95,79,70,95,83,84,82,69,65,77,0,0,83,69,69,75,84,65,66,76,69,0,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,78,79,84,95,65,95,70,76,65,67,95,70,73,76,69,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,66,76,79,67,75,95,83,73,90,69,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,82,69,65,68,95,83,84,65,84,85,83,95,67,79,78,84,73,78,85,69,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,79,75,0,65,80,80,76,73,67,65,84,73,79,78,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,69,82,82,79,82,95,79,80,69,78,73,78,71,95,70,73,76,69,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,73,76,76,69,71,65,76,95,73,78,80,85,84,0,0,0,0,0,37,115,58,32,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,83,65,77,80,76,69,95,82,65,84,69,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,65,76,82,69,65,68,89,95,73,78,73,84,73,65,76,73,90,69,68,0,0,0,0,80,65,68,68,73,78,71,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,73,76,76,69,71,65,76,95,73,78,80,85,84,0,0,0,0,0,0,0,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0,0,0,0,83,84,82,69,65,77,73,78,70,79,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,66,73,84,83,95,80,69,82,95,83,65,77,80,76,69,0,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,69,82,82,79,82,95,79,80,69,78,73,78,71,95,70,73,76,69,0,0,0,0,0,98,105,116,119,114,105,116,101,114,58,32,99,97,112,97,99,105,116,121,61,37,117,32,119,111,114,100,115,61,37,117,32,98,105,116,115,61,37,117,32,116,111,116,97,108,95,98,105,116,115,61,37,117,10,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,67,72,65,73,78,95,83,84,65,84,85,83,95,79,75,0,0,70,82,65,77,69,95,78,85,77,66,69,82,95,84,89,80,69,95,83,65,77,80,76,69,95,78,85,77,66,69,82,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,78,85,77,66,69,82,95,79,70,95,67,72,65,78,78,69,76,83,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,77,69,77,79,82,89,95,65,76,76,79,67,65,84,73,79,78,95,69,82,82,79,82,0,0,0,0,0,0,0,0,49,46,51,46,48,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,73,78,84,69,82,78,65,76,95,69,82,82,79,82,0,0,0,0,115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,67,65,76,76,66,65,67,75,83,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,73,78,86,65,76,73,68,95,67,65,76,76,66,65,67,75,83,0,0,0,0,0,0,70,82,65,77,69,95,78,85,77,66,69,82,95,84,89,80,69,95,70,82,65,77,69,95,78,85,77,66,69,82,0,0,58,32,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,77,69,77,79,82,89,95,65,76,76,79,67,65,84,73,79,78,95,69,82,82,79,82,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,85,78,73,78,73,84,73,65,76,73,90,69,68,0,0,0,0,0,0,114,101,102,101,114,101,110,99,101,32,108,105,98,70,76,65,67,32,49,46,51,46,48,32,50,48,49,51,48,53,50,54,0,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,85,78,83,85,80,80,79,82,84,69,68,95,67,79,78,84,65,73,78,69,82,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,85,78,83,85,80,80,79,82,84,69,68,95,67,79,78,84,65,73,78,69,82,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,82,69,65,68,95,77,69,84,65,68,65,84,65,0,0,0,0,0,0,58,32,0,0,0,0,0,0,77,73,68,95,83,73,68,69,0,0,0,0,0,0,0,0,70,76,65,67,95,95,77,69,84,65,68,65,84,65,95,83,73,77,80,76,69,95,73,84,69,82,65,84,79,82,95,83,84,65,84,85,83,95,85,78,76,73,78,75,95,69,82,82,79,82,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,83,69,65,82,67,72,95,70,79,82,95,77,69,84,65,68,65,84,65,0,0,0,0,0,0,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,69,78,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,69,78,67,79,68,69,82,95,69,82,82,79,82,0,0,70,76,65,67,95,95,83,84,82,69,65,77,95,68,69,67,79,68,69,82,95,73,78,73,84,95,83,84,65,84,85,83,95,79,75,0,0,0,0,0,82,73,71,72,84,95,83,73,68,69,0,0,0,0,0,0,98,105,116,114,101,97,100,101,114,58,32,99,97,112,97,99,105,116,121,61,37,117,32,119,111,114,100,115,61,37,117,32,98,121,116,101,115,61,37,117,32,99,111,110,115,117,109,101,100,58,32,119,111,114,100,115,61,37,117,44,32,98,105,116,115,61,37,117,10,0,0,0,98,105,116,114,101,97,100,101,114,32,105,115,32,78,85,76,76,10,0,0,0,0,0,0,0,0,0,0,128,31,0,0,40,0,0,0,16,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,31,0,0,40,0,0,0,2,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0,0,0,0,0,0,0,0,0,0,0,0,56,31,0,0,0,0,0,0,72,31,0,0,120,31,0,0,0,0,0,0,0,0,0,0,88,31,0,0,128,31,0,0,0,0,0,0,73,68,51,0,0,0,0,0,0,7,14,9,28,27,18,21,56,63,54,49,36,35,42,45,112,119,126,121,108,107,98,101,72,79,70,65,84,83,90,93,224,231,238,233,252,251,242,245,216,223,214,209,196,195,202,205,144,151,158,153,140,139,130,133,168,175,166,161,180,179,186,189,199,192,201,206,219,220,213,210,255,248,241,246,227,228,237,234,183,176,185,190,171,172,165,162,143,136,129,134,147,148,157,154,39,32,41,46,59,60,53,50,31,24,17,22,3,4,13,10,87,80,89,94,75,76,69,66,111,104,97,102,115,116,125,122,137,142,135,128,149,146,155,156,177,182,191,184,173,170,163,164,249,254,247,240,229,226,235,236,193,198,207,200,221,218,211,212,105,110,103,96,117,114,123,124,81,86,95,88,77,74,67,68,25,30,23,16,5,2,11,12,33,38,47,40,61,58,51,52,78,73,64,71,82,85,92,91,118,113,120,127,106,109,100,99,62,57,48,55,34,37,44,43,6,1,8,15,26,29,20,19,174,169,160,167,178,181,188,187,150,145,152,159,138,141,132,131,222,217,208,215,194,197,204,203,230,225,232,239,250,253,244,243,0,0,0,0,5,128,0,0,15,128,0,0,10,0,0,0,27,128,0,0,30,0,0,0,20,0,0,0,17,128,0,0,51,128,0,0,54,0,0,0,60,0,0,0,57,128,0,0,40,0,0,0,45,128,0,0,39,128,0,0,34,0,0,0,99,128,0,0,102,0,0,0,108,0,0,0,105,128,0,0,120,0,0,0,125,128,0,0,119,128,0,0,114,0,0,0,80,0,0,0,85,128,0,0,95,128,0,0,90,0,0,0,75,128,0,0,78,0,0,0,68,0,0,0,65,128,0,0,195,128,0,0,198,0,0,0,204,0,0,0,201,128,0,0,216,0,0,0,221,128,0,0,215,128,0,0,210,0,0,0,240,0,0,0,245,128,0,0,255,128,0,0,250,0,0,0,235,128,0,0,238,0,0,0,228,0,0,0,225,128,0,0,160,0,0,0,165,128,0,0,175,128,0,0,170,0,0,0,187,128,0,0,190,0,0,0,180,0,0,0,177,128,0,0,147,128,0,0,150,0,0,0,156,0,0,0,153,128,0,0,136,0,0,0,141,128,0,0,135,128,0,0,130,0,0,0,131,129,0,0,134,1,0,0,140,1,0,0,137,129,0,0,152,1,0,0,157,129,0,0,151,129,0,0,146,1,0,0,176,1,0,0,181,129,0,0,191,129,0,0,186,1,0,0,171,129,0,0,174,1,0,0,164,1,0,0,161,129,0,0,224,1,0,0,229,129,0,0,239,129,0,0,234,1,0,0,251,129,0,0,254,1,0,0,244,1,0,0,241,129,0,0,211,129,0,0,214,1,0,0,220,1,0,0,217,129,0,0,200,1,0,0,205,129,0,0,199,129,0,0,194,1,0,0,64,1,0,0,69,129,0,0,79,129,0,0,74,1,0,0,91,129,0,0,94,1,0,0,84,1,0,0,81,129,0,0,115,129,0,0,118,1,0,0,124,1,0,0,121,129,0,0,104,1,0,0,109,129,0,0,103,129,0,0,98,1,0,0,35,129,0,0,38,1,0,0,44,1,0,0,41,129,0,0,56,1,0,0,61,129,0,0,55,129,0,0,50,1,0,0,16,1,0,0,21,129,0,0,31,129,0,0,26,1,0,0,11,129,0,0,14,1,0,0,4,1,0,0,1,129,0,0,3,131,0,0,6,3,0,0,12,3,0,0,9,131,0,0,24,3,0,0,29,131,0,0,23,131,0,0,18,3,0,0,48,3,0,0,53,131,0,0,63,131,0,0,58,3,0,0,43,131,0,0,46,3,0,0,36,3,0,0,33,131,0,0,96,3,0,0,101,131,0,0,111,131,0,0,106,3,0,0,123,131,0,0,126,3,0,0,116,3,0,0,113,131,0,0,83,131,0,0,86,3,0,0,92,3,0,0,89,131,0,0,72,3,0,0,77,131,0,0,71,131,0,0,66,3,0,0,192,3,0,0,197,131,0,0,207,131,0,0,202,3,0,0,219,131,0,0,222,3,0,0,212,3,0,0,209,131,0,0,243,131,0,0,246,3,0,0,252,3,0,0,249,131,0,0,232,3,0,0,237,131,0,0,231,131,0,0,226,3,0,0,163,131,0,0,166,3,0,0,172,3,0,0,169,131,0,0,184,3,0,0,189,131,0,0,183,131,0,0,178,3,0,0,144,3,0,0,149,131,0,0,159,131,0,0,154,3,0,0,139,131,0,0,142,3,0,0,132,3,0,0,129,131,0,0,128,2,0,0,133,130,0,0,143,130,0,0,138,2,0,0,155,130,0,0,158,2,0,0,148,2,0,0,145,130,0,0,179,130,0,0,182,2,0,0,188,2,0,0,185,130,0,0,168,2,0,0,173,130,0,0,167,130,0,0,162,2,0,0,227,130,0,0,230,2,0,0,236,2,0,0,233,130,0,0,248,2,0,0,253,130,0,0,247,130,0,0,242,2,0,0,208,2,0,0,213,130,0,0,223,130,0,0,218,2,0,0,203,130,0,0,206,2,0,0,196,2,0,0,193,130,0,0,67,130,0,0,70,2,0,0,76,2,0,0,73,130,0,0,88,2,0,0,93,130,0,0,87,130,0,0,82,2,0,0,112,2,0,0,117,130,0,0,127,130,0,0,122,2,0,0,107,130,0,0,110,2,0,0,100,2,0,0,97,130,0,0,32,2,0,0,37,130,0,0,47,130,0,0,42,2,0,0,59,130,0,0,62,2,0,0,52,2,0,0,49,130,0,0,19,130,0,0,22,2,0,0,28,2,0,0,25,130,0,0,8,2,0,0,13,130,0,0,7,130,0,0,2,2,0,0,144,27,0,0,0,0,0,0,240,28,0,0,0,0,0,0,240,9,0,0,88,7,0,0,0,5,0,0,128,4,0,0,136,21,0,0,96,20,0,0,152,19,0,0,248,18,0,0,216,17,0,0,88,17,0,0,168,16,0,0,248,15,0,0,80,15,0,0,200,14,0,0,56,14,0,0,56,13,0,0,160,12,0,0,32,12,0,0,208,11,0,0,72,11,0,0,32,11,0,0,240,10,0,0,184,10,0,0,144,10,0,0,104,10,0,0,0,0,0,0,80,16,0,0,152,15,0,0,216,12,0,0,64,12,0,0,240,11,0,0,0,0,0,0,184,24,0,0,200,28,0,0,176,20,0,0,112,13,0,0,0,10,0,0,136,6,0,0,192,4,0,0,56,4,0,0,144,3,0,0,0,0,0,0,0,15,0,0,112,14,0,0,184,13,0,0,0,0,0,0,64,19,0,0,152,18,0,0,232,17,0,0,248,16,0,0,248,2,0,0,48,30,0,0,24,29,0,0,240,27,0,0,16,27,0,0,32,26,0,0,80,25,0,0,80,24,0,0,168,23,0,0,0,23,0,0,72,22,0,0,184,21,0,0,232,20,0,0,248,19,0,0,200,15,0,0,40,15,0,0,48,20,0,0,112,19,0,0,200,18,0,0,0,0,0,0,0,30,0,0,136,29,0,0,88,21,0,0,24,14,0,0,64,10,0,0,192,6,0,0,224,4,0,0,96,4,0,0,192,3,0,0,32,3,0,0,144,22,0,0,232,21,0,0,32,21,0,0,0,0,0,0,136,24,0,0,224,23,0,0,64,23,0,0,0,0,0,0,16,18,0,0,40,17,0,0,120,16,0,0,0,0,0,0,96,30,0,0,80,29,0,0,40,28,0,0,80,27,0,0,96,26,0,0,136,25,0,0,152,14,0,0,232,13,0,0,0,13,0,0,104,12,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,102,76,97,67,0,0,0,0,32,0,0,0,0,0,0,0,67,97,76,102,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,16,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,23,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,64,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,64,5,0,0,16,25,0,0,152,17,0,0,128,11,0,0].concat([96,8,0,0,8,5,0,0,136,4,0,0,0,4,0,0,88,3,0,0,184,2,0,0,200,29,0,0,136,28,0,0,152,27,0,0,0,0,0,0,208,26,0,0,200,25,0,0,224,24,0,0,32,24,0,0,120,23,0,0,200,22,0,0,32,22,0,0,144,21,0,0,136,20,0,0,168,19,0,0,8,19,0,0,64,18,0,0,104,17,0,0,200,16,0,0,32,16,0,0,104,15,0,0,16,26,0,0,192,25,0,0,208,24,0,0,16,24,0,0,104,23,0,0,184,22,0,0,16,22,0,0,0,0,0,0,96,28,0,0,240,26,0,0,1,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,254,63,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,208,20,0,0,160,13,0,0,2,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,240,3,0,0,72,3,0,0,136,30,0,0,184,29,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[((8056 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8064 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8080 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num) | 0;
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }
  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && buffer.buffer === HEAP8.buffer && offset === 0) {
              node.contents = buffer; // this is a subarray of the heap, and we can own it
              node.contentMode = MEMFS.CONTENT_OWNING;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        var done = function(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function() { done(null); };
            req.onerror = function() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function() { done(null); };
            req.onerror = function() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        var isRealDir = function(p) {
          return p !== '.' && p !== '..';
        };
        var toAbsolute = function(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = {};
          // compatibility
          Object.defineProperties(FS.FSStream, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        stream.prototype = FS.FSStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        var done = function(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {} : ['binary'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          var handleMessage = function(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);function _llvm_ctlz_i32(x) {
      x = x|0;
      var ret = 0;
      ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
      if ((ret|0) < 8) return ret|0;
      ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
      if ((ret|0) < 8) return (ret + 8)|0;
      ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
      if ((ret|0) < 8) return (ret + 16)|0;
      return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i64=_memset;
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  var _log=Math_log;
  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return FUNCTION_TABLE[cmp](base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }
  var _llvm_memset_p0i8_i32=_memset;
  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var sign = 1;
        if (x < 0) {
          x = -x;
          sign = -1;
        }
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = sign*x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }
  function _round(x) {
      return (x < 0) ? -Math.round(-x) : Math.round(x);
    }var _lround=_round;
  var _fabsf=Math_abs;
  function _llvm_uadd_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x+y > 4294967295,(x+y)>>>0;
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      (_memcpy(newStr, ptr, len)|0);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }var _fseeko=_fseek;
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }var _ftello=_ftell;
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }
  function _chmod(path, mode, dontResolveLastLink) {
      // int chmod(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/chmod.html
      // NOTE: dontResolveLastLink is a shortcut for lchmod(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        FS.chmod(path, mode);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = 4;
        time = HEAP32[(((times)+(offset))>>2)]
        time *= 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _chown(path, owner, group, dontResolveLastLink) {
      // int chown(const char *path, uid_t owner, gid_t group);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/chown.html
      // We don't support multiple users, so changing ownership makes no sense.
      // NOTE: The path argument may be a string, to simplify fchown().
      // NOTE: dontResolveLastLink is a shortcut for lchown(). It should never be
      //       used in client code.
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.chown(path, owner, group);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function ___errno_location() {
      return ___errno_state;
    }
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode
        HEAP32[(((buf)+(16))>>2)]=stat.nlink
        HEAP32[(((buf)+(20))>>2)]=stat.uid
        HEAP32[(((buf)+(24))>>2)]=stat.gid
        HEAP32[(((buf)+(28))>>2)]=stat.rdev
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size
        HEAP32[(((buf)+(40))>>2)]=4096
        HEAP32[(((buf)+(44))>>2)]=stat.blocks
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000)
        HEAP32[(((buf)+(52))>>2)]=0
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000)
        HEAP32[(((buf)+(60))>>2)]=0
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000)
        HEAP32[(((buf)+(68))>>2)]=0
        HEAP32[(((buf)+(72))>>2)]=stat.ino
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  function _rename(old_path, new_path) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      old_path = Pointer_stringify(old_path);
      new_path = Pointer_stringify(new_path);
      try {
        FS.rename(old_path, new_path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStream(stream);
      return Number(stream && stream.eof);
    }
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  var _llvm_va_start=undefined;
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        v1 = HEAPU8[(((p1)+(i))|0)];
        v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }function _strncasecmp(px, py, n) {
      px = px|0; py = py|0; n = n|0;
      var i = 0, x = 0, y = 0;
      while ((i>>>0) < (n>>>0)) {
        x = _tolower(HEAP8[(((px)+(i))|0)])|0;
        y = _tolower(HEAP8[(((py)+(i))|0)])|0;
        if (((x|0) == (y|0)) & ((x|0) == 0)) return 0;
        if ((x|0) == 0) return -1;
        if ((y|0) == 0) return 1;
        if ((x|0) == (y|0)) {
          i = (i + 1)|0;
          continue;
        } else {
          return ((x>>>0) > (y>>>0) ? 1 : -1)|0;
        }
      }
      return 0;
    }
  function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }
  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStream(stream);
      return Number(stream && stream.error);
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  var _cos=Math_cos;
  var _exp=Math_exp;
  function _abort() {
      Module['abort']();
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function ___gxx_personality_v0() {
    }
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[(((poolPtr)+(j))|0)]=line.charCodeAt(j);
        }
        HEAP8[(((poolPtr)+(j))|0)]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module.print('exit(' + status + ') called');
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            ctx = canvas.getContext('experimental-webgl', contextAttributes);
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,__ZNSt20bad_array_new_lengthD0Ev,0,__warn,0,_file_read_callback_,0,_seekpoint_compare_,0,_error_callback_,0,_fread,0,__ZNSt9bad_allocC2Ev,0,__ZNSt9bad_allocD0Ev,0,_FLAC__fixed_compute_best_predictor_wide,0,_FLAC__lpc_restore_signal_wide,0,__errx,0,__verrx,0,__ZNKSt9bad_alloc4whatEv,0,_verify_metadata_callback_,0,__verr,0,_file_read_callback_214,0,_read_callback_,0,_file_seek_callback_215,0,_metadata_callback_,0,__ZNSt9bad_allocD2Ev,0,_verify_error_callback_,0,__vwarn,0,_FLAC__lpc_restore_signal,0,_chain_read_ogg_error_cb_,0,_file_tell_callback_216,0,_file_seek_callback_,0,_verify_read_callback_,0,_file_write_callback_,0,_file_eof_callback_,0,_file_length_callback_,0,_write_callback_,0,__ZNSt20bad_array_new_lengthC2Ev,0,_fseek_wrapper_,0,_ftell_wrapper_,0,_FLAC__fixed_compute_best_predictor,0,__err,0,_chain_read_ogg_metadata_cb_,0,__vwarnx,0,_FLAC__lpc_compute_residual_from_qlp_coefficients,0,__ZNKSt20bad_array_new_length4whatEv,0,_fwrite,0,_FLAC__lpc_compute_autocorrelation,0,_file_tell_callback_,0,_FLAC__lpc_compute_residual_from_qlp_coefficients_wide,0,_chain_read_ogg_write_cb_,0,_verify_write_callback_,0,_chain_read_ogg_read_cb_,0,__warnx,0,_FLAC__bitreader_read_rice_signed_block,0];
// EMSCRIPTEN_START_FUNCS
function _FLAC__bitmath_silog2($v){
 var label=0;
 var $_0=$v;
 while(1) {
  var $_0;
  var $2=($_0|0)==0;
  if ($2) {
   var $_08=0;
   break;
  }
  var $4=($_0|0)>0;
  if ($4) {
   var $_19=$_0;var $l_010=1;
   label = 4;
   break;
  }
  var $8=($_0|0)==-1;
  var $9=$_0^-1;
  if ($8) {
   var $_08=2;
   break;
  } else {
   var $_0=$9;
  }
 }
 if (label == 4) {
  while(1) {
   label = 0;
   var $l_010;
   var $_19;
   var $5=$_19>>1;
   var $phitmp=((($l_010)+(1))|0);
   var $6=($5|0)==0;
   if ($6) {
    var $_08=$phitmp;
    break;
   } else {
    var $_19=$5;var $l_010=$phitmp;
    label = 4;
   }
  }
 }
 var $_08;
 return $_08;
}
function _FLAC__bitmath_silog2_wide($v$0,$v$1){
 var label=0;
 var $_0$1=$v$1;var $_0$0=$v$0;
 while(1) {
  var $_0$0;
  var $_0$1;
  var $$etemp$0$0=0;
  var $$etemp$0$1=0;
  var $2=(($_0$0|0) == ($$etemp$0$0|0)) & (($_0$1|0) == ($$etemp$0$1|0));
  if ($2) {
   var $_08=0;
   label = 13;
   break;
  }
  var $$etemp$1$0=0;
  var $$etemp$1$1=0;
  var $4=(($_0$1|0) > ($$etemp$1$1|0)) | (((($_0$1|0) == ($$etemp$1$1|0) & ($_0$0>>>0) >  ($$etemp$1$0>>>0))));
  if ($4) {
   var $_19$1=$_0$1;var $_19$0=$_0$0;var $l_010=1;
   label = 10;
   break;
  }
  var $$etemp$3$0=-1;
  var $$etemp$3$1=-1;
  var $8=(($_0$0|0) == ($$etemp$3$0|0)) & (($_0$1|0) == ($$etemp$3$1|0));
  var $$etemp$4$0=-1;
  var $$etemp$4$1=-1;
  var $9$0=$_0$0^$$etemp$4$0;
  var $9$1=$_0$1^$$etemp$4$1;
  if ($8) {
   var $_08=2;
   label = 15;
   break;
  } else {
   var $_0$1=$9$1;var $_0$0=$9$0;
  }
 }
 if (label == 10) {
  while(1) {
   label = 0;
   var $l_010;
   var $_19$0;
   var $_19$1;
   var $5$0=($_19$0>>>1)|($_19$1<<31);
   var $5$1=($_19$1>>1)|(((((($_19$1|0)<0))|0)?-1:0)<<31);
   var $phitmp=((($l_010)+(1))|0);
   var $$etemp$2$0=0;
   var $$etemp$2$1=0;
   var $6=(($5$0|0) == ($$etemp$2$0|0)) & (($5$1|0) == ($$etemp$2$1|0));
   if ($6) {
    var $_08=$phitmp;
    break;
   } else {
    var $_19$1=$5$1;var $_19$0=$5$0;var $l_010=$phitmp;
    label = 10;
   }
  }
  var $_08;
  return $_08;
 }
 else if (label == 13) {
  var $_08;
  return $_08;
 }
 else if (label == 15) {
  var $_08;
  return $_08;
 }
}
function _bitreader_read_from_client_($br){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $bytes=sp;
 var $1=(($br+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 var $_phi_trans_insert=(($br+8)|0);
 var $_pre44=HEAP32[(($_phi_trans_insert)>>2)];
 var $_pre45=(($br+12)|0);
 if ($3) {
  var $18=$_pre44;
 } else {
  var $5=HEAP32[(($_pre45)>>2)];
  var $6=($5|0)!=0;
  var $7=($6&1);
  var $8=(($br)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$9;
  var $11=(($9+($2<<2))|0);
  var $12=$11;
  var $13=((($_pre44)-($2))|0);
  var $14=((($13)+($7))|0);
  var $15=$14<<2;
  _memmove($10,$12,$15,4,0);
  var $16=HEAP32[(($_phi_trans_insert)>>2)];
  var $17=((($16)-($2))|0);
  HEAP32[(($_phi_trans_insert)>>2)]=$17;
  HEAP32[(($1)>>2)]=0;
  var $18=$17;
 }
 var $18;
 var $19=(($br+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($br+8)|0);
 var $22=((($20)-($18))|0);
 var $23=$22<<2;
 var $24=HEAP32[(($_pre45)>>2)];
 var $25=((($23)-($24))|0);
 HEAP32[(($bytes)>>2)]=$25;
 var $26=($23|0)==($24|0);
 if ($26) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $28=(($br)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+($18<<2))|0);
 var $31=$30;
 var $32=(($31+$24)|0);
 var $33=($24|0)==0;
 if (!($33)) {
  var $35=HEAP32[(($30)>>2)];
  var $36=_llvm_bswap_i32($35);
  HEAP32[(($30)>>2)]=$36;
 }
 var $38=(($br+32)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($br+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=FUNCTION_TABLE[$39]($32,$bytes,$41);
 var $43=($42|0)==0;
 if ($43) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $45=HEAP32[(($21)>>2)];
 var $46=$45<<2;
 var $47=HEAP32[(($_pre45)>>2)];
 var $48=HEAP32[(($bytes)>>2)];
 var $49=((($47)+(3))|0);
 var $50=((($49)+($46))|0);
 var $51=((($50)+($48))|0);
 var $52=$51>>>2;
 var $53=($45>>>0)<($52>>>0);
 if ($53) {
  var $start_040=$45;
  while(1) {
   var $start_040;
   var $54=HEAP32[(($28)>>2)];
   var $55=(($54+($start_040<<2))|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=_llvm_bswap_i32($56);
   HEAP32[(($55)>>2)]=$57;
   var $58=((($start_040)+(1))|0);
   var $59=($58>>>0)<($52>>>0);
   if ($59) {
    var $start_040=$58;
   } else {
    break;
   }
  }
  var $_pre=HEAP32[(($21)>>2)];
  var $_pre41=HEAP32[(($_pre45)>>2)];
  var $_pre42=HEAP32[(($bytes)>>2)];
  var $63=$_pre;var $62=$_pre41;var $61=$_pre42;
 } else {
  var $63=$45;var $62=$47;var $61=$48;
 }
 var $61;
 var $62;
 var $63;
 var $64=$63<<2;
 var $65=((($64)+($62))|0);
 var $66=((($65)+($61))|0);
 var $67=$66>>>2;
 HEAP32[(($21)>>2)]=$67;
 var $68=$66&3;
 HEAP32[(($_pre45)>>2)]=$68;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitreader_new(){
 var label=0;
 var $1=_calloc(1,96);
 var $2=$1;
 return $2;
}
function _FLAC__bitreader_delete($br){
 var label=0;
 var $1=(($br)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $5=$2;
  _free($5);
 }
 var $6=$br;
 _free($6);
 return;
}
function _FLAC__bitreader_free($br){
 var label=0;
 var $1=(($br)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $5=$2;
  _free($5);
 }
 var $7=(($br+32)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($br+36)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=$br;
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0; HEAP32[((($9)+(12))>>2)]=0; HEAP32[((($9)+(16))>>2)]=0; HEAP32[((($9)+(20))>>2)]=0;
 return;
}
function _FLAC__bitreader_init($br,$cpu,$rcb,$cd){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $cpu; $cpu=STACKTOP;STACKTOP = (STACKTOP + 56)|0;(_memcpy($cpu, tempParam, 56)|0);
 var $1=(($br+8)|0);
 var $2=(($br+4)|0);
 var $3=$1;
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0; HEAP32[((($3)+(12))>>2)]=0;
 HEAP32[(($2)>>2)]=2048;
 var $4=_malloc(8192);
 var $5=$4;
 var $6=(($br)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=($4|0)==0;
 if ($7) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $9=(($br+32)|0);
 HEAP32[(($9)>>2)]=$rcb;
 var $10=(($br+36)|0);
 HEAP32[(($10)>>2)]=$cd;
 var $11=(($br+40)|0);
 var $12=$11;
 var $13=$cpu;
 (_memcpy($12, $13, 56)|0);
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitreader_clear($br){
 var label=0;
 var $1=(($br+8)|0);
 var $2=$1;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0; HEAP32[((($2)+(12))>>2)]=0;
 return 1;
}
function _FLAC__bitreader_dump($br,$out){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=($br|0)==0;
 if ($1) {
  var $3=_fwrite(7904,18,1,$out);
  STACKTOP=sp;return;
 }
 var $5=(($br+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($br+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($br+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($br+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($br+20)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=_fprintf($out,7832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,HEAP32[((tempVarArgs)>>2)]=$6,HEAP32[(((tempVarArgs)+(8))>>2)]=$8,HEAP32[(((tempVarArgs)+(16))>>2)]=$10,HEAP32[(((tempVarArgs)+(24))>>2)]=$12,HEAP32[(((tempVarArgs)+(32))>>2)]=$14,tempVarArgs)); STACKTOP=tempVarArgs;
 var $16=HEAP32[(($7)>>2)];
 var $17=($16|0)==0;
 if ($17) {
  var $i_0_lcssa=0;
 } else {
  var $18=(($br)|0);
  var $i_056=0;
  while(1) {
   var $i_056;
   var $20=_fprintf($out,5656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$i_056,tempVarArgs)); STACKTOP=tempVarArgs;
   var $j_054=0;
   while(1) {
    var $j_054;
    var $22=HEAP32[(($11)>>2)];
    var $23=($i_056>>>0)<($22>>>0);
    do {
     if ($23) {
      label = 51;
     } else {
      var $25=($i_056|0)==($22|0);
      if ($25) {
       var $27=HEAP32[(($13)>>2)];
       var $28=($j_054>>>0)<($27>>>0);
       if ($28) {
        label = 51;
        break;
       }
      }
      var $31=HEAP32[(($18)>>2)];
      var $32=(($31+($i_056<<2))|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(((31)-($j_054))|0);
      var $35=1<<$34;
      var $36=$33&$35;
      var $37=($36|0)!=0;
      var $38=($37&1);
      var $39=_fprintf($out,2728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$38,tempVarArgs)); STACKTOP=tempVarArgs;
     }
    } while(0);
    if (label == 51) {
     label = 0;
     var $fputc=_fputc(46,$out);
    }
    var $41=((($j_054)+(1))|0);
    var $42=($41>>>0)<32;
    if ($42) {
     var $j_054=$41;
    } else {
     break;
    }
   }
   var $fputc45=_fputc(10,$out);
   var $44=((($i_056)+(1))|0);
   var $45=HEAP32[(($7)>>2)];
   var $46=($44>>>0)<($45>>>0);
   if ($46) {
    var $i_056=$44;
   } else {
    var $i_0_lcssa=$44;
    break;
   }
  }
 }
 var $i_0_lcssa;
 var $47=HEAP32[(($9)>>2)];
 var $48=($47|0)==0;
 if ($48) {
  STACKTOP=sp;return;
 }
 var $50=_fprintf($out,5656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$i_0_lcssa,tempVarArgs)); STACKTOP=tempVarArgs;
 var $51=HEAP32[(($9)>>2)];
 var $_mask=$51&536870911;
 var $52=($_mask|0)==0;
 if (!($52)) {
  var $53=(($br)|0);
  var $j_152=0;var $55=$51;
  while(1) {
   var $55;
   var $j_152;
   var $56=HEAP32[(($11)>>2)];
   var $57=($i_0_lcssa>>>0)<($56>>>0);
   do {
    if ($57) {
     label = 61;
    } else {
     var $59=($i_0_lcssa|0)==($56|0);
     if ($59) {
      var $61=HEAP32[(($13)>>2)];
      var $62=($j_152>>>0)<($61>>>0);
      if ($62) {
       label = 61;
       break;
      }
     }
     var $65=HEAP32[(($53)>>2)];
     var $66=(($65+($i_0_lcssa<<2))|0);
     var $67=HEAP32[(($66)>>2)];
     var $68=$55<<3;
     var $69=$j_152^-1;
     var $70=((($68)+($69))|0);
     var $71=1<<$70;
     var $72=$71&$67;
     var $73=($72|0)!=0;
     var $74=($73&1);
     var $75=_fprintf($out,2728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$74,tempVarArgs)); STACKTOP=tempVarArgs;
    }
   } while(0);
   if (label == 61) {
    label = 0;
    var $fputc48=_fputc(46,$out);
   }
   var $77=((($j_152)+(1))|0);
   var $78=HEAP32[(($9)>>2)];
   var $79=$78<<3;
   var $80=($77>>>0)<($79>>>0);
   if ($80) {
    var $j_152=$77;var $55=$78;
   } else {
    break;
   }
  }
 }
 var $fputc51=_fputc(10,$out);
 STACKTOP=sp;return;
}
function _FLAC__bitreader_reset_read_crc16($br,$seed){
 var label=0;
 var $1=($seed&65535);
 var $2=(($br+24)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($br+20)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($br+28)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}
function _FLAC__bitreader_get_read_crc16($br){
 var label=0;
 var $1=(($br+20)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 do {
  if (!($3)) {
   var $5=(($br+16)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($br)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+($6<<2))|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($br+28)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=($12>>>0)<($2>>>0);
   if (!($13)) {
    break;
   }
   var $14=(($br+24)|0);
   var $_pre=HEAP32[(($14)>>2)];
   var $17=$12;var $16=$_pre;
   while(1) {
    var $16;
    var $17;
    var $18=$16<<8;
    var $19=$18&65280;
    var $20=$16>>>8;
    var $21=(((24)-($17))|0);
    var $22=$10>>>($21>>>0);
    var $23=$22&255;
    var $24=$20^$23;
    var $25=((8360+($24<<2))|0);
    var $26=HEAP32[(($25)>>2)];
    var $27=$19^$26;
    HEAP32[(($14)>>2)]=$27;
    var $28=((($17)+(8))|0);
    HEAP32[(($11)>>2)]=$28;
    var $29=($28>>>0)<($2>>>0);
    if ($29) {
     var $17=$28;var $16=$27;
    } else {
     break;
    }
   }
  }
 } while(0);
 var $30=(($br+24)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31)&65535);
 return $32;
}
function _FLAC__bitreader_is_consumed_byte_aligned($br){
 var label=0;
 var $1=(($br+20)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&7;
 var $4=($3|0)==0;
 var $5=($4&1);
 return $5;
}
function _FLAC__bitreader_bits_left_for_byte_alignment($br){
 var label=0;
 var $1=(($br+20)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&7;
 var $4=(((8)-($3))|0);
 return $4;
}
function _FLAC__bitreader_get_input_bits_unconsumed($br){
 var label=0;
 var $1=(($br+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($br+16)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($2)-($4))|0);
 var $6=$5<<5;
 var $7=(($br+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8<<3;
 var $10=((($6)+($9))|0);
 var $11=(($br+20)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($10)-($12))|0);
 return $13;
}
function _FLAC__bitreader_read_raw_uint32($br,$val,$bits){
 var label=0;
 var $1=($bits|0)==0;
 if ($1) {
  HEAP32[(($val)>>2)]=0;
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $2=(($br+8)|0);
 var $3=(($br+16)|0);
 var $4=(($br+12)|0);
 var $5=(($br+20)|0);
 while(1) {
  var $8=HEAP32[(($2)>>2)];
  var $9=HEAP32[(($3)>>2)];
  var $10=((($8)-($9))|0);
  var $11=$10<<5;
  var $12=HEAP32[(($4)>>2)];
  var $13=$12<<3;
  var $14=((($11)+($13))|0);
  var $15=HEAP32[(($5)>>2)];
  var $16=((($14)-($15))|0);
  var $17=($16>>>0)<($bits>>>0);
  if (!($17)) {
   break;
  }
  var $19=_bitreader_read_from_client_($br);
  var $20=($19|0)==0;
  if ($20) {
   var $_0=0;
   label = 111;
   break;
  }
 }
 if (label == 111) {
  var $_0;
  return $_0;
 }
 var $22=($9>>>0)<($8>>>0);
 var $23=($15|0)!=0;
 if (!($22)) {
  var $151=(($br)|0);
  var $152=HEAP32[(($151)>>2)];
  var $153=(($152+($9<<2))|0);
  var $154=HEAP32[(($153)>>2)];
  if ($23) {
   var $156=-1>>>($15>>>0);
   var $157=$154&$156;
   var $158=(((32)-($bits))|0);
   var $159=((($158)-($15))|0);
   var $160=$157>>>($159>>>0);
   HEAP32[(($val)>>2)]=$160;
   var $161=HEAP32[(($5)>>2)];
   var $162=((($161)+($bits))|0);
   HEAP32[(($5)>>2)]=$162;
   var $_0=1;
   var $_0;
   return $_0;
  } else {
   var $164=(((32)-($bits))|0);
   var $165=$154>>>($164>>>0);
   HEAP32[(($val)>>2)]=$165;
   var $166=HEAP32[(($5)>>2)];
   var $167=((($166)+($bits))|0);
   HEAP32[(($5)>>2)]=$167;
   var $_0=1;
   var $_0;
   return $_0;
  }
 }
 if (!($23)) {
  var $97=(($br)|0);
  var $98=HEAP32[(($97)>>2)];
  var $99=(($98+($9<<2))|0);
  var $100=HEAP32[(($99)>>2)];
  var $101=($bits>>>0)<32;
  if ($101) {
   var $103=(((32)-($bits))|0);
   var $104=$100>>>($103>>>0);
   HEAP32[(($val)>>2)]=$104;
   HEAP32[(($5)>>2)]=$bits;
   var $_0=1;
   var $_0;
   return $_0;
  }
  HEAP32[(($val)>>2)]=$100;
  var $106=(($br+24)|0);
  var $107=HEAP32[(($106)>>2)];
  var $108=(($br+28)|0);
  var $109=HEAP32[(($108)>>2)];
  if (($109|0)==24) {
   var $crc_2_i60=$107;
   label = 100;
  } else if (($109|0)==0) {
   var $111=$107<<8;
   var $112=$111&65280;
   var $113=$107>>>8;
   var $114=$100>>>24;
   var $115=$113^$114;
   var $116=((8360+($115<<2))|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=$117^$112;
   var $crc_0_i58=$118;
   label = 98;
  } else if (($109|0)==8) {
   var $crc_0_i58=$107;
   label = 98;
  } else if (($109|0)==16) {
   var $crc_1_i59=$107;
   label = 99;
  }
  if (label == 98) {
   var $crc_0_i58;
   var $120=$crc_0_i58<<8;
   var $121=$120&65280;
   var $122=$crc_0_i58>>>8;
   var $123=$100>>>16;
   var $124=$123&255;
   var $125=$122^$124;
   var $126=((8360+($125<<2))|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=$121^$127;
   var $crc_1_i59=$128;
   label = 99;
  }
  if (label == 99) {
   var $crc_1_i59;
   var $130=$crc_1_i59<<8;
   var $131=$130&65280;
   var $132=$crc_1_i59>>>8;
   var $133=$100>>>8;
   var $134=$133&255;
   var $135=$132^$134;
   var $136=((8360+($135<<2))|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=$131^$137;
   var $crc_2_i60=$138;
   label = 100;
  }
  if (label == 100) {
   var $crc_2_i60;
   var $140=$crc_2_i60<<8;
   var $141=$140&65280;
   var $142=$crc_2_i60>>>8;
   var $143=$100&255;
   var $144=$142^$143;
   var $145=((8360+($144<<2))|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=$141^$146;
   HEAP32[(($106)>>2)]=$147;
  }
  HEAP32[(($108)>>2)]=0;
  var $148=HEAP32[(($3)>>2)];
  var $149=((($148)+(1))|0);
  HEAP32[(($3)>>2)]=$149;
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $26=(((32)-($15))|0);
 var $27=(($br)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+($9<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($26>>>0)>($bits>>>0);
 var $32=-1>>>($15>>>0);
 var $33=$30&$32;
 if ($31) {
  var $35=((($26)-($bits))|0);
  var $36=$33>>>($35>>>0);
  HEAP32[(($val)>>2)]=$36;
  var $37=HEAP32[(($5)>>2)];
  var $38=((($37)+($bits))|0);
  HEAP32[(($5)>>2)]=$38;
  var $_0=1;
  var $_0;
  return $_0;
 }
 HEAP32[(($val)>>2)]=$33;
 var $40=((($bits)-($26))|0);
 var $41=(($br+24)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($br+28)|0);
 var $44=HEAP32[(($43)>>2)];
 if (($44|0)==16) {
  var $crc_1_i=$42;
  label = 90;
 } else if (($44|0)==24) {
  var $crc_2_i=$42;
  label = 91;
 } else if (($44|0)==0) {
  var $46=$42<<8;
  var $47=$46&65280;
  var $48=$42>>>8;
  var $49=$30>>>24;
  var $50=$48^$49;
  var $51=((8360+($50<<2))|0);
  var $52=HEAP32[(($51)>>2)];
  var $53=$52^$47;
  var $crc_0_i=$53;
  label = 89;
 } else if (($44|0)==8) {
  var $crc_0_i=$42;
  label = 89;
 }
 if (label == 89) {
  var $crc_0_i;
  var $55=$crc_0_i<<8;
  var $56=$55&65280;
  var $57=$crc_0_i>>>8;
  var $58=$30>>>16;
  var $59=$58&255;
  var $60=$57^$59;
  var $61=((8360+($60<<2))|0);
  var $62=HEAP32[(($61)>>2)];
  var $63=$56^$62;
  var $crc_1_i=$63;
  label = 90;
 }
 if (label == 90) {
  var $crc_1_i;
  var $65=$crc_1_i<<8;
  var $66=$65&65280;
  var $67=$crc_1_i>>>8;
  var $68=$30>>>8;
  var $69=$68&255;
  var $70=$67^$69;
  var $71=((8360+($70<<2))|0);
  var $72=HEAP32[(($71)>>2)];
  var $73=$66^$72;
  var $crc_2_i=$73;
  label = 91;
 }
 if (label == 91) {
  var $crc_2_i;
  var $75=$crc_2_i<<8;
  var $76=$75&65280;
  var $77=$crc_2_i>>>8;
  var $78=$30&255;
  var $79=$77^$78;
  var $80=((8360+($79<<2))|0);
  var $81=HEAP32[(($80)>>2)];
  var $82=$76^$81;
  HEAP32[(($41)>>2)]=$82;
 }
 HEAP32[(($43)>>2)]=0;
 var $83=HEAP32[(($3)>>2)];
 var $84=((($83)+(1))|0);
 HEAP32[(($3)>>2)]=$84;
 HEAP32[(($5)>>2)]=0;
 var $85=($26|0)==($bits|0);
 if ($85) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $87=HEAP32[(($val)>>2)];
 var $88=$87<<$40;
 HEAP32[(($val)>>2)]=$88;
 var $89=HEAP32[(($3)>>2)];
 var $90=HEAP32[(($27)>>2)];
 var $91=(($90+($89<<2))|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(((32)-($40))|0);
 var $94=$92>>>($93>>>0);
 var $95=$94|$88;
 HEAP32[(($val)>>2)]=$95;
 HEAP32[(($5)>>2)]=$40;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__bitreader_read_raw_int32($br,$val,$bits){
 var label=0;
 var $1=_FLAC__bitreader_read_raw_uint32($br,$val,$bits);
 var $2=($1|0)==0;
 if ($2) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $4=(((32)-($bits))|0);
 var $5=HEAP32[(($val)>>2)];
 var $6=$5<<$4;
 var $7=$6>>($4|0);
 HEAP32[(($val)>>2)]=$7;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__bitreader_read_raw_uint64($br,$val,$bits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $hi=sp;
 var $lo=(sp)+(8);
 var $1=($bits>>>0)>32;
 do {
  if ($1) {
   var $3=((($bits)-(32))|0);
   var $4=_FLAC__bitreader_read_raw_uint32($br,$hi,$3);
   var $5=($4|0)==0;
   if ($5) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $7=_FLAC__bitreader_read_raw_uint32($br,$lo,32);
   var $8=($7|0)==0;
   if ($8) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $10=HEAP32[(($hi)>>2)];
    var $11$0=$10;
    var $11$1=0;
    var $12$0=0;
    var $12$1=$11$0;
    var $st$0$0=(($val)|0);
    HEAP32[(($st$0$0)>>2)]=$12$0;
    var $st$1$1=(($val+4)|0);
    HEAP32[(($st$1$1)>>2)]=$12$1;
    var $13=HEAP32[(($lo)>>2)];
    var $14$0=$13;
    var $14$1=0;
    var $15$0=$12$0|$14$0;
    var $15$1=$12$1|$14$1;
    var $storemerge$1=$15$1;var $storemerge$0=$15$0;
    break;
   }
  } else {
   var $17=_FLAC__bitreader_read_raw_uint32($br,$lo,$bits);
   var $18=($17|0)==0;
   if ($18) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $20=HEAP32[(($lo)>>2)];
    var $21$0=$20;
    var $21$1=0;
    var $storemerge$1=$21$1;var $storemerge$0=$21$0;
    break;
   }
  }
 } while(0);
 var $storemerge$0;
 var $storemerge$1;
 var $st$2$0=(($val)|0);
 HEAP32[(($st$2$0)>>2)]=$storemerge$0;
 var $st$3$1=(($val+4)|0);
 HEAP32[(($st$3$1)>>2)]=$storemerge$1;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitreader_read_uint32_little_endian($br,$val){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $x8=sp;
 var $x32=(sp)+(8);
 HEAP32[(($x32)>>2)]=0;
 var $1=_FLAC__bitreader_read_raw_uint32($br,$x32,8);
 var $2=($1|0)==0;
 if ($2) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $4=_FLAC__bitreader_read_raw_uint32($br,$x8,8);
 var $5=($4|0)==0;
 if ($5) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $7=HEAP32[(($x8)>>2)];
 var $8=$7<<8;
 var $9=HEAP32[(($x32)>>2)];
 var $10=$9|$8;
 HEAP32[(($x32)>>2)]=$10;
 var $11=_FLAC__bitreader_read_raw_uint32($br,$x8,8);
 var $12=($11|0)==0;
 if ($12) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $14=HEAP32[(($x8)>>2)];
 var $15=$14<<16;
 var $16=$10|$15;
 HEAP32[(($x32)>>2)]=$16;
 var $17=_FLAC__bitreader_read_raw_uint32($br,$x8,8);
 var $18=($17|0)==0;
 if ($18) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $20=HEAP32[(($x8)>>2)];
 var $21=$20<<24;
 var $22=$16|$21;
 HEAP32[(($x32)>>2)]=$22;
 HEAP32[(($val)>>2)]=$22;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitreader_skip_bits_no_crc($br,$bits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $x_i=sp;
 var $x=(sp)+(8);
 var $1=($bits|0)==0;
 do {
  if (!($1)) {
   var $3=(($br+20)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$4&7;
   var $6=($5|0)==0;
   do {
    if ($6) {
     var $_018=$bits;
    } else {
     var $8=(((8)-($5))|0);
     var $9=($8>>>0)<($bits>>>0);
     var $_bits=$9?$8:$bits;
     var $10=_FLAC__bitreader_read_raw_uint32($br,$x,$_bits);
     var $11=($10|0)==0;
     if ($11) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     } else {
      var $13=((($bits)-($_bits))|0);
      var $_018=$13;
      break;
     }
    }
   } while(0);
   var $_018;
   var $15=$_018>>>3;
   var $16=($15|0)==0;
   if ($16) {
    var $_1=$_018;
   } else {
    var $18=$x_i;
    var $_0_i=$15;
    while(1) {
     var $_0_i;
     var $cond_i=($_0_i|0)==0;
     if ($cond_i) {
      break;
     }
     var $21=HEAP32[(($3)>>2)];
     var $22=($21|0)==0;
     if ($22) {
      label = 151;
      break;
     }
     var $27=_FLAC__bitreader_read_raw_uint32($br,$x_i,8);
     var $28=($27|0)==0;
     var $29=((($_0_i)-(1))|0);
     if ($28) {
      var $_0=0;
      label = 168;
      break;
     } else {
      var $_0_i=$29;
     }
    }
    if (label == 168) {
     var $_0;
     STACKTOP=sp;return $_0;
    }
    L207: do {
     if (label == 151) {
      var $23=($_0_i>>>0)>3;
      var $24=(($br+16)|0);
      var $25=(($br+8)|0);
      L209: do {
       if ($23) {
        var $_1_ph25_i=$_0_i;
        L210: while(1) {
         var $_1_ph25_i;
         while(1) {
          var $30=HEAP32[(($24)>>2)];
          var $31=HEAP32[(($25)>>2)];
          var $32=($30>>>0)<($31>>>0);
          if ($32) {
           break;
          }
          var $37=_bitreader_read_from_client_($br);
          var $38=($37|0)==0;
          if ($38) {
           var $_0=0;
           break L210;
          }
         }
         var $33=((($30)+(1))|0);
         HEAP32[(($24)>>2)]=$33;
         var $34=((($_1_ph25_i)-(4))|0);
         var $35=($34>>>0)>3;
         if ($35) {
          var $_1_ph25_i=$34;
         } else {
          var $_2_i=$34;
          break L209;
         }
        }
        var $_0;
        STACKTOP=sp;return $_0;
       } else {
        var $_2_i=$_0_i;
       }
      } while(0);
      while(1) {
       var $_2_i;
       var $39=($_2_i|0)==0;
       if ($39) {
        break L207;
       }
       var $41=_FLAC__bitreader_read_raw_uint32($br,$x_i,8);
       var $42=($41|0)==0;
       var $43=((($_2_i)-(1))|0);
       if ($42) {
        var $_0=0;
        break;
       } else {
        var $_2_i=$43;
       }
      }
      var $_0;
      STACKTOP=sp;return $_0;
     }
    } while(0);
    var $44=$_018&7;
    var $_1=$44;
   }
   var $_1;
   var $46=($_1|0)==0;
   if ($46) {
    break;
   }
   var $48=_FLAC__bitreader_read_raw_uint32($br,$x,$_1);
   var $49=($48|0)==0;
   if ($49) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitreader_skip_byte_block_aligned_no_crc($br,$nvals){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $x=sp;
 var $1=(($br+20)|0);
 var $_0=$nvals;
 while(1) {
  var $_0;
  var $cond=($_0|0)==0;
  if ($cond) {
   var $_014=1;
   break;
  }
  var $4=HEAP32[(($1)>>2)];
  var $5=($4|0)==0;
  if ($5) {
   label = 173;
   break;
  }
  var $10=_FLAC__bitreader_read_raw_uint32($br,$x,8);
  var $11=($10|0)==0;
  var $12=((($_0)-(1))|0);
  if ($11) {
   var $_014=0;
   break;
  } else {
   var $_0=$12;
  }
 }
 L232: do {
  if (label == 173) {
   var $6=($_0>>>0)>3;
   var $7=(($br+16)|0);
   var $8=(($br+8)|0);
   if ($6) {
    var $_1_ph25=$_0;
    while(1) {
     var $_1_ph25;
     while(1) {
      var $13=HEAP32[(($7)>>2)];
      var $14=HEAP32[(($8)>>2)];
      var $15=($13>>>0)<($14>>>0);
      if ($15) {
       break;
      }
      var $20=_bitreader_read_from_client_($br);
      var $21=($20|0)==0;
      if ($21) {
       var $_014=0;
       break L232;
      }
     }
     var $16=((($13)+(1))|0);
     HEAP32[(($7)>>2)]=$16;
     var $17=((($_1_ph25)-(4))|0);
     var $18=($17>>>0)>3;
     if ($18) {
      var $_1_ph25=$17;
     } else {
      var $_2=$17;
      break;
     }
    }
   } else {
    var $_2=$_0;
   }
   while(1) {
    var $_2;
    var $22=($_2|0)==0;
    if ($22) {
     var $_014=1;
     break L232;
    }
    var $24=_FLAC__bitreader_read_raw_uint32($br,$x,8);
    var $25=($24|0)==0;
    var $26=((($_2)-(1))|0);
    if ($25) {
     var $_014=0;
     break;
    } else {
     var $_2=$26;
    }
   }
  }
 } while(0);
 var $_014;
 STACKTOP=sp;return $_014;
}
function _FLAC__bitreader_read_byte_block_aligned_no_crc($br,$val,$nvals){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $x=sp;
 var $cond39=($nvals|0)==0;
 if ($cond39) {
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $1=(($br+20)|0);
 var $_02640=$val;var $_02541=$nvals;
 while(1) {
  var $_02541;
  var $_02640;
  var $3=HEAP32[(($1)>>2)];
  var $4=($3|0)==0;
  if ($4) {
   label = 185;
   break;
  }
  var $10=_FLAC__bitreader_read_raw_uint32($br,$x,8);
  var $11=($10|0)==0;
  if ($11) {
   var $_0=0;
   label = 199;
   break;
  }
  var $13=HEAP32[(($x)>>2)];
  var $14=(($13)&255);
  var $15=(($_02640+1)|0);
  HEAP8[($_02640)]=$14;
  var $16=((($_02541)-(1))|0);
  var $cond=($16|0)==0;
  if ($cond) {
   var $_0=1;
   label = 200;
   break;
  } else {
   var $_02640=$15;var $_02541=$16;
  }
 }
 if (label == 185) {
  var $5=($_02541>>>0)>3;
  var $6=(($br+16)|0);
  var $7=(($br+8)|0);
  L255: do {
   if ($5) {
    var $8=(($br)|0);
    var $_127_ph50=$_02640;var $_1_ph51=$_02541;
    L257: while(1) {
     var $_1_ph51;
     var $_127_ph50;
     while(1) {
      var $18=HEAP32[(($6)>>2)];
      var $19=HEAP32[(($7)>>2)];
      var $20=($18>>>0)<($19>>>0);
      if ($20) {
       break;
      }
      var $39=_bitreader_read_from_client_($br);
      var $40=($39|0)==0;
      if ($40) {
       var $_0=0;
       break L257;
      }
     }
     var $21=((($18)+(1))|0);
     HEAP32[(($6)>>2)]=$21;
     var $22=HEAP32[(($8)>>2)];
     var $23=(($22+($18<<2))|0);
     var $24=HEAP32[(($23)>>2)];
     var $25=$24>>>24;
     var $26=(($25)&255);
     HEAP8[($_127_ph50)]=$26;
     var $27=$24>>>16;
     var $28=(($27)&255);
     var $29=(($_127_ph50+1)|0);
     HEAP8[($29)]=$28;
     var $30=$24>>>8;
     var $31=(($30)&255);
     var $32=(($_127_ph50+2)|0);
     HEAP8[($32)]=$31;
     var $33=(($24)&255);
     var $34=(($_127_ph50+3)|0);
     HEAP8[($34)]=$33;
     var $35=(($_127_ph50+4)|0);
     var $36=((($_1_ph51)-(4))|0);
     var $37=($36>>>0)>3;
     if ($37) {
      var $_127_ph50=$35;var $_1_ph51=$36;
     } else {
      var $_127_ph_lcssa=$35;var $_1_ph_lcssa=$36;
      break L255;
     }
    }
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $_127_ph_lcssa=$_02640;var $_1_ph_lcssa=$_02541;
   }
  } while(0);
  var $_1_ph_lcssa;
  var $_127_ph_lcssa;
  var $17=($_1_ph_lcssa|0)==0;
  if ($17) {
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $_22829=$_127_ph_lcssa;var $_230=$_1_ph_lcssa;
  }
  while(1) {
   var $_230;
   var $_22829;
   var $41=_FLAC__bitreader_read_raw_uint32($br,$x,8);
   var $42=($41|0)==0;
   if ($42) {
    var $_0=0;
    label = 197;
    break;
   }
   var $44=HEAP32[(($x)>>2)];
   var $45=(($44)&255);
   var $46=(($_22829+1)|0);
   HEAP8[($_22829)]=$45;
   var $47=((($_230)-(1))|0);
   var $48=($47|0)==0;
   if ($48) {
    var $_0=1;
    label = 203;
    break;
   } else {
    var $_22829=$46;var $_230=$47;
   }
  }
  if (label == 203) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 197) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
 }
 else if (label == 199) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 200) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _FLAC__bitreader_read_unary_unsigned($br,$val){
 var label=0;
 HEAP32[(($val)>>2)]=0;
 var $1=(($br+16)|0);
 var $2=(($br+8)|0);
 var $3=(($br)|0);
 var $4=(($br+20)|0);
 var $5=(($br+24)|0);
 var $6=(($br+28)|0);
 var $7=(($br+12)|0);
 while(1) {
  var $8=HEAP32[(($1)>>2)];
  var $9=HEAP32[(($2)>>2)];
  var $10=($8>>>0)<($9>>>0);
  if (!($10)) {
   var $122=HEAP32[(($7)>>2)];
   var $123=$122<<3;
   var $124=HEAP32[(($4)>>2)];
   var $125=($123>>>0)>($124>>>0);
   if ($125) {
    var $127=HEAP32[(($3)>>2)];
    var $128=(($127+($8<<2))|0);
    var $129=HEAP32[(($128)>>2)];
    var $130=(((32)-($123))|0);
    var $131=-1<<$130;
    var $132=$129&$131;
    var $133=$132<<$124;
    var $134=($133|0)==0;
    if (!($134)) {
     label = 222;
     break;
    }
    var $143=((($123)-($124))|0);
    var $144=HEAP32[(($val)>>2)];
    var $145=((($143)+($144))|0);
    HEAP32[(($val)>>2)]=$145;
    HEAP32[(($4)>>2)]=$123;
   }
   var $147=_bitreader_read_from_client_($br);
   var $148=($147|0)==0;
   if ($148) {
    var $_0=0;
    label = 227;
    break;
   } else {
    continue;
   }
  }
  var $12=HEAP32[(($3)>>2)];
  var $13=(($12+($8<<2))|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=HEAP32[(($4)>>2)];
  var $16=$14<<$15;
  var $17=($16|0)==0;
  if (!($17)) {
   label = 207;
   break;
  }
  var $73=(((32)-($15))|0);
  var $74=HEAP32[(($val)>>2)];
  var $75=((($73)+($74))|0);
  HEAP32[(($val)>>2)]=$75;
  var $76=HEAP32[(($1)>>2)];
  var $77=HEAP32[(($3)>>2)];
  var $78=(($77+($76<<2))|0);
  var $79=HEAP32[(($78)>>2)];
  var $80=HEAP32[(($5)>>2)];
  var $81=HEAP32[(($6)>>2)];
  if (($81|0)==0) {
   var $83=$80<<8;
   var $84=$83&65280;
   var $85=$80>>>8;
   var $86=$79>>>24;
   var $87=$85^$86;
   var $88=((8360+($87<<2))|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=$89^$84;
   var $crc_0_i42=$90;
   label = 216;
  } else if (($81|0)==8) {
   var $crc_0_i42=$80;
   label = 216;
  } else if (($81|0)==16) {
   var $crc_1_i43=$80;
   label = 217;
  } else if (($81|0)==24) {
   var $crc_2_i44=$80;
   label = 218;
  }
  if (label == 216) {
   label = 0;
   var $crc_0_i42;
   var $92=$crc_0_i42<<8;
   var $93=$92&65280;
   var $94=$crc_0_i42>>>8;
   var $95=$79>>>16;
   var $96=$95&255;
   var $97=$94^$96;
   var $98=((8360+($97<<2))|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=$93^$99;
   var $crc_1_i43=$100;
   label = 217;
  }
  if (label == 217) {
   label = 0;
   var $crc_1_i43;
   var $102=$crc_1_i43<<8;
   var $103=$102&65280;
   var $104=$crc_1_i43>>>8;
   var $105=$79>>>8;
   var $106=$105&255;
   var $107=$104^$106;
   var $108=((8360+($107<<2))|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=$103^$109;
   var $crc_2_i44=$110;
   label = 218;
  }
  if (label == 218) {
   label = 0;
   var $crc_2_i44;
   var $112=$crc_2_i44<<8;
   var $113=$112&65280;
   var $114=$crc_2_i44>>>8;
   var $115=$79&255;
   var $116=$114^$115;
   var $117=((8360+($116<<2))|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=$113^$118;
   HEAP32[(($5)>>2)]=$119;
  }
  HEAP32[(($6)>>2)]=0;
  var $120=((($76)+(1))|0);
  HEAP32[(($1)>>2)]=$120;
  HEAP32[(($4)>>2)]=0;
 }
 if (label == 222) {
  var $136=_llvm_ctlz_i32($133,1);
  var $137=HEAP32[(($val)>>2)];
  var $138=((($137)+($136))|0);
  HEAP32[(($val)>>2)]=$138;
  var $139=((($136)+(1))|0);
  var $140=HEAP32[(($4)>>2)];
  var $141=((($139)+($140))|0);
  HEAP32[(($4)>>2)]=$141;
  var $_0=1;
  var $_0;
  return $_0;
 }
 else if (label == 207) {
  var $19=_llvm_ctlz_i32($16,1);
  var $20=HEAP32[(($val)>>2)];
  var $21=((($20)+($19))|0);
  HEAP32[(($val)>>2)]=$21;
  var $22=((($19)+(1))|0);
  var $23=HEAP32[(($4)>>2)];
  var $24=((($22)+($23))|0);
  HEAP32[(($4)>>2)]=$24;
  var $25=($24>>>0)>31;
  if (!($25)) {
   var $_0=1;
   var $_0;
   return $_0;
  }
  var $27=HEAP32[(($1)>>2)];
  var $28=HEAP32[(($3)>>2)];
  var $29=(($28+($27<<2))|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=HEAP32[(($5)>>2)];
  var $32=HEAP32[(($6)>>2)];
  if (($32|0)==0) {
   var $34=$31<<8;
   var $35=$34&65280;
   var $36=$31>>>8;
   var $37=$30>>>24;
   var $38=$36^$37;
   var $39=((8360+($38<<2))|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$40^$35;
   var $crc_0_i=$41;
   label = 210;
  } else if (($32|0)==24) {
   var $crc_2_i=$31;
   label = 212;
  } else if (($32|0)==16) {
   var $crc_1_i=$31;
   label = 211;
  } else if (($32|0)==8) {
   var $crc_0_i=$31;
   label = 210;
  }
  if (label == 210) {
   var $crc_0_i;
   var $43=$crc_0_i<<8;
   var $44=$43&65280;
   var $45=$crc_0_i>>>8;
   var $46=$30>>>16;
   var $47=$46&255;
   var $48=$45^$47;
   var $49=((8360+($48<<2))|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$44^$50;
   var $crc_1_i=$51;
   label = 211;
  }
  if (label == 211) {
   var $crc_1_i;
   var $53=$crc_1_i<<8;
   var $54=$53&65280;
   var $55=$crc_1_i>>>8;
   var $56=$30>>>8;
   var $57=$56&255;
   var $58=$55^$57;
   var $59=((8360+($58<<2))|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=$54^$60;
   var $crc_2_i=$61;
   label = 212;
  }
  if (label == 212) {
   var $crc_2_i;
   var $63=$crc_2_i<<8;
   var $64=$63&65280;
   var $65=$crc_2_i>>>8;
   var $66=$30&255;
   var $67=$65^$66;
   var $68=((8360+($67<<2))|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$64^$69;
   HEAP32[(($5)>>2)]=$70;
  }
  HEAP32[(($6)>>2)]=0;
  var $71=((($27)+(1))|0);
  HEAP32[(($1)>>2)]=$71;
  HEAP32[(($4)>>2)]=0;
  var $_0=1;
  var $_0;
  return $_0;
 }
 else if (label == 227) {
  var $_0;
  return $_0;
 }
}
function _FLAC__bitreader_read_rice_signed($br,$val,$parameter){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $lsbs=sp;
 var $msbs=(sp)+(8);
 HEAP32[(($lsbs)>>2)]=0;
 HEAP32[(($msbs)>>2)]=0;
 var $1=_FLAC__bitreader_read_unary_unsigned($br,$msbs);
 var $2=($1|0)==0;
 if ($2) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $4=_FLAC__bitreader_read_raw_uint32($br,$lsbs,$parameter);
 var $5=($4|0)==0;
 if ($5) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $7=HEAP32[(($msbs)>>2)];
 var $8=$7<<$parameter;
 var $9=HEAP32[(($lsbs)>>2)];
 var $10=$8|$9;
 var $11=$10>>>1;
 var $12=$10<<31;
 var $sext=$12>>31;
 var $storemerge=$sext^$11;
 HEAP32[(($val)>>2)]=$storemerge;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitreader_read_rice_signed_block($br,$vals,$nvals,$parameter){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $lsbs=sp;
 var $msbs=(sp)+(8);
 var $1=(($vals+($nvals<<2))|0);
 var $2=($parameter|0)==0;
 if ($2) {
  var $3=($nvals|0)>0;
  if ($3) {
   var $val_0105=$vals;
  } else {
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  while(1) {
   var $val_0105;
   var $4=_FLAC__bitreader_read_unary_unsigned($br,$msbs);
   var $5=($4|0)==0;
   if ($5) {
    var $_0=0;
    label = 283;
    break;
   }
   var $7=HEAP32[(($msbs)>>2)];
   var $8=$7>>>1;
   var $9=$7&1;
   var $10=(((-$9))|0);
   var $11=$8^$10;
   var $12=(($val_0105+4)|0);
   HEAP32[(($val_0105)>>2)]=$11;
   var $13=($12>>>0)<($1>>>0);
   if ($13) {
    var $val_0105=$12;
   } else {
    var $_0=1;
    label = 284;
    break;
   }
  }
  if (label == 283) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 284) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
 }
 var $15=(($br+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($br+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($16>>>0)<($18>>>0);
 if ($19) {
  var $21=(($br+20)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=(($br)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=(($24+($16<<2))|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$26<<$22;
  var $val_1_ph=$vals;var $b_0_ph=$27;var $_pn=$22;var $words_0_ph=$18;var $cwords_0_ph=$16;
  label = 243;
 } else {
  var $val_2=$vals;var $x_3=0;
  label = 267;
 }
 L335: while(1) {
  do {
   if (label == 267) {
    label = 0;
    var $x_3;
    var $val_2;
    var $164=_FLAC__bitreader_read_unary_unsigned($br,$msbs);
    var $165=($164|0)==0;
    if ($165) {
     var $_0=0;
     label = 282;
     break L335;
    }
    var $167=HEAP32[(($msbs)>>2)];
    var $168=((($167)+($x_3))|0);
    HEAP32[(($msbs)>>2)]=$168;
    var $val_3=$val_2;var $ucbits_2=0;var $x_4=0;var $172=$168;
   }
   else if (label == 243) {
    label = 0;
    var $cwords_0_ph;
    var $words_0_ph;
    var $_pn;
    var $b_0_ph;
    var $val_1_ph;
    var $ucbits_0_ph=(((32)-($_pn))|0);
    var $28=($val_1_ph>>>0)<($1>>>0);
    if (!($28)) {
     var $cwords_0_lcssa=$cwords_0_ph;var $ucbits_0_lcssa=$ucbits_0_ph;
     label = 272;
     break L335;
    }
    var $29=(((32)-($parameter))|0);
    var $30=(($br)|0);
    var $31=(($br+24)|0);
    var $32=(($br+28)|0);
    var $cwords_0118=$cwords_0_ph;var $ucbits_0119=$ucbits_0_ph;var $b_0120=$b_0_ph;var $val_1121=$val_1_ph;
    L341: while(1) {
     var $val_1121;
     var $b_0120;
     var $ucbits_0119;
     var $cwords_0118;
     var $34=($b_0120|0)==0;
     if ($34) {
      var $_pre=HEAP32[(($30)>>2)];
      var $_phi_trans_insert=(($_pre+($cwords_0118<<2))|0);
      var $_pre136=HEAP32[(($_phi_trans_insert)>>2)];
      var $_pre137=HEAP32[(($31)>>2)];
      var $_pre138=HEAP32[(($32)>>2)];
      var $x_0=$ucbits_0119;var $cwords_1=$cwords_0118;var $38=$_pre136;var $37=$_pre137;var $36=$_pre138;
      while(1) {
       var $36;
       var $37;
       var $38;
       var $cwords_1;
       var $x_0;
       var $39=((($cwords_1)+(1))|0);
       if (($36|0)==24) {
        var $crc_2_i97=$37;
        label = 252;
       } else if (($36|0)==0) {
        var $41=$37<<8;
        var $42=$41&65280;
        var $43=$37>>>8;
        var $44=$38>>>24;
        var $45=$43^$44;
        var $46=((8360+($45<<2))|0);
        var $47=HEAP32[(($46)>>2)];
        var $48=$47^$42;
        var $crc_0_i95=$48;
        label = 250;
       } else if (($36|0)==8) {
        var $crc_0_i95=$37;
        label = 250;
       } else if (($36|0)==16) {
        var $crc_1_i96=$37;
        label = 251;
       } else {
        var $78=$37;
       }
       if (label == 250) {
        label = 0;
        var $crc_0_i95;
        var $50=$crc_0_i95<<8;
        var $51=$50&65280;
        var $52=$crc_0_i95>>>8;
        var $53=$38>>>16;
        var $54=$53&255;
        var $55=$52^$54;
        var $56=((8360+($55<<2))|0);
        var $57=HEAP32[(($56)>>2)];
        var $58=$51^$57;
        var $crc_1_i96=$58;
        label = 251;
       }
       if (label == 251) {
        label = 0;
        var $crc_1_i96;
        var $60=$crc_1_i96<<8;
        var $61=$60&65280;
        var $62=$crc_1_i96>>>8;
        var $63=$38>>>8;
        var $64=$63&255;
        var $65=$62^$64;
        var $66=((8360+($65<<2))|0);
        var $67=HEAP32[(($66)>>2)];
        var $68=$61^$67;
        var $crc_2_i97=$68;
        label = 252;
       }
       if (label == 252) {
        label = 0;
        var $crc_2_i97;
        var $70=$crc_2_i97<<8;
        var $71=$70&65280;
        var $72=$crc_2_i97>>>8;
        var $73=$38&255;
        var $74=$72^$73;
        var $75=((8360+($74<<2))|0);
        var $76=HEAP32[(($75)>>2)];
        var $77=$71^$76;
        HEAP32[(($31)>>2)]=$77;
        var $78=$77;
       }
       var $78;
       HEAP32[(($32)>>2)]=0;
       var $79=($39>>>0)<($words_0_ph>>>0);
       if (!($79)) {
        label = 266;
        break L341;
       }
       var $81=(($_pre+($39<<2))|0);
       var $82=HEAP32[(($81)>>2)];
       var $83=($82|0)==0;
       var $84=((($x_0)+(32))|0);
       if ($83) {
        var $x_0=$84;var $cwords_1=$39;var $38=0;var $37=$78;var $36=0;
       } else {
        break;
       }
      }
      var $85=_llvm_ctlz_i32($82,1);
      var $86=((($85)+($x_0))|0);
      var $b_1=$82;var $y_0=$85;var $88=$86;var $cwords_2=$39;
     } else {
      var $35=_llvm_ctlz_i32($b_0120,1);
      var $b_1=$b_0120;var $y_0=$35;var $88=$35;var $cwords_2=$cwords_0118;
     }
     var $cwords_2;
     var $88;
     var $y_0;
     var $b_1;
     var $89=$b_1<<$y_0;
     var $90=$89<<1;
     var $91=((($ucbits_0119)+(31))|0);
     var $92=((($91)-($88))|0);
     var $93=$92&31;
     HEAP32[(($msbs)>>2)]=$88;
     var $94=$90>>>($29>>>0);
     var $95=($93>>>0)<($parameter>>>0);
     if ($95) {
      var $100=((($cwords_2)+(1))|0);
      var $101=HEAP32[(($30)>>2)];
      var $102=(($101+($cwords_2<<2))|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=HEAP32[(($31)>>2)];
      var $105=HEAP32[(($32)>>2)];
      if (($105|0)==0) {
       var $107=$104<<8;
       var $108=$107&65280;
       var $109=$104>>>8;
       var $110=$103>>>24;
       var $111=$109^$110;
       var $112=((8360+($111<<2))|0);
       var $113=HEAP32[(($112)>>2)];
       var $114=$113^$108;
       var $crc_0_i101=$114;
       label = 260;
      } else if (($105|0)==8) {
       var $crc_0_i101=$104;
       label = 260;
      } else if (($105|0)==16) {
       var $crc_1_i102=$104;
       label = 261;
      } else if (($105|0)==24) {
       var $crc_2_i103=$104;
       label = 262;
      }
      if (label == 260) {
       label = 0;
       var $crc_0_i101;
       var $116=$crc_0_i101<<8;
       var $117=$116&65280;
       var $118=$crc_0_i101>>>8;
       var $119=$103>>>16;
       var $120=$119&255;
       var $121=$118^$120;
       var $122=((8360+($121<<2))|0);
       var $123=HEAP32[(($122)>>2)];
       var $124=$117^$123;
       var $crc_1_i102=$124;
       label = 261;
      }
      if (label == 261) {
       label = 0;
       var $crc_1_i102;
       var $126=$crc_1_i102<<8;
       var $127=$126&65280;
       var $128=$crc_1_i102>>>8;
       var $129=$103>>>8;
       var $130=$129&255;
       var $131=$128^$130;
       var $132=((8360+($131<<2))|0);
       var $133=HEAP32[(($132)>>2)];
       var $134=$127^$133;
       var $crc_2_i103=$134;
       label = 262;
      }
      if (label == 262) {
       label = 0;
       var $crc_2_i103;
       var $136=$crc_2_i103<<8;
       var $137=$136&65280;
       var $138=$crc_2_i103>>>8;
       var $139=$103&255;
       var $140=$138^$139;
       var $141=((8360+($140<<2))|0);
       var $142=HEAP32[(($141)>>2)];
       var $143=$137^$142;
       HEAP32[(($31)>>2)]=$143;
      }
      HEAP32[(($32)>>2)]=0;
      var $144=($100>>>0)<($words_0_ph>>>0);
      if (!($144)) {
       label = 269;
       break;
      }
      var $146=(($101+($100<<2))|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=((($93)+($29))|0);
      var $149=$147>>>($148>>>0);
      var $150=$149|$94;
      var $151=(((32)-($148))|0);
      var $152=$147<<$151;
      var $b_2=$152;var $ucbits_1=$148;var $x_2=$150;var $cwords_3=$100;
     } else {
      var $97=((($93)-($parameter))|0);
      var $98=$90<<$parameter;
      var $b_2=$98;var $ucbits_1=$97;var $x_2=$94;var $cwords_3=$cwords_2;
     }
     var $cwords_3;
     var $x_2;
     var $ucbits_1;
     var $b_2;
     HEAP32[(($lsbs)>>2)]=$x_2;
     var $153=$88<<$parameter;
     var $154=$153|$x_2;
     var $155=$154>>>1;
     var $156=$154&1;
     var $157=(((-$156))|0);
     var $158=$155^$157;
     var $159=(($val_1121+4)|0);
     HEAP32[(($val_1121)>>2)]=$158;
     var $160=($159>>>0)<($1>>>0);
     if ($160) {
      var $cwords_0118=$cwords_3;var $ucbits_0119=$ucbits_1;var $b_0120=$b_2;var $val_1121=$159;
     } else {
      var $cwords_0_lcssa=$cwords_3;var $ucbits_0_lcssa=$ucbits_1;
      label = 272;
      break L335;
     }
    }
    if (label == 266) {
     label = 0;
     var $162=(($br+20)|0);
     HEAP32[(($162)>>2)]=0;
     HEAP32[(($15)>>2)]=$39;
     var $val_2=$val_1121;var $x_3=$x_0;
     label = 267;
     continue L335;
    }
    else if (label == 269) {
     label = 0;
     var $170=(($br+20)|0);
     HEAP32[(($170)>>2)]=0;
     HEAP32[(($15)>>2)]=$100;
     var $val_3=$val_1121;var $ucbits_2=$93;var $x_4=$94;var $172=$88;
     break;
    }
   }
  } while(0);
  var $172;
  var $x_4;
  var $ucbits_2;
  var $val_3;
  var $173=((($parameter)-($ucbits_2))|0);
  var $174=_FLAC__bitreader_read_raw_uint32($br,$lsbs,$173);
  var $175=($174|0)==0;
  if ($175) {
   var $_0=0;
   label = 285;
   break;
  }
  var $177=HEAP32[(($lsbs)>>2)];
  var $178=$177|$x_4;
  HEAP32[(($lsbs)>>2)]=$178;
  var $179=$172<<$parameter;
  var $180=$179|$178;
  var $181=$180>>>1;
  var $182=$180&1;
  var $183=(((-$182))|0);
  var $184=$181^$183;
  var $185=(($val_3+4)|0);
  HEAP32[(($val_3)>>2)]=$184;
  var $186=HEAP32[(($15)>>2)];
  var $187=HEAP32[(($17)>>2)];
  var $188=(($br+20)|0);
  var $189=HEAP32[(($188)>>2)];
  var $190=(($br)|0);
  var $191=HEAP32[(($190)>>2)];
  var $192=(($191+($186<<2))|0);
  var $193=HEAP32[(($192)>>2)];
  var $194=$193<<$189;
  var $195=($186>>>0)>=($187>>>0);
  var $196=($185>>>0)<($1>>>0);
  var $or_cond=$195&$196;
  if ($or_cond) {
   var $val_2=$185;var $x_3=0;
   label = 267;
  } else {
   var $val_1_ph=$185;var $b_0_ph=$194;var $_pn=$189;var $words_0_ph=$187;var $cwords_0_ph=$186;
   label = 243;
  }
 }
 if (label == 272) {
  var $ucbits_0_lcssa;
  var $cwords_0_lcssa;
  var $197=($ucbits_0_lcssa|0)==0;
  var $198=($cwords_0_lcssa>>>0)<($words_0_ph>>>0);
  var $or_cond94=$197&$198;
  if ($or_cond94) {
   var $200=((($cwords_0_lcssa)+(1))|0);
   var $201=(($br)|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=(($202+($cwords_0_lcssa<<2))|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=(($br+24)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=(($br+28)|0);
   var $208=HEAP32[(($207)>>2)];
   if (($208|0)==0) {
    var $210=$206<<8;
    var $211=$210&65280;
    var $212=$206>>>8;
    var $213=$204>>>24;
    var $214=$212^$213;
    var $215=((8360+($214<<2))|0);
    var $216=HEAP32[(($215)>>2)];
    var $217=$216^$211;
    var $crc_0_i=$217;
    label = 275;
   } else if (($208|0)==8) {
    var $crc_0_i=$206;
    label = 275;
   } else if (($208|0)==16) {
    var $crc_1_i=$206;
    label = 276;
   } else if (($208|0)==24) {
    var $crc_2_i=$206;
    label = 277;
   }
   if (label == 275) {
    var $crc_0_i;
    var $219=$crc_0_i<<8;
    var $220=$219&65280;
    var $221=$crc_0_i>>>8;
    var $222=$204>>>16;
    var $223=$222&255;
    var $224=$221^$223;
    var $225=((8360+($224<<2))|0);
    var $226=HEAP32[(($225)>>2)];
    var $227=$220^$226;
    var $crc_1_i=$227;
    label = 276;
   }
   if (label == 276) {
    var $crc_1_i;
    var $229=$crc_1_i<<8;
    var $230=$229&65280;
    var $231=$crc_1_i>>>8;
    var $232=$204>>>8;
    var $233=$232&255;
    var $234=$231^$233;
    var $235=((8360+($234<<2))|0);
    var $236=HEAP32[(($235)>>2)];
    var $237=$230^$236;
    var $crc_2_i=$237;
    label = 277;
   }
   if (label == 277) {
    var $crc_2_i;
    var $239=$crc_2_i<<8;
    var $240=$239&65280;
    var $241=$crc_2_i>>>8;
    var $242=$204&255;
    var $243=$241^$242;
    var $244=((8360+($243<<2))|0);
    var $245=HEAP32[(($244)>>2)];
    var $246=$240^$245;
    HEAP32[(($205)>>2)]=$246;
   }
   HEAP32[(($207)>>2)]=0;
   var $ucbits_3=32;var $cwords_4=$200;
  } else {
   var $ucbits_3=$ucbits_0_lcssa;var $cwords_4=$cwords_0_lcssa;
  }
  var $cwords_4;
  var $ucbits_3;
  var $248=(((32)-($ucbits_3))|0);
  var $249=(($br+20)|0);
  HEAP32[(($249)>>2)]=$248;
  HEAP32[(($15)>>2)]=$cwords_4;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 282) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 285) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _FLAC__bitreader_read_utf8_uint32($br,$val,$raw,$rawlen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $x=sp;
 var $1=_FLAC__bitreader_read_raw_uint32($br,$x,8);
 var $2=($1|0)==0;
 if ($2) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $4=($raw|0)!=0;
 var $5=HEAP32[(($x)>>2)];
 if ($4) {
  var $7=(($5)&255);
  var $8=HEAP32[(($rawlen)>>2)];
  var $9=((($8)+(1))|0);
  HEAP32[(($rawlen)>>2)]=$9;
  var $10=(($raw+$8)|0);
  HEAP8[($10)]=$7;
 }
 var $11=$5&128;
 var $12=($11|0)==0;
 L403: do {
  if ($12) {
   var $v_0_lcssa=$5;
  } else {
   var $30=$5&192;
   var $31=($30|0)!=0;
   var $32=$5&32;
   var $33=($32|0)==0;
   var $or_cond=$31&$33;
   do {
    if ($or_cond) {
     var $35=$5&31;
     var $i_0_ph_ph=1;var $v_0_ph_ph=$35;
    } else {
     var $37=$5&224;
     var $38=($37|0)!=0;
     var $39=$5&16;
     var $40=($39|0)==0;
     var $or_cond17=$38&$40;
     if ($or_cond17) {
      var $42=$5&15;
      var $i_0_ph_ph=2;var $v_0_ph_ph=$42;
      break;
     }
     var $44=$5&240;
     var $45=($44|0)!=0;
     var $46=$5&8;
     var $47=($46|0)==0;
     var $or_cond19=$45&$47;
     if ($or_cond19) {
      var $49=$5&7;
      var $i_0_ph_ph=3;var $v_0_ph_ph=$49;
      break;
     }
     var $51=$5&248;
     var $52=($51|0)!=0;
     var $53=$5&4;
     var $54=($53|0)==0;
     var $or_cond21=$52&$54;
     if ($or_cond21) {
      var $56=$5&3;
      var $i_0_ph_ph=4;var $v_0_ph_ph=$56;
      break;
     }
     var $58=$5&252;
     var $59=($58|0)!=0;
     var $60=$5&2;
     var $61=($60|0)==0;
     var $or_cond23=$59&$61;
     if ($or_cond23) {
      var $63=$5&1;
      var $i_0_ph_ph=5;var $v_0_ph_ph=$63;
      break;
     }
     HEAP32[(($val)>>2)]=-1;
     var $_0=1;
     var $_0;
     STACKTOP=sp;return $_0;
    }
   } while(0);
   var $v_0_ph_ph;
   var $i_0_ph_ph;
   L422: do {
    if ($4) {
     var $v_028_us=$v_0_ph_ph;var $i_029_us=$i_0_ph_ph;
     while(1) {
      var $i_029_us;
      var $v_028_us;
      var $13=_FLAC__bitreader_read_raw_uint32($br,$x,8);
      var $14=($13|0)==0;
      if ($14) {
       var $_0=0;
       break;
      }
      var $16=HEAP32[(($x)>>2)];
      var $17=(($16)&255);
      var $18=HEAP32[(($rawlen)>>2)];
      var $19=((($18)+(1))|0);
      HEAP32[(($rawlen)>>2)]=$19;
      var $20=(($raw+$18)|0);
      HEAP8[($20)]=$17;
      var $21=$16&192;
      var $22=($21|0)==128;
      if (!($22)) {
       break L422;
      }
      var $24=$v_028_us<<6;
      var $25=$16&63;
      var $26=$25|$24;
      var $27=((($i_029_us)-(1))|0);
      var $28=($27|0)==0;
      if ($28) {
       var $v_0_lcssa=$26;
       break L403;
      } else {
       var $v_028_us=$26;var $i_029_us=$27;
      }
     }
     var $_0;
     STACKTOP=sp;return $_0;
    } else {
     var $v_028=$v_0_ph_ph;var $i_029=$i_0_ph_ph;
     while(1) {
      var $i_029;
      var $v_028;
      var $65=_FLAC__bitreader_read_raw_uint32($br,$x,8);
      var $66=($65|0)==0;
      if ($66) {
       var $_0=0;
       break;
      }
      var $68=HEAP32[(($x)>>2)];
      var $69=$68&192;
      var $70=($69|0)==128;
      if (!($70)) {
       break L422;
      }
      var $72=$v_028<<6;
      var $73=$68&63;
      var $74=$73|$72;
      var $75=((($i_029)-(1))|0);
      var $76=($75|0)==0;
      if ($76) {
       var $v_0_lcssa=$74;
       break L403;
      } else {
       var $v_028=$74;var $i_029=$75;
      }
     }
     var $_0;
     STACKTOP=sp;return $_0;
    }
   } while(0);
   HEAP32[(($val)>>2)]=-1;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $v_0_lcssa;
 HEAP32[(($val)>>2)]=$v_0_lcssa;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitreader_read_utf8_uint64($br,$val,$raw,$rawlen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $x=sp;
 var $1=_FLAC__bitreader_read_raw_uint32($br,$x,8);
 var $2=($1|0)==0;
 if ($2) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $4=($raw|0)!=0;
 var $5=HEAP32[(($x)>>2)];
 if ($4) {
  var $7=(($5)&255);
  var $8=HEAP32[(($rawlen)>>2)];
  var $9=((($8)+(1))|0);
  HEAP32[(($rawlen)>>2)]=$9;
  var $10=(($raw+$8)|0);
  HEAP8[($10)]=$7;
 }
 var $11=$5&128;
 var $12=($11|0)==0;
 L444: do {
  if ($12) {
   var $58$0=$5;
   var $58$1=0;
   var $v_0_lcssa$1=$58$1;var $v_0_lcssa$0=$58$0;
  } else {
   var $14=$5&192;
   var $15=($14|0)!=0;
   var $16=$5&32;
   var $17=($16|0)==0;
   var $or_cond=$15&$17;
   do {
    if ($or_cond) {
     var $19=$5&31;
     var $20$0=$19;
     var $20$1=0;
     var $i_0_ph_ph=1;var $v_0_ph_ph$1=$20$1;var $v_0_ph_ph$0=$20$0;
    } else {
     var $22=$5&224;
     var $23=($22|0)!=0;
     var $24=$5&16;
     var $25=($24|0)==0;
     var $or_cond17=$23&$25;
     if ($or_cond17) {
      var $27=$5&15;
      var $28$0=$27;
      var $28$1=0;
      var $i_0_ph_ph=2;var $v_0_ph_ph$1=$28$1;var $v_0_ph_ph$0=$28$0;
      break;
     }
     var $30=$5&240;
     var $31=($30|0)!=0;
     var $32=$5&8;
     var $33=($32|0)==0;
     var $or_cond19=$31&$33;
     if ($or_cond19) {
      var $35=$5&7;
      var $36$0=$35;
      var $36$1=0;
      var $i_0_ph_ph=3;var $v_0_ph_ph$1=$36$1;var $v_0_ph_ph$0=$36$0;
      break;
     }
     var $38=$5&248;
     var $39=($38|0)!=0;
     var $40=$5&4;
     var $41=($40|0)==0;
     var $or_cond21=$39&$41;
     if ($or_cond21) {
      var $43=$5&3;
      var $44$0=$43;
      var $44$1=0;
      var $i_0_ph_ph=4;var $v_0_ph_ph$1=$44$1;var $v_0_ph_ph$0=$44$0;
      break;
     }
     var $46=$5&252;
     var $47=($46|0)!=0;
     var $48=$5&2;
     var $49=($48|0)==0;
     var $or_cond23=$47&$49;
     if ($or_cond23) {
      var $51=$5&1;
      var $52$0=$51;
      var $52$1=0;
      var $i_0_ph_ph=5;var $v_0_ph_ph$1=$52$1;var $v_0_ph_ph$0=$52$0;
      break;
     }
     var $54=$5&254;
     var $55=($54|0)!=0;
     var $56=$5&1;
     var $57=($56|0)==0;
     var $or_cond25=$55&$57;
     if ($or_cond25) {
      var $i_0_ph_ph=6;var $v_0_ph_ph$1=0;var $v_0_ph_ph$0=0;
      break;
     }
     var $$etemp$0$0=-1;
     var $$etemp$0$1=-1;
     var $st$1$0=(($val)|0);
     HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
     var $st$2$1=(($val+4)|0);
     HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
     var $_0=1;
     var $_0;
     STACKTOP=sp;return $_0;
    }
   } while(0);
   var $v_0_ph_ph$0;
   var $v_0_ph_ph$1;
   var $i_0_ph_ph;
   L465: do {
    if ($4) {
     var $v_030_us$1=$v_0_ph_ph$1;var $v_030_us$0=$v_0_ph_ph$0;var $i_031_us=$i_0_ph_ph;
     while(1) {
      var $i_031_us;
      var $v_030_us$0;
      var $v_030_us$1;
      var $59=_FLAC__bitreader_read_raw_uint32($br,$x,8);
      var $60=($59|0)==0;
      if ($60) {
       var $_0=0;
       break;
      }
      var $62=HEAP32[(($x)>>2)];
      var $63=(($62)&255);
      var $64=HEAP32[(($rawlen)>>2)];
      var $65=((($64)+(1))|0);
      HEAP32[(($rawlen)>>2)]=$65;
      var $66=(($raw+$64)|0);
      HEAP8[($66)]=$63;
      var $67=$62&192;
      var $68=($67|0)==128;
      if (!($68)) {
       break L465;
      }
      var $70$0=($v_030_us$0<<6)|(0>>>26);
      var $70$1=($v_030_us$1<<6)|($v_030_us$0>>>26);
      var $71=$62&63;
      var $72$0=$71;
      var $72$1=0;
      var $73$0=$72$0|$70$0;
      var $73$1=$72$1|$70$1;
      var $74=((($i_031_us)-(1))|0);
      var $75=($74|0)==0;
      if ($75) {
       var $v_0_lcssa$1=$73$1;var $v_0_lcssa$0=$73$0;
       break L444;
      } else {
       var $v_030_us$1=$73$1;var $v_030_us$0=$73$0;var $i_031_us=$74;
      }
     }
     var $_0;
     STACKTOP=sp;return $_0;
    } else {
     var $v_030$1=$v_0_ph_ph$1;var $v_030$0=$v_0_ph_ph$0;var $i_031=$i_0_ph_ph;
     while(1) {
      var $i_031;
      var $v_030$0;
      var $v_030$1;
      var $77=_FLAC__bitreader_read_raw_uint32($br,$x,8);
      var $78=($77|0)==0;
      if ($78) {
       var $_0=0;
       break;
      }
      var $80=HEAP32[(($x)>>2)];
      var $81=$80&192;
      var $82=($81|0)==128;
      if (!($82)) {
       break L465;
      }
      var $84$0=($v_030$0<<6)|(0>>>26);
      var $84$1=($v_030$1<<6)|($v_030$0>>>26);
      var $85=$80&63;
      var $86$0=$85;
      var $86$1=0;
      var $87$0=$86$0|$84$0;
      var $87$1=$86$1|$84$1;
      var $88=((($i_031)-(1))|0);
      var $89=($88|0)==0;
      if ($89) {
       var $v_0_lcssa$1=$87$1;var $v_0_lcssa$0=$87$0;
       break L444;
      } else {
       var $v_030$1=$87$1;var $v_030$0=$87$0;var $i_031=$88;
      }
     }
     var $_0;
     STACKTOP=sp;return $_0;
    }
   } while(0);
   var $$etemp$3$0=-1;
   var $$etemp$3$1=-1;
   var $st$4$0=(($val)|0);
   HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
   var $st$5$1=(($val+4)|0);
   HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $v_0_lcssa$0;
 var $v_0_lcssa$1;
 var $st$6$0=(($val)|0);
 HEAP32[(($st$6$0)>>2)]=$v_0_lcssa$0;
 var $st$7$1=(($val+4)|0);
 HEAP32[(($st$7$1)>>2)]=$v_0_lcssa$1;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitwriter_new(){
 var label=0;
 var $1=_calloc(1,20);
 var $2=$1;
 return $2;
}
function _FLAC__bitwriter_delete($bw){
 var label=0;
 var $1=(($bw)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $5=$2;
  _free($5);
 }
 var $6=$bw;
 _free($6);
 return;
}
function _FLAC__bitwriter_free($bw){
 var label=0;
 var $1=(($bw)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $5=$2;
  _free($5);
 }
 HEAP32[(($1)>>2)]=0;
 var $7=(($bw+8)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($bw+16)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=(($bw+12)|0);
 HEAP32[(($9)>>2)]=0;
 return;
}
function _FLAC__bitwriter_init($bw){
 var label=0;
 var $1=(($bw+16)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($bw+12)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($bw+8)|0);
 HEAP32[(($3)>>2)]=8192;
 var $4=_malloc(32768);
 var $5=$4;
 var $6=(($bw)|0);
 HEAP32[(($6)>>2)]=$5;
 var $not_=($4|0)!=0;
 var $_=($not_&1);
 return $_;
}
function _FLAC__bitwriter_clear($bw){
 var label=0;
 var $1=(($bw+16)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($bw+12)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function _FLAC__bitwriter_dump($bw,$out){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=($bw|0)==0;
 if ($1) {
  var $3=_fwrite(3800,18,1,$out);
  STACKTOP=sp;return;
 }
 var $5=(($bw+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($bw+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($bw+16)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$8<<5;
 var $12=((($11)+($10))|0);
 var $13=_fprintf($out,6808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,HEAP32[((tempVarArgs)>>2)]=$6,HEAP32[(((tempVarArgs)+(8))>>2)]=$8,HEAP32[(((tempVarArgs)+(16))>>2)]=$10,HEAP32[(((tempVarArgs)+(24))>>2)]=$12,tempVarArgs)); STACKTOP=tempVarArgs;
 var $14=HEAP32[(($7)>>2)];
 var $15=($14|0)==0;
 if ($15) {
  var $i_0_lcssa=0;
 } else {
  var $16=(($bw)|0);
  var $i_031=0;
  while(1) {
   var $i_031;
   var $18=_fprintf($out,4664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$i_031,tempVarArgs)); STACKTOP=tempVarArgs;
   var $j_030=0;
   while(1) {
    var $j_030;
    var $20=HEAP32[(($16)>>2)];
    var $21=(($20+($i_031<<2))|0);
    var $22=HEAP32[(($21)>>2)];
    var $23=(((31)-($j_030))|0);
    var $24=1<<$23;
    var $25=$22&$24;
    var $26=($25|0)!=0;
    var $27=($26&1);
    var $28=_fprintf($out,2928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
    var $29=((($j_030)+(1))|0);
    var $30=($29>>>0)<32;
    if ($30) {
     var $j_030=$29;
    } else {
     break;
    }
   }
   var $fputc=_fputc(10,$out);
   var $32=((($i_031)+(1))|0);
   var $33=HEAP32[(($7)>>2)];
   var $34=($32>>>0)<($33>>>0);
   if ($34) {
    var $i_031=$32;
   } else {
    var $i_0_lcssa=$32;
    break;
   }
  }
 }
 var $i_0_lcssa;
 var $35=HEAP32[(($9)>>2)];
 var $36=($35|0)==0;
 if ($36) {
  STACKTOP=sp;return;
 }
 var $38=_fprintf($out,4664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$i_0_lcssa,tempVarArgs)); STACKTOP=tempVarArgs;
 var $39=HEAP32[(($9)>>2)];
 var $40=($39|0)==0;
 if (!($40)) {
  var $41=(($bw+4)|0);
  var $j_129=0;var $43=$39;
  while(1) {
   var $43;
   var $j_129;
   var $44=HEAP32[(($41)>>2)];
   var $45=$j_129^-1;
   var $46=((($43)+($45))|0);
   var $47=1<<$46;
   var $48=$44&$47;
   var $49=($48|0)!=0;
   var $50=($49&1);
   var $51=_fprintf($out,2928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$50,tempVarArgs)); STACKTOP=tempVarArgs;
   var $52=((($j_129)+(1))|0);
   var $53=HEAP32[(($9)>>2)];
   var $54=($52>>>0)<($53>>>0);
   if ($54) {
    var $j_129=$52;var $43=$53;
   } else {
    break;
   }
  }
 }
 var $fputc28=_fputc(10,$out);
 STACKTOP=sp;return;
}
function _FLAC__bitwriter_get_write_crc16($bw,$crc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $buffer=sp;
 var $bytes=(sp)+(8);
 var $1=_FLAC__bitwriter_get_buffer($bw,$buffer,$bytes);
 var $2=($1|0)==0;
 if ($2) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $4=HEAP32[(($buffer)>>2)];
 var $5=HEAP32[(($bytes)>>2)];
 var $6=_FLAC__crc16($4,$5);
 var $7=(($6)&65535);
 HEAP16[(($crc)>>1)]=$7;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitwriter_get_buffer($bw,$buffer,$bytes){
 var label=0;
 var $1=(($bw+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&7;
 var $4=($3|0)==0;
 if (!($4)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $6=($2|0)==0;
 if ($6) {
  var $_pre19=(($bw)|0);
  var $_pre20=(($bw+12)|0);
  var $_pre_phi=$_pre19;var $_pre_phi21=$_pre20;
 } else {
  var $8=(($bw+12)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($bw+8)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=($9|0)==($11|0);
  do {
   if ($12) {
    var $14=((($2)+(63))|0);
    var $15=$14>>>5;
    var $16=((($9)+($15))|0);
    var $17=($9>>>0)<($16>>>0);
    if (!($17)) {
     var $41=$2;var $40=$9;
     break;
    }
    var $19=$15&1023;
    var $20=($19|0)==0;
    if ($20) {
     var $new_capacity_0_i=$16;
    } else {
     var $22=((($16)+(1024))|0);
     var $23=((($22)-($19))|0);
     var $new_capacity_0_i=$23;
    }
    var $new_capacity_0_i;
    var $25=(($bw)|0);
    var $26=HEAP32[(($25)>>2)];
    var $27=$26;
    var $28=($new_capacity_0_i|0)==0;
    do {
     if ($28) {
      var $30=_realloc($27,0);
      var $_0_i_i=$30;
     } else {
      var $32=(((4294967295)/(($new_capacity_0_i>>>0)))&-1);
      var $33=($32>>>0)<4;
      if ($33) {
       var $_0=0;
       var $_0;
       return $_0;
      } else {
       var $35=$new_capacity_0_i<<2;
       var $36=_realloc($27,$35);
       var $_0_i_i=$36;
       break;
      }
     }
    } while(0);
    var $_0_i_i;
    var $37=($_0_i_i|0)==0;
    if ($37) {
     var $_0=0;
     var $_0;
     return $_0;
    } else {
     var $39=$_0_i_i;
     HEAP32[(($25)>>2)]=$39;
     HEAP32[(($10)>>2)]=$new_capacity_0_i;
     var $_pre=HEAP32[(($1)>>2)];
     var $_pre17=HEAP32[(($8)>>2)];
     var $41=$_pre;var $40=$_pre17;
     break;
    }
   } else {
    var $41=$2;var $40=$9;
   }
  } while(0);
  var $40;
  var $41;
  var $42=(($bw+4)|0);
  var $43=HEAP32[(($42)>>2)];
  var $44=(((32)-($41))|0);
  var $45=$43<<$44;
  var $46=_llvm_bswap_i32($45);
  var $47=(($bw)|0);
  var $48=HEAP32[(($47)>>2)];
  var $49=(($48+($40<<2))|0);
  HEAP32[(($49)>>2)]=$46;
  var $_pre_phi=$47;var $_pre_phi21=$8;
 }
 var $_pre_phi21;
 var $_pre_phi;
 var $51=HEAP32[(($_pre_phi)>>2)];
 var $52=$51;
 HEAP32[(($buffer)>>2)]=$52;
 var $53=HEAP32[(($_pre_phi21)>>2)];
 var $54=$53<<2;
 var $55=HEAP32[(($1)>>2)];
 var $56=$55>>>3;
 var $57=((($56)+($54))|0);
 HEAP32[(($bytes)>>2)]=$57;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__bitwriter_release_buffer($bw){
 var label=0;
 return;
}
function _FLAC__bitwriter_get_write_crc8($bw,$crc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $buffer=sp;
 var $bytes=(sp)+(8);
 var $1=_FLAC__bitwriter_get_buffer($bw,$buffer,$bytes);
 var $2=($1|0)==0;
 if ($2) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $4=HEAP32[(($buffer)>>2)];
 var $5=HEAP32[(($bytes)>>2)];
 var $6=_FLAC__crc8($4,$5);
 HEAP8[($crc)]=$6;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__bitwriter_is_byte_aligned($bw){
 var label=0;
 var $1=(($bw+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&7;
 var $4=($3|0)==0;
 var $5=($4&1);
 return $5;
}
function _FLAC__bitwriter_get_input_bits_unconsumed($bw){
 var label=0;
 var $1=(($bw+12)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2<<5;
 var $4=(($bw+16)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=((($3)+($5))|0);
 return $6;
}
function _FLAC__bitwriter_write_zeroes($bw,$bits){
 var label=0;
 var $1=($bits|0)==0;
 if ($1) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $3=(($bw+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($bw+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)+($bits))|0);
 var $8=($4>>>0)>($7>>>0);
 var $_pre=(($bw+16)|0);
 do {
  if (!($8)) {
   var $10=HEAP32[(($_pre)>>2)];
   var $11=((($bits)+(31))|0);
   var $12=((($11)+($10))|0);
   var $13=$12>>>5;
   var $14=((($13)+($6))|0);
   var $15=($4>>>0)<($14>>>0);
   if (!($15)) {
    break;
   }
   var $17=((($14)-($4))|0);
   var $18=$17&1023;
   var $19=($18|0)==0;
   if ($19) {
    var $new_capacity_0_i=$14;
   } else {
    var $21=((($14)+(1024))|0);
    var $22=((($21)-($18))|0);
    var $new_capacity_0_i=$22;
   }
   var $new_capacity_0_i;
   var $24=(($bw)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   var $27=($new_capacity_0_i|0)==0;
   do {
    if ($27) {
     var $29=_realloc($26,0);
     var $_0_i_i=$29;
    } else {
     var $31=(((4294967295)/(($new_capacity_0_i>>>0)))&-1);
     var $32=($31>>>0)<4;
     if ($32) {
      var $_0=0;
      var $_0;
      return $_0;
     } else {
      var $34=$new_capacity_0_i<<2;
      var $35=_realloc($26,$34);
      var $_0_i_i=$35;
      break;
     }
    }
   } while(0);
   var $_0_i_i;
   var $36=($_0_i_i|0)==0;
   if ($36) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    var $38=$_0_i_i;
    HEAP32[(($24)>>2)]=$38;
    HEAP32[(($3)>>2)]=$new_capacity_0_i;
    break;
   }
  }
 } while(0);
 var $39=HEAP32[(($_pre)>>2)];
 var $40=($39|0)==0;
 do {
  if ($40) {
   var $_030_ph=$bits;
  } else {
   var $42=(((32)-($39))|0);
   var $43=($42>>>0)<($bits>>>0);
   var $_bits=$43?$42:$bits;
   var $44=(($bw+4)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$45<<$_bits;
   HEAP32[(($44)>>2)]=$46;
   var $47=((($39)+($_bits))|0);
   HEAP32[(($_pre)>>2)]=$47;
   var $48=($47|0)==32;
   if ($48) {
    var $50=((($bits)-($_bits))|0);
    var $51=_llvm_bswap_i32($46);
    var $52=HEAP32[(($5)>>2)];
    var $53=((($52)+(1))|0);
    HEAP32[(($5)>>2)]=$53;
    var $54=(($bw)|0);
    var $55=HEAP32[(($54)>>2)];
    var $56=(($55+($52<<2))|0);
    HEAP32[(($56)>>2)]=$51;
    HEAP32[(($_pre)>>2)]=0;
    var $_030_ph=$50;
    break;
   } else {
    var $_0=1;
    var $_0;
    return $_0;
   }
  }
 } while(0);
 var $_030_ph;
 var $57=($_030_ph>>>0)>31;
 if ($57) {
  var $58=(($bw)|0);
  var $_03033=$_030_ph;
  while(1) {
   var $_03033;
   var $59=HEAP32[(($5)>>2)];
   var $60=((($59)+(1))|0);
   HEAP32[(($5)>>2)]=$60;
   var $61=HEAP32[(($58)>>2)];
   var $62=(($61+($59<<2))|0);
   HEAP32[(($62)>>2)]=0;
   var $63=((($_03033)-(32))|0);
   var $64=($63>>>0)>31;
   if ($64) {
    var $_03033=$63;
   } else {
    var $_030_lcssa=$63;
    break;
   }
  }
 } else {
  var $_030_lcssa=$_030_ph;
 }
 var $_030_lcssa;
 var $65=($_030_lcssa|0)==0;
 if ($65) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $67=(($bw+4)|0);
 HEAP32[(($67)>>2)]=0;
 HEAP32[(($_pre)>>2)]=$_030_lcssa;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__bitwriter_write_raw_uint32($bw,$val,$bits){
 var label=0;
 var $1=($bits|0)==0;
 if ($1) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $3=(($bw+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($bw+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)+($bits))|0);
 var $8=($4>>>0)>($7>>>0);
 var $_pre=(($bw+16)|0);
 do {
  if (!($8)) {
   var $10=HEAP32[(($_pre)>>2)];
   var $11=((($bits)+(31))|0);
   var $12=((($11)+($10))|0);
   var $13=$12>>>5;
   var $14=((($13)+($6))|0);
   var $15=($4>>>0)<($14>>>0);
   if (!($15)) {
    break;
   }
   var $17=((($14)-($4))|0);
   var $18=$17&1023;
   var $19=($18|0)==0;
   if ($19) {
    var $new_capacity_0_i=$14;
   } else {
    var $21=((($14)+(1024))|0);
    var $22=((($21)-($18))|0);
    var $new_capacity_0_i=$22;
   }
   var $new_capacity_0_i;
   var $24=(($bw)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   var $27=($new_capacity_0_i|0)==0;
   do {
    if ($27) {
     var $29=_realloc($26,0);
     var $_0_i_i=$29;
    } else {
     var $31=(((4294967295)/(($new_capacity_0_i>>>0)))&-1);
     var $32=($31>>>0)<4;
     if ($32) {
      var $_0=0;
      var $_0;
      return $_0;
     } else {
      var $34=$new_capacity_0_i<<2;
      var $35=_realloc($26,$34);
      var $_0_i_i=$35;
      break;
     }
    }
   } while(0);
   var $_0_i_i;
   var $36=($_0_i_i|0)==0;
   if ($36) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    var $38=$_0_i_i;
    HEAP32[(($24)>>2)]=$38;
    HEAP32[(($3)>>2)]=$new_capacity_0_i;
    break;
   }
  }
 } while(0);
 var $39=HEAP32[(($_pre)>>2)];
 var $40=(((32)-($39))|0);
 var $41=($40>>>0)>($bits>>>0);
 if ($41) {
  var $43=(($bw+4)|0);
  var $44=HEAP32[(($43)>>2)];
  var $45=$44<<$bits;
  var $46=$45|$val;
  HEAP32[(($43)>>2)]=$46;
  var $47=((($39)+($bits))|0);
  HEAP32[(($_pre)>>2)]=$47;
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $49=($39|0)==0;
 var $50=(($bw+4)|0);
 if ($49) {
  HEAP32[(($50)>>2)]=$val;
  HEAP32[(($_pre)>>2)]=0;
  var $64=_llvm_bswap_i32($val);
  var $65=HEAP32[(($5)>>2)];
  var $66=((($65)+(1))|0);
  HEAP32[(($5)>>2)]=$66;
  var $67=(($bw)|0);
  var $68=HEAP32[(($67)>>2)];
  var $69=(($68+($65<<2))|0);
  HEAP32[(($69)>>2)]=$64;
  var $_0=1;
  var $_0;
  return $_0;
 } else {
  var $52=HEAP32[(($50)>>2)];
  var $53=$52<<$40;
  var $54=((($bits)-($40))|0);
  HEAP32[(($_pre)>>2)]=$54;
  var $55=$val>>>($54>>>0);
  var $56=$53|$55;
  var $57=_llvm_bswap_i32($56);
  var $58=HEAP32[(($5)>>2)];
  var $59=((($58)+(1))|0);
  HEAP32[(($5)>>2)]=$59;
  var $60=(($bw)|0);
  var $61=HEAP32[(($60)>>2)];
  var $62=(($61+($58<<2))|0);
  HEAP32[(($62)>>2)]=$57;
  HEAP32[(($50)>>2)]=$val;
  var $_0=1;
  var $_0;
  return $_0;
 }
}
function _FLAC__bitwriter_write_raw_int32($bw,$val,$bits){
 var label=0;
 var $1=($bits>>>0)<32;
 if ($1) {
  var $3=-1<<$bits;
  var $4=$3^-1;
  var $5=$4&$val;
  var $_0=$5;
 } else {
  var $_0=$val;
 }
 var $_0;
 var $7=_FLAC__bitwriter_write_raw_uint32($bw,$_0,$bits);
 return $7;
}
function _FLAC__bitwriter_write_raw_uint64($bw,$val$0,$val$1,$bits){
 var label=0;
 var $1=($bits>>>0)>32;
 if (!($1)) {
  var $13$0=$val$0;
  var $13=$13$0;
  var $14=_FLAC__bitwriter_write_raw_uint32($bw,$13,$bits);
  var $_0=$14;
  var $_0;
  return $_0;
 }
 var $3$0=$val$1;
 var $3$1=0;
 var $4$0=$3$0;
 var $4=$4$0;
 var $5=((($bits)-(32))|0);
 var $6=_FLAC__bitwriter_write_raw_uint32($bw,$4,$5);
 var $7=($6|0)==0;
 if ($7) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9$0=$val$0;
 var $9=$9$0;
 var $10=_FLAC__bitwriter_write_raw_uint32($bw,$9,32);
 var $11=($10|0)!=0;
 var $phitmp=($11&1);
 var $_0=$phitmp;
 var $_0;
 return $_0;
}
function _FLAC__bitwriter_write_raw_uint32_little_endian($bw,$val){
 var label=0;
 var $1=$val&255;
 var $2=_FLAC__bitwriter_write_raw_uint32($bw,$1,8);
 var $3=($2|0)==0;
 if ($3) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=$val>>>8;
 var $6=$5&255;
 var $7=_FLAC__bitwriter_write_raw_uint32($bw,$6,8);
 var $8=($7|0)==0;
 if ($8) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $10=$val>>>16;
 var $11=$10&255;
 var $12=_FLAC__bitwriter_write_raw_uint32($bw,$11,8);
 var $13=($12|0)==0;
 if ($13) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $15=$val>>>24;
 var $16=_FLAC__bitwriter_write_raw_uint32($bw,$15,8);
 var $not_=($16|0)!=0;
 var $_=($not_&1);
 var $_0=$_;
 var $_0;
 return $_0;
}
function _FLAC__bitwriter_write_byte_block($bw,$vals,$nvals){
 var label=0;
 var $i_0=0;
 while(1) {
  var $i_0;
  var $2=($i_0>>>0)<($nvals>>>0);
  if (!($2)) {
   var $_0=1;
   label = 482;
   break;
  }
  var $4=(($vals+$i_0)|0);
  var $5=HEAP8[($4)];
  var $6=($5&255);
  var $7=_FLAC__bitwriter_write_raw_uint32($bw,$6,8);
  var $8=($7|0)==0;
  var $9=((($i_0)+(1))|0);
  if ($8) {
   var $_0=0;
   label = 483;
   break;
  } else {
   var $i_0=$9;
  }
 }
 if (label == 482) {
  var $_0;
  return $_0;
 }
 else if (label == 483) {
  var $_0;
  return $_0;
 }
}
function _FLAC__bitwriter_write_unary_unsigned($bw,$val){
 var label=0;
 var $1=($val>>>0)<32;
 if ($1) {
  var $3=((($val)+(1))|0);
  var $4=_FLAC__bitwriter_write_raw_uint32($bw,1,$3);
  var $_0=$4;
  var $_0;
  return $_0;
 }
 var $6=_FLAC__bitwriter_write_zeroes($bw,$val);
 var $7=($6|0)==0;
 if ($7) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9=_FLAC__bitwriter_write_raw_uint32($bw,1,1);
 var $10=($9|0)!=0;
 var $phitmp=($10&1);
 var $_0=$phitmp;
 var $_0;
 return $_0;
}
function _FLAC__bitwriter_rice_bits($val,$parameter){
 var label=0;
 var $1=$val<<1;
 var $2=$val>>31;
 var $3=$1^$2;
 var $4=((($parameter)+(1))|0);
 var $5=$3>>>($parameter>>>0);
 var $6=((($4)+($5))|0);
 return $6;
}
function _FLAC__bitwriter_write_rice_signed($bw,$val,$parameter){
 var label=0;
 var $1=$val<<1;
 var $2=$val>>31;
 var $3=$1^$2;
 var $4=$3>>>($parameter>>>0);
 var $5=((($parameter)+(1))|0);
 var $6=((($4)+($5))|0);
 var $7=1<<$parameter;
 var $8=((($7)-(1))|0);
 var $9=$8&$3;
 var $10=$9|$7;
 var $11=($6>>>0)<33;
 if ($11) {
  var $13=_FLAC__bitwriter_write_raw_uint32($bw,$10,$6);
  var $_0=$13;
  var $_0;
  return $_0;
 }
 var $15=_FLAC__bitwriter_write_zeroes($bw,$4);
 var $16=($15|0)==0;
 if ($16) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $18=_FLAC__bitwriter_write_raw_uint32($bw,$10,$5);
 var $19=($18|0)!=0;
 var $phitmp=($19&1);
 var $_0=$phitmp;
 var $_0;
 return $_0;
}
function _FLAC__bitwriter_write_rice_signed_block($bw,$vals,$nvals,$parameter){
 var label=0;
 var $1=-1<<$parameter;
 var $2=(((31)-($parameter))|0);
 var $3=-1>>>($2>>>0);
 var $4=((($parameter)+(1))|0);
 var $5=($nvals|0)==0;
 if ($5) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $6=(($bw+16)|0);
 var $7=(($bw+8)|0);
 var $8=(($bw+12)|0);
 var $9=(($bw+4)|0);
 var $10=(($bw)|0);
 var $11=((($parameter)+(32))|0);
 var $_08084=$nvals;var $_07985=$vals;
 L672: while(1) {
  var $_07985;
  var $_08084;
  var $13=HEAP32[(($_07985)>>2)];
  var $14=$13<<1;
  var $15=$13>>31;
  var $16=$14^$15;
  var $17=$16>>>($parameter>>>0);
  var $18=HEAP32[(($6)>>2)];
  var $19=($18|0)==0;
  do {
   if ($19) {
    label = 506;
   } else {
    var $21=((($18)+($4))|0);
    var $22=((($21)+($17))|0);
    var $23=($22>>>0)<32;
    if (!($23)) {
     label = 506;
     break;
    }
    HEAP32[(($6)>>2)]=$22;
    var $25=$16|$1;
    var $26=$25&$3;
    var $27=((($17)+($4))|0);
    var $28=HEAP32[(($9)>>2)];
    var $29=$28<<$27;
    var $30=$29|$26;
    HEAP32[(($9)>>2)]=$30;
   }
  } while(0);
  do {
   if (label == 506) {
    label = 0;
    var $31=HEAP32[(($7)>>2)];
    var $32=HEAP32[(($8)>>2)];
    var $33=((($17)+(1))|0);
    var $34=((($33)+($32))|0);
    var $35=((($34)+($18))|0);
    var $36=($31>>>0)>($35>>>0);
    do {
     if (!($36)) {
      var $38=((($11)+($17))|0);
      var $39=((($38)+($18))|0);
      var $40=$39>>>5;
      var $41=((($40)+($32))|0);
      var $42=($31>>>0)<($41>>>0);
      if (!($42)) {
       break;
      }
      var $44=((($41)-($31))|0);
      var $45=$44&1023;
      var $46=($45|0)==0;
      if ($46) {
       var $new_capacity_0_i=$41;
      } else {
       var $48=((($41)+(1024))|0);
       var $49=((($48)-($45))|0);
       var $new_capacity_0_i=$49;
      }
      var $new_capacity_0_i;
      var $50=HEAP32[(($10)>>2)];
      var $51=$50;
      var $52=($new_capacity_0_i|0)==0;
      if ($52) {
       var $54=_realloc($51,0);
       var $_0_i_i=$54;
      } else {
       var $56=(((4294967295)/(($new_capacity_0_i>>>0)))&-1);
       var $57=($56>>>0)<4;
       if ($57) {
        var $_0=0;
        label = 531;
        break L672;
       }
       var $59=$new_capacity_0_i<<2;
       var $60=_realloc($51,$59);
       var $_0_i_i=$60;
      }
      var $_0_i_i;
      var $61=($_0_i_i|0)==0;
      if ($61) {
       var $_0=0;
       label = 533;
       break L672;
      }
      var $63=$_0_i_i;
      HEAP32[(($10)>>2)]=$63;
      HEAP32[(($7)>>2)]=$new_capacity_0_i;
     }
    } while(0);
    var $64=($17|0)==0;
    L692: do {
     if (!($64)) {
      var $66=HEAP32[(($6)>>2)];
      var $67=($66|0)==0;
      do {
       if ($67) {
        var $msbits_0_ph=$17;
       } else {
        var $69=(((32)-($66))|0);
        var $70=($17>>>0)<($69>>>0);
        var $71=HEAP32[(($9)>>2)];
        if ($70) {
         var $73=$71<<$17;
         HEAP32[(($9)>>2)]=$73;
         var $74=((($66)+($17))|0);
         HEAP32[(($6)>>2)]=$74;
         break L692;
        } else {
         var $76=$71<<$69;
         HEAP32[(($9)>>2)]=$76;
         var $77=((($17)-($69))|0);
         var $78=_llvm_bswap_i32($76);
         var $79=HEAP32[(($8)>>2)];
         var $80=((($79)+(1))|0);
         HEAP32[(($8)>>2)]=$80;
         var $81=HEAP32[(($10)>>2)];
         var $82=(($81+($79<<2))|0);
         HEAP32[(($82)>>2)]=$78;
         HEAP32[(($6)>>2)]=0;
         var $msbits_0_ph=$77;
         break;
        }
       }
      } while(0);
      var $msbits_0_ph;
      var $83=($msbits_0_ph>>>0)>31;
      if ($83) {
       var $msbits_083=$msbits_0_ph;
       while(1) {
        var $msbits_083;
        var $84=HEAP32[(($8)>>2)];
        var $85=((($84)+(1))|0);
        HEAP32[(($8)>>2)]=$85;
        var $86=HEAP32[(($10)>>2)];
        var $87=(($86+($84<<2))|0);
        HEAP32[(($87)>>2)]=0;
        var $88=((($msbits_083)-(32))|0);
        var $89=($88>>>0)>31;
        if ($89) {
         var $msbits_083=$88;
        } else {
         var $msbits_0_lcssa=$88;
         break;
        }
       }
      } else {
       var $msbits_0_lcssa=$msbits_0_ph;
      }
      var $msbits_0_lcssa;
      var $90=($msbits_0_lcssa|0)==0;
      if ($90) {
       break;
      }
      HEAP32[(($9)>>2)]=0;
      HEAP32[(($6)>>2)]=$msbits_0_lcssa;
     }
    } while(0);
    var $92=$16|$1;
    var $93=$92&$3;
    var $94=HEAP32[(($6)>>2)];
    var $95=(((32)-($94))|0);
    var $96=($4>>>0)<($95>>>0);
    var $97=HEAP32[(($9)>>2)];
    if ($96) {
     var $99=$97<<$4;
     var $100=$99|$93;
     HEAP32[(($9)>>2)]=$100;
     var $101=((($94)+($4))|0);
     HEAP32[(($6)>>2)]=$101;
     break;
    } else {
     var $103=$97<<$95;
     var $104=((($4)-($95))|0);
     HEAP32[(($6)>>2)]=$104;
     var $105=$93>>>($104>>>0);
     var $106=$103|$105;
     var $107=_llvm_bswap_i32($106);
     var $108=HEAP32[(($8)>>2)];
     var $109=((($108)+(1))|0);
     HEAP32[(($8)>>2)]=$109;
     var $110=HEAP32[(($10)>>2)];
     var $111=(($110+($108<<2))|0);
     HEAP32[(($111)>>2)]=$107;
     HEAP32[(($9)>>2)]=$93;
     break;
    }
   }
  } while(0);
  var $113=((($_08084)-(1))|0);
  var $114=($113|0)==0;
  if ($114) {
   var $_0=1;
   label = 534;
   break;
  }
  var $115=(($_07985+4)|0);
  var $_08084=$113;var $_07985=$115;
 }
 if (label == 531) {
  var $_0;
  return $_0;
 }
 else if (label == 533) {
  var $_0;
  return $_0;
 }
 else if (label == 534) {
  var $_0;
  return $_0;
 }
}
function _FLAC__bitwriter_write_utf8_uint32($bw,$val){
 var label=0;
 var $1=($val>>>0)<128;
 if ($1) {
  var $3=_FLAC__bitwriter_write_raw_uint32($bw,$val,8);
  var $_0=$3;
  var $_0;
  return $_0;
 }
 var $5=($val>>>0)<2048;
 if ($5) {
  var $7=$val>>>6;
  var $8=$7|192;
  var $9=_FLAC__bitwriter_write_raw_uint32($bw,$8,8);
  var $10=$9&1;
  var $11=$val&63;
  var $12=$11|128;
  var $13=_FLAC__bitwriter_write_raw_uint32($bw,$12,8);
  var $14=$10&$13;
  var $_0=$14;
  var $_0;
  return $_0;
 }
 var $16=($val>>>0)<65536;
 if ($16) {
  var $18=$val>>>12;
  var $19=$18|224;
  var $20=_FLAC__bitwriter_write_raw_uint32($bw,$19,8);
  var $21=$20&1;
  var $22=$val>>>6;
  var $23=$22&63;
  var $24=$23|128;
  var $25=_FLAC__bitwriter_write_raw_uint32($bw,$24,8);
  var $26=$21&$25;
  var $27=$val&63;
  var $28=$27|128;
  var $29=_FLAC__bitwriter_write_raw_uint32($bw,$28,8);
  var $30=$26&$29;
  var $_0=$30;
  var $_0;
  return $_0;
 }
 var $32=($val>>>0)<2097152;
 if ($32) {
  var $34=$val>>>18;
  var $35=$34|240;
  var $36=_FLAC__bitwriter_write_raw_uint32($bw,$35,8);
  var $37=$36&1;
  var $38=$val>>>12;
  var $39=$38&63;
  var $40=$39|128;
  var $41=_FLAC__bitwriter_write_raw_uint32($bw,$40,8);
  var $42=$37&$41;
  var $43=$val>>>6;
  var $44=$43&63;
  var $45=$44|128;
  var $46=_FLAC__bitwriter_write_raw_uint32($bw,$45,8);
  var $47=$42&$46;
  var $48=$val&63;
  var $49=$48|128;
  var $50=_FLAC__bitwriter_write_raw_uint32($bw,$49,8);
  var $51=$47&$50;
  var $_0=$51;
  var $_0;
  return $_0;
 }
 var $53=($val>>>0)<67108864;
 if ($53) {
  var $55=$val>>>24;
  var $56=$55|248;
  var $57=_FLAC__bitwriter_write_raw_uint32($bw,$56,8);
  var $58=$57&1;
  var $59=$val>>>18;
  var $60=$59&63;
  var $61=$60|128;
  var $62=_FLAC__bitwriter_write_raw_uint32($bw,$61,8);
  var $63=$58&$62;
  var $64=$val>>>12;
  var $65=$64&63;
  var $66=$65|128;
  var $67=_FLAC__bitwriter_write_raw_uint32($bw,$66,8);
  var $68=$63&$67;
  var $69=$val>>>6;
  var $70=$69&63;
  var $71=$70|128;
  var $72=_FLAC__bitwriter_write_raw_uint32($bw,$71,8);
  var $73=$68&$72;
  var $74=$val&63;
  var $75=$74|128;
  var $76=_FLAC__bitwriter_write_raw_uint32($bw,$75,8);
  var $77=$73&$76;
  var $_0=$77;
  var $_0;
  return $_0;
 } else {
  var $79=$val>>>30;
  var $80=$79|252;
  var $81=_FLAC__bitwriter_write_raw_uint32($bw,$80,8);
  var $82=$81&1;
  var $83=$val>>>24;
  var $84=$83&63;
  var $85=$84|128;
  var $86=_FLAC__bitwriter_write_raw_uint32($bw,$85,8);
  var $87=$82&$86;
  var $88=$val>>>18;
  var $89=$88&63;
  var $90=$89|128;
  var $91=_FLAC__bitwriter_write_raw_uint32($bw,$90,8);
  var $92=$87&$91;
  var $93=$val>>>12;
  var $94=$93&63;
  var $95=$94|128;
  var $96=_FLAC__bitwriter_write_raw_uint32($bw,$95,8);
  var $97=$92&$96;
  var $98=$val>>>6;
  var $99=$98&63;
  var $100=$99|128;
  var $101=_FLAC__bitwriter_write_raw_uint32($bw,$100,8);
  var $102=$97&$101;
  var $103=$val&63;
  var $104=$103|128;
  var $105=_FLAC__bitwriter_write_raw_uint32($bw,$104,8);
  var $106=$102&$105;
  var $_0=$106;
  var $_0;
  return $_0;
 }
}
function _FLAC__bitwriter_write_utf8_uint64($bw,$val$0,$val$1){
 var label=0;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;
 var $1=(($val$1>>>0) < ($$etemp$0$1>>>0)) | (((($val$1>>>0) == ($$etemp$0$1>>>0) & ($val$0>>>0) <  ($$etemp$0$0>>>0))));
 if ($1) {
  var $3$0=$val$0;
  var $3=$3$0;
  var $4=_FLAC__bitwriter_write_raw_uint32($bw,$3,8);
  var $_0=$4;
  var $_0;
  return $_0;
 }
 var $$etemp$1$0=2048;
 var $$etemp$1$1=0;
 var $6=(($val$1>>>0) < ($$etemp$1$1>>>0)) | (((($val$1>>>0) == ($$etemp$1$1>>>0) & ($val$0>>>0) <  ($$etemp$1$0>>>0))));
 if ($6) {
  var $8$0=($val$0>>>6)|($val$1<<26);
  var $8$1=($val$1>>>6)|(0<<26);
  var $9$0=$8$0;
  var $9=$9$0;
  var $10=$9|192;
  var $11=_FLAC__bitwriter_write_raw_uint32($bw,$10,8);
  var $12=$11&1;
  var $val_tr106$0=$val$0;
  var $val_tr106=$val_tr106$0;
  var $13=$val_tr106&63;
  var $14=$13|128;
  var $15=_FLAC__bitwriter_write_raw_uint32($bw,$14,8);
  var $16=$12&$15;
  var $_0=$16;
  var $_0;
  return $_0;
 }
 var $$etemp$2$0=65536;
 var $$etemp$2$1=0;
 var $18=(($val$1>>>0) < ($$etemp$2$1>>>0)) | (((($val$1>>>0) == ($$etemp$2$1>>>0) & ($val$0>>>0) <  ($$etemp$2$0>>>0))));
 if ($18) {
  var $20$0=($val$0>>>12)|($val$1<<20);
  var $20$1=($val$1>>>12)|(0<<20);
  var $21$0=$20$0;
  var $21=$21$0;
  var $22=$21|224;
  var $23=_FLAC__bitwriter_write_raw_uint32($bw,$22,8);
  var $24=$23&1;
  var $25$0=($val$0>>>6)|($val$1<<26);
  var $25$1=($val$1>>>6)|(0<<26);
  var $_tr104$0=$25$0;
  var $_tr104=$_tr104$0;
  var $26=$_tr104&63;
  var $27=$26|128;
  var $28=_FLAC__bitwriter_write_raw_uint32($bw,$27,8);
  var $29=$24&$28;
  var $val_tr105$0=$val$0;
  var $val_tr105=$val_tr105$0;
  var $30=$val_tr105&63;
  var $31=$30|128;
  var $32=_FLAC__bitwriter_write_raw_uint32($bw,$31,8);
  var $33=$29&$32;
  var $_0=$33;
  var $_0;
  return $_0;
 }
 var $$etemp$3$0=2097152;
 var $$etemp$3$1=0;
 var $35=(($val$1>>>0) < ($$etemp$3$1>>>0)) | (((($val$1>>>0) == ($$etemp$3$1>>>0) & ($val$0>>>0) <  ($$etemp$3$0>>>0))));
 if ($35) {
  var $37$0=($val$0>>>18)|($val$1<<14);
  var $37$1=($val$1>>>18)|(0<<14);
  var $38$0=$37$0;
  var $38=$38$0;
  var $39=$38|240;
  var $40=_FLAC__bitwriter_write_raw_uint32($bw,$39,8);
  var $41=$40&1;
  var $42$0=($val$0>>>12)|($val$1<<20);
  var $42$1=($val$1>>>12)|(0<<20);
  var $_tr101$0=$42$0;
  var $_tr101=$_tr101$0;
  var $43=$_tr101&63;
  var $44=$43|128;
  var $45=_FLAC__bitwriter_write_raw_uint32($bw,$44,8);
  var $46=$41&$45;
  var $47$0=($val$0>>>6)|($val$1<<26);
  var $47$1=($val$1>>>6)|(0<<26);
  var $_tr102$0=$47$0;
  var $_tr102=$_tr102$0;
  var $48=$_tr102&63;
  var $49=$48|128;
  var $50=_FLAC__bitwriter_write_raw_uint32($bw,$49,8);
  var $51=$46&$50;
  var $val_tr103$0=$val$0;
  var $val_tr103=$val_tr103$0;
  var $52=$val_tr103&63;
  var $53=$52|128;
  var $54=_FLAC__bitwriter_write_raw_uint32($bw,$53,8);
  var $55=$51&$54;
  var $_0=$55;
  var $_0;
  return $_0;
 }
 var $$etemp$4$0=67108864;
 var $$etemp$4$1=0;
 var $57=(($val$1>>>0) < ($$etemp$4$1>>>0)) | (((($val$1>>>0) == ($$etemp$4$1>>>0) & ($val$0>>>0) <  ($$etemp$4$0>>>0))));
 if ($57) {
  var $59$0=($val$0>>>24)|($val$1<<8);
  var $59$1=($val$1>>>24)|(0<<8);
  var $60$0=$59$0;
  var $60=$60$0;
  var $61=$60|248;
  var $62=_FLAC__bitwriter_write_raw_uint32($bw,$61,8);
  var $63=$62&1;
  var $64$0=($val$0>>>18)|($val$1<<14);
  var $64$1=($val$1>>>18)|(0<<14);
  var $_tr97$0=$64$0;
  var $_tr97=$_tr97$0;
  var $65=$_tr97&63;
  var $66=$65|128;
  var $67=_FLAC__bitwriter_write_raw_uint32($bw,$66,8);
  var $68=$63&$67;
  var $69$0=($val$0>>>12)|($val$1<<20);
  var $69$1=($val$1>>>12)|(0<<20);
  var $_tr98$0=$69$0;
  var $_tr98=$_tr98$0;
  var $70=$_tr98&63;
  var $71=$70|128;
  var $72=_FLAC__bitwriter_write_raw_uint32($bw,$71,8);
  var $73=$68&$72;
  var $74$0=($val$0>>>6)|($val$1<<26);
  var $74$1=($val$1>>>6)|(0<<26);
  var $_tr99$0=$74$0;
  var $_tr99=$_tr99$0;
  var $75=$_tr99&63;
  var $76=$75|128;
  var $77=_FLAC__bitwriter_write_raw_uint32($bw,$76,8);
  var $78=$73&$77;
  var $val_tr100$0=$val$0;
  var $val_tr100=$val_tr100$0;
  var $79=$val_tr100&63;
  var $80=$79|128;
  var $81=_FLAC__bitwriter_write_raw_uint32($bw,$80,8);
  var $82=$78&$81;
  var $_0=$82;
  var $_0;
  return $_0;
 }
 var $$etemp$5$0=-2147483648;
 var $$etemp$5$1=0;
 var $84=(($val$1>>>0) < ($$etemp$5$1>>>0)) | (((($val$1>>>0) == ($$etemp$5$1>>>0) & ($val$0>>>0) <  ($$etemp$5$0>>>0))));
 if ($84) {
  var $86$0=($val$0>>>30)|($val$1<<2);
  var $86$1=($val$1>>>30)|(0<<2);
  var $87$0=$86$0;
  var $87=$87$0;
  var $88=$87|252;
  var $89=_FLAC__bitwriter_write_raw_uint32($bw,$88,8);
  var $90=$89&1;
  var $91$0=($val$0>>>24)|($val$1<<8);
  var $91$1=($val$1>>>24)|(0<<8);
  var $_tr92$0=$91$0;
  var $_tr92=$_tr92$0;
  var $92=$_tr92&63;
  var $93=$92|128;
  var $94=_FLAC__bitwriter_write_raw_uint32($bw,$93,8);
  var $95=$90&$94;
  var $96$0=($val$0>>>18)|($val$1<<14);
  var $96$1=($val$1>>>18)|(0<<14);
  var $_tr93$0=$96$0;
  var $_tr93=$_tr93$0;
  var $97=$_tr93&63;
  var $98=$97|128;
  var $99=_FLAC__bitwriter_write_raw_uint32($bw,$98,8);
  var $100=$95&$99;
  var $101$0=($val$0>>>12)|($val$1<<20);
  var $101$1=($val$1>>>12)|(0<<20);
  var $_tr94$0=$101$0;
  var $_tr94=$_tr94$0;
  var $102=$_tr94&63;
  var $103=$102|128;
  var $104=_FLAC__bitwriter_write_raw_uint32($bw,$103,8);
  var $105=$100&$104;
  var $106$0=($val$0>>>6)|($val$1<<26);
  var $106$1=($val$1>>>6)|(0<<26);
  var $_tr95$0=$106$0;
  var $_tr95=$_tr95$0;
  var $107=$_tr95&63;
  var $108=$107|128;
  var $109=_FLAC__bitwriter_write_raw_uint32($bw,$108,8);
  var $110=$105&$109;
  var $val_tr96$0=$val$0;
  var $val_tr96=$val_tr96$0;
  var $111=$val_tr96&63;
  var $112=$111|128;
  var $113=_FLAC__bitwriter_write_raw_uint32($bw,$112,8);
  var $114=$110&$113;
  var $_0=$114;
  var $_0;
  return $_0;
 } else {
  var $116=_FLAC__bitwriter_write_raw_uint32($bw,254,8);
  var $117=$116&1;
  var $118$0=($val$0>>>30)|($val$1<<2);
  var $118$1=($val$1>>>30)|(0<<2);
  var $_tr$0=$118$0;
  var $_tr=$_tr$0;
  var $119=$_tr&63;
  var $120=$119|128;
  var $121=_FLAC__bitwriter_write_raw_uint32($bw,$120,8);
  var $122=$117&$121;
  var $123$0=($val$0>>>24)|($val$1<<8);
  var $123$1=($val$1>>>24)|(0<<8);
  var $_tr88$0=$123$0;
  var $_tr88=$_tr88$0;
  var $124=$_tr88&63;
  var $125=$124|128;
  var $126=_FLAC__bitwriter_write_raw_uint32($bw,$125,8);
  var $127=$122&$126;
  var $128$0=($val$0>>>18)|($val$1<<14);
  var $128$1=($val$1>>>18)|(0<<14);
  var $_tr89$0=$128$0;
  var $_tr89=$_tr89$0;
  var $129=$_tr89&63;
  var $130=$129|128;
  var $131=_FLAC__bitwriter_write_raw_uint32($bw,$130,8);
  var $132=$127&$131;
  var $133$0=($val$0>>>12)|($val$1<<20);
  var $133$1=($val$1>>>12)|(0<<20);
  var $_tr90$0=$133$0;
  var $_tr90=$_tr90$0;
  var $134=$_tr90&63;
  var $135=$134|128;
  var $136=_FLAC__bitwriter_write_raw_uint32($bw,$135,8);
  var $137=$132&$136;
  var $138$0=($val$0>>>6)|($val$1<<26);
  var $138$1=($val$1>>>6)|(0<<26);
  var $_tr91$0=$138$0;
  var $_tr91=$_tr91$0;
  var $139=$_tr91&63;
  var $140=$139|128;
  var $141=_FLAC__bitwriter_write_raw_uint32($bw,$140,8);
  var $142=$137&$141;
  var $val_tr$0=$val$0;
  var $val_tr=$val_tr$0;
  var $143=$val_tr&63;
  var $144=$143|128;
  var $145=_FLAC__bitwriter_write_raw_uint32($bw,$144,8);
  var $146=$142&$145;
  var $_0=$146;
  var $_0;
  return $_0;
 }
}
function _FLAC__bitwriter_zero_pad_to_byte_boundary($bw){
 var label=0;
 var $1=(($bw+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&7;
 var $4=($3|0)==0;
 if ($4) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $6=(((8)-($3))|0);
 var $7=_FLAC__bitwriter_write_zeroes($bw,$6);
 var $_0=$7;
 var $_0;
 return $_0;
}
function _FLAC__cpu_info($info){
 var label=0;
 var $1=(($info+4)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($info)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function _FLAC__crc8_update($data,$crc){
 var label=0;
 var $1=HEAP8[($crc)];
 var $2=$1^$data;
 var $3=($2&255);
 var $4=((8104+$3)|0);
 var $5=HEAP8[($4)];
 HEAP8[($crc)]=$5;
 return;
}
function _FLAC__crc8_update_block($data,$len,$crc){
 var label=0;
 var $1=($len|0)==0;
 if ($1) {
  return;
 }
 var $_pre=HEAP8[($crc)];
 var $_045=$len;var $_06=$data;var $3=$_pre;
 while(1) {
  var $3;
  var $_06;
  var $_045;
  var $4=((($_045)-(1))|0);
  var $5=(($_06+1)|0);
  var $6=HEAP8[($_06)];
  var $7=$6^$3;
  var $8=($7&255);
  var $9=((8104+$8)|0);
  var $10=HEAP8[($9)];
  HEAP8[($crc)]=$10;
  var $11=($4|0)==0;
  if ($11) {
   break;
  } else {
   var $_045=$4;var $_06=$5;var $3=$10;
  }
 }
 return;
}
function _FLAC__crc8($data,$len){
 var label=0;
 var $1=($len|0)==0;
 if ($1) {
  var $crc_0_lcssa=0;
  var $crc_0_lcssa;
  return $crc_0_lcssa;
 } else {
  var $_023=$data;var $_04=$len;var $crc_05=0;
 }
 while(1) {
  var $crc_05;
  var $_04;
  var $_023;
  var $2=((($_04)-(1))|0);
  var $3=(($_023+1)|0);
  var $4=HEAP8[($_023)];
  var $5=$4^$crc_05;
  var $6=($5&255);
  var $7=((8104+$6)|0);
  var $8=HEAP8[($7)];
  var $9=($2|0)==0;
  if ($9) {
   var $crc_0_lcssa=$8;
   break;
  } else {
   var $_023=$3;var $_04=$2;var $crc_05=$8;
  }
 }
 var $crc_0_lcssa;
 return $crc_0_lcssa;
}
function _FLAC__crc16($data,$len){
 var label=0;
 var $1=($len|0)==0;
 if ($1) {
  var $crc_0_lcssa=0;
  var $crc_0_lcssa;
  return $crc_0_lcssa;
 } else {
  var $_034=$data;var $_05=$len;var $crc_06=0;
 }
 while(1) {
  var $crc_06;
  var $_05;
  var $_034;
  var $2=((($_05)-(1))|0);
  var $3=$crc_06<<8;
  var $4=$crc_06>>>8;
  var $5=(($_034+1)|0);
  var $6=HEAP8[($_034)];
  var $7=($6&255);
  var $8=$7^$4;
  var $9=((8360+($8<<2))|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$10^$3;
  var $12=$11&65535;
  var $13=($2|0)==0;
  if ($13) {
   var $crc_0_lcssa=$12;
   break;
  } else {
   var $_034=$5;var $_05=$2;var $crc_06=$12;
  }
 }
 var $crc_0_lcssa;
 return $crc_0_lcssa;
}
function _FLAC__fixed_compute_best_predictor($data,$data_len,$residual_bits_per_sample){
 var label=0;
 var $1=((($data)-(4))|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=((($data)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($2)-($4))|0);
 var $6=((($data)-(12))|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=((($7)-($4))|0);
 var $9=((($8)+($5))|0);
 var $10=($data_len|0)==0;
 if ($10) {
  var $total_error_0_0_lcssa=0;var $total_error_1_0_lcssa=0;var $total_error_2_0_lcssa=0;var $total_error_3_0_lcssa=0;var $total_error_4_0_lcssa=0;
 } else {
  var $11=((($data)-(16))|0);
  var $12=$7<<1;
  var $_neg101=((($12)-($4))|0);
  var $13=HEAP32[(($11)>>2)];
  var $_neg103=((($_neg101)-($13))|0);
  var $14=((($_neg103)+($9))|0);
  var $last_error_2_0104=$9;var $last_error_3_0105=$14;var $last_error_1_0106=$5;var $last_error_0_0107=$2;var $total_error_0_0108=0;var $total_error_1_0109=0;var $total_error_2_0110=0;var $total_error_3_0111=0;var $total_error_4_0112=0;var $i_0113=0;
  while(1) {
   var $i_0113;
   var $total_error_4_0112;
   var $total_error_3_0111;
   var $total_error_2_0110;
   var $total_error_1_0109;
   var $total_error_0_0108;
   var $last_error_0_0107;
   var $last_error_1_0106;
   var $last_error_3_0105;
   var $last_error_2_0104;
   var $16=(($data+($i_0113<<2))|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=($17|0)<0;
   var $19=(((-$17))|0);
   var $20=$18?$19:$17;
   var $21=((($20)+($total_error_0_0108))|0);
   var $22=((($17)-($last_error_0_0107))|0);
   var $23=($22|0)<0;
   var $24=(((-$22))|0);
   var $25=$23?$24:$22;
   var $26=((($25)+($total_error_1_0109))|0);
   var $27=((($22)-($last_error_1_0106))|0);
   var $28=($27|0)<0;
   var $29=(((-$27))|0);
   var $30=$28?$29:$27;
   var $31=((($30)+($total_error_2_0110))|0);
   var $32=((($27)-($last_error_2_0104))|0);
   var $33=($32|0)<0;
   var $34=(((-$32))|0);
   var $35=$33?$34:$32;
   var $36=((($35)+($total_error_3_0111))|0);
   var $37=((($32)-($last_error_3_0105))|0);
   var $38=($37|0)<0;
   var $39=(((-$37))|0);
   var $40=$38?$39:$37;
   var $41=((($40)+($total_error_4_0112))|0);
   var $42=((($i_0113)+(1))|0);
   var $43=($42>>>0)<($data_len>>>0);
   if ($43) {
    var $last_error_2_0104=$27;var $last_error_3_0105=$32;var $last_error_1_0106=$22;var $last_error_0_0107=$17;var $total_error_0_0108=$21;var $total_error_1_0109=$26;var $total_error_2_0110=$31;var $total_error_3_0111=$36;var $total_error_4_0112=$41;var $i_0113=$42;
   } else {
    var $total_error_0_0_lcssa=$21;var $total_error_1_0_lcssa=$26;var $total_error_2_0_lcssa=$31;var $total_error_3_0_lcssa=$36;var $total_error_4_0_lcssa=$41;
    break;
   }
  }
 }
 var $total_error_4_0_lcssa;
 var $total_error_3_0_lcssa;
 var $total_error_2_0_lcssa;
 var $total_error_1_0_lcssa;
 var $total_error_0_0_lcssa;
 var $44=($total_error_1_0_lcssa>>>0)<($total_error_2_0_lcssa>>>0);
 var $45=$44?$total_error_1_0_lcssa:$total_error_2_0_lcssa;
 var $46=($45>>>0)<($total_error_3_0_lcssa>>>0);
 var $_total_error_3_0=$46?$45:$total_error_3_0_lcssa;
 var $47=($_total_error_3_0>>>0)<($total_error_4_0_lcssa>>>0);
 var $_total_error_3_0_total_error_4_0=$47?$_total_error_3_0:$total_error_4_0_lcssa;
 var $48=($total_error_0_0_lcssa>>>0)<($_total_error_3_0_total_error_4_0>>>0);
 do {
  if ($48) {
   var $order_0=0;
  } else {
   var $50=($total_error_2_0_lcssa>>>0)<($total_error_3_0_lcssa>>>0);
   var $51=$50?$total_error_2_0_lcssa:$total_error_3_0_lcssa;
   var $52=($51>>>0)<($total_error_4_0_lcssa>>>0);
   var $_total_error_4_0=$52?$51:$total_error_4_0_lcssa;
   var $53=($total_error_1_0_lcssa>>>0)<($_total_error_4_0>>>0);
   if ($53) {
    var $order_0=1;
    break;
   }
   var $55=($total_error_3_0_lcssa>>>0)<($total_error_4_0_lcssa>>>0);
   var $56=$55?$total_error_3_0_lcssa:$total_error_4_0_lcssa;
   var $57=($total_error_2_0_lcssa>>>0)<($56>>>0);
   if ($57) {
    var $order_0=2;
    break;
   }
   var $_=$55?3:4;
   var $order_0=$_;
  }
 } while(0);
 var $order_0;
 var $60=($total_error_0_0_lcssa|0)==0;
 if ($60) {
  var $69=0;
 } else {
  var $62=($total_error_0_0_lcssa>>>0);
  var $63=($62)*((0.6931471805599453));
  var $64=($data_len>>>0);
  var $65=($63)/($64);
  var $66=Math_log($65);
  var $67=($66)/((0.6931471805599453));
  var $phitmp=$67;
  var $69=$phitmp;
 }
 var $69;
 HEAPF32[(($residual_bits_per_sample)>>2)]=$69;
 var $70=($total_error_1_0_lcssa|0)==0;
 if ($70) {
  var $79=0;
 } else {
  var $72=($total_error_1_0_lcssa>>>0);
  var $73=($72)*((0.6931471805599453));
  var $74=($data_len>>>0);
  var $75=($73)/($74);
  var $76=Math_log($75);
  var $77=($76)/((0.6931471805599453));
  var $phitmp95=$77;
  var $79=$phitmp95;
 }
 var $79;
 var $80=(($residual_bits_per_sample+4)|0);
 HEAPF32[(($80)>>2)]=$79;
 var $81=($total_error_2_0_lcssa|0)==0;
 if ($81) {
  var $90=0;
 } else {
  var $83=($total_error_2_0_lcssa>>>0);
  var $84=($83)*((0.6931471805599453));
  var $85=($data_len>>>0);
  var $86=($84)/($85);
  var $87=Math_log($86);
  var $88=($87)/((0.6931471805599453));
  var $phitmp96=$88;
  var $90=$phitmp96;
 }
 var $90;
 var $91=(($residual_bits_per_sample+8)|0);
 HEAPF32[(($91)>>2)]=$90;
 var $92=($total_error_3_0_lcssa|0)==0;
 if ($92) {
  var $101=0;
 } else {
  var $94=($total_error_3_0_lcssa>>>0);
  var $95=($94)*((0.6931471805599453));
  var $96=($data_len>>>0);
  var $97=($95)/($96);
  var $98=Math_log($97);
  var $99=($98)/((0.6931471805599453));
  var $phitmp97=$99;
  var $101=$phitmp97;
 }
 var $101;
 var $102=(($residual_bits_per_sample+12)|0);
 HEAPF32[(($102)>>2)]=$101;
 var $103=($total_error_4_0_lcssa|0)==0;
 if ($103) {
  var $112=0;
  var $112;
  var $113=(($residual_bits_per_sample+16)|0);
  HEAPF32[(($113)>>2)]=$112;
  return $order_0;
 }
 var $105=($total_error_4_0_lcssa>>>0);
 var $106=($105)*((0.6931471805599453));
 var $107=($data_len>>>0);
 var $108=($106)/($107);
 var $109=Math_log($108);
 var $110=($109)/((0.6931471805599453));
 var $phitmp98=$110;
 var $112=$phitmp98;
 var $112;
 var $113=(($residual_bits_per_sample+16)|0);
 HEAPF32[(($113)>>2)]=$112;
 return $order_0;
}
function _FLAC__fixed_compute_best_predictor_wide($data,$data_len,$residual_bits_per_sample){
 var label=0;
 var $1=((($data)-(4))|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=((($data)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($2)-($4))|0);
 var $6=((($data)-(12))|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=((($7)-($4))|0);
 var $9=((($8)+($5))|0);
 var $10=($data_len|0)==0;
 if ($10) {
  var $total_error_0_0_lcssa$1=0;var $total_error_0_0_lcssa$0=0;var $total_error_1_0_lcssa$1=0;var $total_error_1_0_lcssa$0=0;var $total_error_2_0_lcssa$1=0;var $total_error_2_0_lcssa$0=0;var $total_error_3_0_lcssa$1=0;var $total_error_3_0_lcssa$0=0;var $total_error_4_0_lcssa$1=0;var $total_error_4_0_lcssa$0=0;
 } else {
  var $11=((($data)-(16))|0);
  var $12=$7<<1;
  var $_neg101=((($12)-($4))|0);
  var $13=HEAP32[(($11)>>2)];
  var $_neg103=((($_neg101)-($13))|0);
  var $14=((($_neg103)+($9))|0);
  var $last_error_2_0104=$9;var $last_error_3_0105=$14;var $last_error_1_0106=$5;var $last_error_0_0107=$2;var $total_error_0_0108$1=0;var $total_error_0_0108$0=0;var $total_error_1_0109$1=0;var $total_error_1_0109$0=0;var $total_error_2_0110$1=0;var $total_error_2_0110$0=0;var $total_error_3_0111$1=0;var $total_error_3_0111$0=0;var $total_error_4_0112$1=0;var $total_error_4_0112$0=0;var $i_0113=0;
  while(1) {
   var $i_0113;
   var $total_error_4_0112$0;
   var $total_error_4_0112$1;
   var $total_error_3_0111$0;
   var $total_error_3_0111$1;
   var $total_error_2_0110$0;
   var $total_error_2_0110$1;
   var $total_error_1_0109$0;
   var $total_error_1_0109$1;
   var $total_error_0_0108$0;
   var $total_error_0_0108$1;
   var $last_error_0_0107;
   var $last_error_1_0106;
   var $last_error_3_0105;
   var $last_error_2_0104;
   var $16=(($data+($i_0113<<2))|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=($17|0)<0;
   var $19=(((-$17))|0);
   var $20=$18?$19:$17;
   var $21$0=$20;
   var $21$1=0;
   var $22$0=_i64Add($21$0,$21$1,$total_error_0_0108$0,$total_error_0_0108$1);var $22$1=tempRet0;
   var $23=((($17)-($last_error_0_0107))|0);
   var $24=($23|0)<0;
   var $25=(((-$23))|0);
   var $26=$24?$25:$23;
   var $27$0=$26;
   var $27$1=0;
   var $28$0=_i64Add($27$0,$27$1,$total_error_1_0109$0,$total_error_1_0109$1);var $28$1=tempRet0;
   var $29=((($23)-($last_error_1_0106))|0);
   var $30=($29|0)<0;
   var $31=(((-$29))|0);
   var $32=$30?$31:$29;
   var $33$0=$32;
   var $33$1=0;
   var $34$0=_i64Add($33$0,$33$1,$total_error_2_0110$0,$total_error_2_0110$1);var $34$1=tempRet0;
   var $35=((($29)-($last_error_2_0104))|0);
   var $36=($35|0)<0;
   var $37=(((-$35))|0);
   var $38=$36?$37:$35;
   var $39$0=$38;
   var $39$1=0;
   var $40$0=_i64Add($39$0,$39$1,$total_error_3_0111$0,$total_error_3_0111$1);var $40$1=tempRet0;
   var $41=((($35)-($last_error_3_0105))|0);
   var $42=($41|0)<0;
   var $43=(((-$41))|0);
   var $44=$42?$43:$41;
   var $45$0=$44;
   var $45$1=0;
   var $46$0=_i64Add($45$0,$45$1,$total_error_4_0112$0,$total_error_4_0112$1);var $46$1=tempRet0;
   var $47=((($i_0113)+(1))|0);
   var $48=($47>>>0)<($data_len>>>0);
   if ($48) {
    var $last_error_2_0104=$29;var $last_error_3_0105=$35;var $last_error_1_0106=$23;var $last_error_0_0107=$17;var $total_error_0_0108$1=$22$1;var $total_error_0_0108$0=$22$0;var $total_error_1_0109$1=$28$1;var $total_error_1_0109$0=$28$0;var $total_error_2_0110$1=$34$1;var $total_error_2_0110$0=$34$0;var $total_error_3_0111$1=$40$1;var $total_error_3_0111$0=$40$0;var $total_error_4_0112$1=$46$1;var $total_error_4_0112$0=$46$0;var $i_0113=$47;
   } else {
    var $total_error_0_0_lcssa$1=$22$1;var $total_error_0_0_lcssa$0=$22$0;var $total_error_1_0_lcssa$1=$28$1;var $total_error_1_0_lcssa$0=$28$0;var $total_error_2_0_lcssa$1=$34$1;var $total_error_2_0_lcssa$0=$34$0;var $total_error_3_0_lcssa$1=$40$1;var $total_error_3_0_lcssa$0=$40$0;var $total_error_4_0_lcssa$1=$46$1;var $total_error_4_0_lcssa$0=$46$0;
    break;
   }
  }
 }
 var $total_error_4_0_lcssa$0;
 var $total_error_4_0_lcssa$1;
 var $total_error_3_0_lcssa$0;
 var $total_error_3_0_lcssa$1;
 var $total_error_2_0_lcssa$0;
 var $total_error_2_0_lcssa$1;
 var $total_error_1_0_lcssa$0;
 var $total_error_1_0_lcssa$1;
 var $total_error_0_0_lcssa$0;
 var $total_error_0_0_lcssa$1;
 var $49=(($total_error_1_0_lcssa$1>>>0) < ($total_error_2_0_lcssa$1>>>0)) | (((($total_error_1_0_lcssa$1>>>0) == ($total_error_2_0_lcssa$1>>>0) & ($total_error_1_0_lcssa$0>>>0) <  ($total_error_2_0_lcssa$0>>>0))));
 var $50$0=$49?$total_error_1_0_lcssa$0:$total_error_2_0_lcssa$0;
 var $50$1=$49?$total_error_1_0_lcssa$1:$total_error_2_0_lcssa$1;
 var $51=(($50$1>>>0) < ($total_error_3_0_lcssa$1>>>0)) | (((($50$1>>>0) == ($total_error_3_0_lcssa$1>>>0) & ($50$0>>>0) <  ($total_error_3_0_lcssa$0>>>0))));
 var $_total_error_3_0$0=$51?$50$0:$total_error_3_0_lcssa$0;
 var $_total_error_3_0$1=$51?$50$1:$total_error_3_0_lcssa$1;
 var $52=(($_total_error_3_0$1>>>0) < ($total_error_4_0_lcssa$1>>>0)) | (((($_total_error_3_0$1>>>0) == ($total_error_4_0_lcssa$1>>>0) & ($_total_error_3_0$0>>>0) <  ($total_error_4_0_lcssa$0>>>0))));
 var $_total_error_3_0_total_error_4_0$0=$52?$_total_error_3_0$0:$total_error_4_0_lcssa$0;
 var $_total_error_3_0_total_error_4_0$1=$52?$_total_error_3_0$1:$total_error_4_0_lcssa$1;
 var $53=(($total_error_0_0_lcssa$1>>>0) < ($_total_error_3_0_total_error_4_0$1>>>0)) | (((($total_error_0_0_lcssa$1>>>0) == ($_total_error_3_0_total_error_4_0$1>>>0) & ($total_error_0_0_lcssa$0>>>0) <  ($_total_error_3_0_total_error_4_0$0>>>0))));
 do {
  if ($53) {
   var $order_0=0;
  } else {
   var $55=(($total_error_2_0_lcssa$1>>>0) < ($total_error_3_0_lcssa$1>>>0)) | (((($total_error_2_0_lcssa$1>>>0) == ($total_error_3_0_lcssa$1>>>0) & ($total_error_2_0_lcssa$0>>>0) <  ($total_error_3_0_lcssa$0>>>0))));
   var $56$0=$55?$total_error_2_0_lcssa$0:$total_error_3_0_lcssa$0;
   var $56$1=$55?$total_error_2_0_lcssa$1:$total_error_3_0_lcssa$1;
   var $57=(($56$1>>>0) < ($total_error_4_0_lcssa$1>>>0)) | (((($56$1>>>0) == ($total_error_4_0_lcssa$1>>>0) & ($56$0>>>0) <  ($total_error_4_0_lcssa$0>>>0))));
   var $_total_error_4_0$0=$57?$56$0:$total_error_4_0_lcssa$0;
   var $_total_error_4_0$1=$57?$56$1:$total_error_4_0_lcssa$1;
   var $58=(($total_error_1_0_lcssa$1>>>0) < ($_total_error_4_0$1>>>0)) | (((($total_error_1_0_lcssa$1>>>0) == ($_total_error_4_0$1>>>0) & ($total_error_1_0_lcssa$0>>>0) <  ($_total_error_4_0$0>>>0))));
   if ($58) {
    var $order_0=1;
    break;
   }
   var $60=(($total_error_3_0_lcssa$1>>>0) < ($total_error_4_0_lcssa$1>>>0)) | (((($total_error_3_0_lcssa$1>>>0) == ($total_error_4_0_lcssa$1>>>0) & ($total_error_3_0_lcssa$0>>>0) <  ($total_error_4_0_lcssa$0>>>0))));
   var $61$0=$60?$total_error_3_0_lcssa$0:$total_error_4_0_lcssa$0;
   var $61$1=$60?$total_error_3_0_lcssa$1:$total_error_4_0_lcssa$1;
   var $62=(($total_error_2_0_lcssa$1>>>0) < ($61$1>>>0)) | (((($total_error_2_0_lcssa$1>>>0) == ($61$1>>>0) & ($total_error_2_0_lcssa$0>>>0) <  ($61$0>>>0))));
   if ($62) {
    var $order_0=2;
    break;
   }
   var $_=$60?3:4;
   var $order_0=$_;
  }
 } while(0);
 var $order_0;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $65=(($total_error_0_0_lcssa$0|0) == ($$etemp$0$0|0)) & (($total_error_0_0_lcssa$1|0) == ($$etemp$0$1|0));
 if ($65) {
  var $74=0;
 } else {
  var $67=(($total_error_0_0_lcssa$0>>>0)+(($total_error_0_0_lcssa$1>>>0)*4294967296));
  var $68=($67)*((0.6931471805599453));
  var $69=($data_len>>>0);
  var $70=($68)/($69);
  var $71=Math_log($70);
  var $72=($71)/((0.6931471805599453));
  var $phitmp=$72;
  var $74=$phitmp;
 }
 var $74;
 HEAPF32[(($residual_bits_per_sample)>>2)]=$74;
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $75=(($total_error_1_0_lcssa$0|0) == ($$etemp$1$0|0)) & (($total_error_1_0_lcssa$1|0) == ($$etemp$1$1|0));
 if ($75) {
  var $84=0;
 } else {
  var $77=(($total_error_1_0_lcssa$0>>>0)+(($total_error_1_0_lcssa$1>>>0)*4294967296));
  var $78=($77)*((0.6931471805599453));
  var $79=($data_len>>>0);
  var $80=($78)/($79);
  var $81=Math_log($80);
  var $82=($81)/((0.6931471805599453));
  var $phitmp95=$82;
  var $84=$phitmp95;
 }
 var $84;
 var $85=(($residual_bits_per_sample+4)|0);
 HEAPF32[(($85)>>2)]=$84;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $86=(($total_error_2_0_lcssa$0|0) == ($$etemp$2$0|0)) & (($total_error_2_0_lcssa$1|0) == ($$etemp$2$1|0));
 if ($86) {
  var $95=0;
 } else {
  var $88=(($total_error_2_0_lcssa$0>>>0)+(($total_error_2_0_lcssa$1>>>0)*4294967296));
  var $89=($88)*((0.6931471805599453));
  var $90=($data_len>>>0);
  var $91=($89)/($90);
  var $92=Math_log($91);
  var $93=($92)/((0.6931471805599453));
  var $phitmp96=$93;
  var $95=$phitmp96;
 }
 var $95;
 var $96=(($residual_bits_per_sample+8)|0);
 HEAPF32[(($96)>>2)]=$95;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $97=(($total_error_3_0_lcssa$0|0) == ($$etemp$3$0|0)) & (($total_error_3_0_lcssa$1|0) == ($$etemp$3$1|0));
 if ($97) {
  var $106=0;
 } else {
  var $99=(($total_error_3_0_lcssa$0>>>0)+(($total_error_3_0_lcssa$1>>>0)*4294967296));
  var $100=($99)*((0.6931471805599453));
  var $101=($data_len>>>0);
  var $102=($100)/($101);
  var $103=Math_log($102);
  var $104=($103)/((0.6931471805599453));
  var $phitmp97=$104;
  var $106=$phitmp97;
 }
 var $106;
 var $107=(($residual_bits_per_sample+12)|0);
 HEAPF32[(($107)>>2)]=$106;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $108=(($total_error_4_0_lcssa$0|0) == ($$etemp$4$0|0)) & (($total_error_4_0_lcssa$1|0) == ($$etemp$4$1|0));
 if ($108) {
  var $117=0;
  var $117;
  var $118=(($residual_bits_per_sample+16)|0);
  HEAPF32[(($118)>>2)]=$117;
  return $order_0;
 }
 var $110=(($total_error_4_0_lcssa$0>>>0)+(($total_error_4_0_lcssa$1>>>0)*4294967296));
 var $111=($110)*((0.6931471805599453));
 var $112=($data_len>>>0);
 var $113=($111)/($112);
 var $114=Math_log($113);
 var $115=($114)/((0.6931471805599453));
 var $phitmp98=$115;
 var $117=$phitmp98;
 var $117;
 var $118=(($residual_bits_per_sample+16)|0);
 HEAPF32[(($118)>>2)]=$117;
 return $order_0;
}
function _FLAC__fixed_compute_residual($data,$data_len,$order,$residual){
 var label=0;
 switch (($order|0)) {
 case 4: {
  var $1=($data_len|0)>0;
  if ($1) {
   var $i_370=0;
  } else {
   return;
  }
  while(1) {
   var $i_370;
   var $50=(($data+($i_370<<2))|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=((($i_370)-(1))|0);
   var $53=(($data+($52<<2))|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=((($i_370)-(3))|0);
   var $56=(($data+($55<<2))|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=((($57)+($54))|0);
   var $59=$58<<2;
   var $60=((($51)-($59))|0);
   var $61=((($i_370)-(2))|0);
   var $62=(($data+($61<<2))|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=((($63)*(6))&-1);
   var $65=((($60)+($64))|0);
   var $66=((($i_370)-(4))|0);
   var $67=(($data+($66<<2))|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=((($65)+($68))|0);
   var $70=(($residual+($i_370<<2))|0);
   HEAP32[(($70)>>2)]=$69;
   var $71=((($i_370)+(1))|0);
   var $72=($71|0)<($data_len|0);
   if ($72) {
    var $i_370=$71;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 0: {
  var $6=$residual;
  var $7=$data;
  var $8=$data_len<<2;
  (_memcpy($6, $7, $8)|0);
  return;
  break;
 }
 case 3: {
  var $2=($data_len|0)>0;
  if ($2) {
   var $i_266=0;
  } else {
   return;
  }
  while(1) {
   var $i_266;
   var $32=(($data+($i_266<<2))|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=((($i_266)-(1))|0);
   var $35=(($data+($34<<2))|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=((($i_266)-(2))|0);
   var $38=(($data+($37<<2))|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=((($36)-($39))|0);
   var $41=((($40)*(-3))&-1);
   var $42=((($i_266)-(3))|0);
   var $43=(($data+($42<<2))|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=((($33)-($44))|0);
   var $46=((($45)+($41))|0);
   var $47=(($residual+($i_266<<2))|0);
   HEAP32[(($47)>>2)]=$46;
   var $48=((($i_266)+(1))|0);
   var $49=($48|0)<($data_len|0);
   if ($49) {
    var $i_266=$48;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 2: {
  var $3=($data_len|0)>0;
  if ($3) {
   var $i_162=0;
  } else {
   return;
  }
  while(1) {
   var $i_162;
   var $18=(($data+($i_162<<2))|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=((($i_162)-(1))|0);
   var $21=(($data+($20<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22<<1;
   var $24=((($19)-($23))|0);
   var $25=((($i_162)-(2))|0);
   var $26=(($data+($25<<2))|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($24)+($27))|0);
   var $29=(($residual+($i_162<<2))|0);
   HEAP32[(($29)>>2)]=$28;
   var $30=((($i_162)+(1))|0);
   var $31=($30|0)<($data_len|0);
   if ($31) {
    var $i_162=$30;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 1: {
  var $4=($data_len|0)>0;
  if ($4) {
   var $i_059=0;
  } else {
   return;
  }
  while(1) {
   var $i_059;
   var $9=(($data+($i_059<<2))|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=((($i_059)-(1))|0);
   var $12=(($data+($11<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($10)-($13))|0);
   var $15=(($residual+($i_059<<2))|0);
   HEAP32[(($15)>>2)]=$14;
   var $16=((($i_059)+(1))|0);
   var $17=($16|0)<($data_len|0);
   if ($17) {
    var $i_059=$16;
   } else {
    break;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _FLAC__fixed_restore_signal($residual,$data_len,$order,$data){
 var label=0;
 switch (($order|0)) {
 case 4: {
  var $1=($data_len|0)>0;
  if (!($1)) {
   return;
  }
  var $_phi_trans_insert77=((($data)-(4))|0);
  var $_pre78=HEAP32[(($_phi_trans_insert77)>>2)];
  var $_phi_trans_insert79=((($data)-(12))|0);
  var $_pre80=HEAP32[(($_phi_trans_insert79)>>2)];
  var $i_369=0;var $47=$_pre78;var $46=$_pre80;
  while(1) {
   var $46;
   var $47;
   var $i_369;
   var $48=(($residual+($i_369<<2))|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=((($46)+($47))|0);
   var $51=$50<<2;
   var $52=((($51)+($49))|0);
   var $53=((($i_369)-(2))|0);
   var $54=(($data+($53<<2))|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=((($55)*(-6))&-1);
   var $57=((($52)+($56))|0);
   var $58=((($i_369)-(4))|0);
   var $59=(($data+($58<<2))|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=((($57)-($60))|0);
   var $62=(($data+($i_369<<2))|0);
   HEAP32[(($62)>>2)]=$61;
   var $63=((($i_369)+(1))|0);
   var $64=($63|0)<($data_len|0);
   if ($64) {
    var $i_369=$63;var $47=$61;var $46=$55;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 2: {
  var $3=($data_len|0)>0;
  if (!($3)) {
   return;
  }
  var $_phi_trans_insert71=((($data)-(4))|0);
  var $_pre72=HEAP32[(($_phi_trans_insert71)>>2)];
  var $i_161=0;var $18=$_pre72;
  while(1) {
   var $18;
   var $i_161;
   var $19=(($residual+($i_161<<2))|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$18<<1;
   var $22=((($21)+($20))|0);
   var $23=((($i_161)-(2))|0);
   var $24=(($data+($23<<2))|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=((($22)-($25))|0);
   var $27=(($data+($i_161<<2))|0);
   HEAP32[(($27)>>2)]=$26;
   var $28=((($i_161)+(1))|0);
   var $29=($28|0)<($data_len|0);
   if ($29) {
    var $i_161=$28;var $18=$26;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 0: {
  var $6=$data;
  var $7=$residual;
  var $8=$data_len<<2;
  (_memcpy($6, $7, $8)|0);
  return;
  break;
 }
 case 1: {
  var $4=($data_len|0)>0;
  if (!($4)) {
   return;
  }
  var $_phi_trans_insert=((($data)-(4))|0);
  var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
  var $i_058=0;var $10=$_pre;
  while(1) {
   var $10;
   var $i_058;
   var $11=(($residual+($i_058<<2))|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=((($10)+($12))|0);
   var $14=(($data+($i_058<<2))|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=((($i_058)+(1))|0);
   var $16=($15|0)<($data_len|0);
   if ($16) {
    var $i_058=$15;var $10=$13;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 3: {
  var $2=($data_len|0)>0;
  if (!($2)) {
   return;
  }
  var $_phi_trans_insert73=((($data)-(4))|0);
  var $_pre74=HEAP32[(($_phi_trans_insert73)>>2)];
  var $_phi_trans_insert75=((($data)-(12))|0);
  var $_pre76=HEAP32[(($_phi_trans_insert75)>>2)];
  var $i_265=0;var $32=$_pre74;var $31=$_pre76;
  while(1) {
   var $31;
   var $32;
   var $i_265;
   var $33=(($residual+($i_265<<2))|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=((($i_265)-(2))|0);
   var $36=(($data+($35<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=((($32)-($37))|0);
   var $39=((($38)*(3))&-1);
   var $40=((($31)+($34))|0);
   var $41=((($40)+($39))|0);
   var $42=(($data+($i_265<<2))|0);
   HEAP32[(($42)>>2)]=$41;
   var $43=((($i_265)+(1))|0);
   var $44=($43|0)<($data_len|0);
   if ($44) {
    var $i_265=$43;var $32=$41;var $31=$37;
   } else {
    break;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _FLAC__format_sample_rate_is_valid($sample_rate){
 var label=0;
 var $1=($sample_rate|0)==0;
 var $2=($sample_rate>>>0)>655350;
 var $or_cond=$1|$2;
 var $3=($or_cond&1);
 var $_=$3^1;
 return $_;
}
function _FLAC__format_blocksize_is_subset($blocksize,$sample_rate){
 var label=0;
 var $1=($blocksize>>>0)>16384;
 if ($1) {
  return 0;
 } else {
  var $3=($sample_rate>>>0)<48001;
  var $4=($blocksize>>>0)>4608;
  var $or_cond=$3&$4;
  var $5=($or_cond&1);
  var $_=$5^1;
  return $_;
 }
}
function _FLAC__format_sample_rate_is_subset($sample_rate){
 var label=0;
 var $1=($sample_rate|0)==0;
 var $2=($sample_rate>>>0)>655350;
 var $or_cond_i=$1|$2;
 if ($or_cond_i) {
  return 0;
 } else {
  var $4=($sample_rate>>>0)<65536;
  var $5=(((($sample_rate>>>0))%(1000))&-1);
  var $6=($5|0)==0;
  var $or_cond=$4|$6;
  var $7=(((($sample_rate>>>0))%(10))&-1);
  var $8=($7|0)==0;
  var $or_cond7=$or_cond|$8;
  var $_=($or_cond7&1);
  return $_;
 }
}
function _FLAC__format_seektable_is_legal($seek_table){
 var label=0;
 var $1=(($seek_table)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if ($3) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $4=(($seek_table+4)|0);
 var $i_09=0;var $prev_sample_number_010$1=0;var $prev_sample_number_010$0=0;var $got_prev_011=1;
 while(1) {
  var $got_prev_011;
  var $prev_sample_number_010$0;
  var $prev_sample_number_010$1;
  var $i_09;
  var $_pre=HEAP32[(($4)>>2)];
  var $_phi_trans_insert=(($_pre+((($i_09)*(24))&-1))|0);
  var $ld$0$0=(($_phi_trans_insert)|0);
  var $_pre14$0=HEAP32[(($ld$0$0)>>2)];
  var $ld$1$1=(($_phi_trans_insert+4)|0);
  var $_pre14$1=HEAP32[(($ld$1$1)>>2)];
  if (!($got_prev_011)) {
   var $$etemp$2$0=-1;
   var $$etemp$2$1=-1;
   var $7=(($_pre14$0|0) == ($$etemp$2$0|0)) & (($_pre14$1|0) == ($$etemp$2$1|0));
   var $8=(($_pre14$1>>>0) > ($prev_sample_number_010$1>>>0)) | (((($_pre14$1>>>0) == ($prev_sample_number_010$1>>>0) & ($_pre14$0>>>0) >  ($prev_sample_number_010$0>>>0))));
   var $or_cond=$7|$8;
   if (!($or_cond)) {
    var $_0=0;
    label = 698;
    break;
   }
  }
  var $9=((($i_09)+(1))|0);
  var $10=($9>>>0)<($2>>>0);
  if ($10) {
   var $i_09=$9;var $prev_sample_number_010$1=$_pre14$1;var $prev_sample_number_010$0=$_pre14$0;var $got_prev_011=0;
  } else {
   var $_0=1;
   label = 696;
   break;
  }
 }
 if (label == 698) {
  var $_0;
  return $_0;
 }
 else if (label == 696) {
  var $_0;
  return $_0;
 }
}
function _FLAC__format_seektable_sort($seek_table){
 var label=0;
 var $1=(($seek_table+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=(($seek_table)|0);
 var $5=HEAP32[(($4)>>2)];
 _qsort($3,$5,24,(8));
 var $6=HEAP32[(($4)>>2)];
 var $7=($6|0)==0;
 if ($7) {
  var $j_0_lcssa32=0;
  var $j_0_lcssa32;
  return $j_0_lcssa32;
 } else {
  var $i_025=0;var $j_026=0;var $first_027=0;var $9=$6;
 }
 while(1) {
  var $9;
  var $first_027;
  var $j_026;
  var $i_025;
  var $10=HEAP32[(($1)>>2)];
  var $11=(($10+((($i_025)*(24))&-1))|0);
  var $ld$0$0=(($11)|0);
  var $12$0=HEAP32[(($ld$0$0)>>2)];
  var $ld$1$1=(($11+4)|0);
  var $12$1=HEAP32[(($ld$1$1)>>2)];
  var $$etemp$2$0=-1;
  var $$etemp$2$1=-1;
  var $13=(($12$0|0) != ($$etemp$2$0|0)) | (($12$1|0) != ($$etemp$2$1|0));
  var $or_cond=$13&$first_027;
  if ($or_cond) {
   var $15=((($j_026)-(1))|0);
   var $16=(($10+((($15)*(24))&-1))|0);
   var $ld$3$0=(($16)|0);
   var $17$0=HEAP32[(($ld$3$0)>>2)];
   var $ld$4$1=(($16+4)|0);
   var $17$1=HEAP32[(($ld$4$1)>>2)];
   var $18=(($12$0|0) == ($17$0|0)) & (($12$1|0) == ($17$1|0));
   if ($18) {
    var $j_1=$j_026;var $26=$9;
   } else {
    label = 703;
   }
  } else {
   label = 703;
  }
  if (label == 703) {
   label = 0;
   var $20=((($j_026)+(1))|0);
   var $21=(($10+((($j_026)*(24))&-1))|0);
   var $22=(($10+((($i_025)*(24))&-1))|0);
   var $23=$21;
   var $24=$22;
   HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];HEAP32[((($23)+(12))>>2)]=HEAP32[((($24)+(12))>>2)];HEAP32[((($23)+(16))>>2)]=HEAP32[((($24)+(16))>>2)];HEAP32[((($23)+(20))>>2)]=HEAP32[((($24)+(20))>>2)];
   var $_pre=HEAP32[(($4)>>2)];
   var $j_1=$20;var $26=$_pre;
  }
  var $26;
  var $j_1;
  var $27=((($i_025)+(1))|0);
  var $28=($27>>>0)<($26>>>0);
  if ($28) {
   var $i_025=$27;var $j_026=$j_1;var $first_027=1;var $9=$26;
  } else {
   break;
  }
 }
 var $8=($j_1>>>0)<($26>>>0);
 if ($8) {
  var $i_124=$j_1;
 } else {
  var $j_0_lcssa32=$j_1;
  var $j_0_lcssa32;
  return $j_0_lcssa32;
 }
 while(1) {
  var $i_124;
  var $29=HEAP32[(($1)>>2)];
  var $30=(($29+((($i_124)*(24))&-1))|0);
  var $$etemp$5$0=-1;
  var $$etemp$5$1=-1;
  var $st$6$0=(($30)|0);
  HEAP32[(($st$6$0)>>2)]=$$etemp$5$0;
  var $st$7$1=(($30+4)|0);
  HEAP32[(($st$7$1)>>2)]=$$etemp$5$1;
  var $31=HEAP32[(($1)>>2)];
  var $32=(($31+((($i_124)*(24))&-1)+8)|0);
  var $$etemp$8$0=0;
  var $$etemp$8$1=0;
  var $st$9$0=(($32)|0);
  HEAP32[(($st$9$0)>>2)]=$$etemp$8$0;
  var $st$10$1=(($32+4)|0);
  HEAP32[(($st$10$1)>>2)]=$$etemp$8$1;
  var $33=HEAP32[(($1)>>2)];
  var $34=(($33+((($i_124)*(24))&-1)+16)|0);
  HEAP32[(($34)>>2)]=0;
  var $35=((($i_124)+(1))|0);
  var $36=HEAP32[(($4)>>2)];
  var $37=($35>>>0)<($36>>>0);
  if ($37) {
   var $i_124=$35;
  } else {
   var $j_0_lcssa32=$j_1;
   break;
  }
 }
 var $j_0_lcssa32;
 return $j_0_lcssa32;
}
function _seekpoint_compare_($l,$r){
 var label=0;
 var $1=(($l)|0);
 var $ld$0$0=(($1)|0);
 var $2$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $2$1=HEAP32[(($ld$1$1)>>2)];
 var $3=(($r)|0);
 var $ld$2$0=(($3)|0);
 var $4$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $4$1=HEAP32[(($ld$3$1)>>2)];
 var $5=(($2$0|0) == ($4$0|0)) & (($2$1|0) == ($4$1|0));
 if ($5) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2$1>>>0) < ($4$1>>>0)) | (((($2$1>>>0) == ($4$1>>>0) & ($2$0>>>0) <  ($4$0>>>0))));
 var $_=$7?-1:1;
 var $_0=$_;
 var $_0;
 return $_0;
}
function _FLAC__format_vorbiscomment_entry_name_is_legal($name){
 var label=0;
 var $c_08=HEAP8[($name)];
 var $1=(($c_08<<24)>>24)==0;
 L948: do {
  if ($1) {
   var $_06=1;
  } else {
   var $_09=$name;var $c_010=$c_08;
   while(1) {
    var $c_010;
    var $_09;
    var $2=(($c_010<<24)>>24)<32;
    if ($2) {
     var $_06=0;
     break L948;
    }
    if ((($c_010<<24)>>24)==127|(($c_010<<24)>>24)==126|(($c_010<<24)>>24)==61) {
     var $_06=0;
     break L948;
    }
    var $4=(($_09+1)|0);
    var $c_0=HEAP8[($4)];
    var $5=(($c_0<<24)>>24)==0;
    if ($5) {
     var $_06=1;
     break;
    } else {
     var $_09=$4;var $c_010=$c_0;
    }
   }
  }
 } while(0);
 var $_06;
 return $_06;
}
function _FLAC__format_vorbiscomment_entry_value_is_legal($value,$length){
 var label=0;
 var $1=($length|0)==-1;
 L955: do {
  if ($1) {
   var $2=HEAP8[($value)];
   var $3=(($2<<24)>>24)==0;
   if ($3) {
    break;
   } else {
    var $_01315=$value;
   }
   while(1) {
    var $_01315;
    var $4=_utf8len_($_01315);
    var $5=($4|0)==0;
    if ($5) {
     var $_0=0;
     break;
    }
    var $7=(($_01315+$4)|0);
    var $8=HEAP8[($7)];
    var $9=(($8<<24)>>24)==0;
    if ($9) {
     break L955;
    } else {
     var $_01315=$7;
    }
   }
   var $_0;
   return $_0;
  } else {
   var $11=(($value+$length)|0);
   var $12=($length|0)>0;
   L962: do {
    if ($12) {
     var $_118=$value;
     while(1) {
      var $_118;
      var $13=_utf8len_($_118);
      var $14=($13|0)==0;
      if ($14) {
       var $_0=0;
       break;
      }
      var $16=(($_118+$13)|0);
      var $17=($16>>>0)<($11>>>0);
      if ($17) {
       var $_118=$16;
      } else {
       var $_1_lcssa=$16;
       break L962;
      }
     }
     var $_0;
     return $_0;
    } else {
     var $_1_lcssa=$value;
    }
   } while(0);
   var $_1_lcssa;
   var $18=($_1_lcssa|0)==($11|0);
   if ($18) {
    break;
   } else {
    var $_0=0;
   }
   var $_0;
   return $_0;
  }
 } while(0);
 var $_0=1;
 var $_0;
 return $_0;
}
function _utf8len_($utf8){
 var label=0;
 var $1=HEAP8[($utf8)];
 var $2=($1&255);
 var $3=$2&128;
 var $4=($3|0)==0;
 if ($4) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $6=$2&224;
 var $7=($6|0)==192;
 do {
  if ($7) {
   var $9=(($utf8+1)|0);
   var $10=HEAP8[($9)];
   var $11=$10&-64;
   var $12=(($11<<24)>>24)==-128;
   if (!($12)) {
    break;
   }
   var $14=$2&254;
   var $15=($14|0)==192;
   var $_=$15?0:2;
   var $_0=$_;
   var $_0;
   return $_0;
  }
 } while(0);
 var $17=$1&-16;
 var $18=(($17<<24)>>24)==-32;
 do {
  if ($18) {
   var $20=(($utf8+1)|0);
   var $21=HEAP8[($20)];
   var $22=($21&255);
   var $23=$22&192;
   var $24=($23|0)==128;
   if (!($24)) {
    break;
   }
   var $26=(($utf8+2)|0);
   var $27=HEAP8[($26)];
   var $28=$27&-64;
   var $29=(($28<<24)>>24)==-128;
   if (!($29)) {
    break;
   }
   do {
    if ((($1<<24)>>24)==-32) {
     var $32=$22&224;
     var $33=($32|0)==128;
     if ($33) {
      var $_0=0;
     } else {
      break;
     }
     var $_0;
     return $_0;
    } else if ((($1<<24)>>24)==-19) {
     var $35=$21&-32;
     var $36=(($35<<24)>>24)==-96;
     if ($36) {
      var $_0=0;
     } else {
      break;
     }
     var $_0;
     return $_0;
    } else if ((($1<<24)>>24)==-17) {
     var $38=(($21<<24)>>24)==-65;
     if (!($38)) {
      break;
     }
     var $40=$27&-2;
     var $41=(($40<<24)>>24)==-66;
     if ($41) {
      var $_0=0;
     } else {
      break;
     }
     var $_0;
     return $_0;
    }
   } while(0);
   var $_0=3;
   var $_0;
   return $_0;
  }
 } while(0);
 var $42=$1&-8;
 var $43=(($42<<24)>>24)==-16;
 do {
  if ($43) {
   var $45=(($utf8+1)|0);
   var $46=HEAP8[($45)];
   var $47=($46&255);
   var $48=$47&192;
   var $49=($48|0)==128;
   if (!($49)) {
    break;
   }
   var $51=(($utf8+2)|0);
   var $52=HEAP8[($51)];
   var $53=$52&-64;
   var $54=(($53<<24)>>24)==-128;
   if (!($54)) {
    break;
   }
   var $56=(($utf8+3)|0);
   var $57=HEAP8[($56)];
   var $58=$57&-64;
   var $59=(($58<<24)>>24)==-128;
   if (!($59)) {
    break;
   }
   var $61=(($1<<24)>>24)==-16;
   do {
    if ($61) {
     var $63=$47&240;
     var $64=($63|0)==128;
     if ($64) {
      var $_0=0;
     } else {
      break;
     }
     var $_0;
     return $_0;
    }
   } while(0);
   var $_0=4;
   var $_0;
   return $_0;
  }
 } while(0);
 var $67=$1&-4;
 var $68=(($67<<24)>>24)==-8;
 do {
  if ($68) {
   var $70=(($utf8+1)|0);
   var $71=HEAP8[($70)];
   var $72=($71&255);
   var $73=$72&192;
   var $74=($73|0)==128;
   if (!($74)) {
    break;
   }
   var $76=(($utf8+2)|0);
   var $77=HEAP8[($76)];
   var $78=$77&-64;
   var $79=(($78<<24)>>24)==-128;
   if (!($79)) {
    break;
   }
   var $81=(($utf8+3)|0);
   var $82=HEAP8[($81)];
   var $83=$82&-64;
   var $84=(($83<<24)>>24)==-128;
   if (!($84)) {
    break;
   }
   var $86=(($utf8+4)|0);
   var $87=HEAP8[($86)];
   var $88=$87&-64;
   var $89=(($88<<24)>>24)==-128;
   if (!($89)) {
    break;
   }
   var $91=(($1<<24)>>24)==-8;
   do {
    if ($91) {
     var $93=$72&248;
     var $94=($93|0)==128;
     if ($94) {
      var $_0=0;
     } else {
      break;
     }
     var $_0;
     return $_0;
    }
   } while(0);
   var $_0=5;
   var $_0;
   return $_0;
  }
 } while(0);
 var $96=$1&-2;
 var $97=(($96<<24)>>24)==-4;
 if (!($97)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $99=(($utf8+1)|0);
 var $100=HEAP8[($99)];
 var $101=($100&255);
 var $102=$101&192;
 var $103=($102|0)==128;
 if (!($103)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $105=(($utf8+2)|0);
 var $106=HEAP8[($105)];
 var $107=$106&-64;
 var $108=(($107<<24)>>24)==-128;
 if (!($108)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $110=(($utf8+3)|0);
 var $111=HEAP8[($110)];
 var $112=$111&-64;
 var $113=(($112<<24)>>24)==-128;
 if (!($113)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $115=(($utf8+4)|0);
 var $116=HEAP8[($115)];
 var $117=$116&-64;
 var $118=(($117<<24)>>24)==-128;
 if (!($118)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $120=(($utf8+5)|0);
 var $121=HEAP8[($120)];
 var $122=$121&-64;
 var $123=(($122<<24)>>24)==-128;
 if (!($123)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $125=(($1<<24)>>24)==-4;
 do {
  if ($125) {
   var $127=$101&252;
   var $128=($127|0)==128;
   if ($128) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   return $_0;
  }
 } while(0);
 var $_0=6;
 var $_0;
 return $_0;
}
function _FLAC__format_vorbiscomment_entry_is_legal($entry,$length){
 var label=0;
 var $1=(($entry+$length)|0);
 var $s_0=$entry;
 while(1) {
  var $s_0;
  var $3=($s_0>>>0)<($1>>>0);
  if (!($3)) {
   break;
  }
  var $5=HEAP8[($s_0)];
  var $6=(($5<<24)>>24)==61;
  if ($6) {
   break;
  }
  var $_off=((($5)-(32))&255);
  var $8=($_off&255)>93;
  var $9=(($s_0+1)|0);
  if ($8) {
   var $_0=0;
   label = 801;
   break;
  } else {
   var $s_0=$9;
  }
 }
 if (label == 801) {
  var $_0;
  return $_0;
 }
 var $10=($s_0|0)==($1|0);
 if ($10) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $12=(($s_0+1)|0);
 var $13=($12>>>0)<($1>>>0);
 L1052: do {
  if ($13) {
   var $s_117=$12;
   while(1) {
    var $s_117;
    var $14=_utf8len_($s_117);
    var $15=($14|0)==0;
    if ($15) {
     var $_0=0;
     break;
    }
    var $17=(($s_117+$14)|0);
    var $18=($17>>>0)<($1>>>0);
    if ($18) {
     var $s_117=$17;
    } else {
     var $s_1_lcssa=$17;
     break L1052;
    }
   }
   var $_0;
   return $_0;
  } else {
   var $s_1_lcssa=$12;
  }
 } while(0);
 var $s_1_lcssa;
 var $19=($s_1_lcssa|0)==($1|0);
 var $_=($19&1);
 var $_0=$_;
 var $_0;
 return $_0;
}
function _FLAC__format_cuesheet_is_legal($cue_sheet,$check_cd_da_subset,$violation){
 var label=0;
 var $1=($check_cd_da_subset|0)!=0;
 do {
  if ($1) {
   var $3=(($cue_sheet+136)|0);
   var $ld$0$0=(($3)|0);
   var $4$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($3+4)|0);
   var $4$1=HEAP32[(($ld$1$1)>>2)];
   var $$etemp$2$0=88200;
   var $$etemp$2$1=0;
   var $5=(($4$1>>>0) < ($$etemp$2$1>>>0)) | (((($4$1>>>0) == ($$etemp$2$1>>>0) & ($4$0>>>0) <  ($$etemp$2$0>>>0))));
   if ($5) {
    var $7=($violation|0)==0;
    if ($7) {
     var $_0=0;
     var $_0;
     return $_0;
    }
    HEAP32[(($violation)>>2)]=2472;
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $$etemp$3$0=588;
   var $$etemp$3$1=0;
   var $10$0=___uremdi3($4$0,$4$1,$$etemp$3$0,$$etemp$3$1);var $10$1=tempRet0;
   var $$etemp$4$0=0;
   var $$etemp$4$1=0;
   var $11=(($10$0|0) == ($$etemp$4$0|0)) & (($10$1|0) == ($$etemp$4$1|0));
   if ($11) {
    break;
   }
   var $13=($violation|0)==0;
   if ($13) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   HEAP32[(($violation)>>2)]=2392;
   var $_0=0;
   var $_0;
   return $_0;
  }
 } while(0);
 var $16=(($cue_sheet+148)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==0;
 if ($18) {
  var $20=($violation|0)==0;
  if ($20) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  HEAP32[(($violation)>>2)]=2328;
  var $_0=0;
  var $_0;
  return $_0;
 }
 do {
  if ($1) {
   var $26=((($17)-(1))|0);
   var $27=(($cue_sheet+152)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+($26<<5)+8)|0);
   var $30=HEAP8[($29)];
   var $31=(($30<<24)>>24)==-86;
   if ($31) {
    break;
   }
   var $33=($violation|0)==0;
   if ($33) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   HEAP32[(($violation)>>2)]=2248;
   var $_0=0;
   var $_0;
   return $_0;
  }
 } while(0);
 var $23=(($cue_sheet+152)|0);
 var $24=HEAP32[(($23)>>2)];
 var $i_079=0;
 L1090: while(1) {
  var $i_079;
  var $36=(($24+($i_079<<5)+8)|0);
  var $37=HEAP8[($36)];
  var $38=(($37<<24)>>24)==0;
  if ($38) {
   label = 820;
   break;
  }
  if ($1) {
   var $44=($37&255)<100;
   var $45=(($37<<24)>>24)==-86;
   var $or_cond66=$44|$45;
   if (!($or_cond66)) {
    label = 824;
    break;
   }
   var $50=(($24+($i_079<<5))|0);
   var $ld$5$0=(($50)|0);
   var $51$0=HEAP32[(($ld$5$0)>>2)];
   var $ld$6$1=(($50+4)|0);
   var $51$1=HEAP32[(($ld$6$1)>>2)];
   var $$etemp$7$0=588;
   var $$etemp$7$1=0;
   var $52$0=___uremdi3($51$0,$51$1,$$etemp$7$0,$$etemp$7$1);var $52$1=tempRet0;
   var $$etemp$8$0=0;
   var $$etemp$8$1=0;
   var $53=(($52$0|0) == ($$etemp$8$0|0)) & (($52$1|0) == ($$etemp$8$1|0));
   if (!($53)) {
    label = 827;
    break;
   }
  }
  var $61=((($17)-(1))|0);
  var $62=($i_079>>>0)<($61>>>0);
  var $63=(($24+($i_079<<5)+23)|0);
  var $64=HEAP8[($63)];
  if ($62) {
   var $91=(($64<<24)>>24)==0;
   if ($91) {
    label = 839;
    break;
   }
   var $96=(($24+($i_079<<5)+24)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97+8)|0);
   var $99=HEAP8[($98)];
   var $100=($99&255)>1;
   if ($100) {
    label = 842;
    break;
   }
  }
  var $65=(($64<<24)>>24)==0;
  L1101: do {
   if (!($65)) {
    if ($1) {
     var $j_067_us=0;
    } else {
     var $j_067=0;
     while(1) {
      var $j_067;
      var $107=($j_067|0)==0;
      if (!($107)) {
       var $109=(($24+($i_079<<5)+24)|0);
       var $110=HEAP32[(($109)>>2)];
       var $111=(($110+($j_067<<4)+8)|0);
       var $112=HEAP8[($111)];
       var $113=($112&255);
       var $114=((($j_067)-(1))|0);
       var $115=(($110+($114<<4)+8)|0);
       var $116=HEAP8[($115)];
       var $117=($116&255);
       var $118=((($117)+(1))|0);
       var $119=($113|0)==($118|0);
       if (!($119)) {
        label = 848;
        break L1090;
       }
      }
      var $122=((($j_067)+(1))|0);
      var $123=(($24+($i_079<<5)+23)|0);
      var $124=HEAP8[($123)];
      var $125=($124&255);
      var $126=($122>>>0)<($125>>>0);
      if ($126) {
       var $j_067=$122;
      } else {
       break L1101;
      }
     }
    }
    while(1) {
     var $j_067_us;
     var $66=(($24+($i_079<<5)+24)|0);
     var $67=HEAP32[(($66)>>2)];
     var $68=(($67+($j_067_us<<4))|0);
     var $ld$9$0=(($68)|0);
     var $69$0=HEAP32[(($ld$9$0)>>2)];
     var $ld$10$1=(($68+4)|0);
     var $69$1=HEAP32[(($ld$10$1)>>2)];
     var $$etemp$11$0=588;
     var $$etemp$11$1=0;
     var $70$0=___uremdi3($69$0,$69$1,$$etemp$11$0,$$etemp$11$1);var $70$1=tempRet0;
     var $$etemp$12$0=0;
     var $$etemp$12$1=0;
     var $71=(($70$0|0) == ($$etemp$12$0|0)) & (($70$1|0) == ($$etemp$12$1|0));
     if (!($71)) {
      label = 844;
      break L1090;
     }
     var $73=($j_067_us|0)==0;
     if (!($73)) {
      var $75=(($24+($i_079<<5)+24)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+($j_067_us<<4)+8)|0);
      var $78=HEAP8[($77)];
      var $79=($78&255);
      var $80=((($j_067_us)-(1))|0);
      var $81=(($76+($80<<4)+8)|0);
      var $82=HEAP8[($81)];
      var $83=($82&255);
      var $84=((($83)+(1))|0);
      var $85=($79|0)==($84|0);
      if (!($85)) {
       label = 848;
       break L1090;
      }
     }
     var $87=((($j_067_us)+(1))|0);
     var $88=($64&255);
     var $89=($87>>>0)<($88>>>0);
     if ($89) {
      var $j_067_us=$87;
     } else {
      break;
     }
    }
   }
  } while(0);
  var $127=((($i_079)+(1))|0);
  var $128=($127>>>0)<($17>>>0);
  if ($128) {
   var $i_079=$127;
  } else {
   var $_0=1;
   label = 858;
   break;
  }
 }
 if (label == 839) {
  var $93=($violation|0)==0;
  if ($93) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  HEAP32[(($violation)>>2)]=1824;
  var $_0=0;
  var $_0;
  return $_0;
 }
 else if (label == 820) {
  var $40=($violation|0)==0;
  if ($40) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  HEAP32[(($violation)>>2)]=2200;
  var $_0=0;
  var $_0;
  return $_0;
 }
 else if (label == 844) {
  var $104=($violation|0)==0;
  if ($104) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  HEAP32[(($violation)>>2)]=1592;
  var $_0=0;
  var $_0;
  return $_0;
 }
 else if (label == 827) {
  var $55=($violation|0)==0;
  if ($55) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $57=((($17)-(1))|0);
  var $58=($i_079|0)==($57|0);
  if ($58) {
   HEAP32[(($violation)>>2)]=1984;
   var $_0=0;
   var $_0;
   return $_0;
  } else {
   HEAP32[(($violation)>>2)]=1904;
   var $_0=0;
   var $_0;
   return $_0;
  }
 }
 else if (label == 824) {
  var $47=($violation|0)==0;
  if ($47) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  HEAP32[(($violation)>>2)]=2072;
  var $_0=0;
  var $_0;
  return $_0;
 }
 else if (label == 842) {
  var $102=($violation|0)==0;
  if ($102) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  HEAP32[(($violation)>>2)]=1760;
  var $_0=0;
  var $_0;
  return $_0;
 }
 else if (label == 848) {
  var $120=($violation|0)==0;
  if ($120) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  HEAP32[(($violation)>>2)]=1512;
  var $_0=0;
  var $_0;
  return $_0;
 }
 else if (label == 858) {
  var $_0;
  return $_0;
 }
}
function _FLAC__format_picture_is_legal($picture,$violation){
 var label=0;
 var $1=(($picture+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $p_0=$2;
 while(1) {
  var $p_0;
  var $4=HEAP8[($p_0)];
  var $5=(($4<<24)>>24)==0;
  if ($5) {
   break;
  }
  var $7=(($4<<24)>>24)<32;
  var $8=(($4<<24)>>24)==127;
  var $or_cond=$7|$8;
  var $9=(($p_0+1)|0);
  if ($or_cond) {
   label = 880;
   break;
  } else {
   var $p_0=$9;
  }
 }
 if (label == 880) {
  var $11=($violation|0)==0;
  if ($11) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  HEAP32[(($violation)>>2)]=1432;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $14=(($picture+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[($15)];
 var $17=(($16<<24)>>24)==0;
 if ($17) {
  var $_0=1;
  var $_0;
  return $_0;
 } else {
  var $b_013=$15;
 }
 while(1) {
  var $b_013;
  var $18=_utf8len_($b_013);
  var $19=($18|0)==0;
  if ($19) {
   break;
  }
  var $24=(($b_013+$18)|0);
  var $25=HEAP8[($24)];
  var $26=(($25<<24)>>24)==0;
  if ($26) {
   var $_0=1;
   label = 891;
   break;
  } else {
   var $b_013=$24;
  }
 }
 if (label == 891) {
  var $_0;
  return $_0;
 }
 var $21=($violation|0)==0;
 if ($21) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 HEAP32[(($violation)>>2)]=1392;
 var $_0=0;
 var $_0;
 return $_0;
}
function _FLAC__format_get_max_rice_partition_order($blocksize,$predictor_order){
 var label=0;
 var $1=$blocksize&1;
 var $2=($1|0)==0;
 if ($2) {
  var $_03_i=$blocksize;var $max_rice_partition_order_04_i=0;
  while(1) {
   var $max_rice_partition_order_04_i;
   var $_03_i;
   var $3=((($max_rice_partition_order_04_i)+(1))|0);
   var $4=$_03_i>>>1;
   var $5=$4&1;
   var $6=($5|0)==0;
   if ($6) {
    var $_03_i=$4;var $max_rice_partition_order_04_i=$3;
   } else {
    var $max_rice_partition_order_0_lcssa_i=$3;
    break;
   }
  }
 } else {
  var $max_rice_partition_order_0_lcssa_i=0;
 }
 var $max_rice_partition_order_0_lcssa_i;
 var $7=($max_rice_partition_order_0_lcssa_i>>>0)>15;
 var $8=$7?15:$max_rice_partition_order_0_lcssa_i;
 var $max_rice_partition_order_0_i=$8;
 while(1) {
  var $max_rice_partition_order_0_i;
  var $10=($max_rice_partition_order_0_i|0)==0;
  if ($10) {
   var $max_rice_partition_order_0_lcssa_i3=0;
   label = 900;
   break;
  }
  var $12=$blocksize>>>($max_rice_partition_order_0_i>>>0);
  var $13=($12>>>0)>($predictor_order>>>0);
  var $14=((($max_rice_partition_order_0_i)-(1))|0);
  if ($13) {
   var $max_rice_partition_order_0_lcssa_i3=$max_rice_partition_order_0_i;
   label = 901;
   break;
  } else {
   var $max_rice_partition_order_0_i=$14;
  }
 }
 if (label == 901) {
  var $max_rice_partition_order_0_lcssa_i3;
  return $max_rice_partition_order_0_lcssa_i3;
 }
 else if (label == 900) {
  var $max_rice_partition_order_0_lcssa_i3;
  return $max_rice_partition_order_0_lcssa_i3;
 }
}
function _FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($limit,$blocksize,$predictor_order){
 var label=0;
 var $max_rice_partition_order_0=$limit;
 while(1) {
  var $max_rice_partition_order_0;
  var $2=($max_rice_partition_order_0|0)==0;
  if ($2) {
   var $max_rice_partition_order_0_lcssa=0;
   break;
  }
  var $4=$blocksize>>>($max_rice_partition_order_0>>>0);
  var $5=($4>>>0)>($predictor_order>>>0);
  var $6=((($max_rice_partition_order_0)-(1))|0);
  if ($5) {
   var $max_rice_partition_order_0_lcssa=$max_rice_partition_order_0;
   break;
  } else {
   var $max_rice_partition_order_0=$6;
  }
 }
 var $max_rice_partition_order_0_lcssa;
 return $max_rice_partition_order_0_lcssa;
}
function _FLAC__format_get_max_rice_partition_order_from_blocksize($blocksize){
 var label=0;
 var $1=$blocksize&1;
 var $2=($1|0)==0;
 if ($2) {
  var $_03=$blocksize;var $max_rice_partition_order_04=0;
  while(1) {
   var $max_rice_partition_order_04;
   var $_03;
   var $3=((($max_rice_partition_order_04)+(1))|0);
   var $4=$_03>>>1;
   var $5=$4&1;
   var $6=($5|0)==0;
   if ($6) {
    var $_03=$4;var $max_rice_partition_order_04=$3;
   } else {
    var $max_rice_partition_order_0_lcssa=$3;
    break;
   }
  }
 } else {
  var $max_rice_partition_order_0_lcssa=0;
 }
 var $max_rice_partition_order_0_lcssa;
 var $7=($max_rice_partition_order_0_lcssa>>>0)>15;
 var $8=$7?15:$max_rice_partition_order_0_lcssa;
 return $8;
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($object){
 var label=0;
 var $1=(($object)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($object+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($object+8)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($object){
 var label=0;
 var $1=(($object)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $5=$2;
  _free($5);
 }
 var $7=(($object+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if (!($9)) {
  var $11=$8;
  _free($11);
 }
 HEAP32[(($1)>>2)]=0;
 HEAP32[(($7)>>2)]=0;
 var $13=(($object+8)|0);
 HEAP32[(($13)>>2)]=0;
 return;
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($object,$max_partition_order){
 var label=0;
 var $1=(($object+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2>>>0)<($max_partition_order>>>0);
 if (!($3)) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $5=(($object)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=4<<$max_partition_order;
 var $9=_realloc($7,$8);
 var $10=$9;
 HEAP32[(($5)>>2)]=$10;
 var $11=($9|0)==0;
 if ($11) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $13=(($object+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=_realloc($15,$8);
 var $17=$16;
 HEAP32[(($13)>>2)]=$17;
 var $18=($16|0)==0;
 if ($18) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 _memset($16, 0, $8);
 HEAP32[(($1)>>2)]=$max_partition_order;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__lpc_window_data($in,$window,$out,$data_len){
 var label=0;
 var $1=($data_len|0)==0;
 if ($1) {
  return;
 } else {
  var $i_08=0;
 }
 while(1) {
  var $i_08;
  var $2=(($in+($i_08<<2))|0);
  var $3=HEAP32[(($2)>>2)];
  var $4=($3|0);
  var $5=(($window+($i_08<<2))|0);
  var $6=HEAPF32[(($5)>>2)];
  var $7=($4)*($6);
  var $8=(($out+($i_08<<2))|0);
  HEAPF32[(($8)>>2)]=$7;
  var $9=((($i_08)+(1))|0);
  var $10=($9>>>0)<($data_len>>>0);
  if ($10) {
   var $i_08=$9;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__lpc_compute_autocorrelation($data,$data_len,$lag,$autoc){
 var label=0;
 var $1=((($data_len)-($lag))|0);
 var $2=($lag|0)==0;
 if ($2) {
  var $sample_042=0;
  while(1) {
   var $sample_042;
   var $21=((($sample_042)+(1))|0);
   var $22=($21>>>0)>($1>>>0);
   if ($22) {
    var $sample_0_lcssa=$21;
    break;
   } else {
    var $sample_042=$21;
   }
  }
 } else {
  var $autoc47=$autoc;
  var $3=$lag<<2;
  _memset($autoc47, 0, $3);
  var $sample_042_us=0;
  while(1) {
   var $sample_042_us;
   var $17=(($data+($sample_042_us<<2))|0);
   var $18=HEAPF32[(($17)>>2)];
   var $coeff_137_us=0;
   while(1) {
    var $coeff_137_us;
    var $8=((($coeff_137_us)+($sample_042_us))|0);
    var $9=(($data+($8<<2))|0);
    var $10=HEAPF32[(($9)>>2)];
    var $11=($18)*($10);
    var $12=(($autoc+($coeff_137_us<<2))|0);
    var $13=HEAPF32[(($12)>>2)];
    var $14=($13)+($11);
    HEAPF32[(($12)>>2)]=$14;
    var $15=((($coeff_137_us)+(1))|0);
    var $16=($15>>>0)<($lag>>>0);
    if ($16) {
     var $coeff_137_us=$15;
    } else {
     break;
    }
   }
   var $5=((($sample_042_us)+(1))|0);
   var $6=($5>>>0)>($1>>>0);
   if ($6) {
    var $sample_0_lcssa=$5;
    break;
   } else {
    var $sample_042_us=$5;
   }
  }
 }
 var $sample_0_lcssa;
 var $19=($sample_0_lcssa>>>0)<($data_len>>>0);
 if ($19) {
  var $sample_133=$sample_0_lcssa;
 } else {
  return;
 }
 while(1) {
  var $sample_133;
  var $23=(($data+($sample_133<<2))|0);
  var $24=HEAPF32[(($23)>>2)];
  var $25=((($data_len)-($sample_133))|0);
  var $coeff_232=0;
  while(1) {
   var $coeff_232;
   var $27=((($coeff_232)+($sample_133))|0);
   var $28=(($data+($27<<2))|0);
   var $29=HEAPF32[(($28)>>2)];
   var $30=($24)*($29);
   var $31=(($autoc+($coeff_232<<2))|0);
   var $32=HEAPF32[(($31)>>2)];
   var $33=($32)+($30);
   HEAPF32[(($31)>>2)]=$33;
   var $34=((($coeff_232)+(1))|0);
   var $35=($34>>>0)<($25>>>0);
   if ($35) {
    var $coeff_232=$34;
   } else {
    break;
   }
  }
  var $36=((($sample_133)+(1))|0);
  var $37=($36>>>0)<($data_len>>>0);
  if ($37) {
   var $sample_133=$36;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__lpc_compute_lp_coefficients($autoc,$max_order,$lp_coeff,$error){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0;
 var $lpc=sp;
 var $1=HEAPF32[(($autoc)>>2)];
 var $2=$1;
 var $err_0=$2;var $indvars_iv=0;
 while(1) {
  var $indvars_iv;
  var $err_0;
  var $4=$indvars_iv>>>1;
  var $5=HEAP32[(($max_order)>>2)];
  var $6=($indvars_iv>>>0)<($5>>>0);
  if (!($6)) {
   label = 956;
   break;
  }
  var $indvars_iv_next=((($indvars_iv)+(1))|0);
  var $8=(($autoc+($indvars_iv_next<<2))|0);
  var $9=HEAPF32[(($8)>>2)];
  var $10=((-.0))-($9);
  var $11=$10;
  var $12=($indvars_iv|0)==0;
  if ($12) {
   var $r_0_lcssa=$11;
  } else {
   var $j_044=0;var $r_045=$11;
   while(1) {
    var $r_045;
    var $j_044;
    var $13=(($lpc+($j_044<<3))|0);
    var $14=HEAPF64[(($13)>>3)];
    var $15=((($indvars_iv)-($j_044))|0);
    var $16=(($autoc+($15<<2))|0);
    var $17=HEAPF32[(($16)>>2)];
    var $18=$17;
    var $19=($14)*($18);
    var $20=($r_045)-($19);
    var $21=((($j_044)+(1))|0);
    var $22=($21>>>0)<($indvars_iv>>>0);
    if ($22) {
     var $j_044=$21;var $r_045=$20;
    } else {
     var $r_0_lcssa=$20;
     break;
    }
   }
  }
  var $r_0_lcssa;
  var $23=($r_0_lcssa)/($err_0);
  var $24=(($lpc+($indvars_iv<<3))|0);
  HEAPF64[(($24)>>3)]=$23;
  var $25=($4|0)==0;
  if ($25) {
   var $j_1_lcssa=0;
  } else {
   var $26=((($indvars_iv)-(1))|0);
   var $j_146=0;
   while(1) {
    var $j_146;
    var $28=(($lpc+($j_146<<3))|0);
    var $29=HEAPF64[(($28)>>3)];
    var $30=((($26)-($j_146))|0);
    var $31=(($lpc+($30<<3))|0);
    var $32=HEAPF64[(($31)>>3)];
    var $33=($23)*($32);
    var $34=($29)+($33);
    HEAPF64[(($28)>>3)]=$34;
    var $35=($23)*($29);
    var $36=HEAPF64[(($31)>>3)];
    var $37=($35)+($36);
    HEAPF64[(($31)>>3)]=$37;
    var $38=((($j_146)+(1))|0);
    var $39=($38>>>0)<($4>>>0);
    if ($39) {
     var $j_146=$38;
    } else {
     var $j_1_lcssa=$4;
     break;
    }
   }
  }
  var $j_1_lcssa;
  var $40=$indvars_iv&1;
  var $41=($40|0)==0;
  if (!($41)) {
   var $43=(($lpc+($j_1_lcssa<<3))|0);
   var $44=HEAPF64[(($43)>>3)];
   var $45=($23)*($44);
   var $46=($44)+($45);
   HEAPF64[(($43)>>3)]=$46;
  }
  var $48=($23)*($23);
  var $49=(1)-($48);
  var $j_251=0;
  while(1) {
   var $j_251;
   var $51=(($lpc+($j_251<<3))|0);
   var $52=HEAPF64[(($51)>>3)];
   var $53=((-.0))-($52);
   var $54=$53;
   var $55=(($lp_coeff+($indvars_iv<<7)+($j_251<<2))|0);
   HEAPF32[(($55)>>2)]=$54;
   var $56=((($j_251)+(1))|0);
   var $57=($56>>>0)>($indvars_iv>>>0);
   if ($57) {
    break;
   } else {
    var $j_251=$56;
   }
  }
  var $59=($err_0)*($49);
  var $60=(($error+($indvars_iv<<3))|0);
  HEAPF64[(($60)>>3)]=$59;
  var $61=$59==0;
  if ($61) {
   break;
  } else {
   var $err_0=$59;var $indvars_iv=$indvars_iv_next;
  }
 }
 if (label == 956) {
  STACKTOP=sp;return;
 }
 HEAP32[(($max_order)>>2)]=$indvars_iv_next;
 STACKTOP=sp;return;
}
function _FLAC__lpc_quantize_coefficients($lp_coeff,$order,$precision,$qlp_coeff,$shift){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $log2cmax=sp;
 var $1=((($precision)-(1))|0);
 var $2=1<<$1;
 var $3=(((-$2))|0);
 var $4=((($2)-(1))|0);
 var $5=($order|0)==0;
 if ($5) {
  var $_0=2;
  var $_0;
  STACKTOP=sp;return $_0;
 } else {
  var $cmax_059=0;var $i_060=0;
 }
 while(1) {
  var $i_060;
  var $cmax_059;
  var $6=(($lp_coeff+($i_060<<2))|0);
  var $7=HEAPF32[(($6)>>2)];
  var $fabsf=Math_abs($7);
  var $8=$fabsf;
  var $9=$8>$cmax_059;
  var $cmax_1=$9?$8:$cmax_059;
  var $10=((($i_060)+(1))|0);
  var $11=($10>>>0)<($order>>>0);
  if ($11) {
   var $cmax_059=$cmax_1;var $i_060=$10;
  } else {
   break;
  }
 }
 var $12=$cmax_1>0;
 if (!($12)) {
  var $_0=2;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $14=HEAP32[((9856)>>2)];
 var $15=((($14)-(1))|0);
 var $16=1<<$15;
 var $17=((($16)-(1))|0);
 var $18=_frexp($cmax_1,$log2cmax);
 var $19=HEAP32[(($log2cmax)>>2)];
 var $20=((($19)-(1))|0);
 HEAP32[(($log2cmax)>>2)]=$20;
 var $21=((($1)-($20))|0);
 var $22=((($21)-(1))|0);
 HEAP32[(($shift)>>2)]=$22;
 var $23=($22|0)>($17|0);
 do {
  if ($23) {
   HEAP32[(($shift)>>2)]=$17;
   var $27=$17;
  } else {
   var $_neg=(((-$16))|0);
   var $26=($22|0)<($_neg|0);
   if ($26) {
    var $_0=1;
   } else {
    var $27=$22;
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $27;
 var $28=($27|0)>-1;
 if ($28) {
  if ($5) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $i_154=0;var $error_055=0;var $29=$27;
  }
  while(1) {
   var $29;
   var $error_055;
   var $i_154;
   var $30=(($lp_coeff+($i_154<<2))|0);
   var $31=HEAPF32[(($30)>>2)];
   var $32=1<<$29;
   var $33=($32|0);
   var $34=($31)*($33);
   var $35=$34;
   var $36=($error_055)+($35);
   var $37=_round($36);
   var $38=($37|0)>($4|0);
   if ($38) {
    var $q_0=$4;
   } else {
    var $40=($37|0)<($3|0);
    var $_=$40?$3:$37;
    var $q_0=$_;
   }
   var $q_0;
   var $42=(($qlp_coeff+($i_154<<2))|0);
   HEAP32[(($42)>>2)]=$q_0;
   var $43=((($i_154)+(1))|0);
   var $44=($43>>>0)<($order>>>0);
   if (!($44)) {
    var $_0=0;
    break;
   }
   var $45=($q_0|0);
   var $46=($36)-($45);
   var $_pre=HEAP32[(($shift)>>2)];
   var $i_154=$43;var $error_055=$46;var $29=$_pre;
  }
  var $_0;
  STACKTOP=sp;return $_0;
 } else {
  if (!($5)) {
   var $48=(((-$27))|0);
   var $49=1<<$48;
   var $50=($49|0);
   var $i_256=0;var $error1_057=0;
   while(1) {
    var $error1_057;
    var $i_256;
    var $52=(($lp_coeff+($i_256<<2))|0);
    var $53=HEAPF32[(($52)>>2)];
    var $54=($53)/($50);
    var $55=$54;
    var $56=($error1_057)+($55);
    var $57=_round($56);
    var $58=($57|0)>($4|0);
    if ($58) {
     var $q2_0=$4;
    } else {
     var $60=($57|0)<($3|0);
     var $_53=$60?$3:$57;
     var $q2_0=$_53;
    }
    var $q2_0;
    var $62=($q2_0|0);
    var $63=($56)-($62);
    var $64=(($qlp_coeff+($i_256<<2))|0);
    HEAP32[(($64)>>2)]=$q2_0;
    var $65=((($i_256)+(1))|0);
    var $66=($65>>>0)<($order>>>0);
    if ($66) {
     var $i_256=$65;var $error1_057=$63;
    } else {
     break;
    }
   }
  }
  HEAP32[(($shift)>>2)]=0;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _FLAC__lpc_compute_residual_from_qlp_coefficients($data,$data_len,$qlp_coeff,$order,$lp_quantization,$residual){
 var label=0;
 var $1=($order>>>0)<13;
 if (!($1)) {
  var $2=($data_len|0)>0;
  if (!($2)) {
   return;
  }
  var $3=(($qlp_coeff+124)|0);
  var $4=(($qlp_coeff+120)|0);
  var $5=(($qlp_coeff+116)|0);
  var $6=(($qlp_coeff+112)|0);
  var $7=(($qlp_coeff+108)|0);
  var $8=(($qlp_coeff+104)|0);
  var $9=(($qlp_coeff+100)|0);
  var $10=(($qlp_coeff+96)|0);
  var $11=(($qlp_coeff+92)|0);
  var $12=(($qlp_coeff+88)|0);
  var $13=(($qlp_coeff+84)|0);
  var $14=(($qlp_coeff+80)|0);
  var $15=(($qlp_coeff+76)|0);
  var $16=(($qlp_coeff+72)|0);
  var $17=(($qlp_coeff+68)|0);
  var $18=(($qlp_coeff+64)|0);
  var $19=(($qlp_coeff+60)|0);
  var $20=(($qlp_coeff+56)|0);
  var $21=(($qlp_coeff+52)|0);
  var $22=(($qlp_coeff+48)|0);
  var $23=(($qlp_coeff+44)|0);
  var $24=(($qlp_coeff+40)|0);
  var $25=(($qlp_coeff+36)|0);
  var $26=(($qlp_coeff+32)|0);
  var $27=(($qlp_coeff+28)|0);
  var $28=(($qlp_coeff+24)|0);
  var $29=(($qlp_coeff+20)|0);
  var $30=(($qlp_coeff+16)|0);
  var $31=(($qlp_coeff+12)|0);
  var $32=(($qlp_coeff+8)|0);
  var $33=(($qlp_coeff+4)|0);
  var $i_12608=0;
  while(1) {
   var $i_12608;
   switch (($order|0)) {
   case 32: {
    var $681=HEAP32[(($3)>>2)];
    var $682=((($i_12608)-(32))|0);
    var $683=(($data+($682<<2))|0);
    var $684=HEAP32[(($683)>>2)];
    var $685=(Math_imul($684,$681)|0);
    var $sum_0=$685;
    label = 1034;
    break;
   }
   case 31: {
    var $sum_0=0;
    label = 1034;
    break;
   }
   case 30: {
    var $sum_1=0;
    label = 1035;
    break;
   }
   case 29: {
    var $sum_2=0;
    label = 1036;
    break;
   }
   case 28: {
    var $sum_3=0;
    label = 1037;
    break;
   }
   case 27: {
    var $sum_4=0;
    label = 1038;
    break;
   }
   case 26: {
    var $sum_5=0;
    label = 1039;
    break;
   }
   case 25: {
    var $sum_6=0;
    label = 1040;
    break;
   }
   case 24: {
    var $sum_7=0;
    label = 1041;
    break;
   }
   case 23: {
    var $sum_8=0;
    label = 1042;
    break;
   }
   case 22: {
    var $sum_9=0;
    label = 1043;
    break;
   }
   case 21: {
    var $sum_10=0;
    label = 1044;
    break;
   }
   case 20: {
    var $sum_11=0;
    label = 1045;
    break;
   }
   case 19: {
    var $sum_12=0;
    label = 1046;
    break;
   }
   case 18: {
    var $sum_13=0;
    label = 1047;
    break;
   }
   case 17: {
    var $sum_14=0;
    label = 1048;
    break;
   }
   case 16: {
    var $sum_15=0;
    label = 1049;
    break;
   }
   case 15: {
    var $sum_16=0;
    label = 1050;
    break;
   }
   case 14: {
    var $sum_17=0;
    label = 1051;
    break;
   }
   case 13: {
    var $sum_18=0;
    label = 1052;
    break;
   }
   default: {
    var $sum_19=0;
   }
   }
   if (label == 1034) {
    label = 0;
    var $sum_0;
    var $687=HEAP32[(($4)>>2)];
    var $688=((($i_12608)-(31))|0);
    var $689=(($data+($688<<2))|0);
    var $690=HEAP32[(($689)>>2)];
    var $691=(Math_imul($690,$687)|0);
    var $692=((($691)+($sum_0))|0);
    var $sum_1=$692;
    label = 1035;
   }
   if (label == 1035) {
    label = 0;
    var $sum_1;
    var $694=HEAP32[(($5)>>2)];
    var $695=((($i_12608)-(30))|0);
    var $696=(($data+($695<<2))|0);
    var $697=HEAP32[(($696)>>2)];
    var $698=(Math_imul($697,$694)|0);
    var $699=((($698)+($sum_1))|0);
    var $sum_2=$699;
    label = 1036;
   }
   if (label == 1036) {
    label = 0;
    var $sum_2;
    var $701=HEAP32[(($6)>>2)];
    var $702=((($i_12608)-(29))|0);
    var $703=(($data+($702<<2))|0);
    var $704=HEAP32[(($703)>>2)];
    var $705=(Math_imul($704,$701)|0);
    var $706=((($705)+($sum_2))|0);
    var $sum_3=$706;
    label = 1037;
   }
   if (label == 1037) {
    label = 0;
    var $sum_3;
    var $708=HEAP32[(($7)>>2)];
    var $709=((($i_12608)-(28))|0);
    var $710=(($data+($709<<2))|0);
    var $711=HEAP32[(($710)>>2)];
    var $712=(Math_imul($711,$708)|0);
    var $713=((($712)+($sum_3))|0);
    var $sum_4=$713;
    label = 1038;
   }
   if (label == 1038) {
    label = 0;
    var $sum_4;
    var $715=HEAP32[(($8)>>2)];
    var $716=((($i_12608)-(27))|0);
    var $717=(($data+($716<<2))|0);
    var $718=HEAP32[(($717)>>2)];
    var $719=(Math_imul($718,$715)|0);
    var $720=((($719)+($sum_4))|0);
    var $sum_5=$720;
    label = 1039;
   }
   if (label == 1039) {
    label = 0;
    var $sum_5;
    var $722=HEAP32[(($9)>>2)];
    var $723=((($i_12608)-(26))|0);
    var $724=(($data+($723<<2))|0);
    var $725=HEAP32[(($724)>>2)];
    var $726=(Math_imul($725,$722)|0);
    var $727=((($726)+($sum_5))|0);
    var $sum_6=$727;
    label = 1040;
   }
   if (label == 1040) {
    label = 0;
    var $sum_6;
    var $729=HEAP32[(($10)>>2)];
    var $730=((($i_12608)-(25))|0);
    var $731=(($data+($730<<2))|0);
    var $732=HEAP32[(($731)>>2)];
    var $733=(Math_imul($732,$729)|0);
    var $734=((($733)+($sum_6))|0);
    var $sum_7=$734;
    label = 1041;
   }
   if (label == 1041) {
    label = 0;
    var $sum_7;
    var $736=HEAP32[(($11)>>2)];
    var $737=((($i_12608)-(24))|0);
    var $738=(($data+($737<<2))|0);
    var $739=HEAP32[(($738)>>2)];
    var $740=(Math_imul($739,$736)|0);
    var $741=((($740)+($sum_7))|0);
    var $sum_8=$741;
    label = 1042;
   }
   if (label == 1042) {
    label = 0;
    var $sum_8;
    var $743=HEAP32[(($12)>>2)];
    var $744=((($i_12608)-(23))|0);
    var $745=(($data+($744<<2))|0);
    var $746=HEAP32[(($745)>>2)];
    var $747=(Math_imul($746,$743)|0);
    var $748=((($747)+($sum_8))|0);
    var $sum_9=$748;
    label = 1043;
   }
   if (label == 1043) {
    label = 0;
    var $sum_9;
    var $750=HEAP32[(($13)>>2)];
    var $751=((($i_12608)-(22))|0);
    var $752=(($data+($751<<2))|0);
    var $753=HEAP32[(($752)>>2)];
    var $754=(Math_imul($753,$750)|0);
    var $755=((($754)+($sum_9))|0);
    var $sum_10=$755;
    label = 1044;
   }
   if (label == 1044) {
    label = 0;
    var $sum_10;
    var $757=HEAP32[(($14)>>2)];
    var $758=((($i_12608)-(21))|0);
    var $759=(($data+($758<<2))|0);
    var $760=HEAP32[(($759)>>2)];
    var $761=(Math_imul($760,$757)|0);
    var $762=((($761)+($sum_10))|0);
    var $sum_11=$762;
    label = 1045;
   }
   if (label == 1045) {
    label = 0;
    var $sum_11;
    var $764=HEAP32[(($15)>>2)];
    var $765=((($i_12608)-(20))|0);
    var $766=(($data+($765<<2))|0);
    var $767=HEAP32[(($766)>>2)];
    var $768=(Math_imul($767,$764)|0);
    var $769=((($768)+($sum_11))|0);
    var $sum_12=$769;
    label = 1046;
   }
   if (label == 1046) {
    label = 0;
    var $sum_12;
    var $771=HEAP32[(($16)>>2)];
    var $772=((($i_12608)-(19))|0);
    var $773=(($data+($772<<2))|0);
    var $774=HEAP32[(($773)>>2)];
    var $775=(Math_imul($774,$771)|0);
    var $776=((($775)+($sum_12))|0);
    var $sum_13=$776;
    label = 1047;
   }
   if (label == 1047) {
    label = 0;
    var $sum_13;
    var $778=HEAP32[(($17)>>2)];
    var $779=((($i_12608)-(18))|0);
    var $780=(($data+($779<<2))|0);
    var $781=HEAP32[(($780)>>2)];
    var $782=(Math_imul($781,$778)|0);
    var $783=((($782)+($sum_13))|0);
    var $sum_14=$783;
    label = 1048;
   }
   if (label == 1048) {
    label = 0;
    var $sum_14;
    var $785=HEAP32[(($18)>>2)];
    var $786=((($i_12608)-(17))|0);
    var $787=(($data+($786<<2))|0);
    var $788=HEAP32[(($787)>>2)];
    var $789=(Math_imul($788,$785)|0);
    var $790=((($789)+($sum_14))|0);
    var $sum_15=$790;
    label = 1049;
   }
   if (label == 1049) {
    label = 0;
    var $sum_15;
    var $792=HEAP32[(($19)>>2)];
    var $793=((($i_12608)-(16))|0);
    var $794=(($data+($793<<2))|0);
    var $795=HEAP32[(($794)>>2)];
    var $796=(Math_imul($795,$792)|0);
    var $797=((($796)+($sum_15))|0);
    var $sum_16=$797;
    label = 1050;
   }
   if (label == 1050) {
    label = 0;
    var $sum_16;
    var $799=HEAP32[(($20)>>2)];
    var $800=((($i_12608)-(15))|0);
    var $801=(($data+($800<<2))|0);
    var $802=HEAP32[(($801)>>2)];
    var $803=(Math_imul($802,$799)|0);
    var $804=((($803)+($sum_16))|0);
    var $sum_17=$804;
    label = 1051;
   }
   if (label == 1051) {
    label = 0;
    var $sum_17;
    var $806=HEAP32[(($21)>>2)];
    var $807=((($i_12608)-(14))|0);
    var $808=(($data+($807<<2))|0);
    var $809=HEAP32[(($808)>>2)];
    var $810=(Math_imul($809,$806)|0);
    var $811=((($810)+($sum_17))|0);
    var $sum_18=$811;
    label = 1052;
   }
   if (label == 1052) {
    label = 0;
    var $sum_18;
    var $813=HEAP32[(($22)>>2)];
    var $814=((($i_12608)-(13))|0);
    var $815=(($data+($814<<2))|0);
    var $816=HEAP32[(($815)>>2)];
    var $817=(Math_imul($816,$813)|0);
    var $818=((($817)+($sum_18))|0);
    var $819=HEAP32[(($23)>>2)];
    var $820=((($i_12608)-(12))|0);
    var $821=(($data+($820<<2))|0);
    var $822=HEAP32[(($821)>>2)];
    var $823=(Math_imul($822,$819)|0);
    var $824=((($818)+($823))|0);
    var $825=HEAP32[(($24)>>2)];
    var $826=((($i_12608)-(11))|0);
    var $827=(($data+($826<<2))|0);
    var $828=HEAP32[(($827)>>2)];
    var $829=(Math_imul($828,$825)|0);
    var $830=((($824)+($829))|0);
    var $831=HEAP32[(($25)>>2)];
    var $832=((($i_12608)-(10))|0);
    var $833=(($data+($832<<2))|0);
    var $834=HEAP32[(($833)>>2)];
    var $835=(Math_imul($834,$831)|0);
    var $836=((($830)+($835))|0);
    var $837=HEAP32[(($26)>>2)];
    var $838=((($i_12608)-(9))|0);
    var $839=(($data+($838<<2))|0);
    var $840=HEAP32[(($839)>>2)];
    var $841=(Math_imul($840,$837)|0);
    var $842=((($836)+($841))|0);
    var $843=HEAP32[(($27)>>2)];
    var $844=((($i_12608)-(8))|0);
    var $845=(($data+($844<<2))|0);
    var $846=HEAP32[(($845)>>2)];
    var $847=(Math_imul($846,$843)|0);
    var $848=((($842)+($847))|0);
    var $849=HEAP32[(($28)>>2)];
    var $850=((($i_12608)-(7))|0);
    var $851=(($data+($850<<2))|0);
    var $852=HEAP32[(($851)>>2)];
    var $853=(Math_imul($852,$849)|0);
    var $854=((($848)+($853))|0);
    var $855=HEAP32[(($29)>>2)];
    var $856=((($i_12608)-(6))|0);
    var $857=(($data+($856<<2))|0);
    var $858=HEAP32[(($857)>>2)];
    var $859=(Math_imul($858,$855)|0);
    var $860=((($854)+($859))|0);
    var $861=HEAP32[(($30)>>2)];
    var $862=((($i_12608)-(5))|0);
    var $863=(($data+($862<<2))|0);
    var $864=HEAP32[(($863)>>2)];
    var $865=(Math_imul($864,$861)|0);
    var $866=((($860)+($865))|0);
    var $867=HEAP32[(($31)>>2)];
    var $868=((($i_12608)-(4))|0);
    var $869=(($data+($868<<2))|0);
    var $870=HEAP32[(($869)>>2)];
    var $871=(Math_imul($870,$867)|0);
    var $872=((($866)+($871))|0);
    var $873=HEAP32[(($32)>>2)];
    var $874=((($i_12608)-(3))|0);
    var $875=(($data+($874<<2))|0);
    var $876=HEAP32[(($875)>>2)];
    var $877=(Math_imul($876,$873)|0);
    var $878=((($872)+($877))|0);
    var $879=HEAP32[(($33)>>2)];
    var $880=((($i_12608)-(2))|0);
    var $881=(($data+($880<<2))|0);
    var $882=HEAP32[(($881)>>2)];
    var $883=(Math_imul($882,$879)|0);
    var $884=((($878)+($883))|0);
    var $885=HEAP32[(($qlp_coeff)>>2)];
    var $886=((($i_12608)-(1))|0);
    var $887=(($data+($886<<2))|0);
    var $888=HEAP32[(($887)>>2)];
    var $889=(Math_imul($888,$885)|0);
    var $890=((($884)+($889))|0);
    var $sum_19=$890;
   }
   var $sum_19;
   var $892=(($data+($i_12608<<2))|0);
   var $893=HEAP32[(($892)>>2)];
   var $894=$sum_19>>($lp_quantization|0);
   var $895=((($893)-($894))|0);
   var $896=(($residual+($i_12608<<2))|0);
   HEAP32[(($896)>>2)]=$895;
   var $897=((($i_12608)+(1))|0);
   var $898=($897|0)<($data_len|0);
   if ($898) {
    var $i_12608=$897;
   } else {
    break;
   }
  }
  return;
 }
 var $35=($order>>>0)>8;
 if ($35) {
  var $37=($order>>>0)>10;
  if ($37) {
   var $39=($order|0)==12;
   var $40=($data_len|0)>0;
   if ($39) {
    if (!($40)) {
     return;
    }
    var $51=(($qlp_coeff+44)|0);
    var $52=(($qlp_coeff+40)|0);
    var $53=(($qlp_coeff+36)|0);
    var $54=(($qlp_coeff+32)|0);
    var $55=(($qlp_coeff+28)|0);
    var $56=(($qlp_coeff+24)|0);
    var $57=(($qlp_coeff+20)|0);
    var $58=(($qlp_coeff+16)|0);
    var $59=(($qlp_coeff+12)|0);
    var $60=(($qlp_coeff+8)|0);
    var $61=(($qlp_coeff+4)|0);
    var $i_0561=0;
    while(1) {
     var $i_0561;
     var $63=HEAP32[(($51)>>2)];
     var $64=((($i_0561)-(12))|0);
     var $65=(($data+($64<<2))|0);
     var $66=HEAP32[(($65)>>2)];
     var $67=(Math_imul($66,$63)|0);
     var $68=HEAP32[(($52)>>2)];
     var $69=((($i_0561)-(11))|0);
     var $70=(($data+($69<<2))|0);
     var $71=HEAP32[(($70)>>2)];
     var $72=(Math_imul($71,$68)|0);
     var $73=((($72)+($67))|0);
     var $74=HEAP32[(($53)>>2)];
     var $75=((($i_0561)-(10))|0);
     var $76=(($data+($75<<2))|0);
     var $77=HEAP32[(($76)>>2)];
     var $78=(Math_imul($77,$74)|0);
     var $79=((($73)+($78))|0);
     var $80=HEAP32[(($54)>>2)];
     var $81=((($i_0561)-(9))|0);
     var $82=(($data+($81<<2))|0);
     var $83=HEAP32[(($82)>>2)];
     var $84=(Math_imul($83,$80)|0);
     var $85=((($79)+($84))|0);
     var $86=HEAP32[(($55)>>2)];
     var $87=((($i_0561)-(8))|0);
     var $88=(($data+($87<<2))|0);
     var $89=HEAP32[(($88)>>2)];
     var $90=(Math_imul($89,$86)|0);
     var $91=((($85)+($90))|0);
     var $92=HEAP32[(($56)>>2)];
     var $93=((($i_0561)-(7))|0);
     var $94=(($data+($93<<2))|0);
     var $95=HEAP32[(($94)>>2)];
     var $96=(Math_imul($95,$92)|0);
     var $97=((($91)+($96))|0);
     var $98=HEAP32[(($57)>>2)];
     var $99=((($i_0561)-(6))|0);
     var $100=(($data+($99<<2))|0);
     var $101=HEAP32[(($100)>>2)];
     var $102=(Math_imul($101,$98)|0);
     var $103=((($97)+($102))|0);
     var $104=HEAP32[(($58)>>2)];
     var $105=((($i_0561)-(5))|0);
     var $106=(($data+($105<<2))|0);
     var $107=HEAP32[(($106)>>2)];
     var $108=(Math_imul($107,$104)|0);
     var $109=((($103)+($108))|0);
     var $110=HEAP32[(($59)>>2)];
     var $111=((($i_0561)-(4))|0);
     var $112=(($data+($111<<2))|0);
     var $113=HEAP32[(($112)>>2)];
     var $114=(Math_imul($113,$110)|0);
     var $115=((($109)+($114))|0);
     var $116=HEAP32[(($60)>>2)];
     var $117=((($i_0561)-(3))|0);
     var $118=(($data+($117<<2))|0);
     var $119=HEAP32[(($118)>>2)];
     var $120=(Math_imul($119,$116)|0);
     var $121=((($115)+($120))|0);
     var $122=HEAP32[(($61)>>2)];
     var $123=((($i_0561)-(2))|0);
     var $124=(($data+($123<<2))|0);
     var $125=HEAP32[(($124)>>2)];
     var $126=(Math_imul($125,$122)|0);
     var $127=((($121)+($126))|0);
     var $128=HEAP32[(($qlp_coeff)>>2)];
     var $129=((($i_0561)-(1))|0);
     var $130=(($data+($129<<2))|0);
     var $131=HEAP32[(($130)>>2)];
     var $132=(Math_imul($131,$128)|0);
     var $133=((($127)+($132))|0);
     var $134=(($data+($i_0561<<2))|0);
     var $135=HEAP32[(($134)>>2)];
     var $136=$133>>($lp_quantization|0);
     var $137=((($135)-($136))|0);
     var $138=(($residual+($i_0561<<2))|0);
     HEAP32[(($138)>>2)]=$137;
     var $139=((($i_0561)+(1))|0);
     var $140=($139|0)<($data_len|0);
     if ($140) {
      var $i_0561=$139;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($40)) {
     return;
    }
    var $41=(($qlp_coeff+40)|0);
    var $42=(($qlp_coeff+36)|0);
    var $43=(($qlp_coeff+32)|0);
    var $44=(($qlp_coeff+28)|0);
    var $45=(($qlp_coeff+24)|0);
    var $46=(($qlp_coeff+20)|0);
    var $47=(($qlp_coeff+16)|0);
    var $48=(($qlp_coeff+12)|0);
    var $49=(($qlp_coeff+8)|0);
    var $50=(($qlp_coeff+4)|0);
    var $i_1564=0;
    while(1) {
     var $i_1564;
     var $142=HEAP32[(($41)>>2)];
     var $143=((($i_1564)-(11))|0);
     var $144=(($data+($143<<2))|0);
     var $145=HEAP32[(($144)>>2)];
     var $146=(Math_imul($145,$142)|0);
     var $147=HEAP32[(($42)>>2)];
     var $148=((($i_1564)-(10))|0);
     var $149=(($data+($148<<2))|0);
     var $150=HEAP32[(($149)>>2)];
     var $151=(Math_imul($150,$147)|0);
     var $152=((($151)+($146))|0);
     var $153=HEAP32[(($43)>>2)];
     var $154=((($i_1564)-(9))|0);
     var $155=(($data+($154<<2))|0);
     var $156=HEAP32[(($155)>>2)];
     var $157=(Math_imul($156,$153)|0);
     var $158=((($152)+($157))|0);
     var $159=HEAP32[(($44)>>2)];
     var $160=((($i_1564)-(8))|0);
     var $161=(($data+($160<<2))|0);
     var $162=HEAP32[(($161)>>2)];
     var $163=(Math_imul($162,$159)|0);
     var $164=((($158)+($163))|0);
     var $165=HEAP32[(($45)>>2)];
     var $166=((($i_1564)-(7))|0);
     var $167=(($data+($166<<2))|0);
     var $168=HEAP32[(($167)>>2)];
     var $169=(Math_imul($168,$165)|0);
     var $170=((($164)+($169))|0);
     var $171=HEAP32[(($46)>>2)];
     var $172=((($i_1564)-(6))|0);
     var $173=(($data+($172<<2))|0);
     var $174=HEAP32[(($173)>>2)];
     var $175=(Math_imul($174,$171)|0);
     var $176=((($170)+($175))|0);
     var $177=HEAP32[(($47)>>2)];
     var $178=((($i_1564)-(5))|0);
     var $179=(($data+($178<<2))|0);
     var $180=HEAP32[(($179)>>2)];
     var $181=(Math_imul($180,$177)|0);
     var $182=((($176)+($181))|0);
     var $183=HEAP32[(($48)>>2)];
     var $184=((($i_1564)-(4))|0);
     var $185=(($data+($184<<2))|0);
     var $186=HEAP32[(($185)>>2)];
     var $187=(Math_imul($186,$183)|0);
     var $188=((($182)+($187))|0);
     var $189=HEAP32[(($49)>>2)];
     var $190=((($i_1564)-(3))|0);
     var $191=(($data+($190<<2))|0);
     var $192=HEAP32[(($191)>>2)];
     var $193=(Math_imul($192,$189)|0);
     var $194=((($188)+($193))|0);
     var $195=HEAP32[(($50)>>2)];
     var $196=((($i_1564)-(2))|0);
     var $197=(($data+($196<<2))|0);
     var $198=HEAP32[(($197)>>2)];
     var $199=(Math_imul($198,$195)|0);
     var $200=((($194)+($199))|0);
     var $201=HEAP32[(($qlp_coeff)>>2)];
     var $202=((($i_1564)-(1))|0);
     var $203=(($data+($202<<2))|0);
     var $204=HEAP32[(($203)>>2)];
     var $205=(Math_imul($204,$201)|0);
     var $206=((($200)+($205))|0);
     var $207=(($data+($i_1564<<2))|0);
     var $208=HEAP32[(($207)>>2)];
     var $209=$206>>($lp_quantization|0);
     var $210=((($208)-($209))|0);
     var $211=(($residual+($i_1564<<2))|0);
     HEAP32[(($211)>>2)]=$210;
     var $212=((($i_1564)+(1))|0);
     var $213=($212|0)<($data_len|0);
     if ($213) {
      var $i_1564=$212;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $215=($order|0)==10;
   var $216=($data_len|0)>0;
   if ($215) {
    if (!($216)) {
     return;
    }
    var $225=(($qlp_coeff+36)|0);
    var $226=(($qlp_coeff+32)|0);
    var $227=(($qlp_coeff+28)|0);
    var $228=(($qlp_coeff+24)|0);
    var $229=(($qlp_coeff+20)|0);
    var $230=(($qlp_coeff+16)|0);
    var $231=(($qlp_coeff+12)|0);
    var $232=(($qlp_coeff+8)|0);
    var $233=(($qlp_coeff+4)|0);
    var $i_2568=0;
    while(1) {
     var $i_2568;
     var $235=HEAP32[(($225)>>2)];
     var $236=((($i_2568)-(10))|0);
     var $237=(($data+($236<<2))|0);
     var $238=HEAP32[(($237)>>2)];
     var $239=(Math_imul($238,$235)|0);
     var $240=HEAP32[(($226)>>2)];
     var $241=((($i_2568)-(9))|0);
     var $242=(($data+($241<<2))|0);
     var $243=HEAP32[(($242)>>2)];
     var $244=(Math_imul($243,$240)|0);
     var $245=((($244)+($239))|0);
     var $246=HEAP32[(($227)>>2)];
     var $247=((($i_2568)-(8))|0);
     var $248=(($data+($247<<2))|0);
     var $249=HEAP32[(($248)>>2)];
     var $250=(Math_imul($249,$246)|0);
     var $251=((($245)+($250))|0);
     var $252=HEAP32[(($228)>>2)];
     var $253=((($i_2568)-(7))|0);
     var $254=(($data+($253<<2))|0);
     var $255=HEAP32[(($254)>>2)];
     var $256=(Math_imul($255,$252)|0);
     var $257=((($251)+($256))|0);
     var $258=HEAP32[(($229)>>2)];
     var $259=((($i_2568)-(6))|0);
     var $260=(($data+($259<<2))|0);
     var $261=HEAP32[(($260)>>2)];
     var $262=(Math_imul($261,$258)|0);
     var $263=((($257)+($262))|0);
     var $264=HEAP32[(($230)>>2)];
     var $265=((($i_2568)-(5))|0);
     var $266=(($data+($265<<2))|0);
     var $267=HEAP32[(($266)>>2)];
     var $268=(Math_imul($267,$264)|0);
     var $269=((($263)+($268))|0);
     var $270=HEAP32[(($231)>>2)];
     var $271=((($i_2568)-(4))|0);
     var $272=(($data+($271<<2))|0);
     var $273=HEAP32[(($272)>>2)];
     var $274=(Math_imul($273,$270)|0);
     var $275=((($269)+($274))|0);
     var $276=HEAP32[(($232)>>2)];
     var $277=((($i_2568)-(3))|0);
     var $278=(($data+($277<<2))|0);
     var $279=HEAP32[(($278)>>2)];
     var $280=(Math_imul($279,$276)|0);
     var $281=((($275)+($280))|0);
     var $282=HEAP32[(($233)>>2)];
     var $283=((($i_2568)-(2))|0);
     var $284=(($data+($283<<2))|0);
     var $285=HEAP32[(($284)>>2)];
     var $286=(Math_imul($285,$282)|0);
     var $287=((($281)+($286))|0);
     var $288=HEAP32[(($qlp_coeff)>>2)];
     var $289=((($i_2568)-(1))|0);
     var $290=(($data+($289<<2))|0);
     var $291=HEAP32[(($290)>>2)];
     var $292=(Math_imul($291,$288)|0);
     var $293=((($287)+($292))|0);
     var $294=(($data+($i_2568<<2))|0);
     var $295=HEAP32[(($294)>>2)];
     var $296=$293>>($lp_quantization|0);
     var $297=((($295)-($296))|0);
     var $298=(($residual+($i_2568<<2))|0);
     HEAP32[(($298)>>2)]=$297;
     var $299=((($i_2568)+(1))|0);
     var $300=($299|0)<($data_len|0);
     if ($300) {
      var $i_2568=$299;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($216)) {
     return;
    }
    var $217=(($qlp_coeff+32)|0);
    var $218=(($qlp_coeff+28)|0);
    var $219=(($qlp_coeff+24)|0);
    var $220=(($qlp_coeff+20)|0);
    var $221=(($qlp_coeff+16)|0);
    var $222=(($qlp_coeff+12)|0);
    var $223=(($qlp_coeff+8)|0);
    var $224=(($qlp_coeff+4)|0);
    var $i_3572=0;
    while(1) {
     var $i_3572;
     var $302=HEAP32[(($217)>>2)];
     var $303=((($i_3572)-(9))|0);
     var $304=(($data+($303<<2))|0);
     var $305=HEAP32[(($304)>>2)];
     var $306=(Math_imul($305,$302)|0);
     var $307=HEAP32[(($218)>>2)];
     var $308=((($i_3572)-(8))|0);
     var $309=(($data+($308<<2))|0);
     var $310=HEAP32[(($309)>>2)];
     var $311=(Math_imul($310,$307)|0);
     var $312=((($311)+($306))|0);
     var $313=HEAP32[(($219)>>2)];
     var $314=((($i_3572)-(7))|0);
     var $315=(($data+($314<<2))|0);
     var $316=HEAP32[(($315)>>2)];
     var $317=(Math_imul($316,$313)|0);
     var $318=((($312)+($317))|0);
     var $319=HEAP32[(($220)>>2)];
     var $320=((($i_3572)-(6))|0);
     var $321=(($data+($320<<2))|0);
     var $322=HEAP32[(($321)>>2)];
     var $323=(Math_imul($322,$319)|0);
     var $324=((($318)+($323))|0);
     var $325=HEAP32[(($221)>>2)];
     var $326=((($i_3572)-(5))|0);
     var $327=(($data+($326<<2))|0);
     var $328=HEAP32[(($327)>>2)];
     var $329=(Math_imul($328,$325)|0);
     var $330=((($324)+($329))|0);
     var $331=HEAP32[(($222)>>2)];
     var $332=((($i_3572)-(4))|0);
     var $333=(($data+($332<<2))|0);
     var $334=HEAP32[(($333)>>2)];
     var $335=(Math_imul($334,$331)|0);
     var $336=((($330)+($335))|0);
     var $337=HEAP32[(($223)>>2)];
     var $338=((($i_3572)-(3))|0);
     var $339=(($data+($338<<2))|0);
     var $340=HEAP32[(($339)>>2)];
     var $341=(Math_imul($340,$337)|0);
     var $342=((($336)+($341))|0);
     var $343=HEAP32[(($224)>>2)];
     var $344=((($i_3572)-(2))|0);
     var $345=(($data+($344<<2))|0);
     var $346=HEAP32[(($345)>>2)];
     var $347=(Math_imul($346,$343)|0);
     var $348=((($342)+($347))|0);
     var $349=HEAP32[(($qlp_coeff)>>2)];
     var $350=((($i_3572)-(1))|0);
     var $351=(($data+($350<<2))|0);
     var $352=HEAP32[(($351)>>2)];
     var $353=(Math_imul($352,$349)|0);
     var $354=((($348)+($353))|0);
     var $355=(($data+($i_3572<<2))|0);
     var $356=HEAP32[(($355)>>2)];
     var $357=$354>>($lp_quantization|0);
     var $358=((($356)-($357))|0);
     var $359=(($residual+($i_3572<<2))|0);
     HEAP32[(($359)>>2)]=$358;
     var $360=((($i_3572)+(1))|0);
     var $361=($360|0)<($data_len|0);
     if ($361) {
      var $i_3572=$360;
     } else {
      break;
     }
    }
    return;
   }
  }
 }
 var $363=($order>>>0)>4;
 if (!($363)) {
  var $579=($order>>>0)>2;
  if (!($579)) {
   var $645=($order|0)==2;
   var $646=($data_len|0)>0;
   if (!($645)) {
    if ($646) {
     var $i_11604=0;
    } else {
     return;
    }
    while(1) {
     var $i_11604;
     var $667=(($data+($i_11604<<2))|0);
     var $668=HEAP32[(($667)>>2)];
     var $669=HEAP32[(($qlp_coeff)>>2)];
     var $670=((($i_11604)-(1))|0);
     var $671=(($data+($670<<2))|0);
     var $672=HEAP32[(($671)>>2)];
     var $673=(Math_imul($672,$669)|0);
     var $674=$673>>($lp_quantization|0);
     var $675=((($668)-($674))|0);
     var $676=(($residual+($i_11604<<2))|0);
     HEAP32[(($676)>>2)]=$675;
     var $677=((($i_11604)+(1))|0);
     var $678=($677|0)<($data_len|0);
     if ($678) {
      var $i_11604=$677;
     } else {
      break;
     }
    }
    return;
   }
   if (!($646)) {
    return;
   }
   var $647=(($qlp_coeff+4)|0);
   var $i_10600=0;
   while(1) {
    var $i_10600;
    var $649=HEAP32[(($647)>>2)];
    var $650=((($i_10600)-(2))|0);
    var $651=(($data+($650<<2))|0);
    var $652=HEAP32[(($651)>>2)];
    var $653=(Math_imul($652,$649)|0);
    var $654=HEAP32[(($qlp_coeff)>>2)];
    var $655=((($i_10600)-(1))|0);
    var $656=(($data+($655<<2))|0);
    var $657=HEAP32[(($656)>>2)];
    var $658=(Math_imul($657,$654)|0);
    var $659=((($658)+($653))|0);
    var $660=(($data+($i_10600<<2))|0);
    var $661=HEAP32[(($660)>>2)];
    var $662=$659>>($lp_quantization|0);
    var $663=((($661)-($662))|0);
    var $664=(($residual+($i_10600<<2))|0);
    HEAP32[(($664)>>2)]=$663;
    var $665=((($i_10600)+(1))|0);
    var $666=($665|0)<($data_len|0);
    if ($666) {
     var $i_10600=$665;
    } else {
     break;
    }
   }
   return;
  }
  var $581=($order|0)==4;
  var $582=($data_len|0)>0;
  if ($581) {
   if (!($582)) {
    return;
   }
   var $585=(($qlp_coeff+12)|0);
   var $586=(($qlp_coeff+8)|0);
   var $587=(($qlp_coeff+4)|0);
   var $i_8592=0;
   while(1) {
    var $i_8592;
    var $589=HEAP32[(($585)>>2)];
    var $590=((($i_8592)-(4))|0);
    var $591=(($data+($590<<2))|0);
    var $592=HEAP32[(($591)>>2)];
    var $593=(Math_imul($592,$589)|0);
    var $594=HEAP32[(($586)>>2)];
    var $595=((($i_8592)-(3))|0);
    var $596=(($data+($595<<2))|0);
    var $597=HEAP32[(($596)>>2)];
    var $598=(Math_imul($597,$594)|0);
    var $599=((($598)+($593))|0);
    var $600=HEAP32[(($587)>>2)];
    var $601=((($i_8592)-(2))|0);
    var $602=(($data+($601<<2))|0);
    var $603=HEAP32[(($602)>>2)];
    var $604=(Math_imul($603,$600)|0);
    var $605=((($599)+($604))|0);
    var $606=HEAP32[(($qlp_coeff)>>2)];
    var $607=((($i_8592)-(1))|0);
    var $608=(($data+($607<<2))|0);
    var $609=HEAP32[(($608)>>2)];
    var $610=(Math_imul($609,$606)|0);
    var $611=((($605)+($610))|0);
    var $612=(($data+($i_8592<<2))|0);
    var $613=HEAP32[(($612)>>2)];
    var $614=$611>>($lp_quantization|0);
    var $615=((($613)-($614))|0);
    var $616=(($residual+($i_8592<<2))|0);
    HEAP32[(($616)>>2)]=$615;
    var $617=((($i_8592)+(1))|0);
    var $618=($617|0)<($data_len|0);
    if ($618) {
     var $i_8592=$617;
    } else {
     break;
    }
   }
   return;
  } else {
   if (!($582)) {
    return;
   }
   var $583=(($qlp_coeff+8)|0);
   var $584=(($qlp_coeff+4)|0);
   var $i_9596=0;
   while(1) {
    var $i_9596;
    var $620=HEAP32[(($583)>>2)];
    var $621=((($i_9596)-(3))|0);
    var $622=(($data+($621<<2))|0);
    var $623=HEAP32[(($622)>>2)];
    var $624=(Math_imul($623,$620)|0);
    var $625=HEAP32[(($584)>>2)];
    var $626=((($i_9596)-(2))|0);
    var $627=(($data+($626<<2))|0);
    var $628=HEAP32[(($627)>>2)];
    var $629=(Math_imul($628,$625)|0);
    var $630=((($629)+($624))|0);
    var $631=HEAP32[(($qlp_coeff)>>2)];
    var $632=((($i_9596)-(1))|0);
    var $633=(($data+($632<<2))|0);
    var $634=HEAP32[(($633)>>2)];
    var $635=(Math_imul($634,$631)|0);
    var $636=((($630)+($635))|0);
    var $637=(($data+($i_9596<<2))|0);
    var $638=HEAP32[(($637)>>2)];
    var $639=$636>>($lp_quantization|0);
    var $640=((($638)-($639))|0);
    var $641=(($residual+($i_9596<<2))|0);
    HEAP32[(($641)>>2)]=$640;
    var $642=((($i_9596)+(1))|0);
    var $643=($642|0)<($data_len|0);
    if ($643) {
     var $i_9596=$642;
    } else {
     break;
    }
   }
   return;
  }
 }
 var $365=($order>>>0)>6;
 if ($365) {
  var $367=($order|0)==8;
  var $368=($data_len|0)>0;
  if ($367) {
   if (!($368)) {
    return;
   }
   var $375=(($qlp_coeff+28)|0);
   var $376=(($qlp_coeff+24)|0);
   var $377=(($qlp_coeff+20)|0);
   var $378=(($qlp_coeff+16)|0);
   var $379=(($qlp_coeff+12)|0);
   var $380=(($qlp_coeff+8)|0);
   var $381=(($qlp_coeff+4)|0);
   var $i_4576=0;
   while(1) {
    var $i_4576;
    var $383=HEAP32[(($375)>>2)];
    var $384=((($i_4576)-(8))|0);
    var $385=(($data+($384<<2))|0);
    var $386=HEAP32[(($385)>>2)];
    var $387=(Math_imul($386,$383)|0);
    var $388=HEAP32[(($376)>>2)];
    var $389=((($i_4576)-(7))|0);
    var $390=(($data+($389<<2))|0);
    var $391=HEAP32[(($390)>>2)];
    var $392=(Math_imul($391,$388)|0);
    var $393=((($392)+($387))|0);
    var $394=HEAP32[(($377)>>2)];
    var $395=((($i_4576)-(6))|0);
    var $396=(($data+($395<<2))|0);
    var $397=HEAP32[(($396)>>2)];
    var $398=(Math_imul($397,$394)|0);
    var $399=((($393)+($398))|0);
    var $400=HEAP32[(($378)>>2)];
    var $401=((($i_4576)-(5))|0);
    var $402=(($data+($401<<2))|0);
    var $403=HEAP32[(($402)>>2)];
    var $404=(Math_imul($403,$400)|0);
    var $405=((($399)+($404))|0);
    var $406=HEAP32[(($379)>>2)];
    var $407=((($i_4576)-(4))|0);
    var $408=(($data+($407<<2))|0);
    var $409=HEAP32[(($408)>>2)];
    var $410=(Math_imul($409,$406)|0);
    var $411=((($405)+($410))|0);
    var $412=HEAP32[(($380)>>2)];
    var $413=((($i_4576)-(3))|0);
    var $414=(($data+($413<<2))|0);
    var $415=HEAP32[(($414)>>2)];
    var $416=(Math_imul($415,$412)|0);
    var $417=((($411)+($416))|0);
    var $418=HEAP32[(($381)>>2)];
    var $419=((($i_4576)-(2))|0);
    var $420=(($data+($419<<2))|0);
    var $421=HEAP32[(($420)>>2)];
    var $422=(Math_imul($421,$418)|0);
    var $423=((($417)+($422))|0);
    var $424=HEAP32[(($qlp_coeff)>>2)];
    var $425=((($i_4576)-(1))|0);
    var $426=(($data+($425<<2))|0);
    var $427=HEAP32[(($426)>>2)];
    var $428=(Math_imul($427,$424)|0);
    var $429=((($423)+($428))|0);
    var $430=(($data+($i_4576<<2))|0);
    var $431=HEAP32[(($430)>>2)];
    var $432=$429>>($lp_quantization|0);
    var $433=((($431)-($432))|0);
    var $434=(($residual+($i_4576<<2))|0);
    HEAP32[(($434)>>2)]=$433;
    var $435=((($i_4576)+(1))|0);
    var $436=($435|0)<($data_len|0);
    if ($436) {
     var $i_4576=$435;
    } else {
     break;
    }
   }
   return;
  } else {
   if (!($368)) {
    return;
   }
   var $369=(($qlp_coeff+24)|0);
   var $370=(($qlp_coeff+20)|0);
   var $371=(($qlp_coeff+16)|0);
   var $372=(($qlp_coeff+12)|0);
   var $373=(($qlp_coeff+8)|0);
   var $374=(($qlp_coeff+4)|0);
   var $i_5580=0;
   while(1) {
    var $i_5580;
    var $438=HEAP32[(($369)>>2)];
    var $439=((($i_5580)-(7))|0);
    var $440=(($data+($439<<2))|0);
    var $441=HEAP32[(($440)>>2)];
    var $442=(Math_imul($441,$438)|0);
    var $443=HEAP32[(($370)>>2)];
    var $444=((($i_5580)-(6))|0);
    var $445=(($data+($444<<2))|0);
    var $446=HEAP32[(($445)>>2)];
    var $447=(Math_imul($446,$443)|0);
    var $448=((($447)+($442))|0);
    var $449=HEAP32[(($371)>>2)];
    var $450=((($i_5580)-(5))|0);
    var $451=(($data+($450<<2))|0);
    var $452=HEAP32[(($451)>>2)];
    var $453=(Math_imul($452,$449)|0);
    var $454=((($448)+($453))|0);
    var $455=HEAP32[(($372)>>2)];
    var $456=((($i_5580)-(4))|0);
    var $457=(($data+($456<<2))|0);
    var $458=HEAP32[(($457)>>2)];
    var $459=(Math_imul($458,$455)|0);
    var $460=((($454)+($459))|0);
    var $461=HEAP32[(($373)>>2)];
    var $462=((($i_5580)-(3))|0);
    var $463=(($data+($462<<2))|0);
    var $464=HEAP32[(($463)>>2)];
    var $465=(Math_imul($464,$461)|0);
    var $466=((($460)+($465))|0);
    var $467=HEAP32[(($374)>>2)];
    var $468=((($i_5580)-(2))|0);
    var $469=(($data+($468<<2))|0);
    var $470=HEAP32[(($469)>>2)];
    var $471=(Math_imul($470,$467)|0);
    var $472=((($466)+($471))|0);
    var $473=HEAP32[(($qlp_coeff)>>2)];
    var $474=((($i_5580)-(1))|0);
    var $475=(($data+($474<<2))|0);
    var $476=HEAP32[(($475)>>2)];
    var $477=(Math_imul($476,$473)|0);
    var $478=((($472)+($477))|0);
    var $479=(($data+($i_5580<<2))|0);
    var $480=HEAP32[(($479)>>2)];
    var $481=$478>>($lp_quantization|0);
    var $482=((($480)-($481))|0);
    var $483=(($residual+($i_5580<<2))|0);
    HEAP32[(($483)>>2)]=$482;
    var $484=((($i_5580)+(1))|0);
    var $485=($484|0)<($data_len|0);
    if ($485) {
     var $i_5580=$484;
    } else {
     break;
    }
   }
   return;
  }
 } else {
  var $487=($order|0)==6;
  var $488=($data_len|0)>0;
  if ($487) {
   if (!($488)) {
    return;
   }
   var $493=(($qlp_coeff+20)|0);
   var $494=(($qlp_coeff+16)|0);
   var $495=(($qlp_coeff+12)|0);
   var $496=(($qlp_coeff+8)|0);
   var $497=(($qlp_coeff+4)|0);
   var $i_6584=0;
   while(1) {
    var $i_6584;
    var $499=HEAP32[(($493)>>2)];
    var $500=((($i_6584)-(6))|0);
    var $501=(($data+($500<<2))|0);
    var $502=HEAP32[(($501)>>2)];
    var $503=(Math_imul($502,$499)|0);
    var $504=HEAP32[(($494)>>2)];
    var $505=((($i_6584)-(5))|0);
    var $506=(($data+($505<<2))|0);
    var $507=HEAP32[(($506)>>2)];
    var $508=(Math_imul($507,$504)|0);
    var $509=((($508)+($503))|0);
    var $510=HEAP32[(($495)>>2)];
    var $511=((($i_6584)-(4))|0);
    var $512=(($data+($511<<2))|0);
    var $513=HEAP32[(($512)>>2)];
    var $514=(Math_imul($513,$510)|0);
    var $515=((($509)+($514))|0);
    var $516=HEAP32[(($496)>>2)];
    var $517=((($i_6584)-(3))|0);
    var $518=(($data+($517<<2))|0);
    var $519=HEAP32[(($518)>>2)];
    var $520=(Math_imul($519,$516)|0);
    var $521=((($515)+($520))|0);
    var $522=HEAP32[(($497)>>2)];
    var $523=((($i_6584)-(2))|0);
    var $524=(($data+($523<<2))|0);
    var $525=HEAP32[(($524)>>2)];
    var $526=(Math_imul($525,$522)|0);
    var $527=((($521)+($526))|0);
    var $528=HEAP32[(($qlp_coeff)>>2)];
    var $529=((($i_6584)-(1))|0);
    var $530=(($data+($529<<2))|0);
    var $531=HEAP32[(($530)>>2)];
    var $532=(Math_imul($531,$528)|0);
    var $533=((($527)+($532))|0);
    var $534=(($data+($i_6584<<2))|0);
    var $535=HEAP32[(($534)>>2)];
    var $536=$533>>($lp_quantization|0);
    var $537=((($535)-($536))|0);
    var $538=(($residual+($i_6584<<2))|0);
    HEAP32[(($538)>>2)]=$537;
    var $539=((($i_6584)+(1))|0);
    var $540=($539|0)<($data_len|0);
    if ($540) {
     var $i_6584=$539;
    } else {
     break;
    }
   }
   return;
  } else {
   if (!($488)) {
    return;
   }
   var $489=(($qlp_coeff+16)|0);
   var $490=(($qlp_coeff+12)|0);
   var $491=(($qlp_coeff+8)|0);
   var $492=(($qlp_coeff+4)|0);
   var $i_7588=0;
   while(1) {
    var $i_7588;
    var $542=HEAP32[(($489)>>2)];
    var $543=((($i_7588)-(5))|0);
    var $544=(($data+($543<<2))|0);
    var $545=HEAP32[(($544)>>2)];
    var $546=(Math_imul($545,$542)|0);
    var $547=HEAP32[(($490)>>2)];
    var $548=((($i_7588)-(4))|0);
    var $549=(($data+($548<<2))|0);
    var $550=HEAP32[(($549)>>2)];
    var $551=(Math_imul($550,$547)|0);
    var $552=((($551)+($546))|0);
    var $553=HEAP32[(($491)>>2)];
    var $554=((($i_7588)-(3))|0);
    var $555=(($data+($554<<2))|0);
    var $556=HEAP32[(($555)>>2)];
    var $557=(Math_imul($556,$553)|0);
    var $558=((($552)+($557))|0);
    var $559=HEAP32[(($492)>>2)];
    var $560=((($i_7588)-(2))|0);
    var $561=(($data+($560<<2))|0);
    var $562=HEAP32[(($561)>>2)];
    var $563=(Math_imul($562,$559)|0);
    var $564=((($558)+($563))|0);
    var $565=HEAP32[(($qlp_coeff)>>2)];
    var $566=((($i_7588)-(1))|0);
    var $567=(($data+($566<<2))|0);
    var $568=HEAP32[(($567)>>2)];
    var $569=(Math_imul($568,$565)|0);
    var $570=((($564)+($569))|0);
    var $571=(($data+($i_7588<<2))|0);
    var $572=HEAP32[(($571)>>2)];
    var $573=$570>>($lp_quantization|0);
    var $574=((($572)-($573))|0);
    var $575=(($residual+($i_7588<<2))|0);
    HEAP32[(($575)>>2)]=$574;
    var $576=((($i_7588)+(1))|0);
    var $577=($576|0)<($data_len|0);
    if ($577) {
     var $i_7588=$576;
    } else {
     break;
    }
   }
   return;
  }
 }
}
function _FLAC__lpc_compute_residual_from_qlp_coefficients_wide($data,$data_len,$qlp_coeff,$order,$lp_quantization,$residual){
 var label=0;
 var $1=($order>>>0)<13;
 if (!($1)) {
  var $2=($data_len|0)>0;
  if (!($2)) {
   return;
  }
  var $3$0=$lp_quantization;
  var $3$1=0;
  var $4=(($qlp_coeff+124)|0);
  var $5=(($qlp_coeff+120)|0);
  var $6=(($qlp_coeff+116)|0);
  var $7=(($qlp_coeff+112)|0);
  var $8=(($qlp_coeff+108)|0);
  var $9=(($qlp_coeff+104)|0);
  var $10=(($qlp_coeff+100)|0);
  var $11=(($qlp_coeff+96)|0);
  var $12=(($qlp_coeff+92)|0);
  var $13=(($qlp_coeff+88)|0);
  var $14=(($qlp_coeff+84)|0);
  var $15=(($qlp_coeff+80)|0);
  var $16=(($qlp_coeff+76)|0);
  var $17=(($qlp_coeff+72)|0);
  var $18=(($qlp_coeff+68)|0);
  var $19=(($qlp_coeff+64)|0);
  var $20=(($qlp_coeff+60)|0);
  var $21=(($qlp_coeff+56)|0);
  var $22=(($qlp_coeff+52)|0);
  var $23=(($qlp_coeff+48)|0);
  var $24=(($qlp_coeff+44)|0);
  var $25=(($qlp_coeff+40)|0);
  var $26=(($qlp_coeff+36)|0);
  var $27=(($qlp_coeff+32)|0);
  var $28=(($qlp_coeff+28)|0);
  var $29=(($qlp_coeff+24)|0);
  var $30=(($qlp_coeff+20)|0);
  var $31=(($qlp_coeff+16)|0);
  var $32=(($qlp_coeff+12)|0);
  var $33=(($qlp_coeff+8)|0);
  var $34=(($qlp_coeff+4)|0);
  var $i_12608=0;
  while(1) {
   var $i_12608;
   switch (($order|0)) {
   case 21: {
    var $sum_10$1=0;var $sum_10$0=0;
    label = 1143;
    break;
   }
   case 20: {
    var $sum_11$1=0;var $sum_11$0=0;
    label = 1144;
    break;
   }
   case 25: {
    var $sum_6$1=0;var $sum_6$0=0;
    label = 1139;
    break;
   }
   case 24: {
    var $sum_7$1=0;var $sum_7$0=0;
    label = 1140;
    break;
   }
   case 23: {
    var $sum_8$1=0;var $sum_8$0=0;
    label = 1141;
    break;
   }
   case 22: {
    var $sum_9$1=0;var $sum_9$0=0;
    label = 1142;
    break;
   }
   case 32: {
    var $863=HEAP32[(($4)>>2)];
    var $864$0=$863;
    var $864$1=(((($863|0)<0))|0)?-1:0;
    var $865=((($i_12608)-(32))|0);
    var $866=(($data+($865<<2))|0);
    var $867=HEAP32[(($866)>>2)];
    var $868$0=$867;
    var $868$1=(((($867|0)<0))|0)?-1:0;
    var $869$0=___muldi3($868$0,$868$1,$864$0,$864$1);var $869$1=tempRet0;
    var $sum_0$1=$869$1;var $sum_0$0=$869$0;
    label = 1133;
    break;
   }
   case 31: {
    var $sum_0$1=0;var $sum_0$0=0;
    label = 1133;
    break;
   }
   case 19: {
    var $sum_12$1=0;var $sum_12$0=0;
    label = 1145;
    break;
   }
   case 18: {
    var $sum_13$1=0;var $sum_13$0=0;
    label = 1146;
    break;
   }
   case 30: {
    var $sum_1$1=0;var $sum_1$0=0;
    label = 1134;
    break;
   }
   case 28: {
    var $sum_3$1=0;var $sum_3$0=0;
    label = 1136;
    break;
   }
   case 29: {
    var $sum_2$1=0;var $sum_2$0=0;
    label = 1135;
    break;
   }
   case 15: {
    var $sum_16$1=0;var $sum_16$0=0;
    label = 1149;
    break;
   }
   case 14: {
    var $sum_17$1=0;var $sum_17$0=0;
    label = 1150;
    break;
   }
   case 27: {
    var $sum_4$1=0;var $sum_4$0=0;
    label = 1137;
    break;
   }
   case 26: {
    var $sum_5$1=0;var $sum_5$0=0;
    label = 1138;
    break;
   }
   case 17: {
    var $sum_14$1=0;var $sum_14$0=0;
    label = 1147;
    break;
   }
   case 16: {
    var $sum_15$1=0;var $sum_15$0=0;
    label = 1148;
    break;
   }
   case 13: {
    var $sum_18$1=0;var $sum_18$0=0;
    label = 1151;
    break;
   }
   default: {
    var $sum_19$1=0;var $sum_19$0=0;
   }
   }
   if (label == 1133) {
    label = 0;
    var $sum_0$0;
    var $sum_0$1;
    var $871=HEAP32[(($5)>>2)];
    var $872$0=$871;
    var $872$1=(((($871|0)<0))|0)?-1:0;
    var $873=((($i_12608)-(31))|0);
    var $874=(($data+($873<<2))|0);
    var $875=HEAP32[(($874)>>2)];
    var $876$0=$875;
    var $876$1=(((($875|0)<0))|0)?-1:0;
    var $877$0=___muldi3($876$0,$876$1,$872$0,$872$1);var $877$1=tempRet0;
    var $878$0=_i64Add($877$0,$877$1,$sum_0$0,$sum_0$1);var $878$1=tempRet0;
    var $sum_1$1=$878$1;var $sum_1$0=$878$0;
    label = 1134;
   }
   if (label == 1134) {
    label = 0;
    var $sum_1$0;
    var $sum_1$1;
    var $880=HEAP32[(($6)>>2)];
    var $881$0=$880;
    var $881$1=(((($880|0)<0))|0)?-1:0;
    var $882=((($i_12608)-(30))|0);
    var $883=(($data+($882<<2))|0);
    var $884=HEAP32[(($883)>>2)];
    var $885$0=$884;
    var $885$1=(((($884|0)<0))|0)?-1:0;
    var $886$0=___muldi3($885$0,$885$1,$881$0,$881$1);var $886$1=tempRet0;
    var $887$0=_i64Add($886$0,$886$1,$sum_1$0,$sum_1$1);var $887$1=tempRet0;
    var $sum_2$1=$887$1;var $sum_2$0=$887$0;
    label = 1135;
   }
   if (label == 1135) {
    label = 0;
    var $sum_2$0;
    var $sum_2$1;
    var $889=HEAP32[(($7)>>2)];
    var $890$0=$889;
    var $890$1=(((($889|0)<0))|0)?-1:0;
    var $891=((($i_12608)-(29))|0);
    var $892=(($data+($891<<2))|0);
    var $893=HEAP32[(($892)>>2)];
    var $894$0=$893;
    var $894$1=(((($893|0)<0))|0)?-1:0;
    var $895$0=___muldi3($894$0,$894$1,$890$0,$890$1);var $895$1=tempRet0;
    var $896$0=_i64Add($895$0,$895$1,$sum_2$0,$sum_2$1);var $896$1=tempRet0;
    var $sum_3$1=$896$1;var $sum_3$0=$896$0;
    label = 1136;
   }
   if (label == 1136) {
    label = 0;
    var $sum_3$0;
    var $sum_3$1;
    var $898=HEAP32[(($8)>>2)];
    var $899$0=$898;
    var $899$1=(((($898|0)<0))|0)?-1:0;
    var $900=((($i_12608)-(28))|0);
    var $901=(($data+($900<<2))|0);
    var $902=HEAP32[(($901)>>2)];
    var $903$0=$902;
    var $903$1=(((($902|0)<0))|0)?-1:0;
    var $904$0=___muldi3($903$0,$903$1,$899$0,$899$1);var $904$1=tempRet0;
    var $905$0=_i64Add($904$0,$904$1,$sum_3$0,$sum_3$1);var $905$1=tempRet0;
    var $sum_4$1=$905$1;var $sum_4$0=$905$0;
    label = 1137;
   }
   if (label == 1137) {
    label = 0;
    var $sum_4$0;
    var $sum_4$1;
    var $907=HEAP32[(($9)>>2)];
    var $908$0=$907;
    var $908$1=(((($907|0)<0))|0)?-1:0;
    var $909=((($i_12608)-(27))|0);
    var $910=(($data+($909<<2))|0);
    var $911=HEAP32[(($910)>>2)];
    var $912$0=$911;
    var $912$1=(((($911|0)<0))|0)?-1:0;
    var $913$0=___muldi3($912$0,$912$1,$908$0,$908$1);var $913$1=tempRet0;
    var $914$0=_i64Add($913$0,$913$1,$sum_4$0,$sum_4$1);var $914$1=tempRet0;
    var $sum_5$1=$914$1;var $sum_5$0=$914$0;
    label = 1138;
   }
   if (label == 1138) {
    label = 0;
    var $sum_5$0;
    var $sum_5$1;
    var $916=HEAP32[(($10)>>2)];
    var $917$0=$916;
    var $917$1=(((($916|0)<0))|0)?-1:0;
    var $918=((($i_12608)-(26))|0);
    var $919=(($data+($918<<2))|0);
    var $920=HEAP32[(($919)>>2)];
    var $921$0=$920;
    var $921$1=(((($920|0)<0))|0)?-1:0;
    var $922$0=___muldi3($921$0,$921$1,$917$0,$917$1);var $922$1=tempRet0;
    var $923$0=_i64Add($922$0,$922$1,$sum_5$0,$sum_5$1);var $923$1=tempRet0;
    var $sum_6$1=$923$1;var $sum_6$0=$923$0;
    label = 1139;
   }
   if (label == 1139) {
    label = 0;
    var $sum_6$0;
    var $sum_6$1;
    var $925=HEAP32[(($11)>>2)];
    var $926$0=$925;
    var $926$1=(((($925|0)<0))|0)?-1:0;
    var $927=((($i_12608)-(25))|0);
    var $928=(($data+($927<<2))|0);
    var $929=HEAP32[(($928)>>2)];
    var $930$0=$929;
    var $930$1=(((($929|0)<0))|0)?-1:0;
    var $931$0=___muldi3($930$0,$930$1,$926$0,$926$1);var $931$1=tempRet0;
    var $932$0=_i64Add($931$0,$931$1,$sum_6$0,$sum_6$1);var $932$1=tempRet0;
    var $sum_7$1=$932$1;var $sum_7$0=$932$0;
    label = 1140;
   }
   if (label == 1140) {
    label = 0;
    var $sum_7$0;
    var $sum_7$1;
    var $934=HEAP32[(($12)>>2)];
    var $935$0=$934;
    var $935$1=(((($934|0)<0))|0)?-1:0;
    var $936=((($i_12608)-(24))|0);
    var $937=(($data+($936<<2))|0);
    var $938=HEAP32[(($937)>>2)];
    var $939$0=$938;
    var $939$1=(((($938|0)<0))|0)?-1:0;
    var $940$0=___muldi3($939$0,$939$1,$935$0,$935$1);var $940$1=tempRet0;
    var $941$0=_i64Add($940$0,$940$1,$sum_7$0,$sum_7$1);var $941$1=tempRet0;
    var $sum_8$1=$941$1;var $sum_8$0=$941$0;
    label = 1141;
   }
   if (label == 1141) {
    label = 0;
    var $sum_8$0;
    var $sum_8$1;
    var $943=HEAP32[(($13)>>2)];
    var $944$0=$943;
    var $944$1=(((($943|0)<0))|0)?-1:0;
    var $945=((($i_12608)-(23))|0);
    var $946=(($data+($945<<2))|0);
    var $947=HEAP32[(($946)>>2)];
    var $948$0=$947;
    var $948$1=(((($947|0)<0))|0)?-1:0;
    var $949$0=___muldi3($948$0,$948$1,$944$0,$944$1);var $949$1=tempRet0;
    var $950$0=_i64Add($949$0,$949$1,$sum_8$0,$sum_8$1);var $950$1=tempRet0;
    var $sum_9$1=$950$1;var $sum_9$0=$950$0;
    label = 1142;
   }
   if (label == 1142) {
    label = 0;
    var $sum_9$0;
    var $sum_9$1;
    var $952=HEAP32[(($14)>>2)];
    var $953$0=$952;
    var $953$1=(((($952|0)<0))|0)?-1:0;
    var $954=((($i_12608)-(22))|0);
    var $955=(($data+($954<<2))|0);
    var $956=HEAP32[(($955)>>2)];
    var $957$0=$956;
    var $957$1=(((($956|0)<0))|0)?-1:0;
    var $958$0=___muldi3($957$0,$957$1,$953$0,$953$1);var $958$1=tempRet0;
    var $959$0=_i64Add($958$0,$958$1,$sum_9$0,$sum_9$1);var $959$1=tempRet0;
    var $sum_10$1=$959$1;var $sum_10$0=$959$0;
    label = 1143;
   }
   if (label == 1143) {
    label = 0;
    var $sum_10$0;
    var $sum_10$1;
    var $961=HEAP32[(($15)>>2)];
    var $962$0=$961;
    var $962$1=(((($961|0)<0))|0)?-1:0;
    var $963=((($i_12608)-(21))|0);
    var $964=(($data+($963<<2))|0);
    var $965=HEAP32[(($964)>>2)];
    var $966$0=$965;
    var $966$1=(((($965|0)<0))|0)?-1:0;
    var $967$0=___muldi3($966$0,$966$1,$962$0,$962$1);var $967$1=tempRet0;
    var $968$0=_i64Add($967$0,$967$1,$sum_10$0,$sum_10$1);var $968$1=tempRet0;
    var $sum_11$1=$968$1;var $sum_11$0=$968$0;
    label = 1144;
   }
   if (label == 1144) {
    label = 0;
    var $sum_11$0;
    var $sum_11$1;
    var $970=HEAP32[(($16)>>2)];
    var $971$0=$970;
    var $971$1=(((($970|0)<0))|0)?-1:0;
    var $972=((($i_12608)-(20))|0);
    var $973=(($data+($972<<2))|0);
    var $974=HEAP32[(($973)>>2)];
    var $975$0=$974;
    var $975$1=(((($974|0)<0))|0)?-1:0;
    var $976$0=___muldi3($975$0,$975$1,$971$0,$971$1);var $976$1=tempRet0;
    var $977$0=_i64Add($976$0,$976$1,$sum_11$0,$sum_11$1);var $977$1=tempRet0;
    var $sum_12$1=$977$1;var $sum_12$0=$977$0;
    label = 1145;
   }
   if (label == 1145) {
    label = 0;
    var $sum_12$0;
    var $sum_12$1;
    var $979=HEAP32[(($17)>>2)];
    var $980$0=$979;
    var $980$1=(((($979|0)<0))|0)?-1:0;
    var $981=((($i_12608)-(19))|0);
    var $982=(($data+($981<<2))|0);
    var $983=HEAP32[(($982)>>2)];
    var $984$0=$983;
    var $984$1=(((($983|0)<0))|0)?-1:0;
    var $985$0=___muldi3($984$0,$984$1,$980$0,$980$1);var $985$1=tempRet0;
    var $986$0=_i64Add($985$0,$985$1,$sum_12$0,$sum_12$1);var $986$1=tempRet0;
    var $sum_13$1=$986$1;var $sum_13$0=$986$0;
    label = 1146;
   }
   if (label == 1146) {
    label = 0;
    var $sum_13$0;
    var $sum_13$1;
    var $988=HEAP32[(($18)>>2)];
    var $989$0=$988;
    var $989$1=(((($988|0)<0))|0)?-1:0;
    var $990=((($i_12608)-(18))|0);
    var $991=(($data+($990<<2))|0);
    var $992=HEAP32[(($991)>>2)];
    var $993$0=$992;
    var $993$1=(((($992|0)<0))|0)?-1:0;
    var $994$0=___muldi3($993$0,$993$1,$989$0,$989$1);var $994$1=tempRet0;
    var $995$0=_i64Add($994$0,$994$1,$sum_13$0,$sum_13$1);var $995$1=tempRet0;
    var $sum_14$1=$995$1;var $sum_14$0=$995$0;
    label = 1147;
   }
   if (label == 1147) {
    label = 0;
    var $sum_14$0;
    var $sum_14$1;
    var $997=HEAP32[(($19)>>2)];
    var $998$0=$997;
    var $998$1=(((($997|0)<0))|0)?-1:0;
    var $999=((($i_12608)-(17))|0);
    var $1000=(($data+($999<<2))|0);
    var $1001=HEAP32[(($1000)>>2)];
    var $1002$0=$1001;
    var $1002$1=(((($1001|0)<0))|0)?-1:0;
    var $1003$0=___muldi3($1002$0,$1002$1,$998$0,$998$1);var $1003$1=tempRet0;
    var $1004$0=_i64Add($1003$0,$1003$1,$sum_14$0,$sum_14$1);var $1004$1=tempRet0;
    var $sum_15$1=$1004$1;var $sum_15$0=$1004$0;
    label = 1148;
   }
   if (label == 1148) {
    label = 0;
    var $sum_15$0;
    var $sum_15$1;
    var $1006=HEAP32[(($20)>>2)];
    var $1007$0=$1006;
    var $1007$1=(((($1006|0)<0))|0)?-1:0;
    var $1008=((($i_12608)-(16))|0);
    var $1009=(($data+($1008<<2))|0);
    var $1010=HEAP32[(($1009)>>2)];
    var $1011$0=$1010;
    var $1011$1=(((($1010|0)<0))|0)?-1:0;
    var $1012$0=___muldi3($1011$0,$1011$1,$1007$0,$1007$1);var $1012$1=tempRet0;
    var $1013$0=_i64Add($1012$0,$1012$1,$sum_15$0,$sum_15$1);var $1013$1=tempRet0;
    var $sum_16$1=$1013$1;var $sum_16$0=$1013$0;
    label = 1149;
   }
   if (label == 1149) {
    label = 0;
    var $sum_16$0;
    var $sum_16$1;
    var $1015=HEAP32[(($21)>>2)];
    var $1016$0=$1015;
    var $1016$1=(((($1015|0)<0))|0)?-1:0;
    var $1017=((($i_12608)-(15))|0);
    var $1018=(($data+($1017<<2))|0);
    var $1019=HEAP32[(($1018)>>2)];
    var $1020$0=$1019;
    var $1020$1=(((($1019|0)<0))|0)?-1:0;
    var $1021$0=___muldi3($1020$0,$1020$1,$1016$0,$1016$1);var $1021$1=tempRet0;
    var $1022$0=_i64Add($1021$0,$1021$1,$sum_16$0,$sum_16$1);var $1022$1=tempRet0;
    var $sum_17$1=$1022$1;var $sum_17$0=$1022$0;
    label = 1150;
   }
   if (label == 1150) {
    label = 0;
    var $sum_17$0;
    var $sum_17$1;
    var $1024=HEAP32[(($22)>>2)];
    var $1025$0=$1024;
    var $1025$1=(((($1024|0)<0))|0)?-1:0;
    var $1026=((($i_12608)-(14))|0);
    var $1027=(($data+($1026<<2))|0);
    var $1028=HEAP32[(($1027)>>2)];
    var $1029$0=$1028;
    var $1029$1=(((($1028|0)<0))|0)?-1:0;
    var $1030$0=___muldi3($1029$0,$1029$1,$1025$0,$1025$1);var $1030$1=tempRet0;
    var $1031$0=_i64Add($1030$0,$1030$1,$sum_17$0,$sum_17$1);var $1031$1=tempRet0;
    var $sum_18$1=$1031$1;var $sum_18$0=$1031$0;
    label = 1151;
   }
   if (label == 1151) {
    label = 0;
    var $sum_18$0;
    var $sum_18$1;
    var $1033=HEAP32[(($23)>>2)];
    var $1034$0=$1033;
    var $1034$1=(((($1033|0)<0))|0)?-1:0;
    var $1035=((($i_12608)-(13))|0);
    var $1036=(($data+($1035<<2))|0);
    var $1037=HEAP32[(($1036)>>2)];
    var $1038$0=$1037;
    var $1038$1=(((($1037|0)<0))|0)?-1:0;
    var $1039$0=___muldi3($1038$0,$1038$1,$1034$0,$1034$1);var $1039$1=tempRet0;
    var $1040$0=_i64Add($1039$0,$1039$1,$sum_18$0,$sum_18$1);var $1040$1=tempRet0;
    var $1041=HEAP32[(($24)>>2)];
    var $1042$0=$1041;
    var $1042$1=(((($1041|0)<0))|0)?-1:0;
    var $1043=((($i_12608)-(12))|0);
    var $1044=(($data+($1043<<2))|0);
    var $1045=HEAP32[(($1044)>>2)];
    var $1046$0=$1045;
    var $1046$1=(((($1045|0)<0))|0)?-1:0;
    var $1047$0=___muldi3($1046$0,$1046$1,$1042$0,$1042$1);var $1047$1=tempRet0;
    var $1048$0=_i64Add($1040$0,$1040$1,$1047$0,$1047$1);var $1048$1=tempRet0;
    var $1049=HEAP32[(($25)>>2)];
    var $1050$0=$1049;
    var $1050$1=(((($1049|0)<0))|0)?-1:0;
    var $1051=((($i_12608)-(11))|0);
    var $1052=(($data+($1051<<2))|0);
    var $1053=HEAP32[(($1052)>>2)];
    var $1054$0=$1053;
    var $1054$1=(((($1053|0)<0))|0)?-1:0;
    var $1055$0=___muldi3($1054$0,$1054$1,$1050$0,$1050$1);var $1055$1=tempRet0;
    var $1056$0=_i64Add($1048$0,$1048$1,$1055$0,$1055$1);var $1056$1=tempRet0;
    var $1057=HEAP32[(($26)>>2)];
    var $1058$0=$1057;
    var $1058$1=(((($1057|0)<0))|0)?-1:0;
    var $1059=((($i_12608)-(10))|0);
    var $1060=(($data+($1059<<2))|0);
    var $1061=HEAP32[(($1060)>>2)];
    var $1062$0=$1061;
    var $1062$1=(((($1061|0)<0))|0)?-1:0;
    var $1063$0=___muldi3($1062$0,$1062$1,$1058$0,$1058$1);var $1063$1=tempRet0;
    var $1064$0=_i64Add($1056$0,$1056$1,$1063$0,$1063$1);var $1064$1=tempRet0;
    var $1065=HEAP32[(($27)>>2)];
    var $1066$0=$1065;
    var $1066$1=(((($1065|0)<0))|0)?-1:0;
    var $1067=((($i_12608)-(9))|0);
    var $1068=(($data+($1067<<2))|0);
    var $1069=HEAP32[(($1068)>>2)];
    var $1070$0=$1069;
    var $1070$1=(((($1069|0)<0))|0)?-1:0;
    var $1071$0=___muldi3($1070$0,$1070$1,$1066$0,$1066$1);var $1071$1=tempRet0;
    var $1072$0=_i64Add($1064$0,$1064$1,$1071$0,$1071$1);var $1072$1=tempRet0;
    var $1073=HEAP32[(($28)>>2)];
    var $1074$0=$1073;
    var $1074$1=(((($1073|0)<0))|0)?-1:0;
    var $1075=((($i_12608)-(8))|0);
    var $1076=(($data+($1075<<2))|0);
    var $1077=HEAP32[(($1076)>>2)];
    var $1078$0=$1077;
    var $1078$1=(((($1077|0)<0))|0)?-1:0;
    var $1079$0=___muldi3($1078$0,$1078$1,$1074$0,$1074$1);var $1079$1=tempRet0;
    var $1080$0=_i64Add($1072$0,$1072$1,$1079$0,$1079$1);var $1080$1=tempRet0;
    var $1081=HEAP32[(($29)>>2)];
    var $1082$0=$1081;
    var $1082$1=(((($1081|0)<0))|0)?-1:0;
    var $1083=((($i_12608)-(7))|0);
    var $1084=(($data+($1083<<2))|0);
    var $1085=HEAP32[(($1084)>>2)];
    var $1086$0=$1085;
    var $1086$1=(((($1085|0)<0))|0)?-1:0;
    var $1087$0=___muldi3($1086$0,$1086$1,$1082$0,$1082$1);var $1087$1=tempRet0;
    var $1088$0=_i64Add($1080$0,$1080$1,$1087$0,$1087$1);var $1088$1=tempRet0;
    var $1089=HEAP32[(($30)>>2)];
    var $1090$0=$1089;
    var $1090$1=(((($1089|0)<0))|0)?-1:0;
    var $1091=((($i_12608)-(6))|0);
    var $1092=(($data+($1091<<2))|0);
    var $1093=HEAP32[(($1092)>>2)];
    var $1094$0=$1093;
    var $1094$1=(((($1093|0)<0))|0)?-1:0;
    var $1095$0=___muldi3($1094$0,$1094$1,$1090$0,$1090$1);var $1095$1=tempRet0;
    var $1096$0=_i64Add($1088$0,$1088$1,$1095$0,$1095$1);var $1096$1=tempRet0;
    var $1097=HEAP32[(($31)>>2)];
    var $1098$0=$1097;
    var $1098$1=(((($1097|0)<0))|0)?-1:0;
    var $1099=((($i_12608)-(5))|0);
    var $1100=(($data+($1099<<2))|0);
    var $1101=HEAP32[(($1100)>>2)];
    var $1102$0=$1101;
    var $1102$1=(((($1101|0)<0))|0)?-1:0;
    var $1103$0=___muldi3($1102$0,$1102$1,$1098$0,$1098$1);var $1103$1=tempRet0;
    var $1104$0=_i64Add($1096$0,$1096$1,$1103$0,$1103$1);var $1104$1=tempRet0;
    var $1105=HEAP32[(($32)>>2)];
    var $1106$0=$1105;
    var $1106$1=(((($1105|0)<0))|0)?-1:0;
    var $1107=((($i_12608)-(4))|0);
    var $1108=(($data+($1107<<2))|0);
    var $1109=HEAP32[(($1108)>>2)];
    var $1110$0=$1109;
    var $1110$1=(((($1109|0)<0))|0)?-1:0;
    var $1111$0=___muldi3($1110$0,$1110$1,$1106$0,$1106$1);var $1111$1=tempRet0;
    var $1112$0=_i64Add($1104$0,$1104$1,$1111$0,$1111$1);var $1112$1=tempRet0;
    var $1113=HEAP32[(($33)>>2)];
    var $1114$0=$1113;
    var $1114$1=(((($1113|0)<0))|0)?-1:0;
    var $1115=((($i_12608)-(3))|0);
    var $1116=(($data+($1115<<2))|0);
    var $1117=HEAP32[(($1116)>>2)];
    var $1118$0=$1117;
    var $1118$1=(((($1117|0)<0))|0)?-1:0;
    var $1119$0=___muldi3($1118$0,$1118$1,$1114$0,$1114$1);var $1119$1=tempRet0;
    var $1120$0=_i64Add($1112$0,$1112$1,$1119$0,$1119$1);var $1120$1=tempRet0;
    var $1121=HEAP32[(($34)>>2)];
    var $1122$0=$1121;
    var $1122$1=(((($1121|0)<0))|0)?-1:0;
    var $1123=((($i_12608)-(2))|0);
    var $1124=(($data+($1123<<2))|0);
    var $1125=HEAP32[(($1124)>>2)];
    var $1126$0=$1125;
    var $1126$1=(((($1125|0)<0))|0)?-1:0;
    var $1127$0=___muldi3($1126$0,$1126$1,$1122$0,$1122$1);var $1127$1=tempRet0;
    var $1128$0=_i64Add($1120$0,$1120$1,$1127$0,$1127$1);var $1128$1=tempRet0;
    var $1129=HEAP32[(($qlp_coeff)>>2)];
    var $1130$0=$1129;
    var $1130$1=(((($1129|0)<0))|0)?-1:0;
    var $1131=((($i_12608)-(1))|0);
    var $1132=(($data+($1131<<2))|0);
    var $1133=HEAP32[(($1132)>>2)];
    var $1134$0=$1133;
    var $1134$1=(((($1133|0)<0))|0)?-1:0;
    var $1135$0=___muldi3($1134$0,$1134$1,$1130$0,$1130$1);var $1135$1=tempRet0;
    var $1136$0=_i64Add($1128$0,$1128$1,$1135$0,$1135$1);var $1136$1=tempRet0;
    var $sum_19$1=$1136$1;var $sum_19$0=$1136$0;
   }
   var $sum_19$0;
   var $sum_19$1;
   var $1138=(($data+($i_12608<<2))|0);
   var $1139=HEAP32[(($1138)>>2)];
   var $1140$0=_bitshift64Ashr($sum_19$0,$sum_19$1,$3$0);var $1140$1=tempRet0;
   var $1141$0=$1140$0;
   var $1141=$1141$0;
   var $1142=((($1139)-($1141))|0);
   var $1143=(($residual+($i_12608<<2))|0);
   HEAP32[(($1143)>>2)]=$1142;
   var $1144=((($i_12608)+(1))|0);
   var $1145=($1144|0)<($data_len|0);
   if ($1145) {
    var $i_12608=$1144;
   } else {
    break;
   }
  }
  return;
 }
 var $36=($order>>>0)>8;
 if ($36) {
  var $38=($order>>>0)>10;
  if ($38) {
   var $40=($order|0)==12;
   var $41=($data_len|0)>0;
   if ($40) {
    if (!($41)) {
     return;
    }
    var $53=(($qlp_coeff+44)|0);
    var $54=(($qlp_coeff+40)|0);
    var $55=(($qlp_coeff+36)|0);
    var $56=(($qlp_coeff+32)|0);
    var $57=(($qlp_coeff+28)|0);
    var $58=(($qlp_coeff+24)|0);
    var $59=(($qlp_coeff+20)|0);
    var $60=(($qlp_coeff+16)|0);
    var $61=(($qlp_coeff+12)|0);
    var $62=(($qlp_coeff+8)|0);
    var $63=(($qlp_coeff+4)|0);
    var $64$0=$lp_quantization;
    var $64$1=0;
    var $i_0561=0;
    while(1) {
     var $i_0561;
     var $66=HEAP32[(($53)>>2)];
     var $67$0=$66;
     var $67$1=(((($66|0)<0))|0)?-1:0;
     var $68=((($i_0561)-(12))|0);
     var $69=(($data+($68<<2))|0);
     var $70=HEAP32[(($69)>>2)];
     var $71$0=$70;
     var $71$1=(((($70|0)<0))|0)?-1:0;
     var $72$0=___muldi3($71$0,$71$1,$67$0,$67$1);var $72$1=tempRet0;
     var $73=HEAP32[(($54)>>2)];
     var $74$0=$73;
     var $74$1=(((($73|0)<0))|0)?-1:0;
     var $75=((($i_0561)-(11))|0);
     var $76=(($data+($75<<2))|0);
     var $77=HEAP32[(($76)>>2)];
     var $78$0=$77;
     var $78$1=(((($77|0)<0))|0)?-1:0;
     var $79$0=___muldi3($78$0,$78$1,$74$0,$74$1);var $79$1=tempRet0;
     var $80$0=_i64Add($79$0,$79$1,$72$0,$72$1);var $80$1=tempRet0;
     var $81=HEAP32[(($55)>>2)];
     var $82$0=$81;
     var $82$1=(((($81|0)<0))|0)?-1:0;
     var $83=((($i_0561)-(10))|0);
     var $84=(($data+($83<<2))|0);
     var $85=HEAP32[(($84)>>2)];
     var $86$0=$85;
     var $86$1=(((($85|0)<0))|0)?-1:0;
     var $87$0=___muldi3($86$0,$86$1,$82$0,$82$1);var $87$1=tempRet0;
     var $88$0=_i64Add($80$0,$80$1,$87$0,$87$1);var $88$1=tempRet0;
     var $89=HEAP32[(($56)>>2)];
     var $90$0=$89;
     var $90$1=(((($89|0)<0))|0)?-1:0;
     var $91=((($i_0561)-(9))|0);
     var $92=(($data+($91<<2))|0);
     var $93=HEAP32[(($92)>>2)];
     var $94$0=$93;
     var $94$1=(((($93|0)<0))|0)?-1:0;
     var $95$0=___muldi3($94$0,$94$1,$90$0,$90$1);var $95$1=tempRet0;
     var $96$0=_i64Add($88$0,$88$1,$95$0,$95$1);var $96$1=tempRet0;
     var $97=HEAP32[(($57)>>2)];
     var $98$0=$97;
     var $98$1=(((($97|0)<0))|0)?-1:0;
     var $99=((($i_0561)-(8))|0);
     var $100=(($data+($99<<2))|0);
     var $101=HEAP32[(($100)>>2)];
     var $102$0=$101;
     var $102$1=(((($101|0)<0))|0)?-1:0;
     var $103$0=___muldi3($102$0,$102$1,$98$0,$98$1);var $103$1=tempRet0;
     var $104$0=_i64Add($96$0,$96$1,$103$0,$103$1);var $104$1=tempRet0;
     var $105=HEAP32[(($58)>>2)];
     var $106$0=$105;
     var $106$1=(((($105|0)<0))|0)?-1:0;
     var $107=((($i_0561)-(7))|0);
     var $108=(($data+($107<<2))|0);
     var $109=HEAP32[(($108)>>2)];
     var $110$0=$109;
     var $110$1=(((($109|0)<0))|0)?-1:0;
     var $111$0=___muldi3($110$0,$110$1,$106$0,$106$1);var $111$1=tempRet0;
     var $112$0=_i64Add($104$0,$104$1,$111$0,$111$1);var $112$1=tempRet0;
     var $113=HEAP32[(($59)>>2)];
     var $114$0=$113;
     var $114$1=(((($113|0)<0))|0)?-1:0;
     var $115=((($i_0561)-(6))|0);
     var $116=(($data+($115<<2))|0);
     var $117=HEAP32[(($116)>>2)];
     var $118$0=$117;
     var $118$1=(((($117|0)<0))|0)?-1:0;
     var $119$0=___muldi3($118$0,$118$1,$114$0,$114$1);var $119$1=tempRet0;
     var $120$0=_i64Add($112$0,$112$1,$119$0,$119$1);var $120$1=tempRet0;
     var $121=HEAP32[(($60)>>2)];
     var $122$0=$121;
     var $122$1=(((($121|0)<0))|0)?-1:0;
     var $123=((($i_0561)-(5))|0);
     var $124=(($data+($123<<2))|0);
     var $125=HEAP32[(($124)>>2)];
     var $126$0=$125;
     var $126$1=(((($125|0)<0))|0)?-1:0;
     var $127$0=___muldi3($126$0,$126$1,$122$0,$122$1);var $127$1=tempRet0;
     var $128$0=_i64Add($120$0,$120$1,$127$0,$127$1);var $128$1=tempRet0;
     var $129=HEAP32[(($61)>>2)];
     var $130$0=$129;
     var $130$1=(((($129|0)<0))|0)?-1:0;
     var $131=((($i_0561)-(4))|0);
     var $132=(($data+($131<<2))|0);
     var $133=HEAP32[(($132)>>2)];
     var $134$0=$133;
     var $134$1=(((($133|0)<0))|0)?-1:0;
     var $135$0=___muldi3($134$0,$134$1,$130$0,$130$1);var $135$1=tempRet0;
     var $136$0=_i64Add($128$0,$128$1,$135$0,$135$1);var $136$1=tempRet0;
     var $137=HEAP32[(($62)>>2)];
     var $138$0=$137;
     var $138$1=(((($137|0)<0))|0)?-1:0;
     var $139=((($i_0561)-(3))|0);
     var $140=(($data+($139<<2))|0);
     var $141=HEAP32[(($140)>>2)];
     var $142$0=$141;
     var $142$1=(((($141|0)<0))|0)?-1:0;
     var $143$0=___muldi3($142$0,$142$1,$138$0,$138$1);var $143$1=tempRet0;
     var $144$0=_i64Add($136$0,$136$1,$143$0,$143$1);var $144$1=tempRet0;
     var $145=HEAP32[(($63)>>2)];
     var $146$0=$145;
     var $146$1=(((($145|0)<0))|0)?-1:0;
     var $147=((($i_0561)-(2))|0);
     var $148=(($data+($147<<2))|0);
     var $149=HEAP32[(($148)>>2)];
     var $150$0=$149;
     var $150$1=(((($149|0)<0))|0)?-1:0;
     var $151$0=___muldi3($150$0,$150$1,$146$0,$146$1);var $151$1=tempRet0;
     var $152$0=_i64Add($144$0,$144$1,$151$0,$151$1);var $152$1=tempRet0;
     var $153=HEAP32[(($qlp_coeff)>>2)];
     var $154$0=$153;
     var $154$1=(((($153|0)<0))|0)?-1:0;
     var $155=((($i_0561)-(1))|0);
     var $156=(($data+($155<<2))|0);
     var $157=HEAP32[(($156)>>2)];
     var $158$0=$157;
     var $158$1=(((($157|0)<0))|0)?-1:0;
     var $159$0=___muldi3($158$0,$158$1,$154$0,$154$1);var $159$1=tempRet0;
     var $160$0=_i64Add($152$0,$152$1,$159$0,$159$1);var $160$1=tempRet0;
     var $161=(($data+($i_0561<<2))|0);
     var $162=HEAP32[(($161)>>2)];
     var $163$0=_bitshift64Ashr($160$0,$160$1,$64$0);var $163$1=tempRet0;
     var $164$0=$163$0;
     var $164=$164$0;
     var $165=((($162)-($164))|0);
     var $166=(($residual+($i_0561<<2))|0);
     HEAP32[(($166)>>2)]=$165;
     var $167=((($i_0561)+(1))|0);
     var $168=($167|0)<($data_len|0);
     if ($168) {
      var $i_0561=$167;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($41)) {
     return;
    }
    var $42=(($qlp_coeff+40)|0);
    var $43=(($qlp_coeff+36)|0);
    var $44=(($qlp_coeff+32)|0);
    var $45=(($qlp_coeff+28)|0);
    var $46=(($qlp_coeff+24)|0);
    var $47=(($qlp_coeff+20)|0);
    var $48=(($qlp_coeff+16)|0);
    var $49=(($qlp_coeff+12)|0);
    var $50=(($qlp_coeff+8)|0);
    var $51=(($qlp_coeff+4)|0);
    var $52$0=$lp_quantization;
    var $52$1=0;
    var $i_1564=0;
    while(1) {
     var $i_1564;
     var $170=HEAP32[(($42)>>2)];
     var $171$0=$170;
     var $171$1=(((($170|0)<0))|0)?-1:0;
     var $172=((($i_1564)-(11))|0);
     var $173=(($data+($172<<2))|0);
     var $174=HEAP32[(($173)>>2)];
     var $175$0=$174;
     var $175$1=(((($174|0)<0))|0)?-1:0;
     var $176$0=___muldi3($175$0,$175$1,$171$0,$171$1);var $176$1=tempRet0;
     var $177=HEAP32[(($43)>>2)];
     var $178$0=$177;
     var $178$1=(((($177|0)<0))|0)?-1:0;
     var $179=((($i_1564)-(10))|0);
     var $180=(($data+($179<<2))|0);
     var $181=HEAP32[(($180)>>2)];
     var $182$0=$181;
     var $182$1=(((($181|0)<0))|0)?-1:0;
     var $183$0=___muldi3($182$0,$182$1,$178$0,$178$1);var $183$1=tempRet0;
     var $184$0=_i64Add($183$0,$183$1,$176$0,$176$1);var $184$1=tempRet0;
     var $185=HEAP32[(($44)>>2)];
     var $186$0=$185;
     var $186$1=(((($185|0)<0))|0)?-1:0;
     var $187=((($i_1564)-(9))|0);
     var $188=(($data+($187<<2))|0);
     var $189=HEAP32[(($188)>>2)];
     var $190$0=$189;
     var $190$1=(((($189|0)<0))|0)?-1:0;
     var $191$0=___muldi3($190$0,$190$1,$186$0,$186$1);var $191$1=tempRet0;
     var $192$0=_i64Add($184$0,$184$1,$191$0,$191$1);var $192$1=tempRet0;
     var $193=HEAP32[(($45)>>2)];
     var $194$0=$193;
     var $194$1=(((($193|0)<0))|0)?-1:0;
     var $195=((($i_1564)-(8))|0);
     var $196=(($data+($195<<2))|0);
     var $197=HEAP32[(($196)>>2)];
     var $198$0=$197;
     var $198$1=(((($197|0)<0))|0)?-1:0;
     var $199$0=___muldi3($198$0,$198$1,$194$0,$194$1);var $199$1=tempRet0;
     var $200$0=_i64Add($192$0,$192$1,$199$0,$199$1);var $200$1=tempRet0;
     var $201=HEAP32[(($46)>>2)];
     var $202$0=$201;
     var $202$1=(((($201|0)<0))|0)?-1:0;
     var $203=((($i_1564)-(7))|0);
     var $204=(($data+($203<<2))|0);
     var $205=HEAP32[(($204)>>2)];
     var $206$0=$205;
     var $206$1=(((($205|0)<0))|0)?-1:0;
     var $207$0=___muldi3($206$0,$206$1,$202$0,$202$1);var $207$1=tempRet0;
     var $208$0=_i64Add($200$0,$200$1,$207$0,$207$1);var $208$1=tempRet0;
     var $209=HEAP32[(($47)>>2)];
     var $210$0=$209;
     var $210$1=(((($209|0)<0))|0)?-1:0;
     var $211=((($i_1564)-(6))|0);
     var $212=(($data+($211<<2))|0);
     var $213=HEAP32[(($212)>>2)];
     var $214$0=$213;
     var $214$1=(((($213|0)<0))|0)?-1:0;
     var $215$0=___muldi3($214$0,$214$1,$210$0,$210$1);var $215$1=tempRet0;
     var $216$0=_i64Add($208$0,$208$1,$215$0,$215$1);var $216$1=tempRet0;
     var $217=HEAP32[(($48)>>2)];
     var $218$0=$217;
     var $218$1=(((($217|0)<0))|0)?-1:0;
     var $219=((($i_1564)-(5))|0);
     var $220=(($data+($219<<2))|0);
     var $221=HEAP32[(($220)>>2)];
     var $222$0=$221;
     var $222$1=(((($221|0)<0))|0)?-1:0;
     var $223$0=___muldi3($222$0,$222$1,$218$0,$218$1);var $223$1=tempRet0;
     var $224$0=_i64Add($216$0,$216$1,$223$0,$223$1);var $224$1=tempRet0;
     var $225=HEAP32[(($49)>>2)];
     var $226$0=$225;
     var $226$1=(((($225|0)<0))|0)?-1:0;
     var $227=((($i_1564)-(4))|0);
     var $228=(($data+($227<<2))|0);
     var $229=HEAP32[(($228)>>2)];
     var $230$0=$229;
     var $230$1=(((($229|0)<0))|0)?-1:0;
     var $231$0=___muldi3($230$0,$230$1,$226$0,$226$1);var $231$1=tempRet0;
     var $232$0=_i64Add($224$0,$224$1,$231$0,$231$1);var $232$1=tempRet0;
     var $233=HEAP32[(($50)>>2)];
     var $234$0=$233;
     var $234$1=(((($233|0)<0))|0)?-1:0;
     var $235=((($i_1564)-(3))|0);
     var $236=(($data+($235<<2))|0);
     var $237=HEAP32[(($236)>>2)];
     var $238$0=$237;
     var $238$1=(((($237|0)<0))|0)?-1:0;
     var $239$0=___muldi3($238$0,$238$1,$234$0,$234$1);var $239$1=tempRet0;
     var $240$0=_i64Add($232$0,$232$1,$239$0,$239$1);var $240$1=tempRet0;
     var $241=HEAP32[(($51)>>2)];
     var $242$0=$241;
     var $242$1=(((($241|0)<0))|0)?-1:0;
     var $243=((($i_1564)-(2))|0);
     var $244=(($data+($243<<2))|0);
     var $245=HEAP32[(($244)>>2)];
     var $246$0=$245;
     var $246$1=(((($245|0)<0))|0)?-1:0;
     var $247$0=___muldi3($246$0,$246$1,$242$0,$242$1);var $247$1=tempRet0;
     var $248$0=_i64Add($240$0,$240$1,$247$0,$247$1);var $248$1=tempRet0;
     var $249=HEAP32[(($qlp_coeff)>>2)];
     var $250$0=$249;
     var $250$1=(((($249|0)<0))|0)?-1:0;
     var $251=((($i_1564)-(1))|0);
     var $252=(($data+($251<<2))|0);
     var $253=HEAP32[(($252)>>2)];
     var $254$0=$253;
     var $254$1=(((($253|0)<0))|0)?-1:0;
     var $255$0=___muldi3($254$0,$254$1,$250$0,$250$1);var $255$1=tempRet0;
     var $256$0=_i64Add($248$0,$248$1,$255$0,$255$1);var $256$1=tempRet0;
     var $257=(($data+($i_1564<<2))|0);
     var $258=HEAP32[(($257)>>2)];
     var $259$0=_bitshift64Ashr($256$0,$256$1,$52$0);var $259$1=tempRet0;
     var $260$0=$259$0;
     var $260=$260$0;
     var $261=((($258)-($260))|0);
     var $262=(($residual+($i_1564<<2))|0);
     HEAP32[(($262)>>2)]=$261;
     var $263=((($i_1564)+(1))|0);
     var $264=($263|0)<($data_len|0);
     if ($264) {
      var $i_1564=$263;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $266=($order|0)==10;
   var $267=($data_len|0)>0;
   if ($266) {
    if (!($267)) {
     return;
    }
    var $277=(($qlp_coeff+36)|0);
    var $278=(($qlp_coeff+32)|0);
    var $279=(($qlp_coeff+28)|0);
    var $280=(($qlp_coeff+24)|0);
    var $281=(($qlp_coeff+20)|0);
    var $282=(($qlp_coeff+16)|0);
    var $283=(($qlp_coeff+12)|0);
    var $284=(($qlp_coeff+8)|0);
    var $285=(($qlp_coeff+4)|0);
    var $286$0=$lp_quantization;
    var $286$1=0;
    var $i_2568=0;
    while(1) {
     var $i_2568;
     var $288=HEAP32[(($277)>>2)];
     var $289$0=$288;
     var $289$1=(((($288|0)<0))|0)?-1:0;
     var $290=((($i_2568)-(10))|0);
     var $291=(($data+($290<<2))|0);
     var $292=HEAP32[(($291)>>2)];
     var $293$0=$292;
     var $293$1=(((($292|0)<0))|0)?-1:0;
     var $294$0=___muldi3($293$0,$293$1,$289$0,$289$1);var $294$1=tempRet0;
     var $295=HEAP32[(($278)>>2)];
     var $296$0=$295;
     var $296$1=(((($295|0)<0))|0)?-1:0;
     var $297=((($i_2568)-(9))|0);
     var $298=(($data+($297<<2))|0);
     var $299=HEAP32[(($298)>>2)];
     var $300$0=$299;
     var $300$1=(((($299|0)<0))|0)?-1:0;
     var $301$0=___muldi3($300$0,$300$1,$296$0,$296$1);var $301$1=tempRet0;
     var $302$0=_i64Add($301$0,$301$1,$294$0,$294$1);var $302$1=tempRet0;
     var $303=HEAP32[(($279)>>2)];
     var $304$0=$303;
     var $304$1=(((($303|0)<0))|0)?-1:0;
     var $305=((($i_2568)-(8))|0);
     var $306=(($data+($305<<2))|0);
     var $307=HEAP32[(($306)>>2)];
     var $308$0=$307;
     var $308$1=(((($307|0)<0))|0)?-1:0;
     var $309$0=___muldi3($308$0,$308$1,$304$0,$304$1);var $309$1=tempRet0;
     var $310$0=_i64Add($302$0,$302$1,$309$0,$309$1);var $310$1=tempRet0;
     var $311=HEAP32[(($280)>>2)];
     var $312$0=$311;
     var $312$1=(((($311|0)<0))|0)?-1:0;
     var $313=((($i_2568)-(7))|0);
     var $314=(($data+($313<<2))|0);
     var $315=HEAP32[(($314)>>2)];
     var $316$0=$315;
     var $316$1=(((($315|0)<0))|0)?-1:0;
     var $317$0=___muldi3($316$0,$316$1,$312$0,$312$1);var $317$1=tempRet0;
     var $318$0=_i64Add($310$0,$310$1,$317$0,$317$1);var $318$1=tempRet0;
     var $319=HEAP32[(($281)>>2)];
     var $320$0=$319;
     var $320$1=(((($319|0)<0))|0)?-1:0;
     var $321=((($i_2568)-(6))|0);
     var $322=(($data+($321<<2))|0);
     var $323=HEAP32[(($322)>>2)];
     var $324$0=$323;
     var $324$1=(((($323|0)<0))|0)?-1:0;
     var $325$0=___muldi3($324$0,$324$1,$320$0,$320$1);var $325$1=tempRet0;
     var $326$0=_i64Add($318$0,$318$1,$325$0,$325$1);var $326$1=tempRet0;
     var $327=HEAP32[(($282)>>2)];
     var $328$0=$327;
     var $328$1=(((($327|0)<0))|0)?-1:0;
     var $329=((($i_2568)-(5))|0);
     var $330=(($data+($329<<2))|0);
     var $331=HEAP32[(($330)>>2)];
     var $332$0=$331;
     var $332$1=(((($331|0)<0))|0)?-1:0;
     var $333$0=___muldi3($332$0,$332$1,$328$0,$328$1);var $333$1=tempRet0;
     var $334$0=_i64Add($326$0,$326$1,$333$0,$333$1);var $334$1=tempRet0;
     var $335=HEAP32[(($283)>>2)];
     var $336$0=$335;
     var $336$1=(((($335|0)<0))|0)?-1:0;
     var $337=((($i_2568)-(4))|0);
     var $338=(($data+($337<<2))|0);
     var $339=HEAP32[(($338)>>2)];
     var $340$0=$339;
     var $340$1=(((($339|0)<0))|0)?-1:0;
     var $341$0=___muldi3($340$0,$340$1,$336$0,$336$1);var $341$1=tempRet0;
     var $342$0=_i64Add($334$0,$334$1,$341$0,$341$1);var $342$1=tempRet0;
     var $343=HEAP32[(($284)>>2)];
     var $344$0=$343;
     var $344$1=(((($343|0)<0))|0)?-1:0;
     var $345=((($i_2568)-(3))|0);
     var $346=(($data+($345<<2))|0);
     var $347=HEAP32[(($346)>>2)];
     var $348$0=$347;
     var $348$1=(((($347|0)<0))|0)?-1:0;
     var $349$0=___muldi3($348$0,$348$1,$344$0,$344$1);var $349$1=tempRet0;
     var $350$0=_i64Add($342$0,$342$1,$349$0,$349$1);var $350$1=tempRet0;
     var $351=HEAP32[(($285)>>2)];
     var $352$0=$351;
     var $352$1=(((($351|0)<0))|0)?-1:0;
     var $353=((($i_2568)-(2))|0);
     var $354=(($data+($353<<2))|0);
     var $355=HEAP32[(($354)>>2)];
     var $356$0=$355;
     var $356$1=(((($355|0)<0))|0)?-1:0;
     var $357$0=___muldi3($356$0,$356$1,$352$0,$352$1);var $357$1=tempRet0;
     var $358$0=_i64Add($350$0,$350$1,$357$0,$357$1);var $358$1=tempRet0;
     var $359=HEAP32[(($qlp_coeff)>>2)];
     var $360$0=$359;
     var $360$1=(((($359|0)<0))|0)?-1:0;
     var $361=((($i_2568)-(1))|0);
     var $362=(($data+($361<<2))|0);
     var $363=HEAP32[(($362)>>2)];
     var $364$0=$363;
     var $364$1=(((($363|0)<0))|0)?-1:0;
     var $365$0=___muldi3($364$0,$364$1,$360$0,$360$1);var $365$1=tempRet0;
     var $366$0=_i64Add($358$0,$358$1,$365$0,$365$1);var $366$1=tempRet0;
     var $367=(($data+($i_2568<<2))|0);
     var $368=HEAP32[(($367)>>2)];
     var $369$0=_bitshift64Ashr($366$0,$366$1,$286$0);var $369$1=tempRet0;
     var $370$0=$369$0;
     var $370=$370$0;
     var $371=((($368)-($370))|0);
     var $372=(($residual+($i_2568<<2))|0);
     HEAP32[(($372)>>2)]=$371;
     var $373=((($i_2568)+(1))|0);
     var $374=($373|0)<($data_len|0);
     if ($374) {
      var $i_2568=$373;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($267)) {
     return;
    }
    var $268=(($qlp_coeff+32)|0);
    var $269=(($qlp_coeff+28)|0);
    var $270=(($qlp_coeff+24)|0);
    var $271=(($qlp_coeff+20)|0);
    var $272=(($qlp_coeff+16)|0);
    var $273=(($qlp_coeff+12)|0);
    var $274=(($qlp_coeff+8)|0);
    var $275=(($qlp_coeff+4)|0);
    var $276$0=$lp_quantization;
    var $276$1=0;
    var $i_3572=0;
    while(1) {
     var $i_3572;
     var $376=HEAP32[(($268)>>2)];
     var $377$0=$376;
     var $377$1=(((($376|0)<0))|0)?-1:0;
     var $378=((($i_3572)-(9))|0);
     var $379=(($data+($378<<2))|0);
     var $380=HEAP32[(($379)>>2)];
     var $381$0=$380;
     var $381$1=(((($380|0)<0))|0)?-1:0;
     var $382$0=___muldi3($381$0,$381$1,$377$0,$377$1);var $382$1=tempRet0;
     var $383=HEAP32[(($269)>>2)];
     var $384$0=$383;
     var $384$1=(((($383|0)<0))|0)?-1:0;
     var $385=((($i_3572)-(8))|0);
     var $386=(($data+($385<<2))|0);
     var $387=HEAP32[(($386)>>2)];
     var $388$0=$387;
     var $388$1=(((($387|0)<0))|0)?-1:0;
     var $389$0=___muldi3($388$0,$388$1,$384$0,$384$1);var $389$1=tempRet0;
     var $390$0=_i64Add($389$0,$389$1,$382$0,$382$1);var $390$1=tempRet0;
     var $391=HEAP32[(($270)>>2)];
     var $392$0=$391;
     var $392$1=(((($391|0)<0))|0)?-1:0;
     var $393=((($i_3572)-(7))|0);
     var $394=(($data+($393<<2))|0);
     var $395=HEAP32[(($394)>>2)];
     var $396$0=$395;
     var $396$1=(((($395|0)<0))|0)?-1:0;
     var $397$0=___muldi3($396$0,$396$1,$392$0,$392$1);var $397$1=tempRet0;
     var $398$0=_i64Add($390$0,$390$1,$397$0,$397$1);var $398$1=tempRet0;
     var $399=HEAP32[(($271)>>2)];
     var $400$0=$399;
     var $400$1=(((($399|0)<0))|0)?-1:0;
     var $401=((($i_3572)-(6))|0);
     var $402=(($data+($401<<2))|0);
     var $403=HEAP32[(($402)>>2)];
     var $404$0=$403;
     var $404$1=(((($403|0)<0))|0)?-1:0;
     var $405$0=___muldi3($404$0,$404$1,$400$0,$400$1);var $405$1=tempRet0;
     var $406$0=_i64Add($398$0,$398$1,$405$0,$405$1);var $406$1=tempRet0;
     var $407=HEAP32[(($272)>>2)];
     var $408$0=$407;
     var $408$1=(((($407|0)<0))|0)?-1:0;
     var $409=((($i_3572)-(5))|0);
     var $410=(($data+($409<<2))|0);
     var $411=HEAP32[(($410)>>2)];
     var $412$0=$411;
     var $412$1=(((($411|0)<0))|0)?-1:0;
     var $413$0=___muldi3($412$0,$412$1,$408$0,$408$1);var $413$1=tempRet0;
     var $414$0=_i64Add($406$0,$406$1,$413$0,$413$1);var $414$1=tempRet0;
     var $415=HEAP32[(($273)>>2)];
     var $416$0=$415;
     var $416$1=(((($415|0)<0))|0)?-1:0;
     var $417=((($i_3572)-(4))|0);
     var $418=(($data+($417<<2))|0);
     var $419=HEAP32[(($418)>>2)];
     var $420$0=$419;
     var $420$1=(((($419|0)<0))|0)?-1:0;
     var $421$0=___muldi3($420$0,$420$1,$416$0,$416$1);var $421$1=tempRet0;
     var $422$0=_i64Add($414$0,$414$1,$421$0,$421$1);var $422$1=tempRet0;
     var $423=HEAP32[(($274)>>2)];
     var $424$0=$423;
     var $424$1=(((($423|0)<0))|0)?-1:0;
     var $425=((($i_3572)-(3))|0);
     var $426=(($data+($425<<2))|0);
     var $427=HEAP32[(($426)>>2)];
     var $428$0=$427;
     var $428$1=(((($427|0)<0))|0)?-1:0;
     var $429$0=___muldi3($428$0,$428$1,$424$0,$424$1);var $429$1=tempRet0;
     var $430$0=_i64Add($422$0,$422$1,$429$0,$429$1);var $430$1=tempRet0;
     var $431=HEAP32[(($275)>>2)];
     var $432$0=$431;
     var $432$1=(((($431|0)<0))|0)?-1:0;
     var $433=((($i_3572)-(2))|0);
     var $434=(($data+($433<<2))|0);
     var $435=HEAP32[(($434)>>2)];
     var $436$0=$435;
     var $436$1=(((($435|0)<0))|0)?-1:0;
     var $437$0=___muldi3($436$0,$436$1,$432$0,$432$1);var $437$1=tempRet0;
     var $438$0=_i64Add($430$0,$430$1,$437$0,$437$1);var $438$1=tempRet0;
     var $439=HEAP32[(($qlp_coeff)>>2)];
     var $440$0=$439;
     var $440$1=(((($439|0)<0))|0)?-1:0;
     var $441=((($i_3572)-(1))|0);
     var $442=(($data+($441<<2))|0);
     var $443=HEAP32[(($442)>>2)];
     var $444$0=$443;
     var $444$1=(((($443|0)<0))|0)?-1:0;
     var $445$0=___muldi3($444$0,$444$1,$440$0,$440$1);var $445$1=tempRet0;
     var $446$0=_i64Add($438$0,$438$1,$445$0,$445$1);var $446$1=tempRet0;
     var $447=(($data+($i_3572<<2))|0);
     var $448=HEAP32[(($447)>>2)];
     var $449$0=_bitshift64Ashr($446$0,$446$1,$276$0);var $449$1=tempRet0;
     var $450$0=$449$0;
     var $450=$450$0;
     var $451=((($448)-($450))|0);
     var $452=(($residual+($i_3572<<2))|0);
     HEAP32[(($452)>>2)]=$451;
     var $453=((($i_3572)+(1))|0);
     var $454=($453|0)<($data_len|0);
     if ($454) {
      var $i_3572=$453;
     } else {
      break;
     }
    }
    return;
   }
  }
 }
 var $456=($order>>>0)>4;
 if ($456) {
  var $458=($order>>>0)>6;
  if ($458) {
   var $460=($order|0)==8;
   var $461=($data_len|0)>0;
   if ($460) {
    if (!($461)) {
     return;
    }
    var $469=(($qlp_coeff+28)|0);
    var $470=(($qlp_coeff+24)|0);
    var $471=(($qlp_coeff+20)|0);
    var $472=(($qlp_coeff+16)|0);
    var $473=(($qlp_coeff+12)|0);
    var $474=(($qlp_coeff+8)|0);
    var $475=(($qlp_coeff+4)|0);
    var $476$0=$lp_quantization;
    var $476$1=0;
    var $i_4576=0;
    while(1) {
     var $i_4576;
     var $478=HEAP32[(($469)>>2)];
     var $479$0=$478;
     var $479$1=(((($478|0)<0))|0)?-1:0;
     var $480=((($i_4576)-(8))|0);
     var $481=(($data+($480<<2))|0);
     var $482=HEAP32[(($481)>>2)];
     var $483$0=$482;
     var $483$1=(((($482|0)<0))|0)?-1:0;
     var $484$0=___muldi3($483$0,$483$1,$479$0,$479$1);var $484$1=tempRet0;
     var $485=HEAP32[(($470)>>2)];
     var $486$0=$485;
     var $486$1=(((($485|0)<0))|0)?-1:0;
     var $487=((($i_4576)-(7))|0);
     var $488=(($data+($487<<2))|0);
     var $489=HEAP32[(($488)>>2)];
     var $490$0=$489;
     var $490$1=(((($489|0)<0))|0)?-1:0;
     var $491$0=___muldi3($490$0,$490$1,$486$0,$486$1);var $491$1=tempRet0;
     var $492$0=_i64Add($491$0,$491$1,$484$0,$484$1);var $492$1=tempRet0;
     var $493=HEAP32[(($471)>>2)];
     var $494$0=$493;
     var $494$1=(((($493|0)<0))|0)?-1:0;
     var $495=((($i_4576)-(6))|0);
     var $496=(($data+($495<<2))|0);
     var $497=HEAP32[(($496)>>2)];
     var $498$0=$497;
     var $498$1=(((($497|0)<0))|0)?-1:0;
     var $499$0=___muldi3($498$0,$498$1,$494$0,$494$1);var $499$1=tempRet0;
     var $500$0=_i64Add($492$0,$492$1,$499$0,$499$1);var $500$1=tempRet0;
     var $501=HEAP32[(($472)>>2)];
     var $502$0=$501;
     var $502$1=(((($501|0)<0))|0)?-1:0;
     var $503=((($i_4576)-(5))|0);
     var $504=(($data+($503<<2))|0);
     var $505=HEAP32[(($504)>>2)];
     var $506$0=$505;
     var $506$1=(((($505|0)<0))|0)?-1:0;
     var $507$0=___muldi3($506$0,$506$1,$502$0,$502$1);var $507$1=tempRet0;
     var $508$0=_i64Add($500$0,$500$1,$507$0,$507$1);var $508$1=tempRet0;
     var $509=HEAP32[(($473)>>2)];
     var $510$0=$509;
     var $510$1=(((($509|0)<0))|0)?-1:0;
     var $511=((($i_4576)-(4))|0);
     var $512=(($data+($511<<2))|0);
     var $513=HEAP32[(($512)>>2)];
     var $514$0=$513;
     var $514$1=(((($513|0)<0))|0)?-1:0;
     var $515$0=___muldi3($514$0,$514$1,$510$0,$510$1);var $515$1=tempRet0;
     var $516$0=_i64Add($508$0,$508$1,$515$0,$515$1);var $516$1=tempRet0;
     var $517=HEAP32[(($474)>>2)];
     var $518$0=$517;
     var $518$1=(((($517|0)<0))|0)?-1:0;
     var $519=((($i_4576)-(3))|0);
     var $520=(($data+($519<<2))|0);
     var $521=HEAP32[(($520)>>2)];
     var $522$0=$521;
     var $522$1=(((($521|0)<0))|0)?-1:0;
     var $523$0=___muldi3($522$0,$522$1,$518$0,$518$1);var $523$1=tempRet0;
     var $524$0=_i64Add($516$0,$516$1,$523$0,$523$1);var $524$1=tempRet0;
     var $525=HEAP32[(($475)>>2)];
     var $526$0=$525;
     var $526$1=(((($525|0)<0))|0)?-1:0;
     var $527=((($i_4576)-(2))|0);
     var $528=(($data+($527<<2))|0);
     var $529=HEAP32[(($528)>>2)];
     var $530$0=$529;
     var $530$1=(((($529|0)<0))|0)?-1:0;
     var $531$0=___muldi3($530$0,$530$1,$526$0,$526$1);var $531$1=tempRet0;
     var $532$0=_i64Add($524$0,$524$1,$531$0,$531$1);var $532$1=tempRet0;
     var $533=HEAP32[(($qlp_coeff)>>2)];
     var $534$0=$533;
     var $534$1=(((($533|0)<0))|0)?-1:0;
     var $535=((($i_4576)-(1))|0);
     var $536=(($data+($535<<2))|0);
     var $537=HEAP32[(($536)>>2)];
     var $538$0=$537;
     var $538$1=(((($537|0)<0))|0)?-1:0;
     var $539$0=___muldi3($538$0,$538$1,$534$0,$534$1);var $539$1=tempRet0;
     var $540$0=_i64Add($532$0,$532$1,$539$0,$539$1);var $540$1=tempRet0;
     var $541=(($data+($i_4576<<2))|0);
     var $542=HEAP32[(($541)>>2)];
     var $543$0=_bitshift64Ashr($540$0,$540$1,$476$0);var $543$1=tempRet0;
     var $544$0=$543$0;
     var $544=$544$0;
     var $545=((($542)-($544))|0);
     var $546=(($residual+($i_4576<<2))|0);
     HEAP32[(($546)>>2)]=$545;
     var $547=((($i_4576)+(1))|0);
     var $548=($547|0)<($data_len|0);
     if ($548) {
      var $i_4576=$547;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($461)) {
     return;
    }
    var $462=(($qlp_coeff+24)|0);
    var $463=(($qlp_coeff+20)|0);
    var $464=(($qlp_coeff+16)|0);
    var $465=(($qlp_coeff+12)|0);
    var $466=(($qlp_coeff+8)|0);
    var $467=(($qlp_coeff+4)|0);
    var $468$0=$lp_quantization;
    var $468$1=0;
    var $i_5580=0;
    while(1) {
     var $i_5580;
     var $550=HEAP32[(($462)>>2)];
     var $551$0=$550;
     var $551$1=(((($550|0)<0))|0)?-1:0;
     var $552=((($i_5580)-(7))|0);
     var $553=(($data+($552<<2))|0);
     var $554=HEAP32[(($553)>>2)];
     var $555$0=$554;
     var $555$1=(((($554|0)<0))|0)?-1:0;
     var $556$0=___muldi3($555$0,$555$1,$551$0,$551$1);var $556$1=tempRet0;
     var $557=HEAP32[(($463)>>2)];
     var $558$0=$557;
     var $558$1=(((($557|0)<0))|0)?-1:0;
     var $559=((($i_5580)-(6))|0);
     var $560=(($data+($559<<2))|0);
     var $561=HEAP32[(($560)>>2)];
     var $562$0=$561;
     var $562$1=(((($561|0)<0))|0)?-1:0;
     var $563$0=___muldi3($562$0,$562$1,$558$0,$558$1);var $563$1=tempRet0;
     var $564$0=_i64Add($563$0,$563$1,$556$0,$556$1);var $564$1=tempRet0;
     var $565=HEAP32[(($464)>>2)];
     var $566$0=$565;
     var $566$1=(((($565|0)<0))|0)?-1:0;
     var $567=((($i_5580)-(5))|0);
     var $568=(($data+($567<<2))|0);
     var $569=HEAP32[(($568)>>2)];
     var $570$0=$569;
     var $570$1=(((($569|0)<0))|0)?-1:0;
     var $571$0=___muldi3($570$0,$570$1,$566$0,$566$1);var $571$1=tempRet0;
     var $572$0=_i64Add($564$0,$564$1,$571$0,$571$1);var $572$1=tempRet0;
     var $573=HEAP32[(($465)>>2)];
     var $574$0=$573;
     var $574$1=(((($573|0)<0))|0)?-1:0;
     var $575=((($i_5580)-(4))|0);
     var $576=(($data+($575<<2))|0);
     var $577=HEAP32[(($576)>>2)];
     var $578$0=$577;
     var $578$1=(((($577|0)<0))|0)?-1:0;
     var $579$0=___muldi3($578$0,$578$1,$574$0,$574$1);var $579$1=tempRet0;
     var $580$0=_i64Add($572$0,$572$1,$579$0,$579$1);var $580$1=tempRet0;
     var $581=HEAP32[(($466)>>2)];
     var $582$0=$581;
     var $582$1=(((($581|0)<0))|0)?-1:0;
     var $583=((($i_5580)-(3))|0);
     var $584=(($data+($583<<2))|0);
     var $585=HEAP32[(($584)>>2)];
     var $586$0=$585;
     var $586$1=(((($585|0)<0))|0)?-1:0;
     var $587$0=___muldi3($586$0,$586$1,$582$0,$582$1);var $587$1=tempRet0;
     var $588$0=_i64Add($580$0,$580$1,$587$0,$587$1);var $588$1=tempRet0;
     var $589=HEAP32[(($467)>>2)];
     var $590$0=$589;
     var $590$1=(((($589|0)<0))|0)?-1:0;
     var $591=((($i_5580)-(2))|0);
     var $592=(($data+($591<<2))|0);
     var $593=HEAP32[(($592)>>2)];
     var $594$0=$593;
     var $594$1=(((($593|0)<0))|0)?-1:0;
     var $595$0=___muldi3($594$0,$594$1,$590$0,$590$1);var $595$1=tempRet0;
     var $596$0=_i64Add($588$0,$588$1,$595$0,$595$1);var $596$1=tempRet0;
     var $597=HEAP32[(($qlp_coeff)>>2)];
     var $598$0=$597;
     var $598$1=(((($597|0)<0))|0)?-1:0;
     var $599=((($i_5580)-(1))|0);
     var $600=(($data+($599<<2))|0);
     var $601=HEAP32[(($600)>>2)];
     var $602$0=$601;
     var $602$1=(((($601|0)<0))|0)?-1:0;
     var $603$0=___muldi3($602$0,$602$1,$598$0,$598$1);var $603$1=tempRet0;
     var $604$0=_i64Add($596$0,$596$1,$603$0,$603$1);var $604$1=tempRet0;
     var $605=(($data+($i_5580<<2))|0);
     var $606=HEAP32[(($605)>>2)];
     var $607$0=_bitshift64Ashr($604$0,$604$1,$468$0);var $607$1=tempRet0;
     var $608$0=$607$0;
     var $608=$608$0;
     var $609=((($606)-($608))|0);
     var $610=(($residual+($i_5580<<2))|0);
     HEAP32[(($610)>>2)]=$609;
     var $611=((($i_5580)+(1))|0);
     var $612=($611|0)<($data_len|0);
     if ($612) {
      var $i_5580=$611;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $614=($order|0)==6;
   var $615=($data_len|0)>0;
   if ($614) {
    if (!($615)) {
     return;
    }
    var $621=(($qlp_coeff+20)|0);
    var $622=(($qlp_coeff+16)|0);
    var $623=(($qlp_coeff+12)|0);
    var $624=(($qlp_coeff+8)|0);
    var $625=(($qlp_coeff+4)|0);
    var $626$0=$lp_quantization;
    var $626$1=0;
    var $i_6584=0;
    while(1) {
     var $i_6584;
     var $628=HEAP32[(($621)>>2)];
     var $629$0=$628;
     var $629$1=(((($628|0)<0))|0)?-1:0;
     var $630=((($i_6584)-(6))|0);
     var $631=(($data+($630<<2))|0);
     var $632=HEAP32[(($631)>>2)];
     var $633$0=$632;
     var $633$1=(((($632|0)<0))|0)?-1:0;
     var $634$0=___muldi3($633$0,$633$1,$629$0,$629$1);var $634$1=tempRet0;
     var $635=HEAP32[(($622)>>2)];
     var $636$0=$635;
     var $636$1=(((($635|0)<0))|0)?-1:0;
     var $637=((($i_6584)-(5))|0);
     var $638=(($data+($637<<2))|0);
     var $639=HEAP32[(($638)>>2)];
     var $640$0=$639;
     var $640$1=(((($639|0)<0))|0)?-1:0;
     var $641$0=___muldi3($640$0,$640$1,$636$0,$636$1);var $641$1=tempRet0;
     var $642$0=_i64Add($641$0,$641$1,$634$0,$634$1);var $642$1=tempRet0;
     var $643=HEAP32[(($623)>>2)];
     var $644$0=$643;
     var $644$1=(((($643|0)<0))|0)?-1:0;
     var $645=((($i_6584)-(4))|0);
     var $646=(($data+($645<<2))|0);
     var $647=HEAP32[(($646)>>2)];
     var $648$0=$647;
     var $648$1=(((($647|0)<0))|0)?-1:0;
     var $649$0=___muldi3($648$0,$648$1,$644$0,$644$1);var $649$1=tempRet0;
     var $650$0=_i64Add($642$0,$642$1,$649$0,$649$1);var $650$1=tempRet0;
     var $651=HEAP32[(($624)>>2)];
     var $652$0=$651;
     var $652$1=(((($651|0)<0))|0)?-1:0;
     var $653=((($i_6584)-(3))|0);
     var $654=(($data+($653<<2))|0);
     var $655=HEAP32[(($654)>>2)];
     var $656$0=$655;
     var $656$1=(((($655|0)<0))|0)?-1:0;
     var $657$0=___muldi3($656$0,$656$1,$652$0,$652$1);var $657$1=tempRet0;
     var $658$0=_i64Add($650$0,$650$1,$657$0,$657$1);var $658$1=tempRet0;
     var $659=HEAP32[(($625)>>2)];
     var $660$0=$659;
     var $660$1=(((($659|0)<0))|0)?-1:0;
     var $661=((($i_6584)-(2))|0);
     var $662=(($data+($661<<2))|0);
     var $663=HEAP32[(($662)>>2)];
     var $664$0=$663;
     var $664$1=(((($663|0)<0))|0)?-1:0;
     var $665$0=___muldi3($664$0,$664$1,$660$0,$660$1);var $665$1=tempRet0;
     var $666$0=_i64Add($658$0,$658$1,$665$0,$665$1);var $666$1=tempRet0;
     var $667=HEAP32[(($qlp_coeff)>>2)];
     var $668$0=$667;
     var $668$1=(((($667|0)<0))|0)?-1:0;
     var $669=((($i_6584)-(1))|0);
     var $670=(($data+($669<<2))|0);
     var $671=HEAP32[(($670)>>2)];
     var $672$0=$671;
     var $672$1=(((($671|0)<0))|0)?-1:0;
     var $673$0=___muldi3($672$0,$672$1,$668$0,$668$1);var $673$1=tempRet0;
     var $674$0=_i64Add($666$0,$666$1,$673$0,$673$1);var $674$1=tempRet0;
     var $675=(($data+($i_6584<<2))|0);
     var $676=HEAP32[(($675)>>2)];
     var $677$0=_bitshift64Ashr($674$0,$674$1,$626$0);var $677$1=tempRet0;
     var $678$0=$677$0;
     var $678=$678$0;
     var $679=((($676)-($678))|0);
     var $680=(($residual+($i_6584<<2))|0);
     HEAP32[(($680)>>2)]=$679;
     var $681=((($i_6584)+(1))|0);
     var $682=($681|0)<($data_len|0);
     if ($682) {
      var $i_6584=$681;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($615)) {
     return;
    }
    var $616=(($qlp_coeff+16)|0);
    var $617=(($qlp_coeff+12)|0);
    var $618=(($qlp_coeff+8)|0);
    var $619=(($qlp_coeff+4)|0);
    var $620$0=$lp_quantization;
    var $620$1=0;
    var $i_7588=0;
    while(1) {
     var $i_7588;
     var $684=HEAP32[(($616)>>2)];
     var $685$0=$684;
     var $685$1=(((($684|0)<0))|0)?-1:0;
     var $686=((($i_7588)-(5))|0);
     var $687=(($data+($686<<2))|0);
     var $688=HEAP32[(($687)>>2)];
     var $689$0=$688;
     var $689$1=(((($688|0)<0))|0)?-1:0;
     var $690$0=___muldi3($689$0,$689$1,$685$0,$685$1);var $690$1=tempRet0;
     var $691=HEAP32[(($617)>>2)];
     var $692$0=$691;
     var $692$1=(((($691|0)<0))|0)?-1:0;
     var $693=((($i_7588)-(4))|0);
     var $694=(($data+($693<<2))|0);
     var $695=HEAP32[(($694)>>2)];
     var $696$0=$695;
     var $696$1=(((($695|0)<0))|0)?-1:0;
     var $697$0=___muldi3($696$0,$696$1,$692$0,$692$1);var $697$1=tempRet0;
     var $698$0=_i64Add($697$0,$697$1,$690$0,$690$1);var $698$1=tempRet0;
     var $699=HEAP32[(($618)>>2)];
     var $700$0=$699;
     var $700$1=(((($699|0)<0))|0)?-1:0;
     var $701=((($i_7588)-(3))|0);
     var $702=(($data+($701<<2))|0);
     var $703=HEAP32[(($702)>>2)];
     var $704$0=$703;
     var $704$1=(((($703|0)<0))|0)?-1:0;
     var $705$0=___muldi3($704$0,$704$1,$700$0,$700$1);var $705$1=tempRet0;
     var $706$0=_i64Add($698$0,$698$1,$705$0,$705$1);var $706$1=tempRet0;
     var $707=HEAP32[(($619)>>2)];
     var $708$0=$707;
     var $708$1=(((($707|0)<0))|0)?-1:0;
     var $709=((($i_7588)-(2))|0);
     var $710=(($data+($709<<2))|0);
     var $711=HEAP32[(($710)>>2)];
     var $712$0=$711;
     var $712$1=(((($711|0)<0))|0)?-1:0;
     var $713$0=___muldi3($712$0,$712$1,$708$0,$708$1);var $713$1=tempRet0;
     var $714$0=_i64Add($706$0,$706$1,$713$0,$713$1);var $714$1=tempRet0;
     var $715=HEAP32[(($qlp_coeff)>>2)];
     var $716$0=$715;
     var $716$1=(((($715|0)<0))|0)?-1:0;
     var $717=((($i_7588)-(1))|0);
     var $718=(($data+($717<<2))|0);
     var $719=HEAP32[(($718)>>2)];
     var $720$0=$719;
     var $720$1=(((($719|0)<0))|0)?-1:0;
     var $721$0=___muldi3($720$0,$720$1,$716$0,$716$1);var $721$1=tempRet0;
     var $722$0=_i64Add($714$0,$714$1,$721$0,$721$1);var $722$1=tempRet0;
     var $723=(($data+($i_7588<<2))|0);
     var $724=HEAP32[(($723)>>2)];
     var $725$0=_bitshift64Ashr($722$0,$722$1,$620$0);var $725$1=tempRet0;
     var $726$0=$725$0;
     var $726=$726$0;
     var $727=((($724)-($726))|0);
     var $728=(($residual+($i_7588<<2))|0);
     HEAP32[(($728)>>2)]=$727;
     var $729=((($i_7588)+(1))|0);
     var $730=($729|0)<($data_len|0);
     if ($730) {
      var $i_7588=$729;
     } else {
      break;
     }
    }
    return;
   }
  }
 } else {
  var $732=($order>>>0)>2;
  if ($732) {
   var $734=($order|0)==4;
   var $735=($data_len|0)>0;
   if ($734) {
    if (!($735)) {
     return;
    }
    var $739=(($qlp_coeff+12)|0);
    var $740=(($qlp_coeff+8)|0);
    var $741=(($qlp_coeff+4)|0);
    var $742$0=$lp_quantization;
    var $742$1=0;
    var $i_8592=0;
    while(1) {
     var $i_8592;
     var $744=HEAP32[(($739)>>2)];
     var $745$0=$744;
     var $745$1=(((($744|0)<0))|0)?-1:0;
     var $746=((($i_8592)-(4))|0);
     var $747=(($data+($746<<2))|0);
     var $748=HEAP32[(($747)>>2)];
     var $749$0=$748;
     var $749$1=(((($748|0)<0))|0)?-1:0;
     var $750$0=___muldi3($749$0,$749$1,$745$0,$745$1);var $750$1=tempRet0;
     var $751=HEAP32[(($740)>>2)];
     var $752$0=$751;
     var $752$1=(((($751|0)<0))|0)?-1:0;
     var $753=((($i_8592)-(3))|0);
     var $754=(($data+($753<<2))|0);
     var $755=HEAP32[(($754)>>2)];
     var $756$0=$755;
     var $756$1=(((($755|0)<0))|0)?-1:0;
     var $757$0=___muldi3($756$0,$756$1,$752$0,$752$1);var $757$1=tempRet0;
     var $758$0=_i64Add($757$0,$757$1,$750$0,$750$1);var $758$1=tempRet0;
     var $759=HEAP32[(($741)>>2)];
     var $760$0=$759;
     var $760$1=(((($759|0)<0))|0)?-1:0;
     var $761=((($i_8592)-(2))|0);
     var $762=(($data+($761<<2))|0);
     var $763=HEAP32[(($762)>>2)];
     var $764$0=$763;
     var $764$1=(((($763|0)<0))|0)?-1:0;
     var $765$0=___muldi3($764$0,$764$1,$760$0,$760$1);var $765$1=tempRet0;
     var $766$0=_i64Add($758$0,$758$1,$765$0,$765$1);var $766$1=tempRet0;
     var $767=HEAP32[(($qlp_coeff)>>2)];
     var $768$0=$767;
     var $768$1=(((($767|0)<0))|0)?-1:0;
     var $769=((($i_8592)-(1))|0);
     var $770=(($data+($769<<2))|0);
     var $771=HEAP32[(($770)>>2)];
     var $772$0=$771;
     var $772$1=(((($771|0)<0))|0)?-1:0;
     var $773$0=___muldi3($772$0,$772$1,$768$0,$768$1);var $773$1=tempRet0;
     var $774$0=_i64Add($766$0,$766$1,$773$0,$773$1);var $774$1=tempRet0;
     var $775=(($data+($i_8592<<2))|0);
     var $776=HEAP32[(($775)>>2)];
     var $777$0=_bitshift64Ashr($774$0,$774$1,$742$0);var $777$1=tempRet0;
     var $778$0=$777$0;
     var $778=$778$0;
     var $779=((($776)-($778))|0);
     var $780=(($residual+($i_8592<<2))|0);
     HEAP32[(($780)>>2)]=$779;
     var $781=((($i_8592)+(1))|0);
     var $782=($781|0)<($data_len|0);
     if ($782) {
      var $i_8592=$781;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($735)) {
     return;
    }
    var $736=(($qlp_coeff+8)|0);
    var $737=(($qlp_coeff+4)|0);
    var $738$0=$lp_quantization;
    var $738$1=0;
    var $i_9596=0;
    while(1) {
     var $i_9596;
     var $784=HEAP32[(($736)>>2)];
     var $785$0=$784;
     var $785$1=(((($784|0)<0))|0)?-1:0;
     var $786=((($i_9596)-(3))|0);
     var $787=(($data+($786<<2))|0);
     var $788=HEAP32[(($787)>>2)];
     var $789$0=$788;
     var $789$1=(((($788|0)<0))|0)?-1:0;
     var $790$0=___muldi3($789$0,$789$1,$785$0,$785$1);var $790$1=tempRet0;
     var $791=HEAP32[(($737)>>2)];
     var $792$0=$791;
     var $792$1=(((($791|0)<0))|0)?-1:0;
     var $793=((($i_9596)-(2))|0);
     var $794=(($data+($793<<2))|0);
     var $795=HEAP32[(($794)>>2)];
     var $796$0=$795;
     var $796$1=(((($795|0)<0))|0)?-1:0;
     var $797$0=___muldi3($796$0,$796$1,$792$0,$792$1);var $797$1=tempRet0;
     var $798$0=_i64Add($797$0,$797$1,$790$0,$790$1);var $798$1=tempRet0;
     var $799=HEAP32[(($qlp_coeff)>>2)];
     var $800$0=$799;
     var $800$1=(((($799|0)<0))|0)?-1:0;
     var $801=((($i_9596)-(1))|0);
     var $802=(($data+($801<<2))|0);
     var $803=HEAP32[(($802)>>2)];
     var $804$0=$803;
     var $804$1=(((($803|0)<0))|0)?-1:0;
     var $805$0=___muldi3($804$0,$804$1,$800$0,$800$1);var $805$1=tempRet0;
     var $806$0=_i64Add($798$0,$798$1,$805$0,$805$1);var $806$1=tempRet0;
     var $807=(($data+($i_9596<<2))|0);
     var $808=HEAP32[(($807)>>2)];
     var $809$0=_bitshift64Ashr($806$0,$806$1,$738$0);var $809$1=tempRet0;
     var $810$0=$809$0;
     var $810=$810$0;
     var $811=((($808)-($810))|0);
     var $812=(($residual+($i_9596<<2))|0);
     HEAP32[(($812)>>2)]=$811;
     var $813=((($i_9596)+(1))|0);
     var $814=($813|0)<($data_len|0);
     if ($814) {
      var $i_9596=$813;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $816=($order|0)==2;
   var $817=($data_len|0)>0;
   if ($816) {
    if (!($817)) {
     return;
    }
    var $819=(($qlp_coeff+4)|0);
    var $820$0=$lp_quantization;
    var $820$1=0;
    var $i_10600=0;
    while(1) {
     var $i_10600;
     var $822=HEAP32[(($819)>>2)];
     var $823$0=$822;
     var $823$1=(((($822|0)<0))|0)?-1:0;
     var $824=((($i_10600)-(2))|0);
     var $825=(($data+($824<<2))|0);
     var $826=HEAP32[(($825)>>2)];
     var $827$0=$826;
     var $827$1=(((($826|0)<0))|0)?-1:0;
     var $828$0=___muldi3($827$0,$827$1,$823$0,$823$1);var $828$1=tempRet0;
     var $829=HEAP32[(($qlp_coeff)>>2)];
     var $830$0=$829;
     var $830$1=(((($829|0)<0))|0)?-1:0;
     var $831=((($i_10600)-(1))|0);
     var $832=(($data+($831<<2))|0);
     var $833=HEAP32[(($832)>>2)];
     var $834$0=$833;
     var $834$1=(((($833|0)<0))|0)?-1:0;
     var $835$0=___muldi3($834$0,$834$1,$830$0,$830$1);var $835$1=tempRet0;
     var $836$0=_i64Add($835$0,$835$1,$828$0,$828$1);var $836$1=tempRet0;
     var $837=(($data+($i_10600<<2))|0);
     var $838=HEAP32[(($837)>>2)];
     var $839$0=_bitshift64Ashr($836$0,$836$1,$820$0);var $839$1=tempRet0;
     var $840$0=$839$0;
     var $840=$840$0;
     var $841=((($838)-($840))|0);
     var $842=(($residual+($i_10600<<2))|0);
     HEAP32[(($842)>>2)]=$841;
     var $843=((($i_10600)+(1))|0);
     var $844=($843|0)<($data_len|0);
     if ($844) {
      var $i_10600=$843;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($817)) {
     return;
    }
    var $818$0=$lp_quantization;
    var $818$1=0;
    var $i_11604=0;
    while(1) {
     var $i_11604;
     var $846=(($data+($i_11604<<2))|0);
     var $847=HEAP32[(($846)>>2)];
     var $848=HEAP32[(($qlp_coeff)>>2)];
     var $849$0=$848;
     var $849$1=(((($848|0)<0))|0)?-1:0;
     var $850=((($i_11604)-(1))|0);
     var $851=(($data+($850<<2))|0);
     var $852=HEAP32[(($851)>>2)];
     var $853$0=$852;
     var $853$1=(((($852|0)<0))|0)?-1:0;
     var $854$0=___muldi3($853$0,$853$1,$849$0,$849$1);var $854$1=tempRet0;
     var $855$0=_bitshift64Ashr($854$0,$854$1,$818$0);var $855$1=tempRet0;
     var $856$0=$855$0;
     var $856=$856$0;
     var $857=((($847)-($856))|0);
     var $858=(($residual+($i_11604<<2))|0);
     HEAP32[(($858)>>2)]=$857;
     var $859=((($i_11604)+(1))|0);
     var $860=($859|0)<($data_len|0);
     if ($860) {
      var $i_11604=$859;
     } else {
      break;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_restore_signal($residual,$data_len,$qlp_coeff,$order,$lp_quantization,$data){
 var label=0;
 var $1=($order>>>0)<13;
 if (!($1)) {
  var $2=($data_len|0)>0;
  if (!($2)) {
   return;
  }
  var $3=(($qlp_coeff+124)|0);
  var $4=(($qlp_coeff+120)|0);
  var $5=(($qlp_coeff+116)|0);
  var $6=(($qlp_coeff+112)|0);
  var $7=(($qlp_coeff+108)|0);
  var $8=(($qlp_coeff+104)|0);
  var $9=(($qlp_coeff+100)|0);
  var $10=(($qlp_coeff+96)|0);
  var $11=(($qlp_coeff+92)|0);
  var $12=(($qlp_coeff+88)|0);
  var $13=(($qlp_coeff+84)|0);
  var $14=(($qlp_coeff+80)|0);
  var $15=(($qlp_coeff+76)|0);
  var $16=(($qlp_coeff+72)|0);
  var $17=(($qlp_coeff+68)|0);
  var $18=(($qlp_coeff+64)|0);
  var $19=(($qlp_coeff+60)|0);
  var $20=(($qlp_coeff+56)|0);
  var $21=(($qlp_coeff+52)|0);
  var $22=(($qlp_coeff+48)|0);
  var $23=(($qlp_coeff+44)|0);
  var $24=(($qlp_coeff+40)|0);
  var $25=(($qlp_coeff+36)|0);
  var $26=(($qlp_coeff+32)|0);
  var $27=(($qlp_coeff+28)|0);
  var $28=(($qlp_coeff+24)|0);
  var $29=(($qlp_coeff+20)|0);
  var $30=(($qlp_coeff+16)|0);
  var $31=(($qlp_coeff+12)|0);
  var $32=(($qlp_coeff+8)|0);
  var $33=(($qlp_coeff+4)|0);
  var $i_12608=0;
  while(1) {
   var $i_12608;
   switch (($order|0)) {
   case 15: {
    var $sum_16=0;
    label = 1248;
    break;
   }
   case 27: {
    var $sum_4=0;
    label = 1236;
    break;
   }
   case 26: {
    var $sum_5=0;
    label = 1237;
    break;
   }
   case 32: {
    var $526=HEAP32[(($3)>>2)];
    var $527=((($i_12608)-(32))|0);
    var $528=(($data+($527<<2))|0);
    var $529=HEAP32[(($528)>>2)];
    var $530=(Math_imul($529,$526)|0);
    var $sum_0=$530;
    label = 1232;
    break;
   }
   case 31: {
    var $sum_0=0;
    label = 1232;
    break;
   }
   case 30: {
    var $sum_1=0;
    label = 1233;
    break;
   }
   case 23: {
    var $sum_8=0;
    label = 1240;
    break;
   }
   case 22: {
    var $sum_9=0;
    label = 1241;
    break;
   }
   case 16: {
    var $sum_15=0;
    label = 1247;
    break;
   }
   case 25: {
    var $sum_6=0;
    label = 1238;
    break;
   }
   case 24: {
    var $sum_7=0;
    label = 1239;
    break;
   }
   case 29: {
    var $sum_2=0;
    label = 1234;
    break;
   }
   case 28: {
    var $sum_3=0;
    label = 1235;
    break;
   }
   case 14: {
    var $sum_17=0;
    label = 1249;
    break;
   }
   case 17: {
    var $sum_14=0;
    label = 1246;
    break;
   }
   case 21: {
    var $sum_10=0;
    label = 1242;
    break;
   }
   case 20: {
    var $sum_11=0;
    label = 1243;
    break;
   }
   case 13: {
    var $sum_18=0;
    label = 1250;
    break;
   }
   case 19: {
    var $sum_12=0;
    label = 1244;
    break;
   }
   case 18: {
    var $sum_13=0;
    label = 1245;
    break;
   }
   default: {
    var $sum_19=0;
   }
   }
   if (label == 1232) {
    label = 0;
    var $sum_0;
    var $532=HEAP32[(($4)>>2)];
    var $533=((($i_12608)-(31))|0);
    var $534=(($data+($533<<2))|0);
    var $535=HEAP32[(($534)>>2)];
    var $536=(Math_imul($535,$532)|0);
    var $537=((($536)+($sum_0))|0);
    var $sum_1=$537;
    label = 1233;
   }
   if (label == 1233) {
    label = 0;
    var $sum_1;
    var $539=HEAP32[(($5)>>2)];
    var $540=((($i_12608)-(30))|0);
    var $541=(($data+($540<<2))|0);
    var $542=HEAP32[(($541)>>2)];
    var $543=(Math_imul($542,$539)|0);
    var $544=((($543)+($sum_1))|0);
    var $sum_2=$544;
    label = 1234;
   }
   if (label == 1234) {
    label = 0;
    var $sum_2;
    var $546=HEAP32[(($6)>>2)];
    var $547=((($i_12608)-(29))|0);
    var $548=(($data+($547<<2))|0);
    var $549=HEAP32[(($548)>>2)];
    var $550=(Math_imul($549,$546)|0);
    var $551=((($550)+($sum_2))|0);
    var $sum_3=$551;
    label = 1235;
   }
   if (label == 1235) {
    label = 0;
    var $sum_3;
    var $553=HEAP32[(($7)>>2)];
    var $554=((($i_12608)-(28))|0);
    var $555=(($data+($554<<2))|0);
    var $556=HEAP32[(($555)>>2)];
    var $557=(Math_imul($556,$553)|0);
    var $558=((($557)+($sum_3))|0);
    var $sum_4=$558;
    label = 1236;
   }
   if (label == 1236) {
    label = 0;
    var $sum_4;
    var $560=HEAP32[(($8)>>2)];
    var $561=((($i_12608)-(27))|0);
    var $562=(($data+($561<<2))|0);
    var $563=HEAP32[(($562)>>2)];
    var $564=(Math_imul($563,$560)|0);
    var $565=((($564)+($sum_4))|0);
    var $sum_5=$565;
    label = 1237;
   }
   if (label == 1237) {
    label = 0;
    var $sum_5;
    var $567=HEAP32[(($9)>>2)];
    var $568=((($i_12608)-(26))|0);
    var $569=(($data+($568<<2))|0);
    var $570=HEAP32[(($569)>>2)];
    var $571=(Math_imul($570,$567)|0);
    var $572=((($571)+($sum_5))|0);
    var $sum_6=$572;
    label = 1238;
   }
   if (label == 1238) {
    label = 0;
    var $sum_6;
    var $574=HEAP32[(($10)>>2)];
    var $575=((($i_12608)-(25))|0);
    var $576=(($data+($575<<2))|0);
    var $577=HEAP32[(($576)>>2)];
    var $578=(Math_imul($577,$574)|0);
    var $579=((($578)+($sum_6))|0);
    var $sum_7=$579;
    label = 1239;
   }
   if (label == 1239) {
    label = 0;
    var $sum_7;
    var $581=HEAP32[(($11)>>2)];
    var $582=((($i_12608)-(24))|0);
    var $583=(($data+($582<<2))|0);
    var $584=HEAP32[(($583)>>2)];
    var $585=(Math_imul($584,$581)|0);
    var $586=((($585)+($sum_7))|0);
    var $sum_8=$586;
    label = 1240;
   }
   if (label == 1240) {
    label = 0;
    var $sum_8;
    var $588=HEAP32[(($12)>>2)];
    var $589=((($i_12608)-(23))|0);
    var $590=(($data+($589<<2))|0);
    var $591=HEAP32[(($590)>>2)];
    var $592=(Math_imul($591,$588)|0);
    var $593=((($592)+($sum_8))|0);
    var $sum_9=$593;
    label = 1241;
   }
   if (label == 1241) {
    label = 0;
    var $sum_9;
    var $595=HEAP32[(($13)>>2)];
    var $596=((($i_12608)-(22))|0);
    var $597=(($data+($596<<2))|0);
    var $598=HEAP32[(($597)>>2)];
    var $599=(Math_imul($598,$595)|0);
    var $600=((($599)+($sum_9))|0);
    var $sum_10=$600;
    label = 1242;
   }
   if (label == 1242) {
    label = 0;
    var $sum_10;
    var $602=HEAP32[(($14)>>2)];
    var $603=((($i_12608)-(21))|0);
    var $604=(($data+($603<<2))|0);
    var $605=HEAP32[(($604)>>2)];
    var $606=(Math_imul($605,$602)|0);
    var $607=((($606)+($sum_10))|0);
    var $sum_11=$607;
    label = 1243;
   }
   if (label == 1243) {
    label = 0;
    var $sum_11;
    var $609=HEAP32[(($15)>>2)];
    var $610=((($i_12608)-(20))|0);
    var $611=(($data+($610<<2))|0);
    var $612=HEAP32[(($611)>>2)];
    var $613=(Math_imul($612,$609)|0);
    var $614=((($613)+($sum_11))|0);
    var $sum_12=$614;
    label = 1244;
   }
   if (label == 1244) {
    label = 0;
    var $sum_12;
    var $616=HEAP32[(($16)>>2)];
    var $617=((($i_12608)-(19))|0);
    var $618=(($data+($617<<2))|0);
    var $619=HEAP32[(($618)>>2)];
    var $620=(Math_imul($619,$616)|0);
    var $621=((($620)+($sum_12))|0);
    var $sum_13=$621;
    label = 1245;
   }
   if (label == 1245) {
    label = 0;
    var $sum_13;
    var $623=HEAP32[(($17)>>2)];
    var $624=((($i_12608)-(18))|0);
    var $625=(($data+($624<<2))|0);
    var $626=HEAP32[(($625)>>2)];
    var $627=(Math_imul($626,$623)|0);
    var $628=((($627)+($sum_13))|0);
    var $sum_14=$628;
    label = 1246;
   }
   if (label == 1246) {
    label = 0;
    var $sum_14;
    var $630=HEAP32[(($18)>>2)];
    var $631=((($i_12608)-(17))|0);
    var $632=(($data+($631<<2))|0);
    var $633=HEAP32[(($632)>>2)];
    var $634=(Math_imul($633,$630)|0);
    var $635=((($634)+($sum_14))|0);
    var $sum_15=$635;
    label = 1247;
   }
   if (label == 1247) {
    label = 0;
    var $sum_15;
    var $637=HEAP32[(($19)>>2)];
    var $638=((($i_12608)-(16))|0);
    var $639=(($data+($638<<2))|0);
    var $640=HEAP32[(($639)>>2)];
    var $641=(Math_imul($640,$637)|0);
    var $642=((($641)+($sum_15))|0);
    var $sum_16=$642;
    label = 1248;
   }
   if (label == 1248) {
    label = 0;
    var $sum_16;
    var $644=HEAP32[(($20)>>2)];
    var $645=((($i_12608)-(15))|0);
    var $646=(($data+($645<<2))|0);
    var $647=HEAP32[(($646)>>2)];
    var $648=(Math_imul($647,$644)|0);
    var $649=((($648)+($sum_16))|0);
    var $sum_17=$649;
    label = 1249;
   }
   if (label == 1249) {
    label = 0;
    var $sum_17;
    var $651=HEAP32[(($21)>>2)];
    var $652=((($i_12608)-(14))|0);
    var $653=(($data+($652<<2))|0);
    var $654=HEAP32[(($653)>>2)];
    var $655=(Math_imul($654,$651)|0);
    var $656=((($655)+($sum_17))|0);
    var $sum_18=$656;
    label = 1250;
   }
   if (label == 1250) {
    label = 0;
    var $sum_18;
    var $657=HEAP32[(($22)>>2)];
    var $658=((($i_12608)-(13))|0);
    var $659=(($data+($658<<2))|0);
    var $660=HEAP32[(($659)>>2)];
    var $661=(Math_imul($660,$657)|0);
    var $662=((($661)+($sum_18))|0);
    var $663=HEAP32[(($23)>>2)];
    var $664=((($i_12608)-(12))|0);
    var $665=(($data+($664<<2))|0);
    var $666=HEAP32[(($665)>>2)];
    var $667=(Math_imul($666,$663)|0);
    var $668=((($662)+($667))|0);
    var $669=HEAP32[(($24)>>2)];
    var $670=((($i_12608)-(11))|0);
    var $671=(($data+($670<<2))|0);
    var $672=HEAP32[(($671)>>2)];
    var $673=(Math_imul($672,$669)|0);
    var $674=((($668)+($673))|0);
    var $675=HEAP32[(($25)>>2)];
    var $676=((($i_12608)-(10))|0);
    var $677=(($data+($676<<2))|0);
    var $678=HEAP32[(($677)>>2)];
    var $679=(Math_imul($678,$675)|0);
    var $680=((($674)+($679))|0);
    var $681=HEAP32[(($26)>>2)];
    var $682=((($i_12608)-(9))|0);
    var $683=(($data+($682<<2))|0);
    var $684=HEAP32[(($683)>>2)];
    var $685=(Math_imul($684,$681)|0);
    var $686=((($680)+($685))|0);
    var $687=HEAP32[(($27)>>2)];
    var $688=((($i_12608)-(8))|0);
    var $689=(($data+($688<<2))|0);
    var $690=HEAP32[(($689)>>2)];
    var $691=(Math_imul($690,$687)|0);
    var $692=((($686)+($691))|0);
    var $693=HEAP32[(($28)>>2)];
    var $694=((($i_12608)-(7))|0);
    var $695=(($data+($694<<2))|0);
    var $696=HEAP32[(($695)>>2)];
    var $697=(Math_imul($696,$693)|0);
    var $698=((($692)+($697))|0);
    var $699=HEAP32[(($29)>>2)];
    var $700=((($i_12608)-(6))|0);
    var $701=(($data+($700<<2))|0);
    var $702=HEAP32[(($701)>>2)];
    var $703=(Math_imul($702,$699)|0);
    var $704=((($698)+($703))|0);
    var $705=HEAP32[(($30)>>2)];
    var $706=((($i_12608)-(5))|0);
    var $707=(($data+($706<<2))|0);
    var $708=HEAP32[(($707)>>2)];
    var $709=(Math_imul($708,$705)|0);
    var $710=((($704)+($709))|0);
    var $711=HEAP32[(($31)>>2)];
    var $712=((($i_12608)-(4))|0);
    var $713=(($data+($712<<2))|0);
    var $714=HEAP32[(($713)>>2)];
    var $715=(Math_imul($714,$711)|0);
    var $716=((($710)+($715))|0);
    var $717=HEAP32[(($32)>>2)];
    var $718=((($i_12608)-(3))|0);
    var $719=(($data+($718<<2))|0);
    var $720=HEAP32[(($719)>>2)];
    var $721=(Math_imul($720,$717)|0);
    var $722=((($716)+($721))|0);
    var $723=HEAP32[(($33)>>2)];
    var $724=((($i_12608)-(2))|0);
    var $725=(($data+($724<<2))|0);
    var $726=HEAP32[(($725)>>2)];
    var $727=(Math_imul($726,$723)|0);
    var $728=((($722)+($727))|0);
    var $729=HEAP32[(($qlp_coeff)>>2)];
    var $730=((($i_12608)-(1))|0);
    var $731=(($data+($730<<2))|0);
    var $732=HEAP32[(($731)>>2)];
    var $733=(Math_imul($732,$729)|0);
    var $734=((($728)+($733))|0);
    var $sum_19=$734;
   }
   var $sum_19;
   var $736=(($residual+($i_12608<<2))|0);
   var $737=HEAP32[(($736)>>2)];
   var $738=$sum_19>>($lp_quantization|0);
   var $739=((($737)+($738))|0);
   var $740=(($data+($i_12608<<2))|0);
   HEAP32[(($740)>>2)]=$739;
   var $741=((($i_12608)+(1))|0);
   var $742=($741|0)<($data_len|0);
   if ($742) {
    var $i_12608=$741;
   } else {
    break;
   }
  }
  return;
 }
 var $35=($order>>>0)>8;
 if ($35) {
  var $37=($order>>>0)>10;
  if ($37) {
   var $39=($order|0)==12;
   var $40=($data_len|0)>0;
   if ($39) {
    if (!($40)) {
     return;
    }
    var $51=(($qlp_coeff+44)|0);
    var $52=(($qlp_coeff+40)|0);
    var $53=(($qlp_coeff+36)|0);
    var $54=(($qlp_coeff+32)|0);
    var $55=(($qlp_coeff+28)|0);
    var $56=(($qlp_coeff+24)|0);
    var $57=(($qlp_coeff+20)|0);
    var $58=(($qlp_coeff+16)|0);
    var $59=(($qlp_coeff+12)|0);
    var $60=(($qlp_coeff+8)|0);
    var $61=(($qlp_coeff+4)|0);
    var $_phi_trans_insert=((($data)-(48))|0);
    var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
    var $_phi_trans_insert629=((($data)-(44))|0);
    var $_pre630=HEAP32[(($_phi_trans_insert629)>>2)];
    var $_phi_trans_insert631=((($data)-(40))|0);
    var $_pre632=HEAP32[(($_phi_trans_insert631)>>2)];
    var $_phi_trans_insert633=((($data)-(36))|0);
    var $_pre634=HEAP32[(($_phi_trans_insert633)>>2)];
    var $_phi_trans_insert635=((($data)-(32))|0);
    var $_pre636=HEAP32[(($_phi_trans_insert635)>>2)];
    var $_phi_trans_insert637=((($data)-(28))|0);
    var $_pre638=HEAP32[(($_phi_trans_insert637)>>2)];
    var $_phi_trans_insert639=((($data)-(24))|0);
    var $_pre640=HEAP32[(($_phi_trans_insert639)>>2)];
    var $_phi_trans_insert641=((($data)-(20))|0);
    var $_pre642=HEAP32[(($_phi_trans_insert641)>>2)];
    var $_phi_trans_insert643=((($data)-(16))|0);
    var $_pre644=HEAP32[(($_phi_trans_insert643)>>2)];
    var $_phi_trans_insert645=((($data)-(12))|0);
    var $_pre646=HEAP32[(($_phi_trans_insert645)>>2)];
    var $_phi_trans_insert647=((($data)-(8))|0);
    var $_pre648=HEAP32[(($_phi_trans_insert647)>>2)];
    var $_phi_trans_insert649=((($data)-(4))|0);
    var $_pre650=HEAP32[(($_phi_trans_insert649)>>2)];
    var $i_0561=0;var $74=$_pre;var $73=$_pre630;var $72=$_pre632;var $71=$_pre634;var $70=$_pre636;var $69=$_pre638;var $68=$_pre640;var $67=$_pre642;var $66=$_pre644;var $65=$_pre646;var $64=$_pre648;var $63=$_pre650;
    while(1) {
     var $63;
     var $64;
     var $65;
     var $66;
     var $67;
     var $68;
     var $69;
     var $70;
     var $71;
     var $72;
     var $73;
     var $74;
     var $i_0561;
     var $75=HEAP32[(($51)>>2)];
     var $76=(Math_imul($74,$75)|0);
     var $77=HEAP32[(($52)>>2)];
     var $78=(Math_imul($73,$77)|0);
     var $79=((($78)+($76))|0);
     var $80=HEAP32[(($53)>>2)];
     var $81=(Math_imul($72,$80)|0);
     var $82=((($79)+($81))|0);
     var $83=HEAP32[(($54)>>2)];
     var $84=(Math_imul($71,$83)|0);
     var $85=((($82)+($84))|0);
     var $86=HEAP32[(($55)>>2)];
     var $87=(Math_imul($70,$86)|0);
     var $88=((($85)+($87))|0);
     var $89=HEAP32[(($56)>>2)];
     var $90=(Math_imul($69,$89)|0);
     var $91=((($88)+($90))|0);
     var $92=HEAP32[(($57)>>2)];
     var $93=(Math_imul($68,$92)|0);
     var $94=((($91)+($93))|0);
     var $95=HEAP32[(($58)>>2)];
     var $96=(Math_imul($67,$95)|0);
     var $97=((($94)+($96))|0);
     var $98=HEAP32[(($59)>>2)];
     var $99=(Math_imul($66,$98)|0);
     var $100=((($97)+($99))|0);
     var $101=HEAP32[(($60)>>2)];
     var $102=(Math_imul($65,$101)|0);
     var $103=((($100)+($102))|0);
     var $104=HEAP32[(($61)>>2)];
     var $105=(Math_imul($64,$104)|0);
     var $106=((($103)+($105))|0);
     var $107=HEAP32[(($qlp_coeff)>>2)];
     var $108=(Math_imul($63,$107)|0);
     var $109=((($106)+($108))|0);
     var $110=(($residual+($i_0561<<2))|0);
     var $111=HEAP32[(($110)>>2)];
     var $112=$109>>($lp_quantization|0);
     var $113=((($112)+($111))|0);
     var $114=(($data+($i_0561<<2))|0);
     HEAP32[(($114)>>2)]=$113;
     var $115=((($i_0561)+(1))|0);
     var $116=($115|0)<($data_len|0);
     if ($116) {
      var $i_0561=$115;var $74=$73;var $73=$72;var $72=$71;var $71=$70;var $70=$69;var $69=$68;var $68=$67;var $67=$66;var $66=$65;var $65=$64;var $64=$63;var $63=$113;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($40)) {
     return;
    }
    var $41=(($qlp_coeff+40)|0);
    var $42=(($qlp_coeff+36)|0);
    var $43=(($qlp_coeff+32)|0);
    var $44=(($qlp_coeff+28)|0);
    var $45=(($qlp_coeff+24)|0);
    var $46=(($qlp_coeff+20)|0);
    var $47=(($qlp_coeff+16)|0);
    var $48=(($qlp_coeff+12)|0);
    var $49=(($qlp_coeff+8)|0);
    var $50=(($qlp_coeff+4)|0);
    var $_phi_trans_insert651=((($data)-(44))|0);
    var $_pre652=HEAP32[(($_phi_trans_insert651)>>2)];
    var $_phi_trans_insert653=((($data)-(40))|0);
    var $_pre654=HEAP32[(($_phi_trans_insert653)>>2)];
    var $_phi_trans_insert655=((($data)-(36))|0);
    var $_pre656=HEAP32[(($_phi_trans_insert655)>>2)];
    var $_phi_trans_insert657=((($data)-(32))|0);
    var $_pre658=HEAP32[(($_phi_trans_insert657)>>2)];
    var $_phi_trans_insert659=((($data)-(28))|0);
    var $_pre660=HEAP32[(($_phi_trans_insert659)>>2)];
    var $_phi_trans_insert661=((($data)-(24))|0);
    var $_pre662=HEAP32[(($_phi_trans_insert661)>>2)];
    var $_phi_trans_insert663=((($data)-(20))|0);
    var $_pre664=HEAP32[(($_phi_trans_insert663)>>2)];
    var $_phi_trans_insert665=((($data)-(16))|0);
    var $_pre666=HEAP32[(($_phi_trans_insert665)>>2)];
    var $_phi_trans_insert667=((($data)-(12))|0);
    var $_pre668=HEAP32[(($_phi_trans_insert667)>>2)];
    var $_phi_trans_insert669=((($data)-(8))|0);
    var $_pre670=HEAP32[(($_phi_trans_insert669)>>2)];
    var $_phi_trans_insert671=((($data)-(4))|0);
    var $_pre672=HEAP32[(($_phi_trans_insert671)>>2)];
    var $i_1564=0;var $128=$_pre652;var $127=$_pre654;var $126=$_pre656;var $125=$_pre658;var $124=$_pre660;var $123=$_pre662;var $122=$_pre664;var $121=$_pre666;var $120=$_pre668;var $119=$_pre670;var $118=$_pre672;
    while(1) {
     var $118;
     var $119;
     var $120;
     var $121;
     var $122;
     var $123;
     var $124;
     var $125;
     var $126;
     var $127;
     var $128;
     var $i_1564;
     var $129=HEAP32[(($41)>>2)];
     var $130=(Math_imul($128,$129)|0);
     var $131=HEAP32[(($42)>>2)];
     var $132=(Math_imul($127,$131)|0);
     var $133=((($132)+($130))|0);
     var $134=HEAP32[(($43)>>2)];
     var $135=(Math_imul($126,$134)|0);
     var $136=((($133)+($135))|0);
     var $137=HEAP32[(($44)>>2)];
     var $138=(Math_imul($125,$137)|0);
     var $139=((($136)+($138))|0);
     var $140=HEAP32[(($45)>>2)];
     var $141=(Math_imul($124,$140)|0);
     var $142=((($139)+($141))|0);
     var $143=HEAP32[(($46)>>2)];
     var $144=(Math_imul($123,$143)|0);
     var $145=((($142)+($144))|0);
     var $146=HEAP32[(($47)>>2)];
     var $147=(Math_imul($122,$146)|0);
     var $148=((($145)+($147))|0);
     var $149=HEAP32[(($48)>>2)];
     var $150=(Math_imul($121,$149)|0);
     var $151=((($148)+($150))|0);
     var $152=HEAP32[(($49)>>2)];
     var $153=(Math_imul($120,$152)|0);
     var $154=((($151)+($153))|0);
     var $155=HEAP32[(($50)>>2)];
     var $156=(Math_imul($119,$155)|0);
     var $157=((($154)+($156))|0);
     var $158=HEAP32[(($qlp_coeff)>>2)];
     var $159=(Math_imul($118,$158)|0);
     var $160=((($157)+($159))|0);
     var $161=(($residual+($i_1564<<2))|0);
     var $162=HEAP32[(($161)>>2)];
     var $163=$160>>($lp_quantization|0);
     var $164=((($163)+($162))|0);
     var $165=(($data+($i_1564<<2))|0);
     HEAP32[(($165)>>2)]=$164;
     var $166=((($i_1564)+(1))|0);
     var $167=($166|0)<($data_len|0);
     if ($167) {
      var $i_1564=$166;var $128=$127;var $127=$126;var $126=$125;var $125=$124;var $124=$123;var $123=$122;var $122=$121;var $121=$120;var $120=$119;var $119=$118;var $118=$164;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $169=($order|0)==10;
   var $170=($data_len|0)>0;
   if ($169) {
    if (!($170)) {
     return;
    }
    var $179=(($qlp_coeff+36)|0);
    var $180=(($qlp_coeff+32)|0);
    var $181=(($qlp_coeff+28)|0);
    var $182=(($qlp_coeff+24)|0);
    var $183=(($qlp_coeff+20)|0);
    var $184=(($qlp_coeff+16)|0);
    var $185=(($qlp_coeff+12)|0);
    var $186=(($qlp_coeff+8)|0);
    var $187=(($qlp_coeff+4)|0);
    var $_phi_trans_insert673=((($data)-(40))|0);
    var $_pre674=HEAP32[(($_phi_trans_insert673)>>2)];
    var $_phi_trans_insert675=((($data)-(36))|0);
    var $_pre676=HEAP32[(($_phi_trans_insert675)>>2)];
    var $_phi_trans_insert677=((($data)-(32))|0);
    var $_pre678=HEAP32[(($_phi_trans_insert677)>>2)];
    var $_phi_trans_insert679=((($data)-(28))|0);
    var $_pre680=HEAP32[(($_phi_trans_insert679)>>2)];
    var $_phi_trans_insert681=((($data)-(24))|0);
    var $_pre682=HEAP32[(($_phi_trans_insert681)>>2)];
    var $_phi_trans_insert683=((($data)-(20))|0);
    var $_pre684=HEAP32[(($_phi_trans_insert683)>>2)];
    var $_phi_trans_insert685=((($data)-(16))|0);
    var $_pre686=HEAP32[(($_phi_trans_insert685)>>2)];
    var $_phi_trans_insert687=((($data)-(12))|0);
    var $_pre688=HEAP32[(($_phi_trans_insert687)>>2)];
    var $_phi_trans_insert689=((($data)-(8))|0);
    var $_pre690=HEAP32[(($_phi_trans_insert689)>>2)];
    var $_phi_trans_insert691=((($data)-(4))|0);
    var $_pre692=HEAP32[(($_phi_trans_insert691)>>2)];
    var $i_2568=0;var $198=$_pre674;var $197=$_pre676;var $196=$_pre678;var $195=$_pre680;var $194=$_pre682;var $193=$_pre684;var $192=$_pre686;var $191=$_pre688;var $190=$_pre690;var $189=$_pre692;
    while(1) {
     var $189;
     var $190;
     var $191;
     var $192;
     var $193;
     var $194;
     var $195;
     var $196;
     var $197;
     var $198;
     var $i_2568;
     var $199=HEAP32[(($179)>>2)];
     var $200=(Math_imul($198,$199)|0);
     var $201=HEAP32[(($180)>>2)];
     var $202=(Math_imul($197,$201)|0);
     var $203=((($202)+($200))|0);
     var $204=HEAP32[(($181)>>2)];
     var $205=(Math_imul($196,$204)|0);
     var $206=((($203)+($205))|0);
     var $207=HEAP32[(($182)>>2)];
     var $208=(Math_imul($195,$207)|0);
     var $209=((($206)+($208))|0);
     var $210=HEAP32[(($183)>>2)];
     var $211=(Math_imul($194,$210)|0);
     var $212=((($209)+($211))|0);
     var $213=HEAP32[(($184)>>2)];
     var $214=(Math_imul($193,$213)|0);
     var $215=((($212)+($214))|0);
     var $216=HEAP32[(($185)>>2)];
     var $217=(Math_imul($192,$216)|0);
     var $218=((($215)+($217))|0);
     var $219=HEAP32[(($186)>>2)];
     var $220=(Math_imul($191,$219)|0);
     var $221=((($218)+($220))|0);
     var $222=HEAP32[(($187)>>2)];
     var $223=(Math_imul($190,$222)|0);
     var $224=((($221)+($223))|0);
     var $225=HEAP32[(($qlp_coeff)>>2)];
     var $226=(Math_imul($189,$225)|0);
     var $227=((($224)+($226))|0);
     var $228=(($residual+($i_2568<<2))|0);
     var $229=HEAP32[(($228)>>2)];
     var $230=$227>>($lp_quantization|0);
     var $231=((($230)+($229))|0);
     var $232=(($data+($i_2568<<2))|0);
     HEAP32[(($232)>>2)]=$231;
     var $233=((($i_2568)+(1))|0);
     var $234=($233|0)<($data_len|0);
     if ($234) {
      var $i_2568=$233;var $198=$197;var $197=$196;var $196=$195;var $195=$194;var $194=$193;var $193=$192;var $192=$191;var $191=$190;var $190=$189;var $189=$231;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($170)) {
     return;
    }
    var $171=(($qlp_coeff+32)|0);
    var $172=(($qlp_coeff+28)|0);
    var $173=(($qlp_coeff+24)|0);
    var $174=(($qlp_coeff+20)|0);
    var $175=(($qlp_coeff+16)|0);
    var $176=(($qlp_coeff+12)|0);
    var $177=(($qlp_coeff+8)|0);
    var $178=(($qlp_coeff+4)|0);
    var $_phi_trans_insert693=((($data)-(36))|0);
    var $_pre694=HEAP32[(($_phi_trans_insert693)>>2)];
    var $_phi_trans_insert695=((($data)-(32))|0);
    var $_pre696=HEAP32[(($_phi_trans_insert695)>>2)];
    var $_phi_trans_insert697=((($data)-(28))|0);
    var $_pre698=HEAP32[(($_phi_trans_insert697)>>2)];
    var $_phi_trans_insert699=((($data)-(24))|0);
    var $_pre700=HEAP32[(($_phi_trans_insert699)>>2)];
    var $_phi_trans_insert701=((($data)-(20))|0);
    var $_pre702=HEAP32[(($_phi_trans_insert701)>>2)];
    var $_phi_trans_insert703=((($data)-(16))|0);
    var $_pre704=HEAP32[(($_phi_trans_insert703)>>2)];
    var $_phi_trans_insert705=((($data)-(12))|0);
    var $_pre706=HEAP32[(($_phi_trans_insert705)>>2)];
    var $_phi_trans_insert707=((($data)-(8))|0);
    var $_pre708=HEAP32[(($_phi_trans_insert707)>>2)];
    var $_phi_trans_insert709=((($data)-(4))|0);
    var $_pre710=HEAP32[(($_phi_trans_insert709)>>2)];
    var $i_3572=0;var $244=$_pre694;var $243=$_pre696;var $242=$_pre698;var $241=$_pre700;var $240=$_pre702;var $239=$_pre704;var $238=$_pre706;var $237=$_pre708;var $236=$_pre710;
    while(1) {
     var $236;
     var $237;
     var $238;
     var $239;
     var $240;
     var $241;
     var $242;
     var $243;
     var $244;
     var $i_3572;
     var $245=HEAP32[(($171)>>2)];
     var $246=(Math_imul($244,$245)|0);
     var $247=HEAP32[(($172)>>2)];
     var $248=(Math_imul($243,$247)|0);
     var $249=((($248)+($246))|0);
     var $250=HEAP32[(($173)>>2)];
     var $251=(Math_imul($242,$250)|0);
     var $252=((($249)+($251))|0);
     var $253=HEAP32[(($174)>>2)];
     var $254=(Math_imul($241,$253)|0);
     var $255=((($252)+($254))|0);
     var $256=HEAP32[(($175)>>2)];
     var $257=(Math_imul($240,$256)|0);
     var $258=((($255)+($257))|0);
     var $259=HEAP32[(($176)>>2)];
     var $260=(Math_imul($239,$259)|0);
     var $261=((($258)+($260))|0);
     var $262=HEAP32[(($177)>>2)];
     var $263=(Math_imul($238,$262)|0);
     var $264=((($261)+($263))|0);
     var $265=HEAP32[(($178)>>2)];
     var $266=(Math_imul($237,$265)|0);
     var $267=((($264)+($266))|0);
     var $268=HEAP32[(($qlp_coeff)>>2)];
     var $269=(Math_imul($236,$268)|0);
     var $270=((($267)+($269))|0);
     var $271=(($residual+($i_3572<<2))|0);
     var $272=HEAP32[(($271)>>2)];
     var $273=$270>>($lp_quantization|0);
     var $274=((($273)+($272))|0);
     var $275=(($data+($i_3572<<2))|0);
     HEAP32[(($275)>>2)]=$274;
     var $276=((($i_3572)+(1))|0);
     var $277=($276|0)<($data_len|0);
     if ($277) {
      var $i_3572=$276;var $244=$243;var $243=$242;var $242=$241;var $241=$240;var $240=$239;var $239=$238;var $238=$237;var $237=$236;var $236=$274;
     } else {
      break;
     }
    }
    return;
   }
  }
 }
 var $279=($order>>>0)>4;
 if ($279) {
  var $281=($order>>>0)>6;
  if ($281) {
   var $283=($order|0)==8;
   var $284=($data_len|0)>0;
   if ($283) {
    if (!($284)) {
     return;
    }
    var $291=(($qlp_coeff+28)|0);
    var $292=(($qlp_coeff+24)|0);
    var $293=(($qlp_coeff+20)|0);
    var $294=(($qlp_coeff+16)|0);
    var $295=(($qlp_coeff+12)|0);
    var $296=(($qlp_coeff+8)|0);
    var $297=(($qlp_coeff+4)|0);
    var $_phi_trans_insert711=((($data)-(32))|0);
    var $_pre712=HEAP32[(($_phi_trans_insert711)>>2)];
    var $_phi_trans_insert713=((($data)-(28))|0);
    var $_pre714=HEAP32[(($_phi_trans_insert713)>>2)];
    var $_phi_trans_insert715=((($data)-(24))|0);
    var $_pre716=HEAP32[(($_phi_trans_insert715)>>2)];
    var $_phi_trans_insert717=((($data)-(20))|0);
    var $_pre718=HEAP32[(($_phi_trans_insert717)>>2)];
    var $_phi_trans_insert719=((($data)-(16))|0);
    var $_pre720=HEAP32[(($_phi_trans_insert719)>>2)];
    var $_phi_trans_insert721=((($data)-(12))|0);
    var $_pre722=HEAP32[(($_phi_trans_insert721)>>2)];
    var $_phi_trans_insert723=((($data)-(8))|0);
    var $_pre724=HEAP32[(($_phi_trans_insert723)>>2)];
    var $_phi_trans_insert725=((($data)-(4))|0);
    var $_pre726=HEAP32[(($_phi_trans_insert725)>>2)];
    var $i_4576=0;var $306=$_pre712;var $305=$_pre714;var $304=$_pre716;var $303=$_pre718;var $302=$_pre720;var $301=$_pre722;var $300=$_pre724;var $299=$_pre726;
    while(1) {
     var $299;
     var $300;
     var $301;
     var $302;
     var $303;
     var $304;
     var $305;
     var $306;
     var $i_4576;
     var $307=HEAP32[(($291)>>2)];
     var $308=(Math_imul($306,$307)|0);
     var $309=HEAP32[(($292)>>2)];
     var $310=(Math_imul($305,$309)|0);
     var $311=((($310)+($308))|0);
     var $312=HEAP32[(($293)>>2)];
     var $313=(Math_imul($304,$312)|0);
     var $314=((($311)+($313))|0);
     var $315=HEAP32[(($294)>>2)];
     var $316=(Math_imul($303,$315)|0);
     var $317=((($314)+($316))|0);
     var $318=HEAP32[(($295)>>2)];
     var $319=(Math_imul($302,$318)|0);
     var $320=((($317)+($319))|0);
     var $321=HEAP32[(($296)>>2)];
     var $322=(Math_imul($301,$321)|0);
     var $323=((($320)+($322))|0);
     var $324=HEAP32[(($297)>>2)];
     var $325=(Math_imul($300,$324)|0);
     var $326=((($323)+($325))|0);
     var $327=HEAP32[(($qlp_coeff)>>2)];
     var $328=(Math_imul($299,$327)|0);
     var $329=((($326)+($328))|0);
     var $330=(($residual+($i_4576<<2))|0);
     var $331=HEAP32[(($330)>>2)];
     var $332=$329>>($lp_quantization|0);
     var $333=((($332)+($331))|0);
     var $334=(($data+($i_4576<<2))|0);
     HEAP32[(($334)>>2)]=$333;
     var $335=((($i_4576)+(1))|0);
     var $336=($335|0)<($data_len|0);
     if ($336) {
      var $i_4576=$335;var $306=$305;var $305=$304;var $304=$303;var $303=$302;var $302=$301;var $301=$300;var $300=$299;var $299=$333;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($284)) {
     return;
    }
    var $285=(($qlp_coeff+24)|0);
    var $286=(($qlp_coeff+20)|0);
    var $287=(($qlp_coeff+16)|0);
    var $288=(($qlp_coeff+12)|0);
    var $289=(($qlp_coeff+8)|0);
    var $290=(($qlp_coeff+4)|0);
    var $_phi_trans_insert727=((($data)-(28))|0);
    var $_pre728=HEAP32[(($_phi_trans_insert727)>>2)];
    var $_phi_trans_insert729=((($data)-(24))|0);
    var $_pre730=HEAP32[(($_phi_trans_insert729)>>2)];
    var $_phi_trans_insert731=((($data)-(20))|0);
    var $_pre732=HEAP32[(($_phi_trans_insert731)>>2)];
    var $_phi_trans_insert733=((($data)-(16))|0);
    var $_pre734=HEAP32[(($_phi_trans_insert733)>>2)];
    var $_phi_trans_insert735=((($data)-(12))|0);
    var $_pre736=HEAP32[(($_phi_trans_insert735)>>2)];
    var $_phi_trans_insert737=((($data)-(8))|0);
    var $_pre738=HEAP32[(($_phi_trans_insert737)>>2)];
    var $_phi_trans_insert739=((($data)-(4))|0);
    var $_pre740=HEAP32[(($_phi_trans_insert739)>>2)];
    var $i_5580=0;var $344=$_pre728;var $343=$_pre730;var $342=$_pre732;var $341=$_pre734;var $340=$_pre736;var $339=$_pre738;var $338=$_pre740;
    while(1) {
     var $338;
     var $339;
     var $340;
     var $341;
     var $342;
     var $343;
     var $344;
     var $i_5580;
     var $345=HEAP32[(($285)>>2)];
     var $346=(Math_imul($344,$345)|0);
     var $347=HEAP32[(($286)>>2)];
     var $348=(Math_imul($343,$347)|0);
     var $349=((($348)+($346))|0);
     var $350=HEAP32[(($287)>>2)];
     var $351=(Math_imul($342,$350)|0);
     var $352=((($349)+($351))|0);
     var $353=HEAP32[(($288)>>2)];
     var $354=(Math_imul($341,$353)|0);
     var $355=((($352)+($354))|0);
     var $356=HEAP32[(($289)>>2)];
     var $357=(Math_imul($340,$356)|0);
     var $358=((($355)+($357))|0);
     var $359=HEAP32[(($290)>>2)];
     var $360=(Math_imul($339,$359)|0);
     var $361=((($358)+($360))|0);
     var $362=HEAP32[(($qlp_coeff)>>2)];
     var $363=(Math_imul($338,$362)|0);
     var $364=((($361)+($363))|0);
     var $365=(($residual+($i_5580<<2))|0);
     var $366=HEAP32[(($365)>>2)];
     var $367=$364>>($lp_quantization|0);
     var $368=((($367)+($366))|0);
     var $369=(($data+($i_5580<<2))|0);
     HEAP32[(($369)>>2)]=$368;
     var $370=((($i_5580)+(1))|0);
     var $371=($370|0)<($data_len|0);
     if ($371) {
      var $i_5580=$370;var $344=$343;var $343=$342;var $342=$341;var $341=$340;var $340=$339;var $339=$338;var $338=$368;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $373=($order|0)==6;
   var $374=($data_len|0)>0;
   if ($373) {
    if (!($374)) {
     return;
    }
    var $379=(($qlp_coeff+20)|0);
    var $380=(($qlp_coeff+16)|0);
    var $381=(($qlp_coeff+12)|0);
    var $382=(($qlp_coeff+8)|0);
    var $383=(($qlp_coeff+4)|0);
    var $_phi_trans_insert741=((($data)-(24))|0);
    var $_pre742=HEAP32[(($_phi_trans_insert741)>>2)];
    var $_phi_trans_insert743=((($data)-(20))|0);
    var $_pre744=HEAP32[(($_phi_trans_insert743)>>2)];
    var $_phi_trans_insert745=((($data)-(16))|0);
    var $_pre746=HEAP32[(($_phi_trans_insert745)>>2)];
    var $_phi_trans_insert747=((($data)-(12))|0);
    var $_pre748=HEAP32[(($_phi_trans_insert747)>>2)];
    var $_phi_trans_insert749=((($data)-(8))|0);
    var $_pre750=HEAP32[(($_phi_trans_insert749)>>2)];
    var $_phi_trans_insert751=((($data)-(4))|0);
    var $_pre752=HEAP32[(($_phi_trans_insert751)>>2)];
    var $i_6584=0;var $390=$_pre742;var $389=$_pre744;var $388=$_pre746;var $387=$_pre748;var $386=$_pre750;var $385=$_pre752;
    while(1) {
     var $385;
     var $386;
     var $387;
     var $388;
     var $389;
     var $390;
     var $i_6584;
     var $391=HEAP32[(($379)>>2)];
     var $392=(Math_imul($390,$391)|0);
     var $393=HEAP32[(($380)>>2)];
     var $394=(Math_imul($389,$393)|0);
     var $395=((($394)+($392))|0);
     var $396=HEAP32[(($381)>>2)];
     var $397=(Math_imul($388,$396)|0);
     var $398=((($395)+($397))|0);
     var $399=HEAP32[(($382)>>2)];
     var $400=(Math_imul($387,$399)|0);
     var $401=((($398)+($400))|0);
     var $402=HEAP32[(($383)>>2)];
     var $403=(Math_imul($386,$402)|0);
     var $404=((($401)+($403))|0);
     var $405=HEAP32[(($qlp_coeff)>>2)];
     var $406=(Math_imul($385,$405)|0);
     var $407=((($404)+($406))|0);
     var $408=(($residual+($i_6584<<2))|0);
     var $409=HEAP32[(($408)>>2)];
     var $410=$407>>($lp_quantization|0);
     var $411=((($410)+($409))|0);
     var $412=(($data+($i_6584<<2))|0);
     HEAP32[(($412)>>2)]=$411;
     var $413=((($i_6584)+(1))|0);
     var $414=($413|0)<($data_len|0);
     if ($414) {
      var $i_6584=$413;var $390=$389;var $389=$388;var $388=$387;var $387=$386;var $386=$385;var $385=$411;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($374)) {
     return;
    }
    var $375=(($qlp_coeff+16)|0);
    var $376=(($qlp_coeff+12)|0);
    var $377=(($qlp_coeff+8)|0);
    var $378=(($qlp_coeff+4)|0);
    var $_phi_trans_insert753=((($data)-(20))|0);
    var $_pre754=HEAP32[(($_phi_trans_insert753)>>2)];
    var $_phi_trans_insert755=((($data)-(16))|0);
    var $_pre756=HEAP32[(($_phi_trans_insert755)>>2)];
    var $_phi_trans_insert757=((($data)-(12))|0);
    var $_pre758=HEAP32[(($_phi_trans_insert757)>>2)];
    var $_phi_trans_insert759=((($data)-(8))|0);
    var $_pre760=HEAP32[(($_phi_trans_insert759)>>2)];
    var $_phi_trans_insert761=((($data)-(4))|0);
    var $_pre762=HEAP32[(($_phi_trans_insert761)>>2)];
    var $i_7588=0;var $420=$_pre754;var $419=$_pre756;var $418=$_pre758;var $417=$_pre760;var $416=$_pre762;
    while(1) {
     var $416;
     var $417;
     var $418;
     var $419;
     var $420;
     var $i_7588;
     var $421=HEAP32[(($375)>>2)];
     var $422=(Math_imul($420,$421)|0);
     var $423=HEAP32[(($376)>>2)];
     var $424=(Math_imul($419,$423)|0);
     var $425=((($424)+($422))|0);
     var $426=HEAP32[(($377)>>2)];
     var $427=(Math_imul($418,$426)|0);
     var $428=((($425)+($427))|0);
     var $429=HEAP32[(($378)>>2)];
     var $430=(Math_imul($417,$429)|0);
     var $431=((($428)+($430))|0);
     var $432=HEAP32[(($qlp_coeff)>>2)];
     var $433=(Math_imul($416,$432)|0);
     var $434=((($431)+($433))|0);
     var $435=(($residual+($i_7588<<2))|0);
     var $436=HEAP32[(($435)>>2)];
     var $437=$434>>($lp_quantization|0);
     var $438=((($437)+($436))|0);
     var $439=(($data+($i_7588<<2))|0);
     HEAP32[(($439)>>2)]=$438;
     var $440=((($i_7588)+(1))|0);
     var $441=($440|0)<($data_len|0);
     if ($441) {
      var $i_7588=$440;var $420=$419;var $419=$418;var $418=$417;var $417=$416;var $416=$438;
     } else {
      break;
     }
    }
    return;
   }
  }
 } else {
  var $443=($order>>>0)>2;
  if ($443) {
   var $445=($order|0)==4;
   var $446=($data_len|0)>0;
   if ($445) {
    if (!($446)) {
     return;
    }
    var $449=(($qlp_coeff+12)|0);
    var $450=(($qlp_coeff+8)|0);
    var $451=(($qlp_coeff+4)|0);
    var $_phi_trans_insert763=((($data)-(16))|0);
    var $_pre764=HEAP32[(($_phi_trans_insert763)>>2)];
    var $_phi_trans_insert765=((($data)-(12))|0);
    var $_pre766=HEAP32[(($_phi_trans_insert765)>>2)];
    var $_phi_trans_insert767=((($data)-(8))|0);
    var $_pre768=HEAP32[(($_phi_trans_insert767)>>2)];
    var $_phi_trans_insert769=((($data)-(4))|0);
    var $_pre770=HEAP32[(($_phi_trans_insert769)>>2)];
    var $i_8592=0;var $456=$_pre764;var $455=$_pre766;var $454=$_pre768;var $453=$_pre770;
    while(1) {
     var $453;
     var $454;
     var $455;
     var $456;
     var $i_8592;
     var $457=HEAP32[(($449)>>2)];
     var $458=(Math_imul($456,$457)|0);
     var $459=HEAP32[(($450)>>2)];
     var $460=(Math_imul($455,$459)|0);
     var $461=((($460)+($458))|0);
     var $462=HEAP32[(($451)>>2)];
     var $463=(Math_imul($454,$462)|0);
     var $464=((($461)+($463))|0);
     var $465=HEAP32[(($qlp_coeff)>>2)];
     var $466=(Math_imul($453,$465)|0);
     var $467=((($464)+($466))|0);
     var $468=(($residual+($i_8592<<2))|0);
     var $469=HEAP32[(($468)>>2)];
     var $470=$467>>($lp_quantization|0);
     var $471=((($470)+($469))|0);
     var $472=(($data+($i_8592<<2))|0);
     HEAP32[(($472)>>2)]=$471;
     var $473=((($i_8592)+(1))|0);
     var $474=($473|0)<($data_len|0);
     if ($474) {
      var $i_8592=$473;var $456=$455;var $455=$454;var $454=$453;var $453=$471;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($446)) {
     return;
    }
    var $447=(($qlp_coeff+8)|0);
    var $448=(($qlp_coeff+4)|0);
    var $_phi_trans_insert771=((($data)-(12))|0);
    var $_pre772=HEAP32[(($_phi_trans_insert771)>>2)];
    var $_phi_trans_insert773=((($data)-(8))|0);
    var $_pre774=HEAP32[(($_phi_trans_insert773)>>2)];
    var $_phi_trans_insert775=((($data)-(4))|0);
    var $_pre776=HEAP32[(($_phi_trans_insert775)>>2)];
    var $i_9596=0;var $478=$_pre772;var $477=$_pre774;var $476=$_pre776;
    while(1) {
     var $476;
     var $477;
     var $478;
     var $i_9596;
     var $479=HEAP32[(($447)>>2)];
     var $480=(Math_imul($478,$479)|0);
     var $481=HEAP32[(($448)>>2)];
     var $482=(Math_imul($477,$481)|0);
     var $483=((($482)+($480))|0);
     var $484=HEAP32[(($qlp_coeff)>>2)];
     var $485=(Math_imul($476,$484)|0);
     var $486=((($483)+($485))|0);
     var $487=(($residual+($i_9596<<2))|0);
     var $488=HEAP32[(($487)>>2)];
     var $489=$486>>($lp_quantization|0);
     var $490=((($489)+($488))|0);
     var $491=(($data+($i_9596<<2))|0);
     HEAP32[(($491)>>2)]=$490;
     var $492=((($i_9596)+(1))|0);
     var $493=($492|0)<($data_len|0);
     if ($493) {
      var $i_9596=$492;var $478=$477;var $477=$476;var $476=$490;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $495=($order|0)==2;
   var $496=($data_len|0)>0;
   if ($495) {
    if (!($496)) {
     return;
    }
    var $497=(($qlp_coeff+4)|0);
    var $_phi_trans_insert777=((($data)-(8))|0);
    var $_pre778=HEAP32[(($_phi_trans_insert777)>>2)];
    var $_phi_trans_insert779=((($data)-(4))|0);
    var $_pre780=HEAP32[(($_phi_trans_insert779)>>2)];
    var $i_10600=0;var $500=$_pre778;var $499=$_pre780;
    while(1) {
     var $499;
     var $500;
     var $i_10600;
     var $501=HEAP32[(($497)>>2)];
     var $502=(Math_imul($500,$501)|0);
     var $503=HEAP32[(($qlp_coeff)>>2)];
     var $504=(Math_imul($499,$503)|0);
     var $505=((($504)+($502))|0);
     var $506=(($residual+($i_10600<<2))|0);
     var $507=HEAP32[(($506)>>2)];
     var $508=$505>>($lp_quantization|0);
     var $509=((($508)+($507))|0);
     var $510=(($data+($i_10600<<2))|0);
     HEAP32[(($510)>>2)]=$509;
     var $511=((($i_10600)+(1))|0);
     var $512=($511|0)<($data_len|0);
     if ($512) {
      var $i_10600=$511;var $500=$499;var $499=$509;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($496)) {
     return;
    }
    var $_phi_trans_insert781=((($data)-(4))|0);
    var $_pre782=HEAP32[(($_phi_trans_insert781)>>2)];
    var $i_11604=0;var $514=$_pre782;
    while(1) {
     var $514;
     var $i_11604;
     var $515=(($residual+($i_11604<<2))|0);
     var $516=HEAP32[(($515)>>2)];
     var $517=HEAP32[(($qlp_coeff)>>2)];
     var $518=(Math_imul($514,$517)|0);
     var $519=$518>>($lp_quantization|0);
     var $520=((($519)+($516))|0);
     var $521=(($data+($i_11604<<2))|0);
     HEAP32[(($521)>>2)]=$520;
     var $522=((($i_11604)+(1))|0);
     var $523=($522|0)<($data_len|0);
     if ($523) {
      var $i_11604=$522;var $514=$520;
     } else {
      break;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_restore_signal_wide($residual,$data_len,$qlp_coeff,$order,$lp_quantization,$data){
 var label=0;
 var $1=($order>>>0)<13;
 if (!($1)) {
  var $2=($data_len|0)>0;
  if (!($2)) {
   return;
  }
  var $3$0=$lp_quantization;
  var $3$1=0;
  var $4=(($qlp_coeff+124)|0);
  var $5=(($qlp_coeff+120)|0);
  var $6=(($qlp_coeff+116)|0);
  var $7=(($qlp_coeff+112)|0);
  var $8=(($qlp_coeff+108)|0);
  var $9=(($qlp_coeff+104)|0);
  var $10=(($qlp_coeff+100)|0);
  var $11=(($qlp_coeff+96)|0);
  var $12=(($qlp_coeff+92)|0);
  var $13=(($qlp_coeff+88)|0);
  var $14=(($qlp_coeff+84)|0);
  var $15=(($qlp_coeff+80)|0);
  var $16=(($qlp_coeff+76)|0);
  var $17=(($qlp_coeff+72)|0);
  var $18=(($qlp_coeff+68)|0);
  var $19=(($qlp_coeff+64)|0);
  var $20=(($qlp_coeff+60)|0);
  var $21=(($qlp_coeff+56)|0);
  var $22=(($qlp_coeff+52)|0);
  var $23=(($qlp_coeff+48)|0);
  var $24=(($qlp_coeff+44)|0);
  var $25=(($qlp_coeff+40)|0);
  var $26=(($qlp_coeff+36)|0);
  var $27=(($qlp_coeff+32)|0);
  var $28=(($qlp_coeff+28)|0);
  var $29=(($qlp_coeff+24)|0);
  var $30=(($qlp_coeff+20)|0);
  var $31=(($qlp_coeff+16)|0);
  var $32=(($qlp_coeff+12)|0);
  var $33=(($qlp_coeff+8)|0);
  var $34=(($qlp_coeff+4)|0);
  var $i_12608=0;
  while(1) {
   var $i_12608;
   switch (($order|0)) {
   case 32: {
    var $707=HEAP32[(($4)>>2)];
    var $708$0=$707;
    var $708$1=(((($707|0)<0))|0)?-1:0;
    var $709=((($i_12608)-(32))|0);
    var $710=(($data+($709<<2))|0);
    var $711=HEAP32[(($710)>>2)];
    var $712$0=$711;
    var $712$1=(((($711|0)<0))|0)?-1:0;
    var $713$0=___muldi3($712$0,$712$1,$708$0,$708$1);var $713$1=tempRet0;
    var $sum_0$1=$713$1;var $sum_0$0=$713$0;
    label = 1331;
    break;
   }
   case 31: {
    var $sum_0$1=0;var $sum_0$0=0;
    label = 1331;
    break;
   }
   case 30: {
    var $sum_1$1=0;var $sum_1$0=0;
    label = 1332;
    break;
   }
   case 27: {
    var $sum_4$1=0;var $sum_4$0=0;
    label = 1335;
    break;
   }
   case 26: {
    var $sum_5$1=0;var $sum_5$0=0;
    label = 1336;
    break;
   }
   case 25: {
    var $sum_6$1=0;var $sum_6$0=0;
    label = 1337;
    break;
   }
   case 24: {
    var $sum_7$1=0;var $sum_7$0=0;
    label = 1338;
    break;
   }
   case 23: {
    var $sum_8$1=0;var $sum_8$0=0;
    label = 1339;
    break;
   }
   case 22: {
    var $sum_9$1=0;var $sum_9$0=0;
    label = 1340;
    break;
   }
   case 21: {
    var $sum_10$1=0;var $sum_10$0=0;
    label = 1341;
    break;
   }
   case 20: {
    var $sum_11$1=0;var $sum_11$0=0;
    label = 1342;
    break;
   }
   case 19: {
    var $sum_12$1=0;var $sum_12$0=0;
    label = 1343;
    break;
   }
   case 18: {
    var $sum_13$1=0;var $sum_13$0=0;
    label = 1344;
    break;
   }
   case 17: {
    var $sum_14$1=0;var $sum_14$0=0;
    label = 1345;
    break;
   }
   case 16: {
    var $sum_15$1=0;var $sum_15$0=0;
    label = 1346;
    break;
   }
   case 15: {
    var $sum_16$1=0;var $sum_16$0=0;
    label = 1347;
    break;
   }
   case 14: {
    var $sum_17$1=0;var $sum_17$0=0;
    label = 1348;
    break;
   }
   case 13: {
    var $sum_18$1=0;var $sum_18$0=0;
    label = 1349;
    break;
   }
   case 29: {
    var $sum_2$1=0;var $sum_2$0=0;
    label = 1333;
    break;
   }
   case 28: {
    var $sum_3$1=0;var $sum_3$0=0;
    label = 1334;
    break;
   }
   default: {
    var $sum_19$1=0;var $sum_19$0=0;
   }
   }
   if (label == 1331) {
    label = 0;
    var $sum_0$0;
    var $sum_0$1;
    var $715=HEAP32[(($5)>>2)];
    var $716$0=$715;
    var $716$1=(((($715|0)<0))|0)?-1:0;
    var $717=((($i_12608)-(31))|0);
    var $718=(($data+($717<<2))|0);
    var $719=HEAP32[(($718)>>2)];
    var $720$0=$719;
    var $720$1=(((($719|0)<0))|0)?-1:0;
    var $721$0=___muldi3($720$0,$720$1,$716$0,$716$1);var $721$1=tempRet0;
    var $722$0=_i64Add($721$0,$721$1,$sum_0$0,$sum_0$1);var $722$1=tempRet0;
    var $sum_1$1=$722$1;var $sum_1$0=$722$0;
    label = 1332;
   }
   if (label == 1332) {
    label = 0;
    var $sum_1$0;
    var $sum_1$1;
    var $724=HEAP32[(($6)>>2)];
    var $725$0=$724;
    var $725$1=(((($724|0)<0))|0)?-1:0;
    var $726=((($i_12608)-(30))|0);
    var $727=(($data+($726<<2))|0);
    var $728=HEAP32[(($727)>>2)];
    var $729$0=$728;
    var $729$1=(((($728|0)<0))|0)?-1:0;
    var $730$0=___muldi3($729$0,$729$1,$725$0,$725$1);var $730$1=tempRet0;
    var $731$0=_i64Add($730$0,$730$1,$sum_1$0,$sum_1$1);var $731$1=tempRet0;
    var $sum_2$1=$731$1;var $sum_2$0=$731$0;
    label = 1333;
   }
   if (label == 1333) {
    label = 0;
    var $sum_2$0;
    var $sum_2$1;
    var $733=HEAP32[(($7)>>2)];
    var $734$0=$733;
    var $734$1=(((($733|0)<0))|0)?-1:0;
    var $735=((($i_12608)-(29))|0);
    var $736=(($data+($735<<2))|0);
    var $737=HEAP32[(($736)>>2)];
    var $738$0=$737;
    var $738$1=(((($737|0)<0))|0)?-1:0;
    var $739$0=___muldi3($738$0,$738$1,$734$0,$734$1);var $739$1=tempRet0;
    var $740$0=_i64Add($739$0,$739$1,$sum_2$0,$sum_2$1);var $740$1=tempRet0;
    var $sum_3$1=$740$1;var $sum_3$0=$740$0;
    label = 1334;
   }
   if (label == 1334) {
    label = 0;
    var $sum_3$0;
    var $sum_3$1;
    var $742=HEAP32[(($8)>>2)];
    var $743$0=$742;
    var $743$1=(((($742|0)<0))|0)?-1:0;
    var $744=((($i_12608)-(28))|0);
    var $745=(($data+($744<<2))|0);
    var $746=HEAP32[(($745)>>2)];
    var $747$0=$746;
    var $747$1=(((($746|0)<0))|0)?-1:0;
    var $748$0=___muldi3($747$0,$747$1,$743$0,$743$1);var $748$1=tempRet0;
    var $749$0=_i64Add($748$0,$748$1,$sum_3$0,$sum_3$1);var $749$1=tempRet0;
    var $sum_4$1=$749$1;var $sum_4$0=$749$0;
    label = 1335;
   }
   if (label == 1335) {
    label = 0;
    var $sum_4$0;
    var $sum_4$1;
    var $751=HEAP32[(($9)>>2)];
    var $752$0=$751;
    var $752$1=(((($751|0)<0))|0)?-1:0;
    var $753=((($i_12608)-(27))|0);
    var $754=(($data+($753<<2))|0);
    var $755=HEAP32[(($754)>>2)];
    var $756$0=$755;
    var $756$1=(((($755|0)<0))|0)?-1:0;
    var $757$0=___muldi3($756$0,$756$1,$752$0,$752$1);var $757$1=tempRet0;
    var $758$0=_i64Add($757$0,$757$1,$sum_4$0,$sum_4$1);var $758$1=tempRet0;
    var $sum_5$1=$758$1;var $sum_5$0=$758$0;
    label = 1336;
   }
   if (label == 1336) {
    label = 0;
    var $sum_5$0;
    var $sum_5$1;
    var $760=HEAP32[(($10)>>2)];
    var $761$0=$760;
    var $761$1=(((($760|0)<0))|0)?-1:0;
    var $762=((($i_12608)-(26))|0);
    var $763=(($data+($762<<2))|0);
    var $764=HEAP32[(($763)>>2)];
    var $765$0=$764;
    var $765$1=(((($764|0)<0))|0)?-1:0;
    var $766$0=___muldi3($765$0,$765$1,$761$0,$761$1);var $766$1=tempRet0;
    var $767$0=_i64Add($766$0,$766$1,$sum_5$0,$sum_5$1);var $767$1=tempRet0;
    var $sum_6$1=$767$1;var $sum_6$0=$767$0;
    label = 1337;
   }
   if (label == 1337) {
    label = 0;
    var $sum_6$0;
    var $sum_6$1;
    var $769=HEAP32[(($11)>>2)];
    var $770$0=$769;
    var $770$1=(((($769|0)<0))|0)?-1:0;
    var $771=((($i_12608)-(25))|0);
    var $772=(($data+($771<<2))|0);
    var $773=HEAP32[(($772)>>2)];
    var $774$0=$773;
    var $774$1=(((($773|0)<0))|0)?-1:0;
    var $775$0=___muldi3($774$0,$774$1,$770$0,$770$1);var $775$1=tempRet0;
    var $776$0=_i64Add($775$0,$775$1,$sum_6$0,$sum_6$1);var $776$1=tempRet0;
    var $sum_7$1=$776$1;var $sum_7$0=$776$0;
    label = 1338;
   }
   if (label == 1338) {
    label = 0;
    var $sum_7$0;
    var $sum_7$1;
    var $778=HEAP32[(($12)>>2)];
    var $779$0=$778;
    var $779$1=(((($778|0)<0))|0)?-1:0;
    var $780=((($i_12608)-(24))|0);
    var $781=(($data+($780<<2))|0);
    var $782=HEAP32[(($781)>>2)];
    var $783$0=$782;
    var $783$1=(((($782|0)<0))|0)?-1:0;
    var $784$0=___muldi3($783$0,$783$1,$779$0,$779$1);var $784$1=tempRet0;
    var $785$0=_i64Add($784$0,$784$1,$sum_7$0,$sum_7$1);var $785$1=tempRet0;
    var $sum_8$1=$785$1;var $sum_8$0=$785$0;
    label = 1339;
   }
   if (label == 1339) {
    label = 0;
    var $sum_8$0;
    var $sum_8$1;
    var $787=HEAP32[(($13)>>2)];
    var $788$0=$787;
    var $788$1=(((($787|0)<0))|0)?-1:0;
    var $789=((($i_12608)-(23))|0);
    var $790=(($data+($789<<2))|0);
    var $791=HEAP32[(($790)>>2)];
    var $792$0=$791;
    var $792$1=(((($791|0)<0))|0)?-1:0;
    var $793$0=___muldi3($792$0,$792$1,$788$0,$788$1);var $793$1=tempRet0;
    var $794$0=_i64Add($793$0,$793$1,$sum_8$0,$sum_8$1);var $794$1=tempRet0;
    var $sum_9$1=$794$1;var $sum_9$0=$794$0;
    label = 1340;
   }
   if (label == 1340) {
    label = 0;
    var $sum_9$0;
    var $sum_9$1;
    var $796=HEAP32[(($14)>>2)];
    var $797$0=$796;
    var $797$1=(((($796|0)<0))|0)?-1:0;
    var $798=((($i_12608)-(22))|0);
    var $799=(($data+($798<<2))|0);
    var $800=HEAP32[(($799)>>2)];
    var $801$0=$800;
    var $801$1=(((($800|0)<0))|0)?-1:0;
    var $802$0=___muldi3($801$0,$801$1,$797$0,$797$1);var $802$1=tempRet0;
    var $803$0=_i64Add($802$0,$802$1,$sum_9$0,$sum_9$1);var $803$1=tempRet0;
    var $sum_10$1=$803$1;var $sum_10$0=$803$0;
    label = 1341;
   }
   if (label == 1341) {
    label = 0;
    var $sum_10$0;
    var $sum_10$1;
    var $805=HEAP32[(($15)>>2)];
    var $806$0=$805;
    var $806$1=(((($805|0)<0))|0)?-1:0;
    var $807=((($i_12608)-(21))|0);
    var $808=(($data+($807<<2))|0);
    var $809=HEAP32[(($808)>>2)];
    var $810$0=$809;
    var $810$1=(((($809|0)<0))|0)?-1:0;
    var $811$0=___muldi3($810$0,$810$1,$806$0,$806$1);var $811$1=tempRet0;
    var $812$0=_i64Add($811$0,$811$1,$sum_10$0,$sum_10$1);var $812$1=tempRet0;
    var $sum_11$1=$812$1;var $sum_11$0=$812$0;
    label = 1342;
   }
   if (label == 1342) {
    label = 0;
    var $sum_11$0;
    var $sum_11$1;
    var $814=HEAP32[(($16)>>2)];
    var $815$0=$814;
    var $815$1=(((($814|0)<0))|0)?-1:0;
    var $816=((($i_12608)-(20))|0);
    var $817=(($data+($816<<2))|0);
    var $818=HEAP32[(($817)>>2)];
    var $819$0=$818;
    var $819$1=(((($818|0)<0))|0)?-1:0;
    var $820$0=___muldi3($819$0,$819$1,$815$0,$815$1);var $820$1=tempRet0;
    var $821$0=_i64Add($820$0,$820$1,$sum_11$0,$sum_11$1);var $821$1=tempRet0;
    var $sum_12$1=$821$1;var $sum_12$0=$821$0;
    label = 1343;
   }
   if (label == 1343) {
    label = 0;
    var $sum_12$0;
    var $sum_12$1;
    var $823=HEAP32[(($17)>>2)];
    var $824$0=$823;
    var $824$1=(((($823|0)<0))|0)?-1:0;
    var $825=((($i_12608)-(19))|0);
    var $826=(($data+($825<<2))|0);
    var $827=HEAP32[(($826)>>2)];
    var $828$0=$827;
    var $828$1=(((($827|0)<0))|0)?-1:0;
    var $829$0=___muldi3($828$0,$828$1,$824$0,$824$1);var $829$1=tempRet0;
    var $830$0=_i64Add($829$0,$829$1,$sum_12$0,$sum_12$1);var $830$1=tempRet0;
    var $sum_13$1=$830$1;var $sum_13$0=$830$0;
    label = 1344;
   }
   if (label == 1344) {
    label = 0;
    var $sum_13$0;
    var $sum_13$1;
    var $832=HEAP32[(($18)>>2)];
    var $833$0=$832;
    var $833$1=(((($832|0)<0))|0)?-1:0;
    var $834=((($i_12608)-(18))|0);
    var $835=(($data+($834<<2))|0);
    var $836=HEAP32[(($835)>>2)];
    var $837$0=$836;
    var $837$1=(((($836|0)<0))|0)?-1:0;
    var $838$0=___muldi3($837$0,$837$1,$833$0,$833$1);var $838$1=tempRet0;
    var $839$0=_i64Add($838$0,$838$1,$sum_13$0,$sum_13$1);var $839$1=tempRet0;
    var $sum_14$1=$839$1;var $sum_14$0=$839$0;
    label = 1345;
   }
   if (label == 1345) {
    label = 0;
    var $sum_14$0;
    var $sum_14$1;
    var $841=HEAP32[(($19)>>2)];
    var $842$0=$841;
    var $842$1=(((($841|0)<0))|0)?-1:0;
    var $843=((($i_12608)-(17))|0);
    var $844=(($data+($843<<2))|0);
    var $845=HEAP32[(($844)>>2)];
    var $846$0=$845;
    var $846$1=(((($845|0)<0))|0)?-1:0;
    var $847$0=___muldi3($846$0,$846$1,$842$0,$842$1);var $847$1=tempRet0;
    var $848$0=_i64Add($847$0,$847$1,$sum_14$0,$sum_14$1);var $848$1=tempRet0;
    var $sum_15$1=$848$1;var $sum_15$0=$848$0;
    label = 1346;
   }
   if (label == 1346) {
    label = 0;
    var $sum_15$0;
    var $sum_15$1;
    var $850=HEAP32[(($20)>>2)];
    var $851$0=$850;
    var $851$1=(((($850|0)<0))|0)?-1:0;
    var $852=((($i_12608)-(16))|0);
    var $853=(($data+($852<<2))|0);
    var $854=HEAP32[(($853)>>2)];
    var $855$0=$854;
    var $855$1=(((($854|0)<0))|0)?-1:0;
    var $856$0=___muldi3($855$0,$855$1,$851$0,$851$1);var $856$1=tempRet0;
    var $857$0=_i64Add($856$0,$856$1,$sum_15$0,$sum_15$1);var $857$1=tempRet0;
    var $sum_16$1=$857$1;var $sum_16$0=$857$0;
    label = 1347;
   }
   if (label == 1347) {
    label = 0;
    var $sum_16$0;
    var $sum_16$1;
    var $859=HEAP32[(($21)>>2)];
    var $860$0=$859;
    var $860$1=(((($859|0)<0))|0)?-1:0;
    var $861=((($i_12608)-(15))|0);
    var $862=(($data+($861<<2))|0);
    var $863=HEAP32[(($862)>>2)];
    var $864$0=$863;
    var $864$1=(((($863|0)<0))|0)?-1:0;
    var $865$0=___muldi3($864$0,$864$1,$860$0,$860$1);var $865$1=tempRet0;
    var $866$0=_i64Add($865$0,$865$1,$sum_16$0,$sum_16$1);var $866$1=tempRet0;
    var $sum_17$1=$866$1;var $sum_17$0=$866$0;
    label = 1348;
   }
   if (label == 1348) {
    label = 0;
    var $sum_17$0;
    var $sum_17$1;
    var $868=HEAP32[(($22)>>2)];
    var $869$0=$868;
    var $869$1=(((($868|0)<0))|0)?-1:0;
    var $870=((($i_12608)-(14))|0);
    var $871=(($data+($870<<2))|0);
    var $872=HEAP32[(($871)>>2)];
    var $873$0=$872;
    var $873$1=(((($872|0)<0))|0)?-1:0;
    var $874$0=___muldi3($873$0,$873$1,$869$0,$869$1);var $874$1=tempRet0;
    var $875$0=_i64Add($874$0,$874$1,$sum_17$0,$sum_17$1);var $875$1=tempRet0;
    var $sum_18$1=$875$1;var $sum_18$0=$875$0;
    label = 1349;
   }
   if (label == 1349) {
    label = 0;
    var $sum_18$0;
    var $sum_18$1;
    var $876=HEAP32[(($23)>>2)];
    var $877$0=$876;
    var $877$1=(((($876|0)<0))|0)?-1:0;
    var $878=((($i_12608)-(13))|0);
    var $879=(($data+($878<<2))|0);
    var $880=HEAP32[(($879)>>2)];
    var $881$0=$880;
    var $881$1=(((($880|0)<0))|0)?-1:0;
    var $882$0=___muldi3($881$0,$881$1,$877$0,$877$1);var $882$1=tempRet0;
    var $883$0=_i64Add($882$0,$882$1,$sum_18$0,$sum_18$1);var $883$1=tempRet0;
    var $884=HEAP32[(($24)>>2)];
    var $885$0=$884;
    var $885$1=(((($884|0)<0))|0)?-1:0;
    var $886=((($i_12608)-(12))|0);
    var $887=(($data+($886<<2))|0);
    var $888=HEAP32[(($887)>>2)];
    var $889$0=$888;
    var $889$1=(((($888|0)<0))|0)?-1:0;
    var $890$0=___muldi3($889$0,$889$1,$885$0,$885$1);var $890$1=tempRet0;
    var $891$0=_i64Add($883$0,$883$1,$890$0,$890$1);var $891$1=tempRet0;
    var $892=HEAP32[(($25)>>2)];
    var $893$0=$892;
    var $893$1=(((($892|0)<0))|0)?-1:0;
    var $894=((($i_12608)-(11))|0);
    var $895=(($data+($894<<2))|0);
    var $896=HEAP32[(($895)>>2)];
    var $897$0=$896;
    var $897$1=(((($896|0)<0))|0)?-1:0;
    var $898$0=___muldi3($897$0,$897$1,$893$0,$893$1);var $898$1=tempRet0;
    var $899$0=_i64Add($891$0,$891$1,$898$0,$898$1);var $899$1=tempRet0;
    var $900=HEAP32[(($26)>>2)];
    var $901$0=$900;
    var $901$1=(((($900|0)<0))|0)?-1:0;
    var $902=((($i_12608)-(10))|0);
    var $903=(($data+($902<<2))|0);
    var $904=HEAP32[(($903)>>2)];
    var $905$0=$904;
    var $905$1=(((($904|0)<0))|0)?-1:0;
    var $906$0=___muldi3($905$0,$905$1,$901$0,$901$1);var $906$1=tempRet0;
    var $907$0=_i64Add($899$0,$899$1,$906$0,$906$1);var $907$1=tempRet0;
    var $908=HEAP32[(($27)>>2)];
    var $909$0=$908;
    var $909$1=(((($908|0)<0))|0)?-1:0;
    var $910=((($i_12608)-(9))|0);
    var $911=(($data+($910<<2))|0);
    var $912=HEAP32[(($911)>>2)];
    var $913$0=$912;
    var $913$1=(((($912|0)<0))|0)?-1:0;
    var $914$0=___muldi3($913$0,$913$1,$909$0,$909$1);var $914$1=tempRet0;
    var $915$0=_i64Add($907$0,$907$1,$914$0,$914$1);var $915$1=tempRet0;
    var $916=HEAP32[(($28)>>2)];
    var $917$0=$916;
    var $917$1=(((($916|0)<0))|0)?-1:0;
    var $918=((($i_12608)-(8))|0);
    var $919=(($data+($918<<2))|0);
    var $920=HEAP32[(($919)>>2)];
    var $921$0=$920;
    var $921$1=(((($920|0)<0))|0)?-1:0;
    var $922$0=___muldi3($921$0,$921$1,$917$0,$917$1);var $922$1=tempRet0;
    var $923$0=_i64Add($915$0,$915$1,$922$0,$922$1);var $923$1=tempRet0;
    var $924=HEAP32[(($29)>>2)];
    var $925$0=$924;
    var $925$1=(((($924|0)<0))|0)?-1:0;
    var $926=((($i_12608)-(7))|0);
    var $927=(($data+($926<<2))|0);
    var $928=HEAP32[(($927)>>2)];
    var $929$0=$928;
    var $929$1=(((($928|0)<0))|0)?-1:0;
    var $930$0=___muldi3($929$0,$929$1,$925$0,$925$1);var $930$1=tempRet0;
    var $931$0=_i64Add($923$0,$923$1,$930$0,$930$1);var $931$1=tempRet0;
    var $932=HEAP32[(($30)>>2)];
    var $933$0=$932;
    var $933$1=(((($932|0)<0))|0)?-1:0;
    var $934=((($i_12608)-(6))|0);
    var $935=(($data+($934<<2))|0);
    var $936=HEAP32[(($935)>>2)];
    var $937$0=$936;
    var $937$1=(((($936|0)<0))|0)?-1:0;
    var $938$0=___muldi3($937$0,$937$1,$933$0,$933$1);var $938$1=tempRet0;
    var $939$0=_i64Add($931$0,$931$1,$938$0,$938$1);var $939$1=tempRet0;
    var $940=HEAP32[(($31)>>2)];
    var $941$0=$940;
    var $941$1=(((($940|0)<0))|0)?-1:0;
    var $942=((($i_12608)-(5))|0);
    var $943=(($data+($942<<2))|0);
    var $944=HEAP32[(($943)>>2)];
    var $945$0=$944;
    var $945$1=(((($944|0)<0))|0)?-1:0;
    var $946$0=___muldi3($945$0,$945$1,$941$0,$941$1);var $946$1=tempRet0;
    var $947$0=_i64Add($939$0,$939$1,$946$0,$946$1);var $947$1=tempRet0;
    var $948=HEAP32[(($32)>>2)];
    var $949$0=$948;
    var $949$1=(((($948|0)<0))|0)?-1:0;
    var $950=((($i_12608)-(4))|0);
    var $951=(($data+($950<<2))|0);
    var $952=HEAP32[(($951)>>2)];
    var $953$0=$952;
    var $953$1=(((($952|0)<0))|0)?-1:0;
    var $954$0=___muldi3($953$0,$953$1,$949$0,$949$1);var $954$1=tempRet0;
    var $955$0=_i64Add($947$0,$947$1,$954$0,$954$1);var $955$1=tempRet0;
    var $956=HEAP32[(($33)>>2)];
    var $957$0=$956;
    var $957$1=(((($956|0)<0))|0)?-1:0;
    var $958=((($i_12608)-(3))|0);
    var $959=(($data+($958<<2))|0);
    var $960=HEAP32[(($959)>>2)];
    var $961$0=$960;
    var $961$1=(((($960|0)<0))|0)?-1:0;
    var $962$0=___muldi3($961$0,$961$1,$957$0,$957$1);var $962$1=tempRet0;
    var $963$0=_i64Add($955$0,$955$1,$962$0,$962$1);var $963$1=tempRet0;
    var $964=HEAP32[(($34)>>2)];
    var $965$0=$964;
    var $965$1=(((($964|0)<0))|0)?-1:0;
    var $966=((($i_12608)-(2))|0);
    var $967=(($data+($966<<2))|0);
    var $968=HEAP32[(($967)>>2)];
    var $969$0=$968;
    var $969$1=(((($968|0)<0))|0)?-1:0;
    var $970$0=___muldi3($969$0,$969$1,$965$0,$965$1);var $970$1=tempRet0;
    var $971$0=_i64Add($963$0,$963$1,$970$0,$970$1);var $971$1=tempRet0;
    var $972=HEAP32[(($qlp_coeff)>>2)];
    var $973$0=$972;
    var $973$1=(((($972|0)<0))|0)?-1:0;
    var $974=((($i_12608)-(1))|0);
    var $975=(($data+($974<<2))|0);
    var $976=HEAP32[(($975)>>2)];
    var $977$0=$976;
    var $977$1=(((($976|0)<0))|0)?-1:0;
    var $978$0=___muldi3($977$0,$977$1,$973$0,$973$1);var $978$1=tempRet0;
    var $979$0=_i64Add($971$0,$971$1,$978$0,$978$1);var $979$1=tempRet0;
    var $sum_19$1=$979$1;var $sum_19$0=$979$0;
   }
   var $sum_19$0;
   var $sum_19$1;
   var $981=(($residual+($i_12608<<2))|0);
   var $982=HEAP32[(($981)>>2)];
   var $983$0=_bitshift64Ashr($sum_19$0,$sum_19$1,$3$0);var $983$1=tempRet0;
   var $984$0=$983$0;
   var $984=$984$0;
   var $985=((($984)+($982))|0);
   var $986=(($data+($i_12608<<2))|0);
   HEAP32[(($986)>>2)]=$985;
   var $987=((($i_12608)+(1))|0);
   var $988=($987|0)<($data_len|0);
   if ($988) {
    var $i_12608=$987;
   } else {
    break;
   }
  }
  return;
 }
 var $36=($order>>>0)>8;
 if ($36) {
  var $38=($order>>>0)>10;
  if ($38) {
   var $40=($order|0)==12;
   var $41=($data_len|0)>0;
   if ($40) {
    if (!($41)) {
     return;
    }
    var $53=(($qlp_coeff+44)|0);
    var $54=(($qlp_coeff+40)|0);
    var $55=(($qlp_coeff+36)|0);
    var $56=(($qlp_coeff+32)|0);
    var $57=(($qlp_coeff+28)|0);
    var $58=(($qlp_coeff+24)|0);
    var $59=(($qlp_coeff+20)|0);
    var $60=(($qlp_coeff+16)|0);
    var $61=(($qlp_coeff+12)|0);
    var $62=(($qlp_coeff+8)|0);
    var $63=(($qlp_coeff+4)|0);
    var $64$0=$lp_quantization;
    var $64$1=0;
    var $_phi_trans_insert=((($data)-(48))|0);
    var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
    var $_phi_trans_insert629=((($data)-(44))|0);
    var $_pre630=HEAP32[(($_phi_trans_insert629)>>2)];
    var $_phi_trans_insert631=((($data)-(40))|0);
    var $_pre632=HEAP32[(($_phi_trans_insert631)>>2)];
    var $_phi_trans_insert633=((($data)-(36))|0);
    var $_pre634=HEAP32[(($_phi_trans_insert633)>>2)];
    var $_phi_trans_insert635=((($data)-(32))|0);
    var $_pre636=HEAP32[(($_phi_trans_insert635)>>2)];
    var $_phi_trans_insert637=((($data)-(28))|0);
    var $_pre638=HEAP32[(($_phi_trans_insert637)>>2)];
    var $_phi_trans_insert639=((($data)-(24))|0);
    var $_pre640=HEAP32[(($_phi_trans_insert639)>>2)];
    var $_phi_trans_insert641=((($data)-(20))|0);
    var $_pre642=HEAP32[(($_phi_trans_insert641)>>2)];
    var $_phi_trans_insert643=((($data)-(16))|0);
    var $_pre644=HEAP32[(($_phi_trans_insert643)>>2)];
    var $_phi_trans_insert645=((($data)-(12))|0);
    var $_pre646=HEAP32[(($_phi_trans_insert645)>>2)];
    var $_phi_trans_insert647=((($data)-(8))|0);
    var $_pre648=HEAP32[(($_phi_trans_insert647)>>2)];
    var $_phi_trans_insert649=((($data)-(4))|0);
    var $_pre650=HEAP32[(($_phi_trans_insert649)>>2)];
    var $i_0561=0;var $77=$_pre;var $76=$_pre630;var $75=$_pre632;var $74=$_pre634;var $73=$_pre636;var $72=$_pre638;var $71=$_pre640;var $70=$_pre642;var $69=$_pre644;var $68=$_pre646;var $67=$_pre648;var $66=$_pre650;
    while(1) {
     var $66;
     var $67;
     var $68;
     var $69;
     var $70;
     var $71;
     var $72;
     var $73;
     var $74;
     var $75;
     var $76;
     var $77;
     var $i_0561;
     var $78=HEAP32[(($53)>>2)];
     var $79$0=$78;
     var $79$1=(((($78|0)<0))|0)?-1:0;
     var $80$0=$77;
     var $80$1=(((($77|0)<0))|0)?-1:0;
     var $81$0=___muldi3($80$0,$80$1,$79$0,$79$1);var $81$1=tempRet0;
     var $82=HEAP32[(($54)>>2)];
     var $83$0=$82;
     var $83$1=(((($82|0)<0))|0)?-1:0;
     var $84$0=$76;
     var $84$1=(((($76|0)<0))|0)?-1:0;
     var $85$0=___muldi3($84$0,$84$1,$83$0,$83$1);var $85$1=tempRet0;
     var $86$0=_i64Add($85$0,$85$1,$81$0,$81$1);var $86$1=tempRet0;
     var $87=HEAP32[(($55)>>2)];
     var $88$0=$87;
     var $88$1=(((($87|0)<0))|0)?-1:0;
     var $89$0=$75;
     var $89$1=(((($75|0)<0))|0)?-1:0;
     var $90$0=___muldi3($89$0,$89$1,$88$0,$88$1);var $90$1=tempRet0;
     var $91$0=_i64Add($86$0,$86$1,$90$0,$90$1);var $91$1=tempRet0;
     var $92=HEAP32[(($56)>>2)];
     var $93$0=$92;
     var $93$1=(((($92|0)<0))|0)?-1:0;
     var $94$0=$74;
     var $94$1=(((($74|0)<0))|0)?-1:0;
     var $95$0=___muldi3($94$0,$94$1,$93$0,$93$1);var $95$1=tempRet0;
     var $96$0=_i64Add($91$0,$91$1,$95$0,$95$1);var $96$1=tempRet0;
     var $97=HEAP32[(($57)>>2)];
     var $98$0=$97;
     var $98$1=(((($97|0)<0))|0)?-1:0;
     var $99$0=$73;
     var $99$1=(((($73|0)<0))|0)?-1:0;
     var $100$0=___muldi3($99$0,$99$1,$98$0,$98$1);var $100$1=tempRet0;
     var $101$0=_i64Add($96$0,$96$1,$100$0,$100$1);var $101$1=tempRet0;
     var $102=HEAP32[(($58)>>2)];
     var $103$0=$102;
     var $103$1=(((($102|0)<0))|0)?-1:0;
     var $104$0=$72;
     var $104$1=(((($72|0)<0))|0)?-1:0;
     var $105$0=___muldi3($104$0,$104$1,$103$0,$103$1);var $105$1=tempRet0;
     var $106$0=_i64Add($101$0,$101$1,$105$0,$105$1);var $106$1=tempRet0;
     var $107=HEAP32[(($59)>>2)];
     var $108$0=$107;
     var $108$1=(((($107|0)<0))|0)?-1:0;
     var $109$0=$71;
     var $109$1=(((($71|0)<0))|0)?-1:0;
     var $110$0=___muldi3($109$0,$109$1,$108$0,$108$1);var $110$1=tempRet0;
     var $111$0=_i64Add($106$0,$106$1,$110$0,$110$1);var $111$1=tempRet0;
     var $112=HEAP32[(($60)>>2)];
     var $113$0=$112;
     var $113$1=(((($112|0)<0))|0)?-1:0;
     var $114$0=$70;
     var $114$1=(((($70|0)<0))|0)?-1:0;
     var $115$0=___muldi3($114$0,$114$1,$113$0,$113$1);var $115$1=tempRet0;
     var $116$0=_i64Add($111$0,$111$1,$115$0,$115$1);var $116$1=tempRet0;
     var $117=HEAP32[(($61)>>2)];
     var $118$0=$117;
     var $118$1=(((($117|0)<0))|0)?-1:0;
     var $119$0=$69;
     var $119$1=(((($69|0)<0))|0)?-1:0;
     var $120$0=___muldi3($119$0,$119$1,$118$0,$118$1);var $120$1=tempRet0;
     var $121$0=_i64Add($116$0,$116$1,$120$0,$120$1);var $121$1=tempRet0;
     var $122=HEAP32[(($62)>>2)];
     var $123$0=$122;
     var $123$1=(((($122|0)<0))|0)?-1:0;
     var $124$0=$68;
     var $124$1=(((($68|0)<0))|0)?-1:0;
     var $125$0=___muldi3($124$0,$124$1,$123$0,$123$1);var $125$1=tempRet0;
     var $126$0=_i64Add($121$0,$121$1,$125$0,$125$1);var $126$1=tempRet0;
     var $127=HEAP32[(($63)>>2)];
     var $128$0=$127;
     var $128$1=(((($127|0)<0))|0)?-1:0;
     var $129$0=$67;
     var $129$1=(((($67|0)<0))|0)?-1:0;
     var $130$0=___muldi3($129$0,$129$1,$128$0,$128$1);var $130$1=tempRet0;
     var $131$0=_i64Add($126$0,$126$1,$130$0,$130$1);var $131$1=tempRet0;
     var $132=HEAP32[(($qlp_coeff)>>2)];
     var $133$0=$132;
     var $133$1=(((($132|0)<0))|0)?-1:0;
     var $134$0=$66;
     var $134$1=(((($66|0)<0))|0)?-1:0;
     var $135$0=___muldi3($134$0,$134$1,$133$0,$133$1);var $135$1=tempRet0;
     var $136$0=_i64Add($131$0,$131$1,$135$0,$135$1);var $136$1=tempRet0;
     var $137=(($residual+($i_0561<<2))|0);
     var $138=HEAP32[(($137)>>2)];
     var $139$0=_bitshift64Ashr($136$0,$136$1,$64$0);var $139$1=tempRet0;
     var $140$0=$139$0;
     var $140=$140$0;
     var $141=((($140)+($138))|0);
     var $142=(($data+($i_0561<<2))|0);
     HEAP32[(($142)>>2)]=$141;
     var $143=((($i_0561)+(1))|0);
     var $144=($143|0)<($data_len|0);
     if ($144) {
      var $i_0561=$143;var $77=$76;var $76=$75;var $75=$74;var $74=$73;var $73=$72;var $72=$71;var $71=$70;var $70=$69;var $69=$68;var $68=$67;var $67=$66;var $66=$141;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($41)) {
     return;
    }
    var $42=(($qlp_coeff+40)|0);
    var $43=(($qlp_coeff+36)|0);
    var $44=(($qlp_coeff+32)|0);
    var $45=(($qlp_coeff+28)|0);
    var $46=(($qlp_coeff+24)|0);
    var $47=(($qlp_coeff+20)|0);
    var $48=(($qlp_coeff+16)|0);
    var $49=(($qlp_coeff+12)|0);
    var $50=(($qlp_coeff+8)|0);
    var $51=(($qlp_coeff+4)|0);
    var $52$0=$lp_quantization;
    var $52$1=0;
    var $_phi_trans_insert651=((($data)-(44))|0);
    var $_pre652=HEAP32[(($_phi_trans_insert651)>>2)];
    var $_phi_trans_insert653=((($data)-(40))|0);
    var $_pre654=HEAP32[(($_phi_trans_insert653)>>2)];
    var $_phi_trans_insert655=((($data)-(36))|0);
    var $_pre656=HEAP32[(($_phi_trans_insert655)>>2)];
    var $_phi_trans_insert657=((($data)-(32))|0);
    var $_pre658=HEAP32[(($_phi_trans_insert657)>>2)];
    var $_phi_trans_insert659=((($data)-(28))|0);
    var $_pre660=HEAP32[(($_phi_trans_insert659)>>2)];
    var $_phi_trans_insert661=((($data)-(24))|0);
    var $_pre662=HEAP32[(($_phi_trans_insert661)>>2)];
    var $_phi_trans_insert663=((($data)-(20))|0);
    var $_pre664=HEAP32[(($_phi_trans_insert663)>>2)];
    var $_phi_trans_insert665=((($data)-(16))|0);
    var $_pre666=HEAP32[(($_phi_trans_insert665)>>2)];
    var $_phi_trans_insert667=((($data)-(12))|0);
    var $_pre668=HEAP32[(($_phi_trans_insert667)>>2)];
    var $_phi_trans_insert669=((($data)-(8))|0);
    var $_pre670=HEAP32[(($_phi_trans_insert669)>>2)];
    var $_phi_trans_insert671=((($data)-(4))|0);
    var $_pre672=HEAP32[(($_phi_trans_insert671)>>2)];
    var $i_1564=0;var $156=$_pre652;var $155=$_pre654;var $154=$_pre656;var $153=$_pre658;var $152=$_pre660;var $151=$_pre662;var $150=$_pre664;var $149=$_pre666;var $148=$_pre668;var $147=$_pre670;var $146=$_pre672;
    while(1) {
     var $146;
     var $147;
     var $148;
     var $149;
     var $150;
     var $151;
     var $152;
     var $153;
     var $154;
     var $155;
     var $156;
     var $i_1564;
     var $157=HEAP32[(($42)>>2)];
     var $158$0=$157;
     var $158$1=(((($157|0)<0))|0)?-1:0;
     var $159$0=$156;
     var $159$1=(((($156|0)<0))|0)?-1:0;
     var $160$0=___muldi3($159$0,$159$1,$158$0,$158$1);var $160$1=tempRet0;
     var $161=HEAP32[(($43)>>2)];
     var $162$0=$161;
     var $162$1=(((($161|0)<0))|0)?-1:0;
     var $163$0=$155;
     var $163$1=(((($155|0)<0))|0)?-1:0;
     var $164$0=___muldi3($163$0,$163$1,$162$0,$162$1);var $164$1=tempRet0;
     var $165$0=_i64Add($164$0,$164$1,$160$0,$160$1);var $165$1=tempRet0;
     var $166=HEAP32[(($44)>>2)];
     var $167$0=$166;
     var $167$1=(((($166|0)<0))|0)?-1:0;
     var $168$0=$154;
     var $168$1=(((($154|0)<0))|0)?-1:0;
     var $169$0=___muldi3($168$0,$168$1,$167$0,$167$1);var $169$1=tempRet0;
     var $170$0=_i64Add($165$0,$165$1,$169$0,$169$1);var $170$1=tempRet0;
     var $171=HEAP32[(($45)>>2)];
     var $172$0=$171;
     var $172$1=(((($171|0)<0))|0)?-1:0;
     var $173$0=$153;
     var $173$1=(((($153|0)<0))|0)?-1:0;
     var $174$0=___muldi3($173$0,$173$1,$172$0,$172$1);var $174$1=tempRet0;
     var $175$0=_i64Add($170$0,$170$1,$174$0,$174$1);var $175$1=tempRet0;
     var $176=HEAP32[(($46)>>2)];
     var $177$0=$176;
     var $177$1=(((($176|0)<0))|0)?-1:0;
     var $178$0=$152;
     var $178$1=(((($152|0)<0))|0)?-1:0;
     var $179$0=___muldi3($178$0,$178$1,$177$0,$177$1);var $179$1=tempRet0;
     var $180$0=_i64Add($175$0,$175$1,$179$0,$179$1);var $180$1=tempRet0;
     var $181=HEAP32[(($47)>>2)];
     var $182$0=$181;
     var $182$1=(((($181|0)<0))|0)?-1:0;
     var $183$0=$151;
     var $183$1=(((($151|0)<0))|0)?-1:0;
     var $184$0=___muldi3($183$0,$183$1,$182$0,$182$1);var $184$1=tempRet0;
     var $185$0=_i64Add($180$0,$180$1,$184$0,$184$1);var $185$1=tempRet0;
     var $186=HEAP32[(($48)>>2)];
     var $187$0=$186;
     var $187$1=(((($186|0)<0))|0)?-1:0;
     var $188$0=$150;
     var $188$1=(((($150|0)<0))|0)?-1:0;
     var $189$0=___muldi3($188$0,$188$1,$187$0,$187$1);var $189$1=tempRet0;
     var $190$0=_i64Add($185$0,$185$1,$189$0,$189$1);var $190$1=tempRet0;
     var $191=HEAP32[(($49)>>2)];
     var $192$0=$191;
     var $192$1=(((($191|0)<0))|0)?-1:0;
     var $193$0=$149;
     var $193$1=(((($149|0)<0))|0)?-1:0;
     var $194$0=___muldi3($193$0,$193$1,$192$0,$192$1);var $194$1=tempRet0;
     var $195$0=_i64Add($190$0,$190$1,$194$0,$194$1);var $195$1=tempRet0;
     var $196=HEAP32[(($50)>>2)];
     var $197$0=$196;
     var $197$1=(((($196|0)<0))|0)?-1:0;
     var $198$0=$148;
     var $198$1=(((($148|0)<0))|0)?-1:0;
     var $199$0=___muldi3($198$0,$198$1,$197$0,$197$1);var $199$1=tempRet0;
     var $200$0=_i64Add($195$0,$195$1,$199$0,$199$1);var $200$1=tempRet0;
     var $201=HEAP32[(($51)>>2)];
     var $202$0=$201;
     var $202$1=(((($201|0)<0))|0)?-1:0;
     var $203$0=$147;
     var $203$1=(((($147|0)<0))|0)?-1:0;
     var $204$0=___muldi3($203$0,$203$1,$202$0,$202$1);var $204$1=tempRet0;
     var $205$0=_i64Add($200$0,$200$1,$204$0,$204$1);var $205$1=tempRet0;
     var $206=HEAP32[(($qlp_coeff)>>2)];
     var $207$0=$206;
     var $207$1=(((($206|0)<0))|0)?-1:0;
     var $208$0=$146;
     var $208$1=(((($146|0)<0))|0)?-1:0;
     var $209$0=___muldi3($208$0,$208$1,$207$0,$207$1);var $209$1=tempRet0;
     var $210$0=_i64Add($205$0,$205$1,$209$0,$209$1);var $210$1=tempRet0;
     var $211=(($residual+($i_1564<<2))|0);
     var $212=HEAP32[(($211)>>2)];
     var $213$0=_bitshift64Ashr($210$0,$210$1,$52$0);var $213$1=tempRet0;
     var $214$0=$213$0;
     var $214=$214$0;
     var $215=((($214)+($212))|0);
     var $216=(($data+($i_1564<<2))|0);
     HEAP32[(($216)>>2)]=$215;
     var $217=((($i_1564)+(1))|0);
     var $218=($217|0)<($data_len|0);
     if ($218) {
      var $i_1564=$217;var $156=$155;var $155=$154;var $154=$153;var $153=$152;var $152=$151;var $151=$150;var $150=$149;var $149=$148;var $148=$147;var $147=$146;var $146=$215;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $220=($order|0)==10;
   var $221=($data_len|0)>0;
   if ($220) {
    if (!($221)) {
     return;
    }
    var $231=(($qlp_coeff+36)|0);
    var $232=(($qlp_coeff+32)|0);
    var $233=(($qlp_coeff+28)|0);
    var $234=(($qlp_coeff+24)|0);
    var $235=(($qlp_coeff+20)|0);
    var $236=(($qlp_coeff+16)|0);
    var $237=(($qlp_coeff+12)|0);
    var $238=(($qlp_coeff+8)|0);
    var $239=(($qlp_coeff+4)|0);
    var $240$0=$lp_quantization;
    var $240$1=0;
    var $_phi_trans_insert673=((($data)-(40))|0);
    var $_pre674=HEAP32[(($_phi_trans_insert673)>>2)];
    var $_phi_trans_insert675=((($data)-(36))|0);
    var $_pre676=HEAP32[(($_phi_trans_insert675)>>2)];
    var $_phi_trans_insert677=((($data)-(32))|0);
    var $_pre678=HEAP32[(($_phi_trans_insert677)>>2)];
    var $_phi_trans_insert679=((($data)-(28))|0);
    var $_pre680=HEAP32[(($_phi_trans_insert679)>>2)];
    var $_phi_trans_insert681=((($data)-(24))|0);
    var $_pre682=HEAP32[(($_phi_trans_insert681)>>2)];
    var $_phi_trans_insert683=((($data)-(20))|0);
    var $_pre684=HEAP32[(($_phi_trans_insert683)>>2)];
    var $_phi_trans_insert685=((($data)-(16))|0);
    var $_pre686=HEAP32[(($_phi_trans_insert685)>>2)];
    var $_phi_trans_insert687=((($data)-(12))|0);
    var $_pre688=HEAP32[(($_phi_trans_insert687)>>2)];
    var $_phi_trans_insert689=((($data)-(8))|0);
    var $_pre690=HEAP32[(($_phi_trans_insert689)>>2)];
    var $_phi_trans_insert691=((($data)-(4))|0);
    var $_pre692=HEAP32[(($_phi_trans_insert691)>>2)];
    var $i_2568=0;var $251=$_pre674;var $250=$_pre676;var $249=$_pre678;var $248=$_pre680;var $247=$_pre682;var $246=$_pre684;var $245=$_pre686;var $244=$_pre688;var $243=$_pre690;var $242=$_pre692;
    while(1) {
     var $242;
     var $243;
     var $244;
     var $245;
     var $246;
     var $247;
     var $248;
     var $249;
     var $250;
     var $251;
     var $i_2568;
     var $252=HEAP32[(($231)>>2)];
     var $253$0=$252;
     var $253$1=(((($252|0)<0))|0)?-1:0;
     var $254$0=$251;
     var $254$1=(((($251|0)<0))|0)?-1:0;
     var $255$0=___muldi3($254$0,$254$1,$253$0,$253$1);var $255$1=tempRet0;
     var $256=HEAP32[(($232)>>2)];
     var $257$0=$256;
     var $257$1=(((($256|0)<0))|0)?-1:0;
     var $258$0=$250;
     var $258$1=(((($250|0)<0))|0)?-1:0;
     var $259$0=___muldi3($258$0,$258$1,$257$0,$257$1);var $259$1=tempRet0;
     var $260$0=_i64Add($259$0,$259$1,$255$0,$255$1);var $260$1=tempRet0;
     var $261=HEAP32[(($233)>>2)];
     var $262$0=$261;
     var $262$1=(((($261|0)<0))|0)?-1:0;
     var $263$0=$249;
     var $263$1=(((($249|0)<0))|0)?-1:0;
     var $264$0=___muldi3($263$0,$263$1,$262$0,$262$1);var $264$1=tempRet0;
     var $265$0=_i64Add($260$0,$260$1,$264$0,$264$1);var $265$1=tempRet0;
     var $266=HEAP32[(($234)>>2)];
     var $267$0=$266;
     var $267$1=(((($266|0)<0))|0)?-1:0;
     var $268$0=$248;
     var $268$1=(((($248|0)<0))|0)?-1:0;
     var $269$0=___muldi3($268$0,$268$1,$267$0,$267$1);var $269$1=tempRet0;
     var $270$0=_i64Add($265$0,$265$1,$269$0,$269$1);var $270$1=tempRet0;
     var $271=HEAP32[(($235)>>2)];
     var $272$0=$271;
     var $272$1=(((($271|0)<0))|0)?-1:0;
     var $273$0=$247;
     var $273$1=(((($247|0)<0))|0)?-1:0;
     var $274$0=___muldi3($273$0,$273$1,$272$0,$272$1);var $274$1=tempRet0;
     var $275$0=_i64Add($270$0,$270$1,$274$0,$274$1);var $275$1=tempRet0;
     var $276=HEAP32[(($236)>>2)];
     var $277$0=$276;
     var $277$1=(((($276|0)<0))|0)?-1:0;
     var $278$0=$246;
     var $278$1=(((($246|0)<0))|0)?-1:0;
     var $279$0=___muldi3($278$0,$278$1,$277$0,$277$1);var $279$1=tempRet0;
     var $280$0=_i64Add($275$0,$275$1,$279$0,$279$1);var $280$1=tempRet0;
     var $281=HEAP32[(($237)>>2)];
     var $282$0=$281;
     var $282$1=(((($281|0)<0))|0)?-1:0;
     var $283$0=$245;
     var $283$1=(((($245|0)<0))|0)?-1:0;
     var $284$0=___muldi3($283$0,$283$1,$282$0,$282$1);var $284$1=tempRet0;
     var $285$0=_i64Add($280$0,$280$1,$284$0,$284$1);var $285$1=tempRet0;
     var $286=HEAP32[(($238)>>2)];
     var $287$0=$286;
     var $287$1=(((($286|0)<0))|0)?-1:0;
     var $288$0=$244;
     var $288$1=(((($244|0)<0))|0)?-1:0;
     var $289$0=___muldi3($288$0,$288$1,$287$0,$287$1);var $289$1=tempRet0;
     var $290$0=_i64Add($285$0,$285$1,$289$0,$289$1);var $290$1=tempRet0;
     var $291=HEAP32[(($239)>>2)];
     var $292$0=$291;
     var $292$1=(((($291|0)<0))|0)?-1:0;
     var $293$0=$243;
     var $293$1=(((($243|0)<0))|0)?-1:0;
     var $294$0=___muldi3($293$0,$293$1,$292$0,$292$1);var $294$1=tempRet0;
     var $295$0=_i64Add($290$0,$290$1,$294$0,$294$1);var $295$1=tempRet0;
     var $296=HEAP32[(($qlp_coeff)>>2)];
     var $297$0=$296;
     var $297$1=(((($296|0)<0))|0)?-1:0;
     var $298$0=$242;
     var $298$1=(((($242|0)<0))|0)?-1:0;
     var $299$0=___muldi3($298$0,$298$1,$297$0,$297$1);var $299$1=tempRet0;
     var $300$0=_i64Add($295$0,$295$1,$299$0,$299$1);var $300$1=tempRet0;
     var $301=(($residual+($i_2568<<2))|0);
     var $302=HEAP32[(($301)>>2)];
     var $303$0=_bitshift64Ashr($300$0,$300$1,$240$0);var $303$1=tempRet0;
     var $304$0=$303$0;
     var $304=$304$0;
     var $305=((($304)+($302))|0);
     var $306=(($data+($i_2568<<2))|0);
     HEAP32[(($306)>>2)]=$305;
     var $307=((($i_2568)+(1))|0);
     var $308=($307|0)<($data_len|0);
     if ($308) {
      var $i_2568=$307;var $251=$250;var $250=$249;var $249=$248;var $248=$247;var $247=$246;var $246=$245;var $245=$244;var $244=$243;var $243=$242;var $242=$305;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($221)) {
     return;
    }
    var $222=(($qlp_coeff+32)|0);
    var $223=(($qlp_coeff+28)|0);
    var $224=(($qlp_coeff+24)|0);
    var $225=(($qlp_coeff+20)|0);
    var $226=(($qlp_coeff+16)|0);
    var $227=(($qlp_coeff+12)|0);
    var $228=(($qlp_coeff+8)|0);
    var $229=(($qlp_coeff+4)|0);
    var $230$0=$lp_quantization;
    var $230$1=0;
    var $_phi_trans_insert693=((($data)-(36))|0);
    var $_pre694=HEAP32[(($_phi_trans_insert693)>>2)];
    var $_phi_trans_insert695=((($data)-(32))|0);
    var $_pre696=HEAP32[(($_phi_trans_insert695)>>2)];
    var $_phi_trans_insert697=((($data)-(28))|0);
    var $_pre698=HEAP32[(($_phi_trans_insert697)>>2)];
    var $_phi_trans_insert699=((($data)-(24))|0);
    var $_pre700=HEAP32[(($_phi_trans_insert699)>>2)];
    var $_phi_trans_insert701=((($data)-(20))|0);
    var $_pre702=HEAP32[(($_phi_trans_insert701)>>2)];
    var $_phi_trans_insert703=((($data)-(16))|0);
    var $_pre704=HEAP32[(($_phi_trans_insert703)>>2)];
    var $_phi_trans_insert705=((($data)-(12))|0);
    var $_pre706=HEAP32[(($_phi_trans_insert705)>>2)];
    var $_phi_trans_insert707=((($data)-(8))|0);
    var $_pre708=HEAP32[(($_phi_trans_insert707)>>2)];
    var $_phi_trans_insert709=((($data)-(4))|0);
    var $_pre710=HEAP32[(($_phi_trans_insert709)>>2)];
    var $i_3572=0;var $318=$_pre694;var $317=$_pre696;var $316=$_pre698;var $315=$_pre700;var $314=$_pre702;var $313=$_pre704;var $312=$_pre706;var $311=$_pre708;var $310=$_pre710;
    while(1) {
     var $310;
     var $311;
     var $312;
     var $313;
     var $314;
     var $315;
     var $316;
     var $317;
     var $318;
     var $i_3572;
     var $319=HEAP32[(($222)>>2)];
     var $320$0=$319;
     var $320$1=(((($319|0)<0))|0)?-1:0;
     var $321$0=$318;
     var $321$1=(((($318|0)<0))|0)?-1:0;
     var $322$0=___muldi3($321$0,$321$1,$320$0,$320$1);var $322$1=tempRet0;
     var $323=HEAP32[(($223)>>2)];
     var $324$0=$323;
     var $324$1=(((($323|0)<0))|0)?-1:0;
     var $325$0=$317;
     var $325$1=(((($317|0)<0))|0)?-1:0;
     var $326$0=___muldi3($325$0,$325$1,$324$0,$324$1);var $326$1=tempRet0;
     var $327$0=_i64Add($326$0,$326$1,$322$0,$322$1);var $327$1=tempRet0;
     var $328=HEAP32[(($224)>>2)];
     var $329$0=$328;
     var $329$1=(((($328|0)<0))|0)?-1:0;
     var $330$0=$316;
     var $330$1=(((($316|0)<0))|0)?-1:0;
     var $331$0=___muldi3($330$0,$330$1,$329$0,$329$1);var $331$1=tempRet0;
     var $332$0=_i64Add($327$0,$327$1,$331$0,$331$1);var $332$1=tempRet0;
     var $333=HEAP32[(($225)>>2)];
     var $334$0=$333;
     var $334$1=(((($333|0)<0))|0)?-1:0;
     var $335$0=$315;
     var $335$1=(((($315|0)<0))|0)?-1:0;
     var $336$0=___muldi3($335$0,$335$1,$334$0,$334$1);var $336$1=tempRet0;
     var $337$0=_i64Add($332$0,$332$1,$336$0,$336$1);var $337$1=tempRet0;
     var $338=HEAP32[(($226)>>2)];
     var $339$0=$338;
     var $339$1=(((($338|0)<0))|0)?-1:0;
     var $340$0=$314;
     var $340$1=(((($314|0)<0))|0)?-1:0;
     var $341$0=___muldi3($340$0,$340$1,$339$0,$339$1);var $341$1=tempRet0;
     var $342$0=_i64Add($337$0,$337$1,$341$0,$341$1);var $342$1=tempRet0;
     var $343=HEAP32[(($227)>>2)];
     var $344$0=$343;
     var $344$1=(((($343|0)<0))|0)?-1:0;
     var $345$0=$313;
     var $345$1=(((($313|0)<0))|0)?-1:0;
     var $346$0=___muldi3($345$0,$345$1,$344$0,$344$1);var $346$1=tempRet0;
     var $347$0=_i64Add($342$0,$342$1,$346$0,$346$1);var $347$1=tempRet0;
     var $348=HEAP32[(($228)>>2)];
     var $349$0=$348;
     var $349$1=(((($348|0)<0))|0)?-1:0;
     var $350$0=$312;
     var $350$1=(((($312|0)<0))|0)?-1:0;
     var $351$0=___muldi3($350$0,$350$1,$349$0,$349$1);var $351$1=tempRet0;
     var $352$0=_i64Add($347$0,$347$1,$351$0,$351$1);var $352$1=tempRet0;
     var $353=HEAP32[(($229)>>2)];
     var $354$0=$353;
     var $354$1=(((($353|0)<0))|0)?-1:0;
     var $355$0=$311;
     var $355$1=(((($311|0)<0))|0)?-1:0;
     var $356$0=___muldi3($355$0,$355$1,$354$0,$354$1);var $356$1=tempRet0;
     var $357$0=_i64Add($352$0,$352$1,$356$0,$356$1);var $357$1=tempRet0;
     var $358=HEAP32[(($qlp_coeff)>>2)];
     var $359$0=$358;
     var $359$1=(((($358|0)<0))|0)?-1:0;
     var $360$0=$310;
     var $360$1=(((($310|0)<0))|0)?-1:0;
     var $361$0=___muldi3($360$0,$360$1,$359$0,$359$1);var $361$1=tempRet0;
     var $362$0=_i64Add($357$0,$357$1,$361$0,$361$1);var $362$1=tempRet0;
     var $363=(($residual+($i_3572<<2))|0);
     var $364=HEAP32[(($363)>>2)];
     var $365$0=_bitshift64Ashr($362$0,$362$1,$230$0);var $365$1=tempRet0;
     var $366$0=$365$0;
     var $366=$366$0;
     var $367=((($366)+($364))|0);
     var $368=(($data+($i_3572<<2))|0);
     HEAP32[(($368)>>2)]=$367;
     var $369=((($i_3572)+(1))|0);
     var $370=($369|0)<($data_len|0);
     if ($370) {
      var $i_3572=$369;var $318=$317;var $317=$316;var $316=$315;var $315=$314;var $314=$313;var $313=$312;var $312=$311;var $311=$310;var $310=$367;
     } else {
      break;
     }
    }
    return;
   }
  }
 }
 var $372=($order>>>0)>4;
 if ($372) {
  var $374=($order>>>0)>6;
  if ($374) {
   var $376=($order|0)==8;
   var $377=($data_len|0)>0;
   if ($376) {
    if (!($377)) {
     return;
    }
    var $385=(($qlp_coeff+28)|0);
    var $386=(($qlp_coeff+24)|0);
    var $387=(($qlp_coeff+20)|0);
    var $388=(($qlp_coeff+16)|0);
    var $389=(($qlp_coeff+12)|0);
    var $390=(($qlp_coeff+8)|0);
    var $391=(($qlp_coeff+4)|0);
    var $392$0=$lp_quantization;
    var $392$1=0;
    var $_phi_trans_insert711=((($data)-(32))|0);
    var $_pre712=HEAP32[(($_phi_trans_insert711)>>2)];
    var $_phi_trans_insert713=((($data)-(28))|0);
    var $_pre714=HEAP32[(($_phi_trans_insert713)>>2)];
    var $_phi_trans_insert715=((($data)-(24))|0);
    var $_pre716=HEAP32[(($_phi_trans_insert715)>>2)];
    var $_phi_trans_insert717=((($data)-(20))|0);
    var $_pre718=HEAP32[(($_phi_trans_insert717)>>2)];
    var $_phi_trans_insert719=((($data)-(16))|0);
    var $_pre720=HEAP32[(($_phi_trans_insert719)>>2)];
    var $_phi_trans_insert721=((($data)-(12))|0);
    var $_pre722=HEAP32[(($_phi_trans_insert721)>>2)];
    var $_phi_trans_insert723=((($data)-(8))|0);
    var $_pre724=HEAP32[(($_phi_trans_insert723)>>2)];
    var $_phi_trans_insert725=((($data)-(4))|0);
    var $_pre726=HEAP32[(($_phi_trans_insert725)>>2)];
    var $i_4576=0;var $401=$_pre712;var $400=$_pre714;var $399=$_pre716;var $398=$_pre718;var $397=$_pre720;var $396=$_pre722;var $395=$_pre724;var $394=$_pre726;
    while(1) {
     var $394;
     var $395;
     var $396;
     var $397;
     var $398;
     var $399;
     var $400;
     var $401;
     var $i_4576;
     var $402=HEAP32[(($385)>>2)];
     var $403$0=$402;
     var $403$1=(((($402|0)<0))|0)?-1:0;
     var $404$0=$401;
     var $404$1=(((($401|0)<0))|0)?-1:0;
     var $405$0=___muldi3($404$0,$404$1,$403$0,$403$1);var $405$1=tempRet0;
     var $406=HEAP32[(($386)>>2)];
     var $407$0=$406;
     var $407$1=(((($406|0)<0))|0)?-1:0;
     var $408$0=$400;
     var $408$1=(((($400|0)<0))|0)?-1:0;
     var $409$0=___muldi3($408$0,$408$1,$407$0,$407$1);var $409$1=tempRet0;
     var $410$0=_i64Add($409$0,$409$1,$405$0,$405$1);var $410$1=tempRet0;
     var $411=HEAP32[(($387)>>2)];
     var $412$0=$411;
     var $412$1=(((($411|0)<0))|0)?-1:0;
     var $413$0=$399;
     var $413$1=(((($399|0)<0))|0)?-1:0;
     var $414$0=___muldi3($413$0,$413$1,$412$0,$412$1);var $414$1=tempRet0;
     var $415$0=_i64Add($410$0,$410$1,$414$0,$414$1);var $415$1=tempRet0;
     var $416=HEAP32[(($388)>>2)];
     var $417$0=$416;
     var $417$1=(((($416|0)<0))|0)?-1:0;
     var $418$0=$398;
     var $418$1=(((($398|0)<0))|0)?-1:0;
     var $419$0=___muldi3($418$0,$418$1,$417$0,$417$1);var $419$1=tempRet0;
     var $420$0=_i64Add($415$0,$415$1,$419$0,$419$1);var $420$1=tempRet0;
     var $421=HEAP32[(($389)>>2)];
     var $422$0=$421;
     var $422$1=(((($421|0)<0))|0)?-1:0;
     var $423$0=$397;
     var $423$1=(((($397|0)<0))|0)?-1:0;
     var $424$0=___muldi3($423$0,$423$1,$422$0,$422$1);var $424$1=tempRet0;
     var $425$0=_i64Add($420$0,$420$1,$424$0,$424$1);var $425$1=tempRet0;
     var $426=HEAP32[(($390)>>2)];
     var $427$0=$426;
     var $427$1=(((($426|0)<0))|0)?-1:0;
     var $428$0=$396;
     var $428$1=(((($396|0)<0))|0)?-1:0;
     var $429$0=___muldi3($428$0,$428$1,$427$0,$427$1);var $429$1=tempRet0;
     var $430$0=_i64Add($425$0,$425$1,$429$0,$429$1);var $430$1=tempRet0;
     var $431=HEAP32[(($391)>>2)];
     var $432$0=$431;
     var $432$1=(((($431|0)<0))|0)?-1:0;
     var $433$0=$395;
     var $433$1=(((($395|0)<0))|0)?-1:0;
     var $434$0=___muldi3($433$0,$433$1,$432$0,$432$1);var $434$1=tempRet0;
     var $435$0=_i64Add($430$0,$430$1,$434$0,$434$1);var $435$1=tempRet0;
     var $436=HEAP32[(($qlp_coeff)>>2)];
     var $437$0=$436;
     var $437$1=(((($436|0)<0))|0)?-1:0;
     var $438$0=$394;
     var $438$1=(((($394|0)<0))|0)?-1:0;
     var $439$0=___muldi3($438$0,$438$1,$437$0,$437$1);var $439$1=tempRet0;
     var $440$0=_i64Add($435$0,$435$1,$439$0,$439$1);var $440$1=tempRet0;
     var $441=(($residual+($i_4576<<2))|0);
     var $442=HEAP32[(($441)>>2)];
     var $443$0=_bitshift64Ashr($440$0,$440$1,$392$0);var $443$1=tempRet0;
     var $444$0=$443$0;
     var $444=$444$0;
     var $445=((($444)+($442))|0);
     var $446=(($data+($i_4576<<2))|0);
     HEAP32[(($446)>>2)]=$445;
     var $447=((($i_4576)+(1))|0);
     var $448=($447|0)<($data_len|0);
     if ($448) {
      var $i_4576=$447;var $401=$400;var $400=$399;var $399=$398;var $398=$397;var $397=$396;var $396=$395;var $395=$394;var $394=$445;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($377)) {
     return;
    }
    var $378=(($qlp_coeff+24)|0);
    var $379=(($qlp_coeff+20)|0);
    var $380=(($qlp_coeff+16)|0);
    var $381=(($qlp_coeff+12)|0);
    var $382=(($qlp_coeff+8)|0);
    var $383=(($qlp_coeff+4)|0);
    var $384$0=$lp_quantization;
    var $384$1=0;
    var $_phi_trans_insert727=((($data)-(28))|0);
    var $_pre728=HEAP32[(($_phi_trans_insert727)>>2)];
    var $_phi_trans_insert729=((($data)-(24))|0);
    var $_pre730=HEAP32[(($_phi_trans_insert729)>>2)];
    var $_phi_trans_insert731=((($data)-(20))|0);
    var $_pre732=HEAP32[(($_phi_trans_insert731)>>2)];
    var $_phi_trans_insert733=((($data)-(16))|0);
    var $_pre734=HEAP32[(($_phi_trans_insert733)>>2)];
    var $_phi_trans_insert735=((($data)-(12))|0);
    var $_pre736=HEAP32[(($_phi_trans_insert735)>>2)];
    var $_phi_trans_insert737=((($data)-(8))|0);
    var $_pre738=HEAP32[(($_phi_trans_insert737)>>2)];
    var $_phi_trans_insert739=((($data)-(4))|0);
    var $_pre740=HEAP32[(($_phi_trans_insert739)>>2)];
    var $i_5580=0;var $456=$_pre728;var $455=$_pre730;var $454=$_pre732;var $453=$_pre734;var $452=$_pre736;var $451=$_pre738;var $450=$_pre740;
    while(1) {
     var $450;
     var $451;
     var $452;
     var $453;
     var $454;
     var $455;
     var $456;
     var $i_5580;
     var $457=HEAP32[(($378)>>2)];
     var $458$0=$457;
     var $458$1=(((($457|0)<0))|0)?-1:0;
     var $459$0=$456;
     var $459$1=(((($456|0)<0))|0)?-1:0;
     var $460$0=___muldi3($459$0,$459$1,$458$0,$458$1);var $460$1=tempRet0;
     var $461=HEAP32[(($379)>>2)];
     var $462$0=$461;
     var $462$1=(((($461|0)<0))|0)?-1:0;
     var $463$0=$455;
     var $463$1=(((($455|0)<0))|0)?-1:0;
     var $464$0=___muldi3($463$0,$463$1,$462$0,$462$1);var $464$1=tempRet0;
     var $465$0=_i64Add($464$0,$464$1,$460$0,$460$1);var $465$1=tempRet0;
     var $466=HEAP32[(($380)>>2)];
     var $467$0=$466;
     var $467$1=(((($466|0)<0))|0)?-1:0;
     var $468$0=$454;
     var $468$1=(((($454|0)<0))|0)?-1:0;
     var $469$0=___muldi3($468$0,$468$1,$467$0,$467$1);var $469$1=tempRet0;
     var $470$0=_i64Add($465$0,$465$1,$469$0,$469$1);var $470$1=tempRet0;
     var $471=HEAP32[(($381)>>2)];
     var $472$0=$471;
     var $472$1=(((($471|0)<0))|0)?-1:0;
     var $473$0=$453;
     var $473$1=(((($453|0)<0))|0)?-1:0;
     var $474$0=___muldi3($473$0,$473$1,$472$0,$472$1);var $474$1=tempRet0;
     var $475$0=_i64Add($470$0,$470$1,$474$0,$474$1);var $475$1=tempRet0;
     var $476=HEAP32[(($382)>>2)];
     var $477$0=$476;
     var $477$1=(((($476|0)<0))|0)?-1:0;
     var $478$0=$452;
     var $478$1=(((($452|0)<0))|0)?-1:0;
     var $479$0=___muldi3($478$0,$478$1,$477$0,$477$1);var $479$1=tempRet0;
     var $480$0=_i64Add($475$0,$475$1,$479$0,$479$1);var $480$1=tempRet0;
     var $481=HEAP32[(($383)>>2)];
     var $482$0=$481;
     var $482$1=(((($481|0)<0))|0)?-1:0;
     var $483$0=$451;
     var $483$1=(((($451|0)<0))|0)?-1:0;
     var $484$0=___muldi3($483$0,$483$1,$482$0,$482$1);var $484$1=tempRet0;
     var $485$0=_i64Add($480$0,$480$1,$484$0,$484$1);var $485$1=tempRet0;
     var $486=HEAP32[(($qlp_coeff)>>2)];
     var $487$0=$486;
     var $487$1=(((($486|0)<0))|0)?-1:0;
     var $488$0=$450;
     var $488$1=(((($450|0)<0))|0)?-1:0;
     var $489$0=___muldi3($488$0,$488$1,$487$0,$487$1);var $489$1=tempRet0;
     var $490$0=_i64Add($485$0,$485$1,$489$0,$489$1);var $490$1=tempRet0;
     var $491=(($residual+($i_5580<<2))|0);
     var $492=HEAP32[(($491)>>2)];
     var $493$0=_bitshift64Ashr($490$0,$490$1,$384$0);var $493$1=tempRet0;
     var $494$0=$493$0;
     var $494=$494$0;
     var $495=((($494)+($492))|0);
     var $496=(($data+($i_5580<<2))|0);
     HEAP32[(($496)>>2)]=$495;
     var $497=((($i_5580)+(1))|0);
     var $498=($497|0)<($data_len|0);
     if ($498) {
      var $i_5580=$497;var $456=$455;var $455=$454;var $454=$453;var $453=$452;var $452=$451;var $451=$450;var $450=$495;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $500=($order|0)==6;
   var $501=($data_len|0)>0;
   if ($500) {
    if (!($501)) {
     return;
    }
    var $507=(($qlp_coeff+20)|0);
    var $508=(($qlp_coeff+16)|0);
    var $509=(($qlp_coeff+12)|0);
    var $510=(($qlp_coeff+8)|0);
    var $511=(($qlp_coeff+4)|0);
    var $512$0=$lp_quantization;
    var $512$1=0;
    var $_phi_trans_insert741=((($data)-(24))|0);
    var $_pre742=HEAP32[(($_phi_trans_insert741)>>2)];
    var $_phi_trans_insert743=((($data)-(20))|0);
    var $_pre744=HEAP32[(($_phi_trans_insert743)>>2)];
    var $_phi_trans_insert745=((($data)-(16))|0);
    var $_pre746=HEAP32[(($_phi_trans_insert745)>>2)];
    var $_phi_trans_insert747=((($data)-(12))|0);
    var $_pre748=HEAP32[(($_phi_trans_insert747)>>2)];
    var $_phi_trans_insert749=((($data)-(8))|0);
    var $_pre750=HEAP32[(($_phi_trans_insert749)>>2)];
    var $_phi_trans_insert751=((($data)-(4))|0);
    var $_pre752=HEAP32[(($_phi_trans_insert751)>>2)];
    var $i_6584=0;var $519=$_pre742;var $518=$_pre744;var $517=$_pre746;var $516=$_pre748;var $515=$_pre750;var $514=$_pre752;
    while(1) {
     var $514;
     var $515;
     var $516;
     var $517;
     var $518;
     var $519;
     var $i_6584;
     var $520=HEAP32[(($507)>>2)];
     var $521$0=$520;
     var $521$1=(((($520|0)<0))|0)?-1:0;
     var $522$0=$519;
     var $522$1=(((($519|0)<0))|0)?-1:0;
     var $523$0=___muldi3($522$0,$522$1,$521$0,$521$1);var $523$1=tempRet0;
     var $524=HEAP32[(($508)>>2)];
     var $525$0=$524;
     var $525$1=(((($524|0)<0))|0)?-1:0;
     var $526$0=$518;
     var $526$1=(((($518|0)<0))|0)?-1:0;
     var $527$0=___muldi3($526$0,$526$1,$525$0,$525$1);var $527$1=tempRet0;
     var $528$0=_i64Add($527$0,$527$1,$523$0,$523$1);var $528$1=tempRet0;
     var $529=HEAP32[(($509)>>2)];
     var $530$0=$529;
     var $530$1=(((($529|0)<0))|0)?-1:0;
     var $531$0=$517;
     var $531$1=(((($517|0)<0))|0)?-1:0;
     var $532$0=___muldi3($531$0,$531$1,$530$0,$530$1);var $532$1=tempRet0;
     var $533$0=_i64Add($528$0,$528$1,$532$0,$532$1);var $533$1=tempRet0;
     var $534=HEAP32[(($510)>>2)];
     var $535$0=$534;
     var $535$1=(((($534|0)<0))|0)?-1:0;
     var $536$0=$516;
     var $536$1=(((($516|0)<0))|0)?-1:0;
     var $537$0=___muldi3($536$0,$536$1,$535$0,$535$1);var $537$1=tempRet0;
     var $538$0=_i64Add($533$0,$533$1,$537$0,$537$1);var $538$1=tempRet0;
     var $539=HEAP32[(($511)>>2)];
     var $540$0=$539;
     var $540$1=(((($539|0)<0))|0)?-1:0;
     var $541$0=$515;
     var $541$1=(((($515|0)<0))|0)?-1:0;
     var $542$0=___muldi3($541$0,$541$1,$540$0,$540$1);var $542$1=tempRet0;
     var $543$0=_i64Add($538$0,$538$1,$542$0,$542$1);var $543$1=tempRet0;
     var $544=HEAP32[(($qlp_coeff)>>2)];
     var $545$0=$544;
     var $545$1=(((($544|0)<0))|0)?-1:0;
     var $546$0=$514;
     var $546$1=(((($514|0)<0))|0)?-1:0;
     var $547$0=___muldi3($546$0,$546$1,$545$0,$545$1);var $547$1=tempRet0;
     var $548$0=_i64Add($543$0,$543$1,$547$0,$547$1);var $548$1=tempRet0;
     var $549=(($residual+($i_6584<<2))|0);
     var $550=HEAP32[(($549)>>2)];
     var $551$0=_bitshift64Ashr($548$0,$548$1,$512$0);var $551$1=tempRet0;
     var $552$0=$551$0;
     var $552=$552$0;
     var $553=((($552)+($550))|0);
     var $554=(($data+($i_6584<<2))|0);
     HEAP32[(($554)>>2)]=$553;
     var $555=((($i_6584)+(1))|0);
     var $556=($555|0)<($data_len|0);
     if ($556) {
      var $i_6584=$555;var $519=$518;var $518=$517;var $517=$516;var $516=$515;var $515=$514;var $514=$553;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($501)) {
     return;
    }
    var $502=(($qlp_coeff+16)|0);
    var $503=(($qlp_coeff+12)|0);
    var $504=(($qlp_coeff+8)|0);
    var $505=(($qlp_coeff+4)|0);
    var $506$0=$lp_quantization;
    var $506$1=0;
    var $_phi_trans_insert753=((($data)-(20))|0);
    var $_pre754=HEAP32[(($_phi_trans_insert753)>>2)];
    var $_phi_trans_insert755=((($data)-(16))|0);
    var $_pre756=HEAP32[(($_phi_trans_insert755)>>2)];
    var $_phi_trans_insert757=((($data)-(12))|0);
    var $_pre758=HEAP32[(($_phi_trans_insert757)>>2)];
    var $_phi_trans_insert759=((($data)-(8))|0);
    var $_pre760=HEAP32[(($_phi_trans_insert759)>>2)];
    var $_phi_trans_insert761=((($data)-(4))|0);
    var $_pre762=HEAP32[(($_phi_trans_insert761)>>2)];
    var $i_7588=0;var $562=$_pre754;var $561=$_pre756;var $560=$_pre758;var $559=$_pre760;var $558=$_pre762;
    while(1) {
     var $558;
     var $559;
     var $560;
     var $561;
     var $562;
     var $i_7588;
     var $563=HEAP32[(($502)>>2)];
     var $564$0=$563;
     var $564$1=(((($563|0)<0))|0)?-1:0;
     var $565$0=$562;
     var $565$1=(((($562|0)<0))|0)?-1:0;
     var $566$0=___muldi3($565$0,$565$1,$564$0,$564$1);var $566$1=tempRet0;
     var $567=HEAP32[(($503)>>2)];
     var $568$0=$567;
     var $568$1=(((($567|0)<0))|0)?-1:0;
     var $569$0=$561;
     var $569$1=(((($561|0)<0))|0)?-1:0;
     var $570$0=___muldi3($569$0,$569$1,$568$0,$568$1);var $570$1=tempRet0;
     var $571$0=_i64Add($570$0,$570$1,$566$0,$566$1);var $571$1=tempRet0;
     var $572=HEAP32[(($504)>>2)];
     var $573$0=$572;
     var $573$1=(((($572|0)<0))|0)?-1:0;
     var $574$0=$560;
     var $574$1=(((($560|0)<0))|0)?-1:0;
     var $575$0=___muldi3($574$0,$574$1,$573$0,$573$1);var $575$1=tempRet0;
     var $576$0=_i64Add($571$0,$571$1,$575$0,$575$1);var $576$1=tempRet0;
     var $577=HEAP32[(($505)>>2)];
     var $578$0=$577;
     var $578$1=(((($577|0)<0))|0)?-1:0;
     var $579$0=$559;
     var $579$1=(((($559|0)<0))|0)?-1:0;
     var $580$0=___muldi3($579$0,$579$1,$578$0,$578$1);var $580$1=tempRet0;
     var $581$0=_i64Add($576$0,$576$1,$580$0,$580$1);var $581$1=tempRet0;
     var $582=HEAP32[(($qlp_coeff)>>2)];
     var $583$0=$582;
     var $583$1=(((($582|0)<0))|0)?-1:0;
     var $584$0=$558;
     var $584$1=(((($558|0)<0))|0)?-1:0;
     var $585$0=___muldi3($584$0,$584$1,$583$0,$583$1);var $585$1=tempRet0;
     var $586$0=_i64Add($581$0,$581$1,$585$0,$585$1);var $586$1=tempRet0;
     var $587=(($residual+($i_7588<<2))|0);
     var $588=HEAP32[(($587)>>2)];
     var $589$0=_bitshift64Ashr($586$0,$586$1,$506$0);var $589$1=tempRet0;
     var $590$0=$589$0;
     var $590=$590$0;
     var $591=((($590)+($588))|0);
     var $592=(($data+($i_7588<<2))|0);
     HEAP32[(($592)>>2)]=$591;
     var $593=((($i_7588)+(1))|0);
     var $594=($593|0)<($data_len|0);
     if ($594) {
      var $i_7588=$593;var $562=$561;var $561=$560;var $560=$559;var $559=$558;var $558=$591;
     } else {
      break;
     }
    }
    return;
   }
  }
 } else {
  var $596=($order>>>0)>2;
  if ($596) {
   var $598=($order|0)==4;
   var $599=($data_len|0)>0;
   if ($598) {
    if (!($599)) {
     return;
    }
    var $603=(($qlp_coeff+12)|0);
    var $604=(($qlp_coeff+8)|0);
    var $605=(($qlp_coeff+4)|0);
    var $606$0=$lp_quantization;
    var $606$1=0;
    var $_phi_trans_insert763=((($data)-(16))|0);
    var $_pre764=HEAP32[(($_phi_trans_insert763)>>2)];
    var $_phi_trans_insert765=((($data)-(12))|0);
    var $_pre766=HEAP32[(($_phi_trans_insert765)>>2)];
    var $_phi_trans_insert767=((($data)-(8))|0);
    var $_pre768=HEAP32[(($_phi_trans_insert767)>>2)];
    var $_phi_trans_insert769=((($data)-(4))|0);
    var $_pre770=HEAP32[(($_phi_trans_insert769)>>2)];
    var $i_8592=0;var $611=$_pre764;var $610=$_pre766;var $609=$_pre768;var $608=$_pre770;
    while(1) {
     var $608;
     var $609;
     var $610;
     var $611;
     var $i_8592;
     var $612=HEAP32[(($603)>>2)];
     var $613$0=$612;
     var $613$1=(((($612|0)<0))|0)?-1:0;
     var $614$0=$611;
     var $614$1=(((($611|0)<0))|0)?-1:0;
     var $615$0=___muldi3($614$0,$614$1,$613$0,$613$1);var $615$1=tempRet0;
     var $616=HEAP32[(($604)>>2)];
     var $617$0=$616;
     var $617$1=(((($616|0)<0))|0)?-1:0;
     var $618$0=$610;
     var $618$1=(((($610|0)<0))|0)?-1:0;
     var $619$0=___muldi3($618$0,$618$1,$617$0,$617$1);var $619$1=tempRet0;
     var $620$0=_i64Add($619$0,$619$1,$615$0,$615$1);var $620$1=tempRet0;
     var $621=HEAP32[(($605)>>2)];
     var $622$0=$621;
     var $622$1=(((($621|0)<0))|0)?-1:0;
     var $623$0=$609;
     var $623$1=(((($609|0)<0))|0)?-1:0;
     var $624$0=___muldi3($623$0,$623$1,$622$0,$622$1);var $624$1=tempRet0;
     var $625$0=_i64Add($620$0,$620$1,$624$0,$624$1);var $625$1=tempRet0;
     var $626=HEAP32[(($qlp_coeff)>>2)];
     var $627$0=$626;
     var $627$1=(((($626|0)<0))|0)?-1:0;
     var $628$0=$608;
     var $628$1=(((($608|0)<0))|0)?-1:0;
     var $629$0=___muldi3($628$0,$628$1,$627$0,$627$1);var $629$1=tempRet0;
     var $630$0=_i64Add($625$0,$625$1,$629$0,$629$1);var $630$1=tempRet0;
     var $631=(($residual+($i_8592<<2))|0);
     var $632=HEAP32[(($631)>>2)];
     var $633$0=_bitshift64Ashr($630$0,$630$1,$606$0);var $633$1=tempRet0;
     var $634$0=$633$0;
     var $634=$634$0;
     var $635=((($634)+($632))|0);
     var $636=(($data+($i_8592<<2))|0);
     HEAP32[(($636)>>2)]=$635;
     var $637=((($i_8592)+(1))|0);
     var $638=($637|0)<($data_len|0);
     if ($638) {
      var $i_8592=$637;var $611=$610;var $610=$609;var $609=$608;var $608=$635;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($599)) {
     return;
    }
    var $600=(($qlp_coeff+8)|0);
    var $601=(($qlp_coeff+4)|0);
    var $602$0=$lp_quantization;
    var $602$1=0;
    var $_phi_trans_insert771=((($data)-(12))|0);
    var $_pre772=HEAP32[(($_phi_trans_insert771)>>2)];
    var $_phi_trans_insert773=((($data)-(8))|0);
    var $_pre774=HEAP32[(($_phi_trans_insert773)>>2)];
    var $_phi_trans_insert775=((($data)-(4))|0);
    var $_pre776=HEAP32[(($_phi_trans_insert775)>>2)];
    var $i_9596=0;var $642=$_pre772;var $641=$_pre774;var $640=$_pre776;
    while(1) {
     var $640;
     var $641;
     var $642;
     var $i_9596;
     var $643=HEAP32[(($600)>>2)];
     var $644$0=$643;
     var $644$1=(((($643|0)<0))|0)?-1:0;
     var $645$0=$642;
     var $645$1=(((($642|0)<0))|0)?-1:0;
     var $646$0=___muldi3($645$0,$645$1,$644$0,$644$1);var $646$1=tempRet0;
     var $647=HEAP32[(($601)>>2)];
     var $648$0=$647;
     var $648$1=(((($647|0)<0))|0)?-1:0;
     var $649$0=$641;
     var $649$1=(((($641|0)<0))|0)?-1:0;
     var $650$0=___muldi3($649$0,$649$1,$648$0,$648$1);var $650$1=tempRet0;
     var $651$0=_i64Add($650$0,$650$1,$646$0,$646$1);var $651$1=tempRet0;
     var $652=HEAP32[(($qlp_coeff)>>2)];
     var $653$0=$652;
     var $653$1=(((($652|0)<0))|0)?-1:0;
     var $654$0=$640;
     var $654$1=(((($640|0)<0))|0)?-1:0;
     var $655$0=___muldi3($654$0,$654$1,$653$0,$653$1);var $655$1=tempRet0;
     var $656$0=_i64Add($651$0,$651$1,$655$0,$655$1);var $656$1=tempRet0;
     var $657=(($residual+($i_9596<<2))|0);
     var $658=HEAP32[(($657)>>2)];
     var $659$0=_bitshift64Ashr($656$0,$656$1,$602$0);var $659$1=tempRet0;
     var $660$0=$659$0;
     var $660=$660$0;
     var $661=((($660)+($658))|0);
     var $662=(($data+($i_9596<<2))|0);
     HEAP32[(($662)>>2)]=$661;
     var $663=((($i_9596)+(1))|0);
     var $664=($663|0)<($data_len|0);
     if ($664) {
      var $i_9596=$663;var $642=$641;var $641=$640;var $640=$661;
     } else {
      break;
     }
    }
    return;
   }
  } else {
   var $666=($order|0)==2;
   var $667=($data_len|0)>0;
   if ($666) {
    if (!($667)) {
     return;
    }
    var $669=(($qlp_coeff+4)|0);
    var $670$0=$lp_quantization;
    var $670$1=0;
    var $_phi_trans_insert777=((($data)-(8))|0);
    var $_pre778=HEAP32[(($_phi_trans_insert777)>>2)];
    var $_phi_trans_insert779=((($data)-(4))|0);
    var $_pre780=HEAP32[(($_phi_trans_insert779)>>2)];
    var $i_10600=0;var $673=$_pre778;var $672=$_pre780;
    while(1) {
     var $672;
     var $673;
     var $i_10600;
     var $674=HEAP32[(($669)>>2)];
     var $675$0=$674;
     var $675$1=(((($674|0)<0))|0)?-1:0;
     var $676$0=$673;
     var $676$1=(((($673|0)<0))|0)?-1:0;
     var $677$0=___muldi3($676$0,$676$1,$675$0,$675$1);var $677$1=tempRet0;
     var $678=HEAP32[(($qlp_coeff)>>2)];
     var $679$0=$678;
     var $679$1=(((($678|0)<0))|0)?-1:0;
     var $680$0=$672;
     var $680$1=(((($672|0)<0))|0)?-1:0;
     var $681$0=___muldi3($680$0,$680$1,$679$0,$679$1);var $681$1=tempRet0;
     var $682$0=_i64Add($681$0,$681$1,$677$0,$677$1);var $682$1=tempRet0;
     var $683=(($residual+($i_10600<<2))|0);
     var $684=HEAP32[(($683)>>2)];
     var $685$0=_bitshift64Ashr($682$0,$682$1,$670$0);var $685$1=tempRet0;
     var $686$0=$685$0;
     var $686=$686$0;
     var $687=((($686)+($684))|0);
     var $688=(($data+($i_10600<<2))|0);
     HEAP32[(($688)>>2)]=$687;
     var $689=((($i_10600)+(1))|0);
     var $690=($689|0)<($data_len|0);
     if ($690) {
      var $i_10600=$689;var $673=$672;var $672=$687;
     } else {
      break;
     }
    }
    return;
   } else {
    if (!($667)) {
     return;
    }
    var $668$0=$lp_quantization;
    var $668$1=0;
    var $_phi_trans_insert781=((($data)-(4))|0);
    var $_pre782=HEAP32[(($_phi_trans_insert781)>>2)];
    var $i_11604=0;var $692=$_pre782;
    while(1) {
     var $692;
     var $i_11604;
     var $693=(($residual+($i_11604<<2))|0);
     var $694=HEAP32[(($693)>>2)];
     var $695=HEAP32[(($qlp_coeff)>>2)];
     var $696$0=$695;
     var $696$1=(((($695|0)<0))|0)?-1:0;
     var $697$0=$692;
     var $697$1=(((($692|0)<0))|0)?-1:0;
     var $698$0=___muldi3($697$0,$697$1,$696$0,$696$1);var $698$1=tempRet0;
     var $699$0=_bitshift64Ashr($698$0,$698$1,$668$0);var $699$1=tempRet0;
     var $700$0=$699$0;
     var $700=$700$0;
     var $701=((($700)+($694))|0);
     var $702=(($data+($i_11604<<2))|0);
     HEAP32[(($702)>>2)]=$701;
     var $703=((($i_11604)+(1))|0);
     var $704=($703|0)<($data_len|0);
     if ($704) {
      var $i_11604=$703;var $692=$701;
     } else {
      break;
     }
    }
    return;
   }
  }
 }
}
function _FLAC__lpc_compute_expected_bits_per_residual_sample($lpc_error,$total_samples){
 var label=0;
 var $1=$lpc_error>0;
 if ($1) {
  var $3=($total_samples>>>0);
  var $4=((0.2402265069591007))/($3);
  var $5=($4)*($lpc_error);
  var $6=Math_log($5);
  var $7=($6)*((0.5));
  var $8=($7)/((0.6931471805599453));
  var $9=$8<0;
  var $__i=$9?0:$8;
  var $_0_i=$__i;
  var $_0_i;
  return $_0_i;
 } else {
  var $11=$lpc_error<0;
  var $_6_i=$11?(1e+32):0;
  var $_0_i=$_6_i;
  var $_0_i;
  return $_0_i;
 }
}
function _FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($lpc_error,$error_scale){
 var label=0;
 var $1=$lpc_error>0;
 if ($1) {
  var $3=($lpc_error)*($error_scale);
  var $4=Math_log($3);
  var $5=($4)*((0.5));
  var $6=($5)/((0.6931471805599453));
  var $7=$6<0;
  var $_=$7?0:$6;
  var $_0=$_;
  var $_0;
  return $_0;
 } else {
  var $9=$lpc_error<0;
  var $_6=$9?(1e+32):0;
  var $_0=$_6;
  var $_0;
  return $_0;
 }
}
function _FLAC__lpc_compute_best_order($lpc_error,$max_order,$total_samples,$overhead_bits_per_order){
 var label=0;
 var $1=($total_samples>>>0);
 var $2=((0.2402265069591007))/($1);
 var $3=($max_order|0)==0;
 if ($3) {
  var $best_index_0_lcssa=1;
  var $best_index_0_lcssa;
  return $best_index_0_lcssa;
 } else {
  var $best_index_011=0;var $indx_012=0;var $best_bits_013=4294967295;var $order_014=1;
 }
 while(1) {
  var $order_014;
  var $best_bits_013;
  var $indx_012;
  var $best_index_011;
  var $4=(($lpc_error+($indx_012<<3))|0);
  var $5=HEAPF64[(($4)>>3)];
  var $6=$5>0;
  if ($6) {
   var $8=($2)*($5);
   var $9=Math_log($8);
   var $10=($9)*((0.5));
   var $11=($10)/((0.6931471805599453));
   var $12=$11<0;
   var $__i=$12?0:$11;
   var $_0_i=$__i;
  } else {
   var $14=$5<0;
   var $_6_i=$14?(1e+32):0;
   var $_0_i=$_6_i;
  }
  var $_0_i;
  var $15=((($total_samples)-($order_014))|0);
  var $16=($15>>>0);
  var $17=($16)*($_0_i);
  var $18=(Math_imul($order_014,$overhead_bits_per_order)|0);
  var $19=($18>>>0);
  var $20=($19)+($17);
  var $21=$20<$best_bits_013;
  var $best_index_1=$21?$indx_012:$best_index_011;
  var $best_bits_1=$21?$20:$best_bits_013;
  var $22=((($indx_012)+(1))|0);
  var $23=((($order_014)+(1))|0);
  var $24=($22>>>0)<($max_order>>>0);
  if ($24) {
   var $best_index_011=$best_index_1;var $indx_012=$22;var $best_bits_013=$best_bits_1;var $order_014=$23;
  } else {
   break;
  }
 }
 var $phitmp=((($best_index_1)+(1))|0);
 var $best_index_0_lcssa=$phitmp;
 var $best_index_0_lcssa;
 return $best_index_0_lcssa;
}
function _FLAC__MD5Init($ctx){
 var label=0;
 var $1=(($ctx+64)|0);
 HEAP32[(($1)>>2)]=1732584193;
 var $2=(($ctx+68)|0);
 HEAP32[(($2)>>2)]=-271733879;
 var $3=(($ctx+72)|0);
 HEAP32[(($3)>>2)]=-1732584194;
 var $4=(($ctx+76)|0);
 HEAP32[(($4)>>2)]=271733878;
 var $5=(($ctx+80)|0);
 var $6=$5;
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0; HEAP32[((($6)+(12))>>2)]=0;
 return;
}
function _FLAC__MD5Final($digest,$ctx){
 var label=0;
 var $1=(($ctx+80)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&63;
 var $4=(($ctx)|0);
 var $5=$ctx;
 var $6=(($5+$3)|0);
 var $_sum=((($3)+(1))|0);
 var $7=(($5+$_sum)|0);
 HEAP8[($6)]=-128;
 var $8=(((55)-($3))|0);
 var $9=($8|0)<0;
 if ($9) {
  var $11=((($8)+(8))|0);
  _memset($7, 0, $11);
  var $12=(($ctx+64)|0);
  _FLAC__MD5Transform($12,$4);
  var $p_0=$5;var $count_0=56;
 } else {
  var $p_0=$7;var $count_0=$8;
 }
 var $count_0;
 var $p_0;
 _memset($p_0, 0, $count_0);
 var $14=HEAP32[(($1)>>2)];
 var $15=$14<<3;
 var $16=(($ctx+56)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($ctx+84)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18<<3;
 var $20=$14>>>29;
 var $21=$20|$19;
 var $22=(($ctx+60)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($ctx+64)|0);
 var $24=(($23)|0);
 _FLAC__MD5Transform($24,$4);
 var $25=$23;
 (_memcpy($digest, $25, 16)|0);
 var $26=(($ctx+88)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if ($28) {
  _memset($5, 0, 96);
  return;
 }
 _free($27);
 HEAP32[(($26)>>2)]=0;
 var $30=(($ctx+92)|0);
 HEAP32[(($30)>>2)]=0;
 _memset($5, 0, 96);
 return;
}
function _FLAC__MD5Transform($buf,$in){
 var label=0;
 var $1=HEAP32[(($buf)>>2)];
 var $2=(($buf+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($buf+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($buf+12)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7^$5;
 var $9=$8&$3;
 var $10=$9^$7;
 var $11=HEAP32[(($in)>>2)];
 var $12=((($1)-(680876936))|0);
 var $13=((($12)+($11))|0);
 var $14=((($13)+($10))|0);
 var $15=$14<<7;
 var $16=$14>>>25;
 var $17=$15|$16;
 var $18=((($17)+($3))|0);
 var $19=$5^$3;
 var $20=$18&$19;
 var $21=$20^$5;
 var $22=(($in+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($7)-(389564586))|0);
 var $25=((($24)+($23))|0);
 var $26=((($25)+($21))|0);
 var $27=$26<<12;
 var $28=$26>>>20;
 var $29=$27|$28;
 var $30=((($29)+($18))|0);
 var $31=$18^$3;
 var $32=$30&$31;
 var $33=$32^$3;
 var $34=(($in+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($5)+(606105819))|0);
 var $37=((($36)+($35))|0);
 var $38=((($37)+($33))|0);
 var $39=$38<<17;
 var $40=$38>>>15;
 var $41=$39|$40;
 var $42=((($41)+($30))|0);
 var $43=$30^$18;
 var $44=$42&$43;
 var $45=$44^$18;
 var $46=(($in+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=((($3)-(1044525330))|0);
 var $49=((($48)+($47))|0);
 var $50=((($49)+($45))|0);
 var $51=$50<<22;
 var $52=$50>>>10;
 var $53=$51|$52;
 var $54=((($53)+($42))|0);
 var $55=$42^$30;
 var $56=$54&$55;
 var $57=$56^$30;
 var $58=(($in+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=((($59)-(176418897))|0);
 var $61=((($60)+($18))|0);
 var $62=((($61)+($57))|0);
 var $63=$62<<7;
 var $64=$62>>>25;
 var $65=$63|$64;
 var $66=((($65)+($54))|0);
 var $67=$54^$42;
 var $68=$66&$67;
 var $69=$68^$42;
 var $70=(($in+20)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=((($71)+(1200080426))|0);
 var $73=((($72)+($30))|0);
 var $74=((($73)+($69))|0);
 var $75=$74<<12;
 var $76=$74>>>20;
 var $77=$75|$76;
 var $78=((($77)+($66))|0);
 var $79=$66^$54;
 var $80=$78&$79;
 var $81=$80^$54;
 var $82=(($in+24)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=((($83)-(1473231341))|0);
 var $85=((($84)+($42))|0);
 var $86=((($85)+($81))|0);
 var $87=$86<<17;
 var $88=$86>>>15;
 var $89=$87|$88;
 var $90=((($89)+($78))|0);
 var $91=$78^$66;
 var $92=$90&$91;
 var $93=$92^$66;
 var $94=(($in+28)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=((($95)-(45705983))|0);
 var $97=((($96)+($54))|0);
 var $98=((($97)+($93))|0);
 var $99=$98<<22;
 var $100=$98>>>10;
 var $101=$99|$100;
 var $102=((($101)+($90))|0);
 var $103=$90^$78;
 var $104=$102&$103;
 var $105=$104^$78;
 var $106=(($in+32)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=((($107)+(1770035416))|0);
 var $109=((($108)+($66))|0);
 var $110=((($109)+($105))|0);
 var $111=$110<<7;
 var $112=$110>>>25;
 var $113=$111|$112;
 var $114=((($113)+($102))|0);
 var $115=$102^$90;
 var $116=$114&$115;
 var $117=$116^$90;
 var $118=(($in+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=((($119)-(1958414417))|0);
 var $121=((($120)+($78))|0);
 var $122=((($121)+($117))|0);
 var $123=$122<<12;
 var $124=$122>>>20;
 var $125=$123|$124;
 var $126=((($125)+($114))|0);
 var $127=$114^$102;
 var $128=$126&$127;
 var $129=$128^$102;
 var $130=(($in+40)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=((($131)-(42063))|0);
 var $133=((($132)+($90))|0);
 var $134=((($133)+($129))|0);
 var $135=$134<<17;
 var $136=$134>>>15;
 var $137=$135|$136;
 var $138=((($137)+($126))|0);
 var $139=$126^$114;
 var $140=$138&$139;
 var $141=$140^$114;
 var $142=(($in+44)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=((($143)-(1990404162))|0);
 var $145=((($144)+($102))|0);
 var $146=((($145)+($141))|0);
 var $147=$146<<22;
 var $148=$146>>>10;
 var $149=$147|$148;
 var $150=((($149)+($138))|0);
 var $151=$138^$126;
 var $152=$150&$151;
 var $153=$152^$126;
 var $154=(($in+48)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=((($155)+(1804603682))|0);
 var $157=((($156)+($114))|0);
 var $158=((($157)+($153))|0);
 var $159=$158<<7;
 var $160=$158>>>25;
 var $161=$159|$160;
 var $162=((($161)+($150))|0);
 var $163=$150^$138;
 var $164=$162&$163;
 var $165=$164^$138;
 var $166=(($in+52)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=((($167)-(40341101))|0);
 var $169=((($168)+($126))|0);
 var $170=((($169)+($165))|0);
 var $171=$170<<12;
 var $172=$170>>>20;
 var $173=$171|$172;
 var $174=((($173)+($162))|0);
 var $175=$162^$150;
 var $176=$174&$175;
 var $177=$176^$150;
 var $178=(($in+56)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=((($179)-(1502002290))|0);
 var $181=((($180)+($138))|0);
 var $182=((($181)+($177))|0);
 var $183=$182<<17;
 var $184=$182>>>15;
 var $185=$183|$184;
 var $186=((($185)+($174))|0);
 var $187=$174^$162;
 var $188=$186&$187;
 var $189=$188^$162;
 var $190=(($in+60)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=((($191)+(1236535329))|0);
 var $193=((($192)+($150))|0);
 var $194=((($193)+($189))|0);
 var $195=$194<<22;
 var $196=$194>>>10;
 var $197=$195|$196;
 var $198=((($197)+($186))|0);
 var $199=$198^$186;
 var $200=$199&$174;
 var $201=$200^$186;
 var $202=((($23)-(165796510))|0);
 var $203=((($202)+($162))|0);
 var $204=((($203)+($201))|0);
 var $205=$204<<5;
 var $206=$204>>>27;
 var $207=$205|$206;
 var $208=((($207)+($198))|0);
 var $209=$208^$198;
 var $210=$209&$186;
 var $211=$210^$198;
 var $212=((($83)-(1069501632))|0);
 var $213=((($212)+($174))|0);
 var $214=((($213)+($211))|0);
 var $215=$214<<9;
 var $216=$214>>>23;
 var $217=$215|$216;
 var $218=((($217)+($208))|0);
 var $219=$218^$208;
 var $220=$219&$198;
 var $221=$220^$208;
 var $222=((($143)+(643717713))|0);
 var $223=((($222)+($186))|0);
 var $224=((($223)+($221))|0);
 var $225=$224<<14;
 var $226=$224>>>18;
 var $227=$225|$226;
 var $228=((($227)+($218))|0);
 var $229=$228^$218;
 var $230=$229&$208;
 var $231=$230^$218;
 var $232=((($11)-(373897302))|0);
 var $233=((($232)+($198))|0);
 var $234=((($233)+($231))|0);
 var $235=$234<<20;
 var $236=$234>>>12;
 var $237=$235|$236;
 var $238=((($237)+($228))|0);
 var $239=$238^$228;
 var $240=$239&$218;
 var $241=$240^$228;
 var $242=((($71)-(701558691))|0);
 var $243=((($242)+($208))|0);
 var $244=((($243)+($241))|0);
 var $245=$244<<5;
 var $246=$244>>>27;
 var $247=$245|$246;
 var $248=((($247)+($238))|0);
 var $249=$248^$238;
 var $250=$249&$228;
 var $251=$250^$238;
 var $252=((($131)+(38016083))|0);
 var $253=((($252)+($218))|0);
 var $254=((($253)+($251))|0);
 var $255=$254<<9;
 var $256=$254>>>23;
 var $257=$255|$256;
 var $258=((($257)+($248))|0);
 var $259=$258^$248;
 var $260=$259&$238;
 var $261=$260^$248;
 var $262=((($191)-(660478335))|0);
 var $263=((($262)+($228))|0);
 var $264=((($263)+($261))|0);
 var $265=$264<<14;
 var $266=$264>>>18;
 var $267=$265|$266;
 var $268=((($267)+($258))|0);
 var $269=$268^$258;
 var $270=$269&$248;
 var $271=$270^$258;
 var $272=((($59)-(405537848))|0);
 var $273=((($272)+($238))|0);
 var $274=((($273)+($271))|0);
 var $275=$274<<20;
 var $276=$274>>>12;
 var $277=$275|$276;
 var $278=((($277)+($268))|0);
 var $279=$278^$268;
 var $280=$279&$258;
 var $281=$280^$268;
 var $282=((($119)+(568446438))|0);
 var $283=((($282)+($248))|0);
 var $284=((($283)+($281))|0);
 var $285=$284<<5;
 var $286=$284>>>27;
 var $287=$285|$286;
 var $288=((($287)+($278))|0);
 var $289=$288^$278;
 var $290=$289&$268;
 var $291=$290^$278;
 var $292=((($179)-(1019803690))|0);
 var $293=((($292)+($258))|0);
 var $294=((($293)+($291))|0);
 var $295=$294<<9;
 var $296=$294>>>23;
 var $297=$295|$296;
 var $298=((($297)+($288))|0);
 var $299=$298^$288;
 var $300=$299&$278;
 var $301=$300^$288;
 var $302=((($47)-(187363961))|0);
 var $303=((($302)+($268))|0);
 var $304=((($303)+($301))|0);
 var $305=$304<<14;
 var $306=$304>>>18;
 var $307=$305|$306;
 var $308=((($307)+($298))|0);
 var $309=$308^$298;
 var $310=$309&$288;
 var $311=$310^$298;
 var $312=((($107)+(1163531501))|0);
 var $313=((($312)+($278))|0);
 var $314=((($313)+($311))|0);
 var $315=$314<<20;
 var $316=$314>>>12;
 var $317=$315|$316;
 var $318=((($317)+($308))|0);
 var $319=$318^$308;
 var $320=$319&$298;
 var $321=$320^$308;
 var $322=((($167)-(1444681467))|0);
 var $323=((($322)+($288))|0);
 var $324=((($323)+($321))|0);
 var $325=$324<<5;
 var $326=$324>>>27;
 var $327=$325|$326;
 var $328=((($327)+($318))|0);
 var $329=$328^$318;
 var $330=$329&$308;
 var $331=$330^$318;
 var $332=((($35)-(51403784))|0);
 var $333=((($332)+($298))|0);
 var $334=((($333)+($331))|0);
 var $335=$334<<9;
 var $336=$334>>>23;
 var $337=$335|$336;
 var $338=((($337)+($328))|0);
 var $339=$338^$328;
 var $340=$339&$318;
 var $341=$340^$328;
 var $342=((($95)+(1735328473))|0);
 var $343=((($342)+($308))|0);
 var $344=((($343)+($341))|0);
 var $345=$344<<14;
 var $346=$344>>>18;
 var $347=$345|$346;
 var $348=((($347)+($338))|0);
 var $349=$348^$338;
 var $350=$349&$328;
 var $351=$350^$338;
 var $352=((($155)-(1926607734))|0);
 var $353=((($352)+($318))|0);
 var $354=((($353)+($351))|0);
 var $355=$354<<20;
 var $356=$354>>>12;
 var $357=$355|$356;
 var $358=((($357)+($348))|0);
 var $359=$349^$358;
 var $360=((($71)-(378558))|0);
 var $361=((($360)+($328))|0);
 var $362=((($361)+($359))|0);
 var $363=$362<<4;
 var $364=$362>>>28;
 var $365=$363|$364;
 var $366=((($365)+($358))|0);
 var $367=$358^$348;
 var $368=$367^$366;
 var $369=((($107)-(2022574463))|0);
 var $370=((($369)+($338))|0);
 var $371=((($370)+($368))|0);
 var $372=$371<<11;
 var $373=$371>>>21;
 var $374=$372|$373;
 var $375=((($374)+($366))|0);
 var $376=$366^$358;
 var $377=$376^$375;
 var $378=((($143)+(1839030562))|0);
 var $379=((($378)+($348))|0);
 var $380=((($379)+($377))|0);
 var $381=$380<<16;
 var $382=$380>>>16;
 var $383=$381|$382;
 var $384=((($383)+($375))|0);
 var $385=$375^$366;
 var $386=$385^$384;
 var $387=((($179)-(35309556))|0);
 var $388=((($387)+($358))|0);
 var $389=((($388)+($386))|0);
 var $390=$389<<23;
 var $391=$389>>>9;
 var $392=$390|$391;
 var $393=((($392)+($384))|0);
 var $394=$384^$375;
 var $395=$394^$393;
 var $396=((($23)-(1530992060))|0);
 var $397=((($396)+($366))|0);
 var $398=((($397)+($395))|0);
 var $399=$398<<4;
 var $400=$398>>>28;
 var $401=$399|$400;
 var $402=((($401)+($393))|0);
 var $403=$393^$384;
 var $404=$403^$402;
 var $405=((($59)+(1272893353))|0);
 var $406=((($405)+($375))|0);
 var $407=((($406)+($404))|0);
 var $408=$407<<11;
 var $409=$407>>>21;
 var $410=$408|$409;
 var $411=((($410)+($402))|0);
 var $412=$402^$393;
 var $413=$412^$411;
 var $414=((($95)-(155497632))|0);
 var $415=((($414)+($384))|0);
 var $416=((($415)+($413))|0);
 var $417=$416<<16;
 var $418=$416>>>16;
 var $419=$417|$418;
 var $420=((($419)+($411))|0);
 var $421=$411^$402;
 var $422=$421^$420;
 var $423=((($131)-(1094730640))|0);
 var $424=((($423)+($393))|0);
 var $425=((($424)+($422))|0);
 var $426=$425<<23;
 var $427=$425>>>9;
 var $428=$426|$427;
 var $429=((($428)+($420))|0);
 var $430=$420^$411;
 var $431=$430^$429;
 var $432=((($167)+(681279174))|0);
 var $433=((($432)+($402))|0);
 var $434=((($433)+($431))|0);
 var $435=$434<<4;
 var $436=$434>>>28;
 var $437=$435|$436;
 var $438=((($437)+($429))|0);
 var $439=$429^$420;
 var $440=$439^$438;
 var $441=((($11)-(358537222))|0);
 var $442=((($441)+($411))|0);
 var $443=((($442)+($440))|0);
 var $444=$443<<11;
 var $445=$443>>>21;
 var $446=$444|$445;
 var $447=((($446)+($438))|0);
 var $448=$438^$429;
 var $449=$448^$447;
 var $450=((($47)-(722521979))|0);
 var $451=((($450)+($420))|0);
 var $452=((($451)+($449))|0);
 var $453=$452<<16;
 var $454=$452>>>16;
 var $455=$453|$454;
 var $456=((($455)+($447))|0);
 var $457=$447^$438;
 var $458=$457^$456;
 var $459=((($83)+(76029189))|0);
 var $460=((($459)+($429))|0);
 var $461=((($460)+($458))|0);
 var $462=$461<<23;
 var $463=$461>>>9;
 var $464=$462|$463;
 var $465=((($464)+($456))|0);
 var $466=$456^$447;
 var $467=$466^$465;
 var $468=((($119)-(640364487))|0);
 var $469=((($468)+($438))|0);
 var $470=((($469)+($467))|0);
 var $471=$470<<4;
 var $472=$470>>>28;
 var $473=$471|$472;
 var $474=((($473)+($465))|0);
 var $475=$465^$456;
 var $476=$475^$474;
 var $477=((($155)-(421815835))|0);
 var $478=((($477)+($447))|0);
 var $479=((($478)+($476))|0);
 var $480=$479<<11;
 var $481=$479>>>21;
 var $482=$480|$481;
 var $483=((($482)+($474))|0);
 var $484=$474^$465;
 var $485=$484^$483;
 var $486=((($191)+(530742520))|0);
 var $487=((($486)+($456))|0);
 var $488=((($487)+($485))|0);
 var $489=$488<<16;
 var $490=$488>>>16;
 var $491=$489|$490;
 var $492=((($491)+($483))|0);
 var $493=$483^$474;
 var $494=$493^$492;
 var $495=((($35)-(995338651))|0);
 var $496=((($495)+($465))|0);
 var $497=((($496)+($494))|0);
 var $498=$497<<23;
 var $499=$497>>>9;
 var $500=$498|$499;
 var $501=((($500)+($492))|0);
 var $502=$483^-1;
 var $503=$501|$502;
 var $504=$503^$492;
 var $505=((($11)-(198630844))|0);
 var $506=((($505)+($474))|0);
 var $507=((($506)+($504))|0);
 var $508=$507<<6;
 var $509=$507>>>26;
 var $510=$508|$509;
 var $511=((($510)+($501))|0);
 var $512=$492^-1;
 var $513=$511|$512;
 var $514=$513^$501;
 var $515=((($95)+(1126891415))|0);
 var $516=((($515)+($483))|0);
 var $517=((($516)+($514))|0);
 var $518=$517<<10;
 var $519=$517>>>22;
 var $520=$518|$519;
 var $521=((($520)+($511))|0);
 var $522=$501^-1;
 var $523=$521|$522;
 var $524=$523^$511;
 var $525=((($179)-(1416354905))|0);
 var $526=((($525)+($492))|0);
 var $527=((($526)+($524))|0);
 var $528=$527<<15;
 var $529=$527>>>17;
 var $530=$528|$529;
 var $531=((($530)+($521))|0);
 var $532=$511^-1;
 var $533=$531|$532;
 var $534=$533^$521;
 var $535=((($71)-(57434055))|0);
 var $536=((($535)+($501))|0);
 var $537=((($536)+($534))|0);
 var $538=$537<<21;
 var $539=$537>>>11;
 var $540=$538|$539;
 var $541=((($540)+($531))|0);
 var $542=$521^-1;
 var $543=$541|$542;
 var $544=$543^$531;
 var $545=((($155)+(1700485571))|0);
 var $546=((($545)+($511))|0);
 var $547=((($546)+($544))|0);
 var $548=$547<<6;
 var $549=$547>>>26;
 var $550=$548|$549;
 var $551=((($550)+($541))|0);
 var $552=$531^-1;
 var $553=$551|$552;
 var $554=$553^$541;
 var $555=((($47)-(1894986606))|0);
 var $556=((($555)+($521))|0);
 var $557=((($556)+($554))|0);
 var $558=$557<<10;
 var $559=$557>>>22;
 var $560=$558|$559;
 var $561=((($560)+($551))|0);
 var $562=$541^-1;
 var $563=$561|$562;
 var $564=$563^$551;
 var $565=((($131)-(1051523))|0);
 var $566=((($565)+($531))|0);
 var $567=((($566)+($564))|0);
 var $568=$567<<15;
 var $569=$567>>>17;
 var $570=$568|$569;
 var $571=((($570)+($561))|0);
 var $572=$551^-1;
 var $573=$571|$572;
 var $574=$573^$561;
 var $575=((($23)-(2054922799))|0);
 var $576=((($575)+($541))|0);
 var $577=((($576)+($574))|0);
 var $578=$577<<21;
 var $579=$577>>>11;
 var $580=$578|$579;
 var $581=((($580)+($571))|0);
 var $582=$561^-1;
 var $583=$581|$582;
 var $584=$583^$571;
 var $585=((($107)+(1873313359))|0);
 var $586=((($585)+($551))|0);
 var $587=((($586)+($584))|0);
 var $588=$587<<6;
 var $589=$587>>>26;
 var $590=$588|$589;
 var $591=((($590)+($581))|0);
 var $592=$571^-1;
 var $593=$591|$592;
 var $594=$593^$581;
 var $595=((($191)-(30611744))|0);
 var $596=((($595)+($561))|0);
 var $597=((($596)+($594))|0);
 var $598=$597<<10;
 var $599=$597>>>22;
 var $600=$598|$599;
 var $601=((($600)+($591))|0);
 var $602=$581^-1;
 var $603=$601|$602;
 var $604=$603^$591;
 var $605=((($83)-(1560198380))|0);
 var $606=((($605)+($571))|0);
 var $607=((($606)+($604))|0);
 var $608=$607<<15;
 var $609=$607>>>17;
 var $610=$608|$609;
 var $611=((($610)+($601))|0);
 var $612=$591^-1;
 var $613=$611|$612;
 var $614=$613^$601;
 var $615=((($167)+(1309151649))|0);
 var $616=((($615)+($581))|0);
 var $617=((($616)+($614))|0);
 var $618=$617<<21;
 var $619=$617>>>11;
 var $620=$618|$619;
 var $621=((($620)+($611))|0);
 var $622=$601^-1;
 var $623=$621|$622;
 var $624=$623^$611;
 var $625=((($59)-(145523070))|0);
 var $626=((($625)+($591))|0);
 var $627=((($626)+($624))|0);
 var $628=$627<<6;
 var $629=$627>>>26;
 var $630=$628|$629;
 var $631=((($630)+($621))|0);
 var $632=$611^-1;
 var $633=$631|$632;
 var $634=$633^$621;
 var $635=((($143)-(1120210379))|0);
 var $636=((($635)+($601))|0);
 var $637=((($636)+($634))|0);
 var $638=$637<<10;
 var $639=$637>>>22;
 var $640=$638|$639;
 var $641=((($640)+($631))|0);
 var $642=$621^-1;
 var $643=$641|$642;
 var $644=$643^$631;
 var $645=((($35)+(718787259))|0);
 var $646=((($645)+($611))|0);
 var $647=((($646)+($644))|0);
 var $648=$647<<15;
 var $649=$647>>>17;
 var $650=$648|$649;
 var $651=((($650)+($641))|0);
 var $652=$631^-1;
 var $653=$651|$652;
 var $654=$653^$641;
 var $655=((($119)-(343485551))|0);
 var $656=((($655)+($621))|0);
 var $657=((($656)+($654))|0);
 var $658=$657<<21;
 var $659=$657>>>11;
 var $660=$658|$659;
 var $661=((($631)+($1))|0);
 HEAP32[(($buf)>>2)]=$661;
 var $662=HEAP32[(($2)>>2)];
 var $663=((($651)+($662))|0);
 var $664=((($663)+($660))|0);
 HEAP32[(($2)>>2)]=$664;
 var $665=HEAP32[(($4)>>2)];
 var $666=((($651)+($665))|0);
 HEAP32[(($4)>>2)]=$666;
 var $667=HEAP32[(($6)>>2)];
 var $668=((($641)+($667))|0);
 HEAP32[(($6)>>2)]=$668;
 return;
}
function _FLAC__MD5Accumulate($ctx,$signal,$channels,$samples,$bytes_per_sample){
 var label=0;
 var $1=(Math_imul($samples,$channels)|0);
 var $2=(Math_imul($1,$bytes_per_sample)|0);
 var $3=(((4294967295)/(($bytes_per_sample>>>0)))&-1);
 var $4=($3>>>0)<($channels>>>0);
 if ($4) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $6=(Math_imul($bytes_per_sample,$channels)|0);
 var $7=(((4294967295)/(($samples>>>0)))&-1);
 var $8=($6>>>0)>($7>>>0);
 if ($8) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $10=(($ctx+92)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11>>>0)<($2>>>0);
 var $13=(($ctx+88)|0);
 var $14=HEAP32[(($13)>>2)];
 if ($12) {
  var $16=_realloc($14,$2);
  var $17=($16|0)==0;
  do {
   if ($17) {
    var $19=HEAP32[(($13)>>2)];
    _free($19);
    var $20=($2|0)==0;
    var $21=($20&1);
    var $_size_i=((($21)+($2))|0);
    var $22=_malloc($_size_i);
    HEAP32[(($13)>>2)]=$22;
    var $23=($22|0)==0;
    if ($23) {
     var $_0=0;
    } else {
     var $26=$22;
     break;
    }
    var $_0;
    return $_0;
   } else {
    HEAP32[(($13)>>2)]=$16;
    var $26=$16;
   }
  } while(0);
  var $26;
  HEAP32[(($10)>>2)]=$2;
  var $27=$26;
 } else {
  var $27=$14;
 }
 var $27;
 var $28=(($ctx+88)|0);
 var $29=($channels|0)==2;
 var $30=($bytes_per_sample|0)==2;
 var $or_cond_i=$29&$30;
 L1974: do {
  if ($or_cond_i) {
   var $32=HEAP32[(($signal)>>2)];
   var $33=$32;
   var $34=$samples<<2;
   (_memcpy($27, $33, $34)|0);
   var $35=($samples|0)==0;
   if ($35) {
    break;
   }
   var $36=(($27+2)|0);
   var $37=$36;
   var $38=(($signal+4)|0);
   var $sample_0166_i=0;var $buf1__0167_i=$37;
   while(1) {
    var $buf1__0167_i;
    var $sample_0166_i;
    var $40=HEAP32[(($38)>>2)];
    var $41=(($40+($sample_0166_i<<2))|0);
    var $42=HEAP32[(($41)>>2)];
    var $43=(($42)&65535);
    HEAP16[(($buf1__0167_i)>>1)]=$43;
    var $44=((($sample_0166_i)+(1))|0);
    var $45=(($buf1__0167_i+4)|0);
    var $46=($44>>>0)<($samples>>>0);
    if ($46) {
     var $sample_0166_i=$44;var $buf1__0167_i=$45;
    } else {
     break;
    }
   }
  } else {
   var $48=($channels|0)==1;
   var $or_cond165_i=$48&$30;
   if ($or_cond165_i) {
    var $50=($samples|0)==0;
    if ($50) {
     break;
    }
    var $51=$27;
    var $sample_1169_i=0;var $buf1_1_0170_i=$51;
    while(1) {
     var $buf1_1_0170_i;
     var $sample_1169_i;
     var $53=HEAP32[(($signal)>>2)];
     var $54=(($53+($sample_1169_i<<2))|0);
     var $55=HEAP32[(($54)>>2)];
     var $56=(($55)&65535);
     var $57=(($buf1_1_0170_i+2)|0);
     HEAP16[(($buf1_1_0170_i)>>1)]=$56;
     var $58=((($sample_1169_i)+(1))|0);
     var $59=($58>>>0)<($samples>>>0);
     if ($59) {
      var $sample_1169_i=$58;var $buf1_1_0170_i=$57;
     } else {
      break L1974;
     }
    }
   }
   if (($bytes_per_sample|0)==2) {
    var $86=($samples|0)==0;
    if ($29) {
     if ($86) {
      break;
     }
     var $87=(($signal+4)|0);
     var $sample_2181_i=0;var $buf__0182_i=$27;
     while(1) {
      var $buf__0182_i;
      var $sample_2181_i;
      var $89=HEAP32[(($signal)>>2)];
      var $90=(($89+($sample_2181_i<<2))|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91)&255);
      var $93=(($buf__0182_i+1)|0);
      HEAP8[($buf__0182_i)]=$92;
      var $94=$91>>>8;
      var $95=(($94)&255);
      var $96=(($buf__0182_i+2)|0);
      HEAP8[($93)]=$95;
      var $97=HEAP32[(($87)>>2)];
      var $98=(($97+($sample_2181_i<<2))|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99)&255);
      var $101=(($buf__0182_i+3)|0);
      HEAP8[($96)]=$100;
      var $102=$99>>>8;
      var $103=(($102)&255);
      var $104=(($buf__0182_i+4)|0);
      HEAP8[($101)]=$103;
      var $105=((($sample_2181_i)+(1))|0);
      var $106=($105>>>0)<($samples>>>0);
      if ($106) {
       var $sample_2181_i=$105;var $buf__0182_i=$104;
      } else {
       break L1974;
      }
     }
    }
    if ($48) {
     if ($86) {
      break;
     } else {
      var $sample_3186_i=0;var $buf__1187_i=$27;
     }
     while(1) {
      var $buf__1187_i;
      var $sample_3186_i;
      var $125=HEAP32[(($signal)>>2)];
      var $126=(($125+($sample_3186_i<<2))|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127)&255);
      var $129=(($buf__1187_i+1)|0);
      HEAP8[($buf__1187_i)]=$128;
      var $130=$127>>>8;
      var $131=(($130)&255);
      var $132=(($buf__1187_i+2)|0);
      HEAP8[($129)]=$131;
      var $133=((($sample_3186_i)+(1))|0);
      var $134=($133>>>0)<($samples>>>0);
      if ($134) {
       var $sample_3186_i=$133;var $buf__1187_i=$132;
      } else {
       break L1974;
      }
     }
    }
    var $108=($channels|0)==0;
    var $or_cond243_i=$86|$108;
    if ($or_cond243_i) {
     break;
    }
    var $109=$channels<<1;
    var $sample_4197_us_i=0;var $buf__2198_us_i=$27;
    while(1) {
     var $buf__2198_us_i;
     var $sample_4197_us_i;
     var $channel_0190_us_i=0;var $buf__3191_us_i=$buf__2198_us_i;
     while(1) {
      var $buf__3191_us_i;
      var $channel_0190_us_i;
      var $114=(($signal+($channel_0190_us_i<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+($sample_4197_us_i<<2))|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)&255);
      var $119=(($buf__3191_us_i+1)|0);
      HEAP8[($buf__3191_us_i)]=$118;
      var $120=$117>>>8;
      var $121=(($120)&255);
      var $122=(($buf__3191_us_i+2)|0);
      HEAP8[($119)]=$121;
      var $123=((($channel_0190_us_i)+(1))|0);
      var $124=($123>>>0)<($channels>>>0);
      if ($124) {
       var $channel_0190_us_i=$123;var $buf__3191_us_i=$122;
      } else {
       break;
      }
     }
     var $scevgep240_i=(($buf__2198_us_i+$109)|0);
     var $111=((($sample_4197_us_i)+(1))|0);
     var $112=($111>>>0)<($samples>>>0);
     if ($112) {
      var $sample_4197_us_i=$111;var $buf__2198_us_i=$scevgep240_i;
     } else {
      break;
     }
    }
   } else if (($bytes_per_sample|0)==1) {
    var $198=($samples|0)==0;
    if ($29) {
     if ($198) {
      break;
     }
     var $199=(($signal+4)|0);
     var $sample_8221_i=0;var $buf__8222_i=$27;
     while(1) {
      var $buf__8222_i;
      var $sample_8221_i;
      var $201=HEAP32[(($signal)>>2)];
      var $202=(($201+($sample_8221_i<<2))|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=(($203)&255);
      var $205=(($buf__8222_i+1)|0);
      HEAP8[($buf__8222_i)]=$204;
      var $206=HEAP32[(($199)>>2)];
      var $207=(($206+($sample_8221_i<<2))|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=(($208)&255);
      var $210=(($buf__8222_i+2)|0);
      HEAP8[($205)]=$209;
      var $211=((($sample_8221_i)+(1))|0);
      var $212=($211>>>0)<($samples>>>0);
      if ($212) {
       var $sample_8221_i=$211;var $buf__8222_i=$210;
      } else {
       break L1974;
      }
     }
    }
    if ($48) {
     if ($198) {
      break;
     } else {
      var $sample_9226_i=0;var $buf__9227_i=$27;
     }
     while(1) {
      var $buf__9227_i;
      var $sample_9226_i;
      var $215=HEAP32[(($signal)>>2)];
      var $216=(($215+($sample_9226_i<<2))|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217)&255);
      var $219=(($buf__9227_i+1)|0);
      HEAP8[($buf__9227_i)]=$218;
      var $220=((($sample_9226_i)+(1))|0);
      var $221=($220>>>0)<($samples>>>0);
      if ($221) {
       var $sample_9226_i=$220;var $buf__9227_i=$219;
      } else {
       break L1974;
      }
     }
    }
    var $214=($channels|0)==0;
    var $or_cond=$198|$214;
    if ($or_cond) {
     break;
    } else {
     var $sample_10237_i=0;var $buf__10238_i=$27;
    }
    while(1) {
     var $buf__10238_i;
     var $sample_10237_i;
     var $channel_2230_i=0;var $buf__11231_i=$buf__10238_i;
     while(1) {
      var $buf__11231_i;
      var $channel_2230_i;
      var $222=(($signal+($channel_2230_i<<2))|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=(($223+($sample_10237_i<<2))|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225)&255);
      var $227=(($buf__11231_i+1)|0);
      HEAP8[($buf__11231_i)]=$226;
      var $228=((($channel_2230_i)+(1))|0);
      var $229=($228>>>0)<($channels>>>0);
      if ($229) {
       var $channel_2230_i=$228;var $buf__11231_i=$227;
      } else {
       break;
      }
     }
     var $scevgep_i=(($buf__10238_i+$channels)|0);
     var $231=((($sample_10237_i)+(1))|0);
     var $232=($231>>>0)<($samples>>>0);
     if ($232) {
      var $sample_10237_i=$231;var $buf__10238_i=$scevgep_i;
     } else {
      break;
     }
    }
   } else if (($bytes_per_sample|0)==3) {
    var $136=($samples|0)==0;
    if ($29) {
     if ($136) {
      break;
     }
     var $137=(($signal+4)|0);
     var $sample_5201_i=0;var $buf__4202_i=$27;
     while(1) {
      var $buf__4202_i;
      var $sample_5201_i;
      var $139=HEAP32[(($signal)>>2)];
      var $140=(($139+($sample_5201_i<<2))|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141)&255);
      var $143=(($buf__4202_i+1)|0);
      HEAP8[($buf__4202_i)]=$142;
      var $144=$141>>>8;
      var $145=(($144)&255);
      var $146=(($buf__4202_i+2)|0);
      HEAP8[($143)]=$145;
      var $147=$141>>>16;
      var $148=(($147)&255);
      var $149=(($buf__4202_i+3)|0);
      HEAP8[($146)]=$148;
      var $150=HEAP32[(($137)>>2)];
      var $151=(($150+($sample_5201_i<<2))|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=(($152)&255);
      var $154=(($buf__4202_i+4)|0);
      HEAP8[($149)]=$153;
      var $155=$152>>>8;
      var $156=(($155)&255);
      var $157=(($buf__4202_i+5)|0);
      HEAP8[($154)]=$156;
      var $158=$152>>>16;
      var $159=(($158)&255);
      var $160=(($buf__4202_i+6)|0);
      HEAP8[($157)]=$159;
      var $161=((($sample_5201_i)+(1))|0);
      var $162=($161>>>0)<($samples>>>0);
      if ($162) {
       var $sample_5201_i=$161;var $buf__4202_i=$160;
      } else {
       break L1974;
      }
     }
    }
    if ($48) {
     if ($136) {
      break;
     } else {
      var $sample_6206_i=0;var $buf__5207_i=$27;
     }
     while(1) {
      var $buf__5207_i;
      var $sample_6206_i;
      var $184=HEAP32[(($signal)>>2)];
      var $185=(($184+($sample_6206_i<<2))|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186)&255);
      var $188=(($buf__5207_i+1)|0);
      HEAP8[($buf__5207_i)]=$187;
      var $189=$186>>>8;
      var $190=(($189)&255);
      var $191=(($buf__5207_i+2)|0);
      HEAP8[($188)]=$190;
      var $192=$186>>>16;
      var $193=(($192)&255);
      var $194=(($buf__5207_i+3)|0);
      HEAP8[($191)]=$193;
      var $195=((($sample_6206_i)+(1))|0);
      var $196=($195>>>0)<($samples>>>0);
      if ($196) {
       var $sample_6206_i=$195;var $buf__5207_i=$194;
      } else {
       break L1974;
      }
     }
    }
    var $164=($channels|0)==0;
    var $or_cond244_i=$136|$164;
    if ($or_cond244_i) {
     break;
    }
    var $165=((($channels)*(3))&-1);
    var $sample_7217_us_i=0;var $buf__6218_us_i=$27;
    while(1) {
     var $buf__6218_us_i;
     var $sample_7217_us_i;
     var $channel_1210_us_i=0;var $buf__7211_us_i=$buf__6218_us_i;
     while(1) {
      var $buf__7211_us_i;
      var $channel_1210_us_i;
      var $170=(($signal+($channel_1210_us_i<<2))|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+($sample_7217_us_i<<2))|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=(($173)&255);
      var $175=(($buf__7211_us_i+1)|0);
      HEAP8[($buf__7211_us_i)]=$174;
      var $176=$173>>>8;
      var $177=(($176)&255);
      var $178=(($buf__7211_us_i+2)|0);
      HEAP8[($175)]=$177;
      var $179=$173>>>16;
      var $180=(($179)&255);
      var $181=(($buf__7211_us_i+3)|0);
      HEAP8[($178)]=$180;
      var $182=((($channel_1210_us_i)+(1))|0);
      var $183=($182>>>0)<($channels>>>0);
      if ($183) {
       var $channel_1210_us_i=$182;var $buf__7211_us_i=$181;
      } else {
       break;
      }
     }
     var $scevgep241_i=(($buf__6218_us_i+$165)|0);
     var $167=((($sample_7217_us_i)+(1))|0);
     var $168=($167>>>0)<($samples>>>0);
     if ($168) {
      var $sample_7217_us_i=$167;var $buf__6218_us_i=$scevgep241_i;
     } else {
      break;
     }
    }
   } else {
    var $61=($samples|0)==0;
    var $62=($channels|0)==0;
    var $or_cond242_i=$61|$62;
    if ($or_cond242_i) {
     break;
    }
    var $63=$channels<<2;
    var $sample_11177_us_i=0;var $buf__12178_us_i=$27;
    while(1) {
     var $buf__12178_us_i;
     var $sample_11177_us_i;
     var $channel_3172_us_i=0;var $buf__13173_us_i=$buf__12178_us_i;
     while(1) {
      var $buf__13173_us_i;
      var $channel_3172_us_i;
      var $68=(($signal+($channel_3172_us_i<<2))|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+($sample_11177_us_i<<2))|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)&255);
      var $73=(($buf__13173_us_i+1)|0);
      HEAP8[($buf__13173_us_i)]=$72;
      var $74=$71>>>8;
      var $75=(($74)&255);
      var $76=(($buf__13173_us_i+2)|0);
      HEAP8[($73)]=$75;
      var $77=$71>>>16;
      var $78=(($77)&255);
      var $79=(($buf__13173_us_i+3)|0);
      HEAP8[($76)]=$78;
      var $80=$71>>>24;
      var $81=(($80)&255);
      var $82=(($buf__13173_us_i+4)|0);
      HEAP8[($79)]=$81;
      var $83=((($channel_3172_us_i)+(1))|0);
      var $84=($83>>>0)<($channels>>>0);
      if ($84) {
       var $channel_3172_us_i=$83;var $buf__13173_us_i=$82;
      } else {
       break;
      }
     }
     var $scevgep239_i=(($buf__12178_us_i+$63)|0);
     var $65=((($sample_11177_us_i)+(1))|0);
     var $66=($65>>>0)<($samples>>>0);
     if ($66) {
      var $sample_11177_us_i=$65;var $buf__12178_us_i=$scevgep239_i;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 var $233=HEAP32[(($28)>>2)];
 var $234=(($ctx+80)|0);
 var $235=HEAP32[(($234)>>2)];
 var $uadd_i$0=_llvm_uadd_with_overflow_i32($235,$2);
 var $uadd_i$1=tempRet0;
 var $236=$uadd_i$0;
 HEAP32[(($234)>>2)]=$236;
 var $237=$uadd_i$1;
 if ($237) {
  var $239=(($ctx+84)|0);
  var $240=HEAP32[(($239)>>2)];
  var $241=((($240)+(1))|0);
  HEAP32[(($239)>>2)]=$241;
 }
 var $243=$235&63;
 var $244=(((64)-($243))|0);
 var $245=($244>>>0)>($2>>>0);
 var $246=(($ctx)|0);
 var $247=(($ctx+64)|0);
 var $248=$247;
 var $249=(((-$244))|0);
 var $250=(($248+$249)|0);
 if ($245) {
  (_memcpy($250, $233, $2)|0);
  var $_0=1;
  var $_0;
  return $_0;
 }
 (_memcpy($250, $233, $244)|0);
 var $253=(($ctx+64)|0);
 _FLAC__MD5Transform($253,$246);
 var $254=(($233+$244)|0);
 var $255=((($2)-($244))|0);
 var $256=($255>>>0)>63;
 var $257=$ctx;
 if ($256) {
  var $_02728_i=$254;var $_029_i=$255;
  while(1) {
   var $_029_i;
   var $_02728_i;
   (_memcpy($257, $_02728_i, 64)|0);
   _FLAC__MD5Transform($253,$246);
   var $258=(($_02728_i+64)|0);
   var $259=((($_029_i)-(64))|0);
   var $260=($259>>>0)>63;
   if ($260) {
    var $_02728_i=$258;var $_029_i=$259;
   } else {
    var $_027_lcssa_i=$258;var $_0_lcssa_i=$259;
    break;
   }
  }
 } else {
  var $_027_lcssa_i=$254;var $_0_lcssa_i=$255;
 }
 var $_0_lcssa_i;
 var $_027_lcssa_i;
 (_memcpy($257, $_027_lcssa_i, $_0_lcssa_i)|0);
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__memory_alloc_aligned($bytes,$aligned_address){
 var label=0;
 var $uadd_i$0=_llvm_uadd_with_overflow_i32($bytes,31);
 var $uadd_i$1=tempRet0;
 var $1=$uadd_i$1;
 if ($1) {
  var $_0_i=0;
 } else {
  var $3=$uadd_i$0;
  var $4=($3|0)==0;
  var $5=($4&1);
  var $_size_i_i=((($5)+($3))|0);
  var $6=_malloc($_size_i_i);
  var $_0_i=$6;
 }
 var $_0_i;
 var $7=$_0_i;
 var $8=((($7)+(31))|0);
 var $9=$8&-32;
 var $10=$9;
 HEAP32[(($aligned_address)>>2)]=$10;
 return $_0_i;
}
function _FLAC__memory_alloc_aligned_int32_array($elements,$unaligned_pointer,$aligned_pointer){
 var label=0;
 var $1=($elements>>>0)>1073741823;
 if ($1) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $3=$elements<<2;
 var $uadd_i_i$0=_llvm_uadd_with_overflow_i32($3,31);
 var $uadd_i_i$1=tempRet0;
 var $4=$uadd_i_i$1;
 if ($4) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=$uadd_i_i$0;
 var $6=_malloc($5);
 var $7=$6;
 var $8=((($7)+(31))|0);
 var $9=$8&-32;
 var $10=$9;
 var $11=$6;
 var $12=($6|0)==0;
 if ($12) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $14=HEAP32[(($unaligned_pointer)>>2)];
 var $15=($14|0)==0;
 if (!($15)) {
  var $17=$14;
  _free($17);
 }
 HEAP32[(($unaligned_pointer)>>2)]=$11;
 HEAP32[(($aligned_pointer)>>2)]=$10;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__memory_alloc_aligned_uint32_array($elements,$unaligned_pointer,$aligned_pointer){
 var label=0;
 var $1=($elements>>>0)>1073741823;
 if ($1) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $3=$elements<<2;
 var $uadd_i_i$0=_llvm_uadd_with_overflow_i32($3,31);
 var $uadd_i_i$1=tempRet0;
 var $4=$uadd_i_i$1;
 if ($4) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=$uadd_i_i$0;
 var $6=_malloc($5);
 var $7=$6;
 var $8=((($7)+(31))|0);
 var $9=$8&-32;
 var $10=$9;
 var $11=$6;
 var $12=($6|0)==0;
 if ($12) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $14=HEAP32[(($unaligned_pointer)>>2)];
 var $15=($14|0)==0;
 if (!($15)) {
  var $17=$14;
  _free($17);
 }
 HEAP32[(($unaligned_pointer)>>2)]=$11;
 HEAP32[(($aligned_pointer)>>2)]=$10;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__memory_alloc_aligned_uint64_array($elements,$unaligned_pointer,$aligned_pointer){
 var label=0;
 var $1=($elements>>>0)>536870911;
 if ($1) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $3=$elements<<3;
 var $uadd_i_i$0=_llvm_uadd_with_overflow_i32($3,31);
 var $uadd_i_i$1=tempRet0;
 var $4=$uadd_i_i$1;
 if ($4) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=$uadd_i_i$0;
 var $6=_malloc($5);
 var $7=$6;
 var $8=((($7)+(31))|0);
 var $9=$8&-32;
 var $10=$9;
 var $11=$6;
 var $12=($6|0)==0;
 if ($12) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $14=HEAP32[(($unaligned_pointer)>>2)];
 var $15=($14|0)==0;
 if (!($15)) {
  var $17=$14;
  _free($17);
 }
 HEAP32[(($unaligned_pointer)>>2)]=$11;
 HEAP32[(($aligned_pointer)>>2)]=$10;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__memory_alloc_aligned_unsigned_array($elements,$unaligned_pointer,$aligned_pointer){
 var label=0;
 var $1=($elements>>>0)>1073741823;
 if ($1) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $3=$elements<<2;
 var $uadd_i_i$0=_llvm_uadd_with_overflow_i32($3,31);
 var $uadd_i_i$1=tempRet0;
 var $4=$uadd_i_i$1;
 if ($4) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=$uadd_i_i$0;
 var $6=_malloc($5);
 var $7=$6;
 var $8=((($7)+(31))|0);
 var $9=$8&-32;
 var $10=$9;
 var $11=$6;
 var $12=($6|0)==0;
 if ($12) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $14=HEAP32[(($unaligned_pointer)>>2)];
 var $15=($14|0)==0;
 if (!($15)) {
  var $17=$14;
  _free($17);
 }
 HEAP32[(($unaligned_pointer)>>2)]=$11;
 HEAP32[(($aligned_pointer)>>2)]=$10;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__memory_alloc_aligned_real_array($elements,$unaligned_pointer,$aligned_pointer){
 var label=0;
 var $1=($elements>>>0)>1073741823;
 if ($1) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $3=$elements<<2;
 var $uadd_i_i$0=_llvm_uadd_with_overflow_i32($3,31);
 var $uadd_i_i$1=tempRet0;
 var $4=$uadd_i_i$1;
 if ($4) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=$uadd_i_i$0;
 var $6=_malloc($5);
 var $7=$6;
 var $8=((($7)+(31))|0);
 var $9=$8&-32;
 var $10=$9;
 var $11=$6;
 var $12=($6|0)==0;
 if ($12) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $14=HEAP32[(($unaligned_pointer)>>2)];
 var $15=($14|0)==0;
 if (!($15)) {
  var $17=$14;
  _free($17);
 }
 HEAP32[(($unaligned_pointer)>>2)]=$11;
 HEAP32[(($aligned_pointer)>>2)]=$10;
 var $_0=1;
 var $_0;
 return $_0;
}
function _safe_malloc_mul_2op_p($size1,$size2){
 var label=0;
 var $1=($size1|0)==0;
 var $2=($size2|0)==0;
 var $or_cond=$1|$2;
 if ($or_cond) {
  var $4=_malloc(1);
  var $_0=$4;
  var $_0;
  return $_0;
 }
 var $6=(((4294967295)/(($size2>>>0)))&-1);
 var $7=($6>>>0)<($size1>>>0);
 if ($7) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9=(Math_imul($size2,$size1)|0);
 var $10=_malloc($9);
 var $_0=$10;
 var $_0;
 return $_0;
}
function _FLAC__metadata_get_streaminfo($filename,$streaminfo){
 var label=0;
 var $1=_get_one_metadata_block_($filename,0);
 var $2=($1|0)==0;
 if ($2) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $4=$streaminfo;
 var $5=$1;
 (_memcpy($4, $5, 176)|0);
 _FLAC__metadata_object_delete($1);
 var $_0=1;
 var $_0;
 return $_0;
}
function _get_one_metadata_block_($filename,$type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $cd=sp;
 var $1=(($cd)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($cd+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=_FLAC__stream_decoder_new();
 var $4=($3|0)==0;
 if ($4) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $6=_FLAC__stream_decoder_set_md5_checking($3,0);
 var $7=_FLAC__stream_decoder_set_metadata_ignore_all($3);
 var $8=_FLAC__stream_decoder_set_metadata_respond($3,$type);
 var $9=$cd;
 var $10=_FLAC__stream_decoder_init_file($3,$filename,62,38,10,$9);
 var $11=($10|0)==0;
 do {
  if ($11) {
   var $13=HEAP32[(($1)>>2)];
   var $14=($13|0)==0;
   if (!($14)) {
    break;
   }
   var $18=_FLAC__stream_decoder_process_until_end_of_metadata($3);
   var $19=($18|0)==0;
   do {
    if (!($19)) {
     var $21=HEAP32[(($1)>>2)];
     var $22=($21|0)==0;
     if (!($22)) {
      break;
     }
     var $29=_FLAC__stream_decoder_finish($3);
     _FLAC__stream_decoder_delete($3);
     var $30=HEAP32[(($2)>>2)];
     var $_0=$30;
     var $_0;
     STACKTOP=sp;return $_0;
    }
   } while(0);
   var $24=_FLAC__stream_decoder_finish($3);
   _FLAC__stream_decoder_delete($3);
   var $25=HEAP32[(($2)>>2)];
   var $26=($25|0)==0;
   if ($26) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   _FLAC__metadata_object_delete($25);
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $16=_FLAC__stream_decoder_finish($3);
 _FLAC__stream_decoder_delete($3);
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_get_tags($filename,$tags){
 var label=0;
 var $1=_get_one_metadata_block_($filename,4);
 HEAP32[(($tags)>>2)]=$1;
 var $2=($1|0)!=0;
 var $3=($2&1);
 return $3;
}
function _FLAC__metadata_get_cuesheet($filename,$cuesheet){
 var label=0;
 var $1=_get_one_metadata_block_($filename,5);
 HEAP32[(($cuesheet)>>2)]=$1;
 var $2=($1|0)!=0;
 var $3=($2&1);
 return $3;
}
function _FLAC__metadata_get_picture($filename,$picture,$type,$mime_type,$description,$max_width,$max_height,$max_depth,$max_colors){
 var label=0;
 HEAP32[(($picture)>>2)]=0;
 var $1=_calloc(1,140);
 var $2=$1;
 var $3=($1|0)==0;
 if ($3) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $4=$1;
 HEAP32[(($4)>>2)]=0;
 var $5=(($1+4)|0);
 var $6=$5;
 HEAP32[(($6)>>2)]=0;
 var $7=(($1+8)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=0;
 var $9=(($1+88)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=0;
 var $11=(($1+92)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=0;
 var $13=(($1+96)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=0;
 var $15=(($1+100)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=-1;
 var $17=(($1+120)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=-1;
 var $19=(($1+124)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=0;
 var $21=_FLAC__metadata_simple_iterator_init($2,$filename,1,1);
 var $22=($21|0)==0;
 if ($22) {
  var $29=HEAP32[(($4)>>2)];
  var $30=($29|0)==0;
  do {
   if (!($30)) {
    var $32=_fclose($29);
    HEAP32[(($4)>>2)]=0;
    var $33=HEAP32[(($10)>>2)];
    var $34=($33|0)==0;
    if ($34) {
     break;
    }
    var $36=HEAP32[(($6)>>2)];
    var $37=(($1+12)|0);
    var $38=$37;
    _set_file_stats_($36,$38);
   }
  } while(0);
  var $40=HEAP32[(($6)>>2)];
  var $41=($40|0)==0;
  if (!($41)) {
   _free($40);
   HEAP32[(($6)>>2)]=0;
  }
  var $44=HEAP32[(($8)>>2)];
  var $45=($44|0)==0;
  if (!($45)) {
   _free($44);
  }
  _free($1);
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $23=(($1+132)|0);
 var $24=$23;
 var $25=($type|0)==-1;
 var $26=($mime_type|0)==0;
 var $27=($description|0)==0;
 var $max_area_seen_0$1=0;var $max_area_seen_0$0=0;var $max_depth_seen_0$1=0;var $max_depth_seen_0$0=0;
 while(1) {
  var $max_depth_seen_0$0;
  var $max_depth_seen_0$1;
  var $max_area_seen_0$0;
  var $max_area_seen_0$1;
  var $48=HEAP32[(($24)>>2)];
  var $49=($48|0)==6;
  L2188: do {
   if ($49) {
    var $51=_FLAC__metadata_simple_iterator_get_block($2);
    var $52=(($51+28)|0);
    var $53=$52;
    var $54=HEAP32[(($53)>>2)];
    var $55$0=$54;
    var $55$1=0;
    var $56=(($51+32)|0);
    var $57=$56;
    var $58=HEAP32[(($57)>>2)];
    var $59$0=$58;
    var $59$1=0;
    var $60$0=___muldi3($59$0,$59$1,$55$0,$55$1);var $60$1=tempRet0;
    if ($25) {
     label = 1579;
    } else {
     var $62=(($51+16)|0);
     var $63=$62;
     var $64=HEAP32[(($63)>>2)];
     var $65=($64|0)==($type|0);
     if ($65) {
      label = 1579;
     }
    }
    do {
     if (label == 1579) {
      label = 0;
      if (!($26)) {
       var $68=(($51+20)|0);
       var $69=$68;
       var $70=HEAP32[(($69)>>2)];
       var $71=_strcmp($mime_type,$70);
       var $72=($71|0)==0;
       if (!($72)) {
        break;
       }
      }
      if ($27) {
       var $_old=($54>>>0)>($max_width>>>0);
       var $_old39=($58>>>0)>($max_height>>>0);
       var $or_cond41=$_old|$_old39;
       if ($or_cond41) {
        break;
       }
      } else {
       var $75=(($51+24)|0);
       var $76=$75;
       var $77=HEAP32[(($76)>>2)];
       var $78=_strcmp($description,$77);
       var $79=($78|0)!=0;
       var $80=($54>>>0)>($max_width>>>0);
       var $or_cond=$79|$80;
       var $81=($58>>>0)>($max_height>>>0);
       var $or_cond40=$or_cond|$81;
       if ($or_cond40) {
        break;
       }
      }
      var $84=(($51+36)|0);
      var $85=$84;
      var $86=HEAP32[(($85)>>2)];
      var $87=($86>>>0)>($max_depth>>>0);
      if ($87) {
       break;
      }
      var $89=(($51+40)|0);
      var $90=$89;
      var $91=HEAP32[(($90)>>2)];
      var $92=($91>>>0)>($max_colors>>>0);
      if ($92) {
       break;
      }
      var $94=(($60$1>>>0) > ($max_area_seen_0$1>>>0)) | (((($60$1>>>0) == ($max_area_seen_0$1>>>0) & ($60$0>>>0) >  ($max_area_seen_0$0>>>0))));
      if (!($94)) {
       var $96=(($60$0|0) == ($max_area_seen_0$0|0)) & (($60$1|0) == ($max_area_seen_0$1|0));
       if (!($96)) {
        break;
       }
       var $98$0=$86;
       var $98$1=0;
       var $99=(($98$1>>>0) > ($max_depth_seen_0$1>>>0)) | (((($98$1>>>0) == ($max_depth_seen_0$1>>>0) & ($98$0>>>0) >  ($max_depth_seen_0$0>>>0))));
       if (!($99)) {
        break;
       }
      }
      var $101=HEAP32[(($picture)>>2)];
      var $102=($101|0)==0;
      if (!($102)) {
       _FLAC__metadata_object_delete($101);
      }
      HEAP32[(($picture)>>2)]=$51;
      var $105=HEAP32[(($85)>>2)];
      var $106$0=$105;
      var $106$1=0;
      var $max_area_seen_1$1=$60$1;var $max_area_seen_1$0=$60$0;var $max_depth_seen_1$1=$106$1;var $max_depth_seen_1$0=$106$0;
      break L2188;
     }
    } while(0);
    _FLAC__metadata_object_delete($51);
    var $max_area_seen_1$1=$max_area_seen_0$1;var $max_area_seen_1$0=$max_area_seen_0$0;var $max_depth_seen_1$1=$max_depth_seen_0$1;var $max_depth_seen_1$0=$max_depth_seen_0$0;
   } else {
    var $max_area_seen_1$1=$max_area_seen_0$1;var $max_area_seen_1$0=$max_area_seen_0$0;var $max_depth_seen_1$1=$max_depth_seen_0$1;var $max_depth_seen_1$0=$max_depth_seen_0$0;
   }
  } while(0);
  var $max_depth_seen_1$0;
  var $max_depth_seen_1$1;
  var $max_area_seen_1$0;
  var $max_area_seen_1$1;
  var $109=_FLAC__metadata_simple_iterator_next($2);
  var $110=($109|0)==0;
  if ($110) {
   break;
  } else {
   var $max_area_seen_0$1=$max_area_seen_1$1;var $max_area_seen_0$0=$max_area_seen_1$0;var $max_depth_seen_0$1=$max_depth_seen_1$1;var $max_depth_seen_0$0=$max_depth_seen_1$0;
  }
 }
 var $112=HEAP32[(($4)>>2)];
 var $113=($112|0)==0;
 do {
  if (!($113)) {
   var $115=_fclose($112);
   HEAP32[(($4)>>2)]=0;
   var $116=HEAP32[(($10)>>2)];
   var $117=($116|0)==0;
   if ($117) {
    break;
   }
   var $119=HEAP32[(($6)>>2)];
   var $120=(($1+12)|0);
   var $121=$120;
   _set_file_stats_($119,$121);
  }
 } while(0);
 var $123=HEAP32[(($6)>>2)];
 var $124=($123|0)==0;
 if (!($124)) {
  _free($123);
  HEAP32[(($6)>>2)]=0;
 }
 var $127=HEAP32[(($8)>>2)];
 var $128=($127|0)==0;
 if (!($128)) {
  _free($127);
 }
 _free($1);
 var $130=HEAP32[(($picture)>>2)];
 var $131=($130|0)!=0;
 var $132=($131&1);
 var $_0=$132;
 var $_0;
 return $_0;
}
function _FLAC__metadata_simple_iterator_new(){
 var label=0;
 var $1=_calloc(1,140);
 var $2=$1;
 var $3=($1|0)==0;
 if ($3) {
  return $2;
 }
 var $5=$1;
 HEAP32[(($5)>>2)]=0;
 var $6=(($1+4)|0);
 var $7=$6;
 HEAP32[(($7)>>2)]=0;
 var $8=(($1+8)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=0;
 var $10=(($1+88)|0);
 var $11=$10;
 HEAP32[(($11)>>2)]=0;
 var $12=(($1+92)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 var $14=(($1+96)|0);
 var $15=$14;
 HEAP32[(($15)>>2)]=0;
 var $16=(($1+100)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=-1;
 var $18=(($1+120)|0);
 var $19=$18;
 HEAP32[(($19)>>2)]=-1;
 var $20=(($1+124)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=0;
 return $2;
}
function _FLAC__metadata_simple_iterator_init($iterator,$filename,$read_only,$preserve_file_stats){
 var label=0;
 var $1=(($iterator)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 do {
  if (!($3)) {
   var $5=_fclose($2);
   HEAP32[(($1)>>2)]=0;
   var $6=(($iterator+88)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=($7|0)==0;
   if ($8) {
    break;
   }
   var $10=(($iterator+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($iterator+12)|0);
   _set_file_stats_($11,$12);
  }
 } while(0);
 var $14=(($iterator+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if (!($16)) {
  _free($15);
  HEAP32[(($14)>>2)]=0;
 }
 var $19=(($iterator+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if (!($21)) {
  _free($20);
  HEAP32[(($19)>>2)]=0;
 }
 var $23=($read_only|0)!=0;
 var $24=($preserve_file_stats|0)==0;
 var $or_cond=$23|$24;
 if (!($or_cond)) {
  var $26=(($iterator+12)|0);
  var $27=_stat($filename,$26);
  var $28=($27|0)==0;
  var $29=($28&1);
  var $30=(($iterator+88)|0);
  HEAP32[(($30)>>2)]=$29;
 }
 var $32=_strdup($filename);
 HEAP32[(($14)>>2)]=$32;
 var $33=($32|0)==0;
 if ($33) {
  var $35=(($iterator+96)|0);
  HEAP32[(($35)>>2)]=11;
  var $_0=0;
  var $_0;
  return $_0;
 } else {
  var $37=_simple_iterator_prime_input_($iterator,$read_only);
  var $_0=$37;
  var $_0;
  return $_0;
 }
}
function _FLAC__metadata_simple_iterator_delete($iterator){
 var label=0;
 var $1=(($iterator)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 do {
  if (!($3)) {
   var $5=_fclose($2);
   HEAP32[(($1)>>2)]=0;
   var $6=(($iterator+88)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=($7|0)==0;
   if ($8) {
    break;
   }
   var $10=(($iterator+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($iterator+12)|0);
   _set_file_stats_($11,$12);
  }
 } while(0);
 var $14=(($iterator+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if (!($16)) {
  _free($15);
  HEAP32[(($14)>>2)]=0;
 }
 var $19=(($iterator+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if ($21) {
  var $23=$iterator;
  _free($23);
  return;
 }
 _free($20);
 var $23=$iterator;
 _free($23);
 return;
}
function _FLAC__metadata_simple_iterator_get_block_type($iterator){
 var label=0;
 var $1=(($iterator+132)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function _FLAC__metadata_simple_iterator_get_block($iterator){
 var label=0;
 var $1=(($iterator+132)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_FLAC__metadata_object_new($2);
 var $4=($3|0)==0;
 if ($4) {
  var $30=(($iterator+96)|0);
  HEAP32[(($30)>>2)]=11;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $6=(($iterator+128)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($3+4)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=(($iterator+136)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($3+8)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=(($iterator)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=_read_metadata_block_data_cb_($14,(12),66,$3);
 var $16=(($iterator+96)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=($15|0)==0;
 if (!($17)) {
  _FLAC__metadata_object_delete($3);
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $20=HEAP32[(($12)>>2)];
 var $21=(($iterator+124)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($iterator+100+($22<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=((($24)+(4))|0);
 var $26=_fseek($20,$25,0);
 var $27=($26|0)==0;
 if ($27) {
  var $_0=$3;
  var $_0;
  return $_0;
 }
 HEAP32[(($16)>>2)]=7;
 _FLAC__metadata_object_delete($3);
 var $_0=0;
 var $_0;
 return $_0;
}
function _FLAC__metadata_simple_iterator_next($iterator){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $raw_header_i_i=sp;
 var $1=(($iterator+128)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $5=(($iterator)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($iterator+136)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_fseek($6,$8,1);
 var $10=($9|0)==0;
 if (!($10)) {
  var $12=(($iterator+96)|0);
  HEAP32[(($12)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $14=HEAP32[(($5)>>2)];
 var $15=_ftell($14);
 var $16=(($iterator+124)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($iterator+100+($17<<2))|0);
 HEAP32[(($18)>>2)]=$15;
 var $19=HEAP32[(($5)>>2)];
 var $20=(($raw_header_i_i)|0);
 var $21=_fread($20,1,4,$19);
 var $22=($21|0)==4;
 if ($22) {
  var $23=(($iterator+132)|0);
  var $24=HEAP8[($20)];
  var $_lobit_i_i=($24&255)>>>7;
  var $25=($_lobit_i_i&255);
  HEAP32[(($1)>>2)]=$25;
  var $26=($24&255);
  var $27=$26&127;
  HEAP32[(($23)>>2)]=$27;
  var $28=(($raw_header_i_i+1)|0);
  var $29=(($raw_header_i_i+2)|0);
  var $30=HEAP8[($28)];
  var $31=($30&255);
  var $32=$31<<8;
  var $33=(($raw_header_i_i+3)|0);
  var $34=HEAP8[($29)];
  var $35=($34&255);
  var $36=$35|$32;
  var $37=$36<<8;
  var $38=HEAP8[($33)];
  var $39=($38&255);
  var $40=$37|$39;
  HEAP32[(($7)>>2)]=$40;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 } else {
  var $42=(($iterator+96)|0);
  HEAP32[(($42)>>2)]=6;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _FLAC__metadata_simple_iterator_status($iterator){
 var label=0;
 var $1=(($iterator+96)|0);
 var $2=HEAP32[(($1)>>2)];
 HEAP32[(($1)>>2)]=0;
 return $2;
}
function _simple_iterator_prime_input_($iterator,$read_only){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $raw_header_i_i=sp;
 var $1=($read_only|0)==0;
 do {
  if ($1) {
   var $3=(($iterator+4)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=_fopen($4,2824);
   var $6=(($iterator)|0);
   HEAP32[(($6)>>2)]=$5;
   var $7=($5|0)==0;
   var $8=(($iterator+92)|0);
   if (!($7)) {
    HEAP32[(($8)>>2)]=1;
    var $24=$5;
    break;
   }
   HEAP32[(($8)>>2)]=0;
   var $10=___errno_location();
   var $11=HEAP32[(($10)>>2)];
   var $12=($11|0)==13;
   if ($12) {
    var $_pre_phi=$3;var $_pre_phi22=$6;
    label = 1664;
    break;
   }
   var $21=(($iterator+96)|0);
   HEAP32[(($21)>>2)]=2;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $13=(($iterator+92)|0);
   HEAP32[(($13)>>2)]=0;
   var $_pre=(($iterator+4)|0);
   var $_pre21=(($iterator)|0);
   var $_pre_phi=$_pre;var $_pre_phi22=$_pre21;
   label = 1664;
  }
 } while(0);
 do {
  if (label == 1664) {
   var $_pre_phi22;
   var $_pre_phi;
   var $15=HEAP32[(($_pre_phi)>>2)];
   var $16=_fopen($15,2880);
   HEAP32[(($_pre_phi22)>>2)]=$16;
   var $17=($16|0)==0;
   if (!($17)) {
    var $24=$16;
    break;
   }
   var $19=(($iterator+96)|0);
   HEAP32[(($19)>>2)]=2;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $24;
 var $25=(($iterator)|0);
 var $26=$24;
 var $27=_seek_to_first_metadata_block_cb_($26,(12),66);
 if (($27|0)==0) {
  var $29=(($iterator+124)|0);
  HEAP32[(($29)>>2)]=0;
  var $30=HEAP32[(($25)>>2)];
  var $31=_ftell($30);
  var $32=HEAP32[(($29)>>2)];
  var $33=(($iterator+100+($32<<2))|0);
  HEAP32[(($33)>>2)]=$31;
  var $34=(($iterator+120)|0);
  HEAP32[(($34)>>2)]=$31;
  var $35=HEAP32[(($25)>>2)];
  var $36=(($raw_header_i_i)|0);
  var $37=_fread($36,1,4,$35);
  var $38=($37|0)==4;
  if ($38) {
   var $39=(($iterator+136)|0);
   var $40=(($iterator+132)|0);
   var $41=(($iterator+128)|0);
   var $42=HEAP8[($36)];
   var $_lobit_i_i=($42&255)>>>7;
   var $43=($_lobit_i_i&255);
   HEAP32[(($41)>>2)]=$43;
   var $44=($42&255);
   var $45=$44&127;
   HEAP32[(($40)>>2)]=$45;
   var $46=(($raw_header_i_i+1)|0);
   var $47=(($raw_header_i_i+2)|0);
   var $48=HEAP8[($46)];
   var $49=($48&255);
   var $50=$49<<8;
   var $51=(($raw_header_i_i+3)|0);
   var $52=HEAP8[($47)];
   var $53=($52&255);
   var $54=$53|$50;
   var $55=$54<<8;
   var $56=HEAP8[($51)];
   var $57=($56&255);
   var $58=$55|$57;
   HEAP32[(($39)>>2)]=$58;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $60=(($iterator+96)|0);
   HEAP32[(($60)>>2)]=6;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } else if (($27|0)==3) {
  var $66=(($iterator+96)|0);
  HEAP32[(($66)>>2)]=3;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 } else if (($27|0)==2) {
  var $64=(($iterator+96)|0);
  HEAP32[(($64)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 } else if (($27|0)==1) {
  var $62=(($iterator+96)|0);
  HEAP32[(($62)>>2)]=6;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 } else {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _FLAC__metadata_simple_iterator_is_writable($iterator){
 var label=0;
 var $1=(($iterator+92)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function _FLAC__metadata_simple_iterator_prev($iterator){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $raw_header_i_i=sp;
 var $1=(($iterator+124)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($iterator+100+($2<<2))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($iterator+120)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($4|0)==($6|0);
 if ($7) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $9=(($iterator)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fseek($10,$6,0);
 var $12=($11|0)==0;
 if (!($12)) {
  var $14=(($iterator+96)|0);
  HEAP32[(($14)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $16=HEAP32[(($5)>>2)];
 var $17=HEAP32[(($9)>>2)];
 var $18=(($raw_header_i_i)|0);
 var $19=_fread($18,1,4,$17);
 var $20=($19|0)==4;
 if (!($20)) {
  var $21=(($iterator+96)|0);
  HEAP32[(($21)>>2)]=6;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $22=(($iterator+136)|0);
 var $23=(($iterator+132)|0);
 var $24=(($iterator+128)|0);
 var $25=HEAP8[($18)];
 var $_lobit_i_i=($25&255)>>>7;
 var $26=($_lobit_i_i&255);
 HEAP32[(($24)>>2)]=$26;
 var $27=($25&255);
 var $28=$27&127;
 HEAP32[(($23)>>2)]=$28;
 var $29=(($raw_header_i_i+1)|0);
 var $30=(($raw_header_i_i+2)|0);
 var $31=HEAP8[($29)];
 var $32=($31&255);
 var $33=$32<<8;
 var $34=(($raw_header_i_i+3)|0);
 var $35=HEAP8[($30)];
 var $36=($35&255);
 var $37=$36|$33;
 var $38=$37<<8;
 var $39=HEAP8[($34)];
 var $40=($39&255);
 var $41=$38|$40;
 HEAP32[(($22)>>2)]=$41;
 var $42=HEAP32[(($9)>>2)];
 var $43=_ftell($42);
 var $44=HEAP32[(($22)>>2)];
 var $45=((($44)+($43))|0);
 var $46=HEAP32[(($1)>>2)];
 var $47=(($iterator+100+($46<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($45|0)<($48|0);
 L2329: do {
  if ($49) {
   var $50=$44;
   while(1) {
    var $50;
    var $51=HEAP32[(($9)>>2)];
    var $52=_fseek($51,$50,1);
    var $53=($52|0)==0;
    if (!($53)) {
     label = 1692;
     break;
    }
    var $57=HEAP32[(($9)>>2)];
    var $58=_ftell($57);
    var $59=HEAP32[(($9)>>2)];
    var $60=_fread($18,1,4,$59);
    var $61=($60|0)==4;
    if (!($61)) {
     label = 1694;
     break;
    }
    var $63=HEAP8[($18)];
    var $_lobit_i_i19=($63&255)>>>7;
    var $64=($_lobit_i_i19&255);
    HEAP32[(($24)>>2)]=$64;
    var $65=($63&255);
    var $66=$65&127;
    HEAP32[(($23)>>2)]=$66;
    var $67=HEAP8[($29)];
    var $68=($67&255);
    var $69=$68<<8;
    var $70=HEAP8[($30)];
    var $71=($70&255);
    var $72=$71|$69;
    var $73=$72<<8;
    var $74=HEAP8[($34)];
    var $75=($74&255);
    var $76=$73|$75;
    HEAP32[(($22)>>2)]=$76;
    var $77=HEAP32[(($9)>>2)];
    var $78=_ftell($77);
    var $79=HEAP32[(($22)>>2)];
    var $80=((($79)+($78))|0);
    var $81=HEAP32[(($1)>>2)];
    var $82=(($iterator+100+($81<<2))|0);
    var $83=HEAP32[(($82)>>2)];
    var $84=($80|0)<($83|0);
    if ($84) {
     var $50=$79;
    } else {
     var $this_offset_0_lcssa=$58;var $_lcssa=$82;
     break L2329;
    }
   }
   if (label == 1694) {
    var $62=(($iterator+96)|0);
    HEAP32[(($62)>>2)]=6;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 1692) {
    var $55=(($iterator+96)|0);
    HEAP32[(($55)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
  } else {
   var $this_offset_0_lcssa=$16;var $_lcssa=$47;
  }
 } while(0);
 var $_lcssa;
 var $this_offset_0_lcssa;
 HEAP32[(($_lcssa)>>2)]=$this_offset_0_lcssa;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_simple_iterator_is_last($iterator){
 var label=0;
 var $1=(($iterator+128)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function _FLAC__metadata_simple_iterator_get_block_offset($iterator){
 var label=0;
 var $1=(($iterator+124)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($iterator+100+($2<<2))|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__metadata_simple_iterator_get_block_length($iterator){
 var label=0;
 var $1=(($iterator+136)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function _FLAC__metadata_simple_iterator_get_application_id($iterator,$id){
 var label=0;
 var $1=HEAP32[((10224)>>2)];
 var $2=$1>>>3;
 var $3=(($iterator+132)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==2;
 if (!($5)) {
  var $7=(($iterator+96)|0);
  HEAP32[(($7)>>2)]=1;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9=(($iterator)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fread($id,1,$2,$10);
 var $12=($11|0)==($2|0);
 if (!($12)) {
  var $14=(($iterator+96)|0);
  HEAP32[(($14)>>2)]=6;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $16=HEAP32[(($9)>>2)];
 var $17=(((-$2))|0);
 var $18=_fseek($16,$17,1);
 var $19=($18|0)==0;
 if ($19) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $21=(($iterator+96)|0);
 HEAP32[(($21)>>2)]=7;
 var $_0=0;
 var $_0;
 return $_0;
}
function _FLAC__metadata_simple_iterator_set_block($iterator,$block,$use_padding){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $raw_header_i_i_i=sp;
 var $1=(($iterator+92)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if ($3) {
  var $5=(($iterator+96)|0);
  HEAP32[(($5)>>2)]=4;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $7=(($iterator+132)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 var $_phi_trans_insert=(($block)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 if ($9) {
  var $12=$_pre;
  label = 1722;
 } else {
  var $11=($_pre|0)==0;
  if ($11) {
   var $12=0;
   label = 1722;
  }
 }
 do {
  if (label == 1722) {
   var $12;
   var $13=($8|0)==($12|0);
   if ($13) {
    break;
   }
   var $15=(($iterator+96)|0);
   HEAP32[(($15)>>2)]=1;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $17=(($iterator+128)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($block+4)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=(($iterator+136)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($block+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($21|0)==($23|0);
 if ($24) {
  var $26=_write_metadata_block_stationary_($iterator,$block);
  var $_0=$26;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $28=($21>>>0)>($23>>>0);
 var $29=($use_padding|0)==0;
 if ($28) {
  do {
   if (!($29)) {
    var $32=((($23)+(4))|0);
    var $33=($21>>>0)<($32>>>0);
    if ($33) {
     break;
    }
    var $35=((($21)-(4))|0);
    var $36=((($35)-($23))|0);
    var $37=_write_metadata_block_stationary_with_padding_($iterator,$block,$36,$18);
    var $_0=$37;
    var $_0;
    STACKTOP=sp;return $_0;
   }
  } while(0);
  var $39=_rewrite_whole_file_($iterator,$block,0);
  var $_0=$39;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 do {
  if (!($29)) {
   var $42=HEAP32[(($17)>>2)];
   var $43=($42|0)==0;
   if (!($43)) {
    break;
   }
   var $45=((($23)-($21))|0);
   var $46=(($iterator+124)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($iterator+100+($47<<2))|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=((($47)+(1))|0);
   var $51=(($iterator+100+($50<<2))|0);
   HEAP32[(($51)>>2)]=$49;
   var $52=HEAP32[(($46)>>2)];
   var $53=((($52)+(1))|0);
   HEAP32[(($46)>>2)]=$53;
   var $54=_FLAC__metadata_simple_iterator_next($iterator);
   var $55=($54|0)==0;
   if ($55) {
    var $57=HEAP32[(($46)>>2)];
    var $58=((($57)-(1))|0);
    HEAP32[(($46)>>2)]=$58;
    var $59=(($iterator)|0);
    var $60=HEAP32[(($59)>>2)];
    var $61=(($iterator+100+($58<<2))|0);
    var $62=HEAP32[(($61)>>2)];
    var $63=_fseek($60,$62,0);
    var $64=($63|0)==0;
    if (!($64)) {
     var $66=(($iterator+96)|0);
     HEAP32[(($66)>>2)]=7;
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
    }
    var $68=HEAP32[(($59)>>2)];
    var $69=(($raw_header_i_i_i)|0);
    var $70=_fread($69,1,4,$68);
    var $71=($70|0)==4;
    if ($71) {
     var $72=HEAP8[($69)];
     var $_lobit_i_i_i=($72&255)>>>7;
     var $73=($_lobit_i_i_i&255);
     HEAP32[(($17)>>2)]=$73;
     var $74=($72&255);
     var $75=$74&127;
     HEAP32[(($7)>>2)]=$75;
     var $76=(($raw_header_i_i_i+1)|0);
     var $77=(($raw_header_i_i_i+2)|0);
     var $78=HEAP8[($76)];
     var $79=($78&255);
     var $80=$79<<8;
     var $81=(($raw_header_i_i_i+3)|0);
     var $82=HEAP8[($77)];
     var $83=($82&255);
     var $84=$83|$80;
     var $85=$84<<8;
     var $86=HEAP8[($81)];
     var $87=($86&255);
     var $88=$85|$87;
     HEAP32[(($20)>>2)]=$88;
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
    } else {
     var $90=(($iterator+96)|0);
     HEAP32[(($90)>>2)]=6;
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
    }
   }
   var $92=HEAP32[(($7)>>2)];
   var $93=($92|0)==1;
   do {
    if ($93) {
     var $95=HEAP32[(($20)>>2)];
     var $96=((($95)+(4))|0);
     var $97=($96|0)==($45|0);
     if ($97) {
      var $99=HEAP32[(($17)>>2)];
      HEAP32[(($19)>>2)]=$99;
      var $padding_is_last_0=0;var $padding_leftover_0=0;var $_051=$use_padding;
      break;
     }
     var $101=($95>>>0)<($45>>>0);
     if ($101) {
      var $padding_is_last_0=0;var $padding_leftover_0=0;var $_051=0;
      break;
     }
     var $103=((($96)-($45))|0);
     var $104=HEAP32[(($17)>>2)];
     HEAP32[(($19)>>2)]=0;
     var $padding_is_last_0=$104;var $padding_leftover_0=$103;var $_051=$use_padding;
    } else {
     var $padding_is_last_0=0;var $padding_leftover_0=0;var $_051=0;
    }
   } while(0);
   var $_051;
   var $padding_leftover_0;
   var $padding_is_last_0;
   var $106=HEAP32[(($46)>>2)];
   var $107=((($106)-(1))|0);
   HEAP32[(($46)>>2)]=$107;
   var $108=(($iterator)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($iterator+100+($107<<2))|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=_fseek($109,$111,0);
   var $113=($112|0)==0;
   if (!($113)) {
    var $115=(($iterator+96)|0);
    HEAP32[(($115)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $117=HEAP32[(($108)>>2)];
   var $118=(($raw_header_i_i_i)|0);
   var $119=_fread($118,1,4,$117);
   var $120=($119|0)==4;
   if (!($120)) {
    var $122=(($iterator+96)|0);
    HEAP32[(($122)>>2)]=6;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $124=HEAP8[($118)];
   var $_lobit_i_i_i53=($124&255)>>>7;
   var $125=($_lobit_i_i_i53&255);
   HEAP32[(($17)>>2)]=$125;
   var $126=($124&255);
   var $127=$126&127;
   HEAP32[(($7)>>2)]=$127;
   var $128=(($raw_header_i_i_i+1)|0);
   var $129=(($raw_header_i_i_i+2)|0);
   var $130=HEAP8[($128)];
   var $131=($130&255);
   var $132=$131<<8;
   var $133=(($raw_header_i_i_i+3)|0);
   var $134=HEAP8[($129)];
   var $135=($134&255);
   var $136=$135|$132;
   var $137=$136<<8;
   var $138=HEAP8[($133)];
   var $139=($138&255);
   var $140=$137|$139;
   HEAP32[(($20)>>2)]=$140;
   var $141=($_051|0)==0;
   if ($141) {
    break;
   }
   var $143=($padding_leftover_0|0)==0;
   if ($143) {
    var $145=_write_metadata_block_stationary_($iterator,$block);
    var $_0=$145;
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $147=((($padding_leftover_0)-(4))|0);
    var $148=_write_metadata_block_stationary_with_padding_($iterator,$block,$147,$padding_is_last_0);
    var $_0=$148;
    var $_0;
    STACKTOP=sp;return $_0;
   }
  }
 } while(0);
 var $149=_rewrite_whole_file_($iterator,$block,0);
 var $_0=$149;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _write_metadata_block_stationary_($iterator,$block){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $buffer_i_i=sp;
 var $1=(($iterator)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($iterator+124)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($iterator+100+($4<<2))|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=_fseek($2,$6,0);
 var $8=($7|0)==0;
 if (!($8)) {
  var $10=(($iterator+96)|0);
  HEAP32[(($10)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $12=HEAP32[(($1)>>2)];
 var $13=(($iterator+96)|0);
 var $block_idx=(($block)|0);
 var $block_idx_val=HEAP32[(($block_idx)>>2)];
 var $block_idx14=(($block+4)|0);
 var $block_idx14_val=HEAP32[(($block_idx14)>>2)];
 var $block_idx15=(($block+8)|0);
 var $block_idx15_val=HEAP32[(($block_idx15)>>2)];
 var $14=(($buffer_i_i)|0);
 var $15=($block_idx14_val|0)!=0;
 var $16=$15?128:0;
 var $17=$16|$block_idx_val;
 var $18=(($17)&255);
 HEAP8[($14)]=$18;
 var $19=(($block_idx15_val)&255);
 var $20=(($buffer_i_i+3)|0);
 HEAP8[($20)]=$19;
 var $21=$block_idx15_val>>>8;
 var $22=(($21)&255);
 var $23=(($buffer_i_i+2)|0);
 HEAP8[($23)]=$22;
 var $24=$block_idx15_val>>>16;
 var $25=(($24)&255);
 var $26=(($buffer_i_i+1)|0);
 HEAP8[($26)]=$25;
 var $27=_fwrite($14,1,4,$12);
 var $28=($27|0)==4;
 if (!($28)) {
  HEAP32[(($13)>>2)]=8;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $30=HEAP32[(($1)>>2)];
 var $31=$30;
 var $32=_write_metadata_block_data_cb_($31,(82),$block);
 var $33=($32|0)==0;
 var $__i=$33?8:0;
 HEAP32[(($13)>>2)]=$__i;
 if ($33) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $35=HEAP32[(($1)>>2)];
 var $36=HEAP32[(($3)>>2)];
 var $37=(($iterator+100+($36<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=_fseek($35,$38,0);
 var $40=($39|0)==0;
 if (!($40)) {
  HEAP32[(($13)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $43=HEAP32[(($1)>>2)];
 var $44=_fread($14,1,4,$43);
 var $45=($44|0)==4;
 if ($45) {
  var $46=(($iterator+136)|0);
  var $47=(($iterator+132)|0);
  var $48=(($iterator+128)|0);
  var $49=HEAP8[($14)];
  var $_lobit_i_i=($49&255)>>>7;
  var $50=($_lobit_i_i&255);
  HEAP32[(($48)>>2)]=$50;
  var $51=($49&255);
  var $52=$51&127;
  HEAP32[(($47)>>2)]=$52;
  var $53=HEAP8[($26)];
  var $54=($53&255);
  var $55=$54<<8;
  var $56=HEAP8[($23)];
  var $57=($56&255);
  var $58=$57|$55;
  var $59=$58<<8;
  var $60=HEAP8[($20)];
  var $61=($60&255);
  var $62=$59|$61;
  HEAP32[(($46)>>2)]=$62;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 } else {
  HEAP32[(($13)>>2)]=6;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _write_metadata_block_stationary_with_padding_($iterator,$block,$padding_length,$padding_is_last){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $buffer_i_i=sp;
 var $1=(($iterator)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($iterator+124)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($iterator+100+($4<<2))|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=_fseek($2,$6,0);
 var $8=($7|0)==0;
 if (!($8)) {
  var $10=(($iterator+96)|0);
  HEAP32[(($10)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $12=(($block+4)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=HEAP32[(($1)>>2)];
 var $14=(($iterator+96)|0);
 var $block_idx=(($block)|0);
 var $block_idx_val=HEAP32[(($block_idx)>>2)];
 var $block_idx30=(($block+8)|0);
 var $block_idx30_val=HEAP32[(($block_idx30)>>2)];
 var $15=(($buffer_i_i)|0);
 var $16=(($block_idx_val)&255);
 HEAP8[($15)]=$16;
 var $17=(($block_idx30_val)&255);
 var $18=(($buffer_i_i+3)|0);
 HEAP8[($18)]=$17;
 var $19=$block_idx30_val>>>8;
 var $20=(($19)&255);
 var $21=(($buffer_i_i+2)|0);
 HEAP8[($21)]=$20;
 var $22=$block_idx30_val>>>16;
 var $23=(($22)&255);
 var $24=(($buffer_i_i+1)|0);
 HEAP8[($24)]=$23;
 var $25=_fwrite($15,1,4,$13);
 var $26=($25|0)==4;
 if (!($26)) {
  HEAP32[(($14)>>2)]=8;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $28=HEAP32[(($1)>>2)];
 var $29=$28;
 var $30=_write_metadata_block_data_cb_($29,(82),$block);
 var $31=($30|0)==0;
 var $__i=$31?8:0;
 HEAP32[(($14)>>2)]=$__i;
 if ($31) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $33=_FLAC__metadata_object_new(1);
 var $34=($33|0)==0;
 if ($34) {
  var $_0=11;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $36=(($33+4)|0);
 HEAP32[(($36)>>2)]=$padding_is_last;
 var $37=(($33+8)|0);
 HEAP32[(($37)>>2)]=$padding_length;
 var $38=HEAP32[(($1)>>2)];
 var $_idx=(($33)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $39=($padding_is_last|0)!=0;
 var $40=$39?128:0;
 var $41=$40|$_idx_val;
 var $42=(($41)&255);
 HEAP8[($15)]=$42;
 var $43=(($padding_length)&255);
 HEAP8[($18)]=$43;
 var $44=$padding_length>>>8;
 var $45=(($44)&255);
 HEAP8[($21)]=$45;
 var $46=$padding_length>>>16;
 var $47=(($46)&255);
 HEAP8[($24)]=$47;
 var $48=_fwrite($15,1,4,$38);
 var $49=($48|0)==4;
 if (!($49)) {
  HEAP32[(($14)>>2)]=8;
  _FLAC__metadata_object_delete($33);
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $52=HEAP32[(($1)>>2)];
 var $53=$52;
 var $54=_write_metadata_block_data_cb_($53,(82),$33);
 var $55=($54|0)==0;
 var $__i34=$55?8:0;
 HEAP32[(($14)>>2)]=$__i34;
 _FLAC__metadata_object_delete($33);
 if ($55) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $57=HEAP32[(($1)>>2)];
 var $58=HEAP32[(($3)>>2)];
 var $59=(($iterator+100+($58<<2))|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=_fseek($57,$60,0);
 var $62=($61|0)==0;
 if (!($62)) {
  HEAP32[(($14)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $65=HEAP32[(($1)>>2)];
 var $66=_fread($15,1,4,$65);
 var $67=($66|0)==4;
 if ($67) {
  var $68=(($iterator+136)|0);
  var $69=(($iterator+132)|0);
  var $70=(($iterator+128)|0);
  var $71=HEAP8[($15)];
  var $_lobit_i_i=($71&255)>>>7;
  var $72=($_lobit_i_i&255);
  HEAP32[(($70)>>2)]=$72;
  var $73=($71&255);
  var $74=$73&127;
  HEAP32[(($69)>>2)]=$74;
  var $75=HEAP8[($24)];
  var $76=($75&255);
  var $77=$76<<8;
  var $78=HEAP8[($21)];
  var $79=($78&255);
  var $80=$79|$77;
  var $81=$80<<8;
  var $82=HEAP8[($18)];
  var $83=($82&255);
  var $84=$81|$83;
  HEAP32[(($68)>>2)]=$84;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 } else {
  HEAP32[(($14)>>2)]=6;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _rewrite_whole_file_($iterator,$block,$append){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8224)|0;
 var $x_i=sp;
 var $buffer_i_i=(sp)+(8);
 var $raw_header_i_i_i=(sp)+(8200);
 var $tempfile=(sp)+(8208);
 var $tempfilename=(sp)+(8216);
 HEAP32[(($tempfile)>>2)]=0;
 HEAP32[(($tempfilename)>>2)]=0;
 var $1=(($iterator+128)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 do {
  if ($3) {
   var $_pre=(($iterator+124)|0);
   var $fixup_is_last_flag_offset_0=-1;var $fixup_is_last_code_0=0;var $_pre_phi=$_pre;
   label = 1824;
  } else {
   var $5=($append|0)==0;
   if (!($5)) {
    var $7=(($iterator+124)|0);
    var $8=HEAP32[(($7)>>2)];
    var $9=(($iterator+100+($8<<2))|0);
    var $10=HEAP32[(($9)>>2)];
    var $fixup_is_last_flag_offset_0=$10;var $fixup_is_last_code_0=1;var $_pre_phi=$7;
    label = 1824;
    break;
   }
   var $12=($block|0)==0;
   var $13=(($iterator+124)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($iterator+100+($14<<2))|0);
   var $16=HEAP32[(($15)>>2)];
   if (!($12)) {
    var $111=$16;var $fixup_is_last_code_037=0;var $fixup_is_last_flag_offset_038=-1;var $110=1;var $109=$13;
    break;
   }
   var $18=((($14)+(1))|0);
   var $19=(($iterator+100+($18<<2))|0);
   HEAP32[(($19)>>2)]=$16;
   var $20=HEAP32[(($13)>>2)];
   var $21=((($20)+(1))|0);
   HEAP32[(($13)>>2)]=$21;
   var $22=_FLAC__metadata_simple_iterator_prev($iterator);
   var $23=($22|0)==0;
   var $24=HEAP32[(($13)>>2)];
   if (!($23)) {
    var $62=(($iterator+100+($24<<2))|0);
    var $63=HEAP32[(($62)>>2)];
    var $64=((($24)-(1))|0);
    HEAP32[(($13)>>2)]=$64;
    var $65=(($iterator)|0);
    var $66=HEAP32[(($65)>>2)];
    var $67=(($iterator+100+($64<<2))|0);
    var $68=HEAP32[(($67)>>2)];
    var $69=_fseek($66,$68,0);
    var $70=($69|0)==0;
    if (!($70)) {
     var $72=(($iterator+96)|0);
     HEAP32[(($72)>>2)]=7;
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
    }
    var $74=HEAP32[(($65)>>2)];
    var $75=(($raw_header_i_i_i)|0);
    var $76=_fread($75,1,4,$74);
    var $77=($76|0)==4;
    if ($77) {
     var $80=(($iterator+136)|0);
     var $81=(($iterator+132)|0);
     var $82=HEAP8[($75)];
     var $_lobit_i_i_i26=($82&255)>>>7;
     var $83=($_lobit_i_i_i26&255);
     HEAP32[(($1)>>2)]=$83;
     var $84=($82&255);
     var $85=$84&127;
     HEAP32[(($81)>>2)]=$85;
     var $86=(($raw_header_i_i_i+1)|0);
     var $87=(($raw_header_i_i_i+2)|0);
     var $88=HEAP8[($86)];
     var $89=($88&255);
     var $90=$89<<8;
     var $91=(($raw_header_i_i_i+3)|0);
     var $92=HEAP8[($87)];
     var $93=($92&255);
     var $94=$93|$90;
     var $95=$94<<8;
     var $96=HEAP8[($91)];
     var $97=($96&255);
     var $98=$95|$97;
     HEAP32[(($80)>>2)]=$98;
     var $fixup_is_last_flag_offset_0=$63;var $fixup_is_last_code_0=-1;var $_pre_phi=$13;
     label = 1824;
     break;
    }
    var $79=(($iterator+96)|0);
    HEAP32[(($79)>>2)]=6;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $26=((($24)-(1))|0);
   HEAP32[(($13)>>2)]=$26;
   var $27=(($iterator)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($iterator+100+($26<<2))|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=_fseek($28,$30,0);
   var $32=($31|0)==0;
   if (!($32)) {
    var $34=(($iterator+96)|0);
    HEAP32[(($34)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $36=HEAP32[(($27)>>2)];
   var $37=(($raw_header_i_i_i)|0);
   var $38=_fread($37,1,4,$36);
   var $39=($38|0)==4;
   if ($39) {
    var $40=(($iterator+136)|0);
    var $41=(($iterator+132)|0);
    var $42=HEAP8[($37)];
    var $_lobit_i_i_i=($42&255)>>>7;
    var $43=($_lobit_i_i_i&255);
    HEAP32[(($1)>>2)]=$43;
    var $44=($42&255);
    var $45=$44&127;
    HEAP32[(($41)>>2)]=$45;
    var $46=(($raw_header_i_i_i+1)|0);
    var $47=(($raw_header_i_i_i+2)|0);
    var $48=HEAP8[($46)];
    var $49=($48&255);
    var $50=$49<<8;
    var $51=(($raw_header_i_i_i+3)|0);
    var $52=HEAP8[($47)];
    var $53=($52&255);
    var $54=$53|$50;
    var $55=$54<<8;
    var $56=HEAP8[($51)];
    var $57=($56&255);
    var $58=$55|$57;
    HEAP32[(($40)>>2)]=$58;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $60=(($iterator+96)|0);
    HEAP32[(($60)>>2)]=6;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
  }
 } while(0);
 do {
  if (label == 1824) {
   var $_pre_phi;
   var $fixup_is_last_code_0;
   var $fixup_is_last_flag_offset_0;
   var $100=($append|0)==0;
   var $101=HEAP32[(($_pre_phi)>>2)];
   var $102=(($iterator+100+($101<<2))|0);
   var $103=HEAP32[(($102)>>2)];
   if ($100) {
    var $111=$103;var $fixup_is_last_code_037=$fixup_is_last_code_0;var $fixup_is_last_flag_offset_038=$fixup_is_last_flag_offset_0;var $110=1;var $109=$_pre_phi;
    break;
   }
   var $105=((($103)+(4))|0);
   var $106=(($iterator+136)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=((($105)+($107))|0);
   var $111=$108;var $fixup_is_last_code_037=$fixup_is_last_code_0;var $fixup_is_last_flag_offset_038=$fixup_is_last_flag_offset_0;var $110=0;var $109=$_pre_phi;
  }
 } while(0);
 var $109;
 var $110;
 var $fixup_is_last_flag_offset_038;
 var $fixup_is_last_code_037;
 var $111;
 var $112=(($iterator)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=_fseek($113,0,0);
 var $115=($114|0)==0;
 if (!($115)) {
  var $117=(($iterator+96)|0);
  HEAP32[(($117)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $119=(($iterator+4)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($iterator+8)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=(($iterator+96)|0);
 var $124=_open_tempfile_($120,$122,$tempfile,$tempfilename,$123);
 var $125=($124|0)==0;
 if ($125) {
  var $127=HEAP32[(($tempfile)>>2)];
  var $128=($127|0)==0;
  if (!($128)) {
   var $130=_fclose($127);
   HEAP32[(($tempfile)>>2)]=0;
  }
  var $132=HEAP32[(($tempfilename)>>2)];
  var $133=($132|0)==0;
  if ($133) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $135=_unlink($132);
  var $136=HEAP32[(($tempfilename)>>2)];
  _free($136);
  HEAP32[(($tempfilename)>>2)]=0;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $138=HEAP32[(($112)>>2)];
 var $139=HEAP32[(($tempfile)>>2)];
 var $140=(($buffer_i_i)|0);
 var $_013_i_i=$111;
 while(1) {
  var $_013_i_i;
  var $142=($_013_i_i|0)>0;
  if (!($142)) {
   break;
  }
  var $144=($_013_i_i>>>0)>8192;
  var $145=$144?8192:$_013_i_i;
  var $146=_fread($140,1,$145,$138);
  var $147=($146|0)==($145|0);
  if (!($147)) {
   var $storemerge_i=6;
   label = 1837;
   break;
  }
  var $149=_fwrite($140,1,$145,$139);
  var $150=($149|0)==($145|0);
  var $151=((($_013_i_i)-($145))|0);
  if ($150) {
   var $_013_i_i=$151;
  } else {
   var $storemerge_i=8;
   label = 1837;
   break;
  }
 }
 if (label == 1837) {
  var $storemerge_i;
  HEAP32[(($123)>>2)]=$storemerge_i;
  var $153=HEAP32[(($tempfile)>>2)];
  var $154=($153|0)==0;
  if (!($154)) {
   var $156=_fclose($153);
   HEAP32[(($tempfile)>>2)]=0;
  }
  var $158=HEAP32[(($tempfilename)>>2)];
  var $159=($158|0)==0;
  if ($159) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $161=_unlink($158);
  var $162=HEAP32[(($tempfilename)>>2)];
  _free($162);
  HEAP32[(($tempfilename)>>2)]=0;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $164=($block|0)==0;
 do {
  if (!($164)) {
   var $166=HEAP32[(($tempfile)>>2)];
   var $block_idx=(($block)|0);
   var $block_idx_val=HEAP32[(($block_idx)>>2)];
   var $block_idx23=(($block+4)|0);
   var $block_idx23_val=HEAP32[(($block_idx23)>>2)];
   var $block_idx24=(($block+8)|0);
   var $block_idx24_val=HEAP32[(($block_idx24)>>2)];
   var $167=(($raw_header_i_i_i)|0);
   var $168=($block_idx23_val|0)!=0;
   var $169=$168?128:0;
   var $170=$169|$block_idx_val;
   var $171=(($170)&255);
   HEAP8[($167)]=$171;
   var $172=(($block_idx24_val)&255);
   var $173=(($raw_header_i_i_i+3)|0);
   HEAP8[($173)]=$172;
   var $174=$block_idx24_val>>>8;
   var $175=(($174)&255);
   var $176=(($raw_header_i_i_i+2)|0);
   HEAP8[($176)]=$175;
   var $177=$block_idx24_val>>>16;
   var $178=(($177)&255);
   var $179=(($raw_header_i_i_i+1)|0);
   HEAP8[($179)]=$178;
   var $180=_fwrite($167,1,4,$166);
   var $181=($180|0)==4;
   if (!($181)) {
    HEAP32[(($123)>>2)]=8;
    var $183=HEAP32[(($tempfile)>>2)];
    var $184=($183|0)==0;
    if (!($184)) {
     var $186=_fclose($183);
     HEAP32[(($tempfile)>>2)]=0;
    }
    var $188=HEAP32[(($tempfilename)>>2)];
    var $189=($188|0)==0;
    if ($189) {
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
    }
    var $191=_unlink($188);
    var $192=HEAP32[(($tempfilename)>>2)];
    _free($192);
    HEAP32[(($tempfilename)>>2)]=0;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $194=HEAP32[(($tempfile)>>2)];
   var $195=$194;
   var $196=_write_metadata_block_data_cb_($195,(82),$block);
   var $197=($196|0)==0;
   var $__i=$197?8:0;
   HEAP32[(($123)>>2)]=$__i;
   if (!($197)) {
    break;
   }
   var $199=HEAP32[(($tempfile)>>2)];
   var $200=($199|0)==0;
   if (!($200)) {
    var $202=_fclose($199);
    HEAP32[(($tempfile)>>2)]=0;
   }
   var $204=HEAP32[(($tempfilename)>>2)];
   var $205=($204|0)==0;
   if ($205) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $207=_unlink($204);
   var $208=HEAP32[(($tempfilename)>>2)];
   _free($208);
   HEAP32[(($tempfilename)>>2)]=0;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $209=HEAP32[(($109)>>2)];
 var $210=(($iterator+100+($209<<2))|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=HEAP32[(($112)>>2)];
 var $213=((($211)+(4))|0);
 var $214=(($iterator+136)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=((($213)+($215))|0);
 var $217=_fseek($212,$216,0);
 var $218=($217|0)==0;
 if (!($218)) {
  var $220=HEAP32[(($tempfile)>>2)];
  var $221=($220|0)==0;
  if (!($221)) {
   var $223=_fclose($220);
   HEAP32[(($tempfile)>>2)]=0;
  }
  var $225=HEAP32[(($tempfilename)>>2)];
  var $226=($225|0)==0;
  if (!($226)) {
   var $228=_unlink($225);
   var $229=HEAP32[(($tempfilename)>>2)];
   _free($229);
   HEAP32[(($tempfilename)>>2)]=0;
  }
  HEAP32[(($123)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $231=HEAP32[(($112)>>2)];
 var $232=HEAP32[(($tempfile)>>2)];
 var $233=_feof($231);
 var $234=($233|0)==0;
 L2563: do {
  if ($234) {
   while(1) {
    var $235=_fread($140,1,8192,$231);
    var $cond_i_i=($235|0)==0;
    if ($cond_i_i) {
     var $237=_feof($231);
     var $238=($237|0)==0;
     if ($238) {
      var $storemerge61_i=6;
      break;
     }
    } else {
     var $240=_fwrite($140,1,$235,$232);
     var $241=($240|0)==($235|0);
     if (!($241)) {
      var $storemerge61_i=8;
      break;
     }
    }
    var $242=_feof($231);
    var $243=($242|0)==0;
    if (!($243)) {
     break L2563;
    }
   }
   var $storemerge61_i;
   HEAP32[(($123)>>2)]=$storemerge61_i;
   var $245=HEAP32[(($tempfile)>>2)];
   var $246=($245|0)==0;
   if (!($246)) {
    var $248=_fclose($245);
    HEAP32[(($tempfile)>>2)]=0;
   }
   var $250=HEAP32[(($tempfilename)>>2)];
   var $251=($250|0)==0;
   if ($251) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $253=_unlink($250);
   var $254=HEAP32[(($tempfilename)>>2)];
   _free($254);
   HEAP32[(($tempfilename)>>2)]=0;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $255=($fixup_is_last_code_037|0)==0;
 do {
  if (!($255)) {
   var $257=HEAP32[(($tempfile)>>2)];
   var $258=_fseek($257,$fixup_is_last_flag_offset_038,0);
   var $259=($258|0)==0;
   var $260=HEAP32[(($tempfile)>>2)];
   if (!($259)) {
    var $262=($260|0)==0;
    if (!($262)) {
     var $264=_fclose($260);
     HEAP32[(($tempfile)>>2)]=0;
    }
    var $266=HEAP32[(($tempfilename)>>2)];
    var $267=($266|0)==0;
    if (!($267)) {
     var $269=_unlink($266);
     var $270=HEAP32[(($tempfilename)>>2)];
     _free($270);
     HEAP32[(($tempfilename)>>2)]=0;
    }
    HEAP32[(($123)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $272=_fread($x_i,1,1,$260);
   var $273=($272|0)==1;
   if (!($273)) {
    var $275=HEAP32[(($tempfile)>>2)];
    var $276=($275|0)==0;
    if (!($276)) {
     var $278=_fclose($275);
     HEAP32[(($tempfile)>>2)]=0;
    }
    var $280=HEAP32[(($tempfilename)>>2)];
    var $281=($280|0)==0;
    if (!($281)) {
     var $283=_unlink($280);
     var $284=HEAP32[(($tempfilename)>>2)];
     _free($284);
     HEAP32[(($tempfilename)>>2)]=0;
    }
    HEAP32[(($123)>>2)]=6;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $286=($fixup_is_last_code_037|0)>0;
   var $287=HEAP8[($x_i)];
   var $288=$287|-128;
   var $289=$287&127;
   var $storemerge_i35=$286?$289:$288;
   HEAP8[($x_i)]=$storemerge_i35;
   var $290=HEAP32[(($tempfile)>>2)];
   var $291=_fseek($290,$fixup_is_last_flag_offset_038,0);
   var $292=($291|0)==0;
   var $293=HEAP32[(($tempfile)>>2)];
   if (!($292)) {
    var $295=($293|0)==0;
    if (!($295)) {
     var $297=_fclose($293);
     HEAP32[(($tempfile)>>2)]=0;
    }
    var $299=HEAP32[(($tempfilename)>>2)];
    var $300=($299|0)==0;
    if (!($300)) {
     var $302=_unlink($299);
     var $303=HEAP32[(($tempfilename)>>2)];
     _free($303);
     HEAP32[(($tempfilename)>>2)]=0;
    }
    HEAP32[(($123)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $305=_fwrite($x_i,1,1,$293);
   var $306=($305|0)==1;
   if ($306) {
    break;
   }
   var $308=HEAP32[(($tempfile)>>2)];
   var $309=($308|0)==0;
   if (!($309)) {
    var $311=_fclose($308);
    HEAP32[(($tempfile)>>2)]=0;
   }
   var $313=HEAP32[(($tempfilename)>>2)];
   var $314=($313|0)==0;
   if (!($314)) {
    var $316=_unlink($313);
    var $317=HEAP32[(($tempfilename)>>2)];
    _free($317);
    HEAP32[(($tempfilename)>>2)]=0;
   }
   HEAP32[(($123)>>2)]=8;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $319=HEAP32[(($112)>>2)];
 var $320=_fclose($319);
 var $321=HEAP32[(($119)>>2)];
 var $322=HEAP32[(($tempfile)>>2)];
 var $323=_fclose($322);
 HEAP32[(($tempfile)>>2)]=0;
 var $324=HEAP32[(($tempfilename)>>2)];
 var $325=_rename($324,$321);
 var $326=($325|0)==0;
 var $327=HEAP32[(($tempfile)>>2)];
 var $328=($327|0)==0;
 if (!($328)) {
  var $330=_fclose($327);
  HEAP32[(($tempfile)>>2)]=0;
 }
 var $332=HEAP32[(($tempfilename)>>2)];
 var $333=($332|0)==0;
 if (!($333)) {
  var $335=_unlink($332);
  var $336=HEAP32[(($tempfilename)>>2)];
  _free($336);
  HEAP32[(($tempfilename)>>2)]=0;
 }
 if (!($326)) {
  HEAP32[(($123)>>2)]=9;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $338=(($iterator+88)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=($339|0)==0;
 if (!($340)) {
  var $342=HEAP32[(($119)>>2)];
  var $343=(($iterator+12)|0);
  _set_file_stats_($342,$343);
 }
 var $345=(($iterator+92)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 var $348=($347&1);
 var $349=_simple_iterator_prime_input_($iterator,$348);
 var $350=($349|0)==0;
 if ($350) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 L2636: do {
  if ($164) {
   while(1) {
    var $352=HEAP32[(($109)>>2)];
    var $353=(($iterator+100+($352<<2))|0);
    var $354=HEAP32[(($353)>>2)];
    var $355=((($354)+(4))|0);
    var $356=HEAP32[(($214)>>2)];
    var $357=((($355)+($356))|0);
    var $358=($357|0)<($211|0);
    if (!($358)) {
     break L2636;
    }
    var $360=_FLAC__metadata_simple_iterator_next($iterator);
    var $361=($360|0)==0;
    if ($361) {
     var $_0=0;
     break;
    }
   }
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $363=(($iterator+100)|0);
   HEAP32[(($363)>>2)]=$211;
   var $364=HEAP32[(($109)>>2)];
   var $365=HEAP32[(($112)>>2)];
   var $366=(($iterator+100+($364<<2))|0);
   var $367=HEAP32[(($366)>>2)];
   var $368=_fseek($365,$367,0);
   var $369=($368|0)==0;
   if (!($369)) {
    HEAP32[(($123)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $372=HEAP32[(($112)>>2)];
   var $373=(($raw_header_i_i_i)|0);
   var $374=_fread($373,1,4,$372);
   var $375=($374|0)==4;
   if ($375) {
    var $376=(($iterator+132)|0);
    var $377=HEAP8[($373)];
    var $_lobit_i_i_i_i=($377&255)>>>7;
    var $378=($_lobit_i_i_i_i&255);
    HEAP32[(($1)>>2)]=$378;
    var $379=($377&255);
    var $380=$379&127;
    HEAP32[(($376)>>2)]=$380;
    var $381=(($raw_header_i_i_i+1)|0);
    var $382=(($raw_header_i_i_i+2)|0);
    var $383=HEAP8[($381)];
    var $384=($383&255);
    var $385=$384<<8;
    var $386=(($raw_header_i_i_i+3)|0);
    var $387=HEAP8[($382)];
    var $388=($387&255);
    var $389=$388|$385;
    var $390=$389<<8;
    var $391=HEAP8[($386)];
    var $392=($391&255);
    var $393=$390|$392;
    HEAP32[(($214)>>2)]=$393;
    break;
   }
   HEAP32[(($123)>>2)]=6;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 if ($110) {
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $396=_FLAC__metadata_simple_iterator_next($iterator);
 var $_0=$396;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_simple_iterator_insert_block_after($iterator,$block,$use_padding){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $raw_header_i_i_i=sp;
 var $1=(($iterator+92)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if ($3) {
  var $_029=0;
  var $_029;
  STACKTOP=sp;return $_029;
 }
 var $5=(($block)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if ($7) {
  var $9=(($iterator+96)|0);
  HEAP32[(($9)>>2)]=1;
  var $_029=0;
  var $_029;
  STACKTOP=sp;return $_029;
 }
 var $11=(($iterator+128)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($block+4)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=($use_padding|0)==0;
 do {
  if (!($14)) {
   var $16=HEAP32[(($11)>>2)];
   var $17=($16|0)==0;
   if (!($17)) {
    break;
   }
   var $19=(($iterator+124)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($iterator+100+($20<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($20)+(1))|0);
   var $24=(($iterator+100+($23<<2))|0);
   HEAP32[(($24)>>2)]=$22;
   var $25=HEAP32[(($19)>>2)];
   var $26=((($25)+(1))|0);
   HEAP32[(($19)>>2)]=$26;
   var $27=_FLAC__metadata_simple_iterator_next($iterator);
   var $28=($27|0)==0;
   if ($28) {
    var $30=HEAP32[(($19)>>2)];
    var $31=((($30)-(1))|0);
    HEAP32[(($19)>>2)]=$31;
    var $32=(($iterator)|0);
    var $33=HEAP32[(($32)>>2)];
    var $34=(($iterator+100+($31<<2))|0);
    var $35=HEAP32[(($34)>>2)];
    var $36=_fseek($33,$35,0);
    var $37=($36|0)==0;
    if (!($37)) {
     var $39=(($iterator+96)|0);
     HEAP32[(($39)>>2)]=7;
     var $_029=0;
     var $_029;
     STACKTOP=sp;return $_029;
    }
    var $41=HEAP32[(($32)>>2)];
    var $42=(($raw_header_i_i_i)|0);
    var $43=_fread($42,1,4,$41);
    var $44=($43|0)==4;
    if ($44) {
     var $45=(($iterator+136)|0);
     var $46=(($iterator+132)|0);
     var $47=HEAP8[($42)];
     var $_lobit_i_i_i=($47&255)>>>7;
     var $48=($_lobit_i_i_i&255);
     HEAP32[(($11)>>2)]=$48;
     var $49=($47&255);
     var $50=$49&127;
     HEAP32[(($46)>>2)]=$50;
     var $51=(($raw_header_i_i_i+1)|0);
     var $52=(($raw_header_i_i_i+2)|0);
     var $53=HEAP8[($51)];
     var $54=($53&255);
     var $55=$54<<8;
     var $56=(($raw_header_i_i_i+3)|0);
     var $57=HEAP8[($52)];
     var $58=($57&255);
     var $59=$58|$55;
     var $60=$59<<8;
     var $61=HEAP8[($56)];
     var $62=($61&255);
     var $63=$60|$62;
     HEAP32[(($45)>>2)]=$63;
     var $_029=0;
     var $_029;
     STACKTOP=sp;return $_029;
    } else {
     var $65=(($iterator+96)|0);
     HEAP32[(($65)>>2)]=6;
     var $_029=0;
     var $_029;
     STACKTOP=sp;return $_029;
    }
   }
   var $67=(($iterator+132)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=($68|0)==1;
   do {
    if ($69) {
     var $71=(($iterator+136)|0);
     var $72=HEAP32[(($71)>>2)];
     var $73=(($block+8)|0);
     var $74=HEAP32[(($73)>>2)];
     var $75=($72|0)==($74|0);
     if ($75) {
      var $77=HEAP32[(($11)>>2)];
      HEAP32[(($13)>>2)]=$77;
      var $padding_is_last_0=0;var $padding_leftover_0=0;var $_0=$use_padding;
      break;
     }
     var $79=((($74)+(4))|0);
     var $80=($72>>>0)<($79>>>0);
     if ($80) {
      var $padding_is_last_0=0;var $padding_leftover_0=0;var $_0=0;
      break;
     }
     var $82=((($72)-($74))|0);
     var $83=HEAP32[(($11)>>2)];
     HEAP32[(($13)>>2)]=0;
     var $padding_is_last_0=$83;var $padding_leftover_0=$82;var $_0=$use_padding;
    } else {
     var $padding_is_last_0=0;var $padding_leftover_0=0;var $_0=0;
    }
   } while(0);
   var $_0;
   var $padding_leftover_0;
   var $padding_is_last_0;
   var $85=HEAP32[(($19)>>2)];
   var $86=((($85)-(1))|0);
   HEAP32[(($19)>>2)]=$86;
   var $87=(($iterator)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($iterator+100+($86<<2))|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=_fseek($88,$90,0);
   var $92=($91|0)==0;
   if (!($92)) {
    var $94=(($iterator+96)|0);
    HEAP32[(($94)>>2)]=7;
    var $_029=0;
    var $_029;
    STACKTOP=sp;return $_029;
   }
   var $96=HEAP32[(($87)>>2)];
   var $97=(($raw_header_i_i_i)|0);
   var $98=_fread($97,1,4,$96);
   var $99=($98|0)==4;
   if (!($99)) {
    var $101=(($iterator+96)|0);
    HEAP32[(($101)>>2)]=6;
    var $_029=0;
    var $_029;
    STACKTOP=sp;return $_029;
   }
   var $103=(($iterator+136)|0);
   var $104=HEAP8[($97)];
   var $_lobit_i_i_i31=($104&255)>>>7;
   var $105=($_lobit_i_i_i31&255);
   HEAP32[(($11)>>2)]=$105;
   var $106=($104&255);
   var $107=$106&127;
   HEAP32[(($67)>>2)]=$107;
   var $108=(($raw_header_i_i_i+1)|0);
   var $109=(($raw_header_i_i_i+2)|0);
   var $110=HEAP8[($108)];
   var $111=($110&255);
   var $112=$111<<8;
   var $113=(($raw_header_i_i_i+3)|0);
   var $114=HEAP8[($109)];
   var $115=($114&255);
   var $116=$115|$112;
   var $117=$116<<8;
   var $118=HEAP8[($113)];
   var $119=($118&255);
   var $120=$117|$119;
   HEAP32[(($103)>>2)]=$120;
   var $121=($_0|0)==0;
   if ($121) {
    break;
   }
   var $123=_FLAC__metadata_simple_iterator_next($iterator);
   var $124=($123|0)==0;
   if ($124) {
    var $_029=0;
    var $_029;
    STACKTOP=sp;return $_029;
   }
   var $126=($padding_leftover_0|0)==0;
   if ($126) {
    var $128=_write_metadata_block_stationary_($iterator,$block);
    var $_029=$128;
    var $_029;
    STACKTOP=sp;return $_029;
   } else {
    var $130=((($padding_leftover_0)-(4))|0);
    var $131=_write_metadata_block_stationary_with_padding_($iterator,$block,$130,$padding_is_last_0);
    var $_029=$131;
    var $_029;
    STACKTOP=sp;return $_029;
   }
  }
 } while(0);
 var $132=_rewrite_whole_file_($iterator,$block,1);
 var $_029=$132;
 var $_029;
 STACKTOP=sp;return $_029;
}
function _FLAC__metadata_simple_iterator_delete_block($iterator,$use_padding){
 var label=0;
 var $1=(($iterator+132)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if ($3) {
  var $5=(($iterator+96)|0);
  HEAP32[(($5)>>2)]=1;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=($use_padding|0)==0;
 if ($7) {
  var $45=_rewrite_whole_file_($iterator,0,0);
  var $_0=$45;
  var $_0;
  return $_0;
 }
 var $9=_FLAC__metadata_object_new(1);
 var $10=($9|0)==0;
 if ($10) {
  var $12=(($iterator+96)|0);
  HEAP32[(($12)>>2)]=11;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $14=(($iterator+136)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($9+8)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($iterator+92)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==0;
 L2717: do {
  if ($19) {
   var $21=(($iterator+96)|0);
   HEAP32[(($21)>>2)]=4;
  } else {
   var $23=HEAP32[(($1)>>2)];
   var $24=($23|0)==0;
   var $_phi_trans_insert_i=(($9)|0);
   var $_pre_i=HEAP32[(($_phi_trans_insert_i)>>2)];
   if ($24) {
    var $27=$_pre_i;
    label = 1987;
   } else {
    var $26=($_pre_i|0)==0;
    if ($26) {
     var $27=0;
     label = 1987;
    }
   }
   do {
    if (label == 1987) {
     var $27;
     var $28=($23|0)==($27|0);
     if ($28) {
      break;
     }
     var $30=(($iterator+96)|0);
     HEAP32[(($30)>>2)]=1;
     break L2717;
    }
   } while(0);
   var $32=(($iterator+128)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($9+4)|0);
   HEAP32[(($34)>>2)]=$33;
   var $35=HEAP32[(($14)>>2)];
   var $36=($35|0)==($15|0);
   if ($36) {
    var $38=_write_metadata_block_stationary_($iterator,$9);
    var $_0_i=$38;
   } else {
    var $40=_rewrite_whole_file_($iterator,$9,0);
    var $_0_i=$40;
   }
   var $_0_i;
   var $41=($_0_i|0)==0;
   _FLAC__metadata_object_delete($9);
   if ($41) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $43=_FLAC__metadata_simple_iterator_prev($iterator);
   var $not_=($43|0)!=0;
   var $_=($not_&1);
   var $_0=$_;
   var $_0;
   return $_0;
  }
 } while(0);
 _FLAC__metadata_object_delete($9);
 var $_0=0;
 var $_0;
 return $_0;
}
function _FLAC__metadata_chain_new(){
 var label=0;
 var $1=_calloc(1,44);
 var $2=$1;
 var $3=($1|0)==0;
 if ($3) {
  return $2;
 }
 var $5=(($1+32)|0);
 var $6=$5;
 HEAP32[(($6)>>2)]=0;
 var $7=(($1+40)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0; HEAP32[((($1)+(12))>>2)]=0; HEAP32[((($1)+(16))>>2)]=0; HEAP32[((($1)+(20))>>2)]=0;
 return $2;
}
function _FLAC__metadata_chain_delete($chain){
 var label=0;
 var $1=(($chain+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $node_06_i=$2;
  while(1) {
   var $node_06_i;
   var $4=(($node_06_i+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($node_06_i)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=($7|0)==0;
   if (!($8)) {
    _FLAC__metadata_object_delete($7);
   }
   var $10=$node_06_i;
   _free($10);
   var $11=($5|0)==0;
   if ($11) {
    break;
   } else {
    var $node_06_i=$5;
   }
  }
 }
 var $12=(($chain)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if ($14) {
  var $16=$chain;
  _free($16);
  return;
 }
 _free($13);
 var $16=$chain;
 _free($16);
 return;
}
function _FLAC__metadata_chain_status($chain){
 var label=0;
 var $1=(($chain+20)|0);
 var $2=HEAP32[(($1)>>2)];
 HEAP32[(($1)>>2)]=0;
 return $2;
}
function _FLAC__metadata_chain_read($chain,$filename){
 var label=0;
 var $1=(($chain+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $node_06_i=$2;
  while(1) {
   var $node_06_i;
   var $4=(($node_06_i+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($node_06_i)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=($7|0)==0;
   if (!($8)) {
    _FLAC__metadata_object_delete($7);
   }
   var $10=$node_06_i;
   _free($10);
   var $11=($5|0)==0;
   if ($11) {
    break;
   } else {
    var $node_06_i=$5;
   }
  }
 }
 var $12=(($chain)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if (!($14)) {
  _free($13);
 }
 var $16=(($chain+32)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=(($chain+40)|0);
 HEAP32[(($17)>>2)]=0;
 var $18=$chain;
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0; HEAP32[((($18)+(12))>>2)]=0; HEAP32[((($18)+(16))>>2)]=0; HEAP32[((($18)+(20))>>2)]=0;
 var $19=_strdup($filename);
 HEAP32[(($12)>>2)]=$19;
 var $20=($19|0)==0;
 if ($20) {
  var $22=(($chain+20)|0);
  HEAP32[(($22)>>2)]=11;
  var $_0_i=0;
  var $_0_i;
  return $_0_i;
 }
 var $24=(($chain+4)|0);
 HEAP32[(($24)>>2)]=0;
 var $25=_fopen($filename,2880);
 var $26=($25|0)==0;
 if ($26) {
  var $28=(($chain+20)|0);
  HEAP32[(($28)>>2)]=2;
  var $_0_i=0;
  var $_0_i;
  return $_0_i;
 } else {
  var $30=$25;
  var $31=_chain_read_cb_($chain,$30,(12),66,68);
  var $32=_fclose($25);
  var $_0_i=$31;
  var $_0_i;
  return $_0_i;
 }
}
function _FLAC__metadata_chain_read_ogg($chain,$filename){
 var label=0;
 var $1=(($chain+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $node_06_i=$2;
  while(1) {
   var $node_06_i;
   var $4=(($node_06_i+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($node_06_i)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=($7|0)==0;
   if (!($8)) {
    _FLAC__metadata_object_delete($7);
   }
   var $10=$node_06_i;
   _free($10);
   var $11=($5|0)==0;
   if ($11) {
    break;
   } else {
    var $node_06_i=$5;
   }
  }
 }
 var $12=(($chain)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if (!($14)) {
  _free($13);
 }
 var $16=(($chain+32)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=(($chain+40)|0);
 HEAP32[(($17)>>2)]=0;
 var $18=$chain;
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0; HEAP32[((($18)+(12))>>2)]=0; HEAP32[((($18)+(16))>>2)]=0; HEAP32[((($18)+(20))>>2)]=0;
 var $19=_strdup($filename);
 HEAP32[(($12)>>2)]=$19;
 var $20=($19|0)==0;
 if ($20) {
  var $22=(($chain+20)|0);
  HEAP32[(($22)>>2)]=11;
  var $_0_i=0;
  var $_0_i;
  return $_0_i;
 }
 var $24=(($chain+4)|0);
 HEAP32[(($24)>>2)]=1;
 var $25=_fopen($filename,2880);
 var $26=($25|0)==0;
 if ($26) {
  var $28=(($chain+20)|0);
  HEAP32[(($28)>>2)]=2;
  var $_0_i=0;
  var $_0_i;
  return $_0_i;
 } else {
  var $30=$25;
  var $31=_chain_read_ogg_cb_($chain,$30,(12));
  var $32=_fclose($25);
  var $_0_i=$31;
  var $_0_i;
  return $_0_i;
 }
}
function _FLAC__metadata_chain_read_with_callbacks($chain,$handle,$callbacks){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $callbacks; $callbacks=STACKTOP;STACKTOP = (STACKTOP + 24)|0;HEAP32[(($callbacks)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($callbacks)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($callbacks)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($callbacks)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($callbacks)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($callbacks)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 var $1=_chain_read_with_callbacks_($chain,$handle,$callbacks,0);
 STACKTOP=sp;return $1;
}
function _chain_read_with_callbacks_($chain,$handle,$callbacks,$is_ogg){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $callbacks; $callbacks=STACKTOP;STACKTOP = (STACKTOP + 24)|0;HEAP32[(($callbacks)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($callbacks)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($callbacks)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($callbacks)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($callbacks)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($callbacks)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 var $1=(($chain+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $node_06_i=$2;
  while(1) {
   var $node_06_i;
   var $4=(($node_06_i+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($node_06_i)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=($7|0)==0;
   if (!($8)) {
    _FLAC__metadata_object_delete($7);
   }
   var $10=$node_06_i;
   _free($10);
   var $11=($5|0)==0;
   if ($11) {
    break;
   } else {
    var $node_06_i=$5;
   }
  }
 }
 var $12=(($chain)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if (!($14)) {
  _free($13);
 }
 var $16=(($chain+32)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=(($chain+40)|0);
 HEAP32[(($17)>>2)]=0;
 var $18=$chain;
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0; HEAP32[((($18)+(12))>>2)]=0; HEAP32[((($18)+(16))>>2)]=0; HEAP32[((($18)+(20))>>2)]=0;
 var $19=(($callbacks)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 do {
  if (!($21)) {
   var $23=(($callbacks+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=($24|0)==0;
   if ($25) {
    break;
   }
   var $27=(($callbacks+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=($28|0)==0;
   if ($29) {
    break;
   }
   var $33=(($chain+4)|0);
   HEAP32[(($33)>>2)]=$is_ogg;
   var $$etemp$0$0=0;
   var $$etemp$0$1=0;
   var $34=FUNCTION_TABLE[$24]($handle,$$etemp$0$0,$$etemp$0$1,0);
   var $35=($34|0)==0;
   if (!($35)) {
    var $37=(($chain+20)|0);
    HEAP32[(($37)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $39=($is_ogg|0)==0;
   if ($39) {
    var $43=_chain_read_cb_($chain,$handle,$20,$24,$28);
    var $_0=$43;
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $41=_chain_read_ogg_cb_($chain,$handle,$20);
    var $_0=$41;
    var $_0;
    STACKTOP=sp;return $_0;
   }
  }
 } while(0);
 var $31=(($chain+20)|0);
 HEAP32[(($31)>>2)]=13;
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_chain_read_ogg_with_callbacks($chain,$handle,$callbacks){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $callbacks; $callbacks=STACKTOP;STACKTOP = (STACKTOP + 24)|0;HEAP32[(($callbacks)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($callbacks)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($callbacks)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($callbacks)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($callbacks)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($callbacks)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 var $callbacks2_sroa_0_0_tmp3_idx=(($callbacks)|0);
 var $callbacks2_sroa_0_0_copyload=((((HEAPU8[($callbacks2_sroa_0_0_tmp3_idx)])|(HEAPU8[((($callbacks2_sroa_0_0_tmp3_idx)+(1))|0)]<<8)|(HEAPU8[((($callbacks2_sroa_0_0_tmp3_idx)+(2))|0)]<<16)|(HEAPU8[((($callbacks2_sroa_0_0_tmp3_idx)+(3))|0)]<<24))|0));
 var $callbacks2_sroa_2_8_tmp3_idx5=(($callbacks+8)|0);
 var $callbacks2_sroa_2_8_copyload=((((HEAPU8[($callbacks2_sroa_2_8_tmp3_idx5)])|(HEAPU8[((($callbacks2_sroa_2_8_tmp3_idx5)+(1))|0)]<<8)|(HEAPU8[((($callbacks2_sroa_2_8_tmp3_idx5)+(2))|0)]<<16)|(HEAPU8[((($callbacks2_sroa_2_8_tmp3_idx5)+(3))|0)]<<24))|0));
 var $callbacks2_sroa_3_12_tmp3_idx6=(($callbacks+12)|0);
 var $callbacks2_sroa_3_12_copyload=((((HEAPU8[($callbacks2_sroa_3_12_tmp3_idx6)])|(HEAPU8[((($callbacks2_sroa_3_12_tmp3_idx6)+(1))|0)]<<8)|(HEAPU8[((($callbacks2_sroa_3_12_tmp3_idx6)+(2))|0)]<<16)|(HEAPU8[((($callbacks2_sroa_3_12_tmp3_idx6)+(3))|0)]<<24))|0));
 var $1=(($chain+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $node_06_i_i=$2;
  while(1) {
   var $node_06_i_i;
   var $4=(($node_06_i_i+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($node_06_i_i)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=($7|0)==0;
   if (!($8)) {
    _FLAC__metadata_object_delete($7);
   }
   var $10=$node_06_i_i;
   _free($10);
   var $11=($5|0)==0;
   if ($11) {
    break;
   } else {
    var $node_06_i_i=$5;
   }
  }
 }
 var $12=(($chain)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if (!($14)) {
  _free($13);
 }
 var $16=(($chain+32)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=(($chain+40)|0);
 HEAP32[(($17)>>2)]=0;
 var $18=$chain;
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0; HEAP32[((($18)+(12))>>2)]=0; HEAP32[((($18)+(16))>>2)]=0; HEAP32[((($18)+(20))>>2)]=0;
 var $19=($callbacks2_sroa_0_0_copyload|0)==0;
 var $20=($callbacks2_sroa_2_8_copyload|0)==0;
 var $or_cond=$19|$20;
 var $21=($callbacks2_sroa_3_12_copyload|0)==0;
 var $or_cond7=$or_cond|$21;
 if ($or_cond7) {
  var $23=(($chain+20)|0);
  HEAP32[(($23)>>2)]=13;
  var $_0_i=0;
  var $_0_i;
  STACKTOP=sp;return $_0_i;
 }
 var $25=(($chain+4)|0);
 HEAP32[(($25)>>2)]=1;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $26=FUNCTION_TABLE[$callbacks2_sroa_2_8_copyload]($handle,$$etemp$0$0,$$etemp$0$1,0);
 var $27=($26|0)==0;
 if ($27) {
  var $31=_chain_read_ogg_cb_($chain,$handle,$callbacks2_sroa_0_0_copyload);
  var $_0_i=$31;
  var $_0_i;
  STACKTOP=sp;return $_0_i;
 } else {
  var $29=(($chain+20)|0);
  HEAP32[(($29)>>2)]=7;
  var $_0_i=0;
  var $_0_i;
  STACKTOP=sp;return $_0_i;
 }
}
function _FLAC__metadata_chain_check_if_tempfile_needed($chain,$use_padding){
 var label=0;
 var $1=(($chain+8)|0);
 var $node_04_i=HEAP32[(($1)>>2)];
 var $2=($node_04_i|0)==0;
 if ($2) {
  var $length_0_lcssa_i=0;
 } else {
  var $length_05_i=0;var $node_06_i=$node_04_i;
  while(1) {
   var $node_06_i;
   var $length_05_i;
   var $3=(($node_06_i)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=((($length_05_i)+(4))|0);
   var $8=((($7)+($6))|0);
   var $9=(($node_06_i+8)|0);
   var $node_0_i=HEAP32[(($9)>>2)];
   var $10=($node_0_i|0)==0;
   if ($10) {
    var $length_0_lcssa_i=$8;
    break;
   } else {
    var $length_05_i=$8;var $node_06_i=$node_0_i;
   }
  }
 }
 var $length_0_lcssa_i;
 var $11=($use_padding|0)==0;
 var $_phi_trans_insert=(($chain+32)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 do {
  if (!($11)) {
   var $13=($length_0_lcssa_i|0)<($_pre|0);
   do {
    if ($13) {
     var $15=(($chain+12)|0);
     var $16=HEAP32[(($15)>>2)];
     var $17=(($16)|0);
     var $18=HEAP32[(($17)>>2)];
     var $19=(($18)|0);
     var $20=HEAP32[(($19)>>2)];
     var $21=($20|0)==1;
     if ($21) {
      var $_0=0;
     } else {
      break;
     }
     var $_0;
     return $_0;
    }
   } while(0);
   var $23=((($length_0_lcssa_i)+(4))|0);
   var $24=($23|0)>($_pre|0);
   if (!($24)) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $26=($length_0_lcssa_i|0)>($_pre|0);
   if (!($26)) {
    break;
   }
   var $28=((($length_0_lcssa_i)-($_pre))|0);
   var $29=(($chain+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=($34|0)==1;
   if (!($35)) {
    break;
   }
   var $37=(($32+8)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=((($38)+(4))|0);
   var $40=($39|0)!=($28|0);
   var $41=($38|0)<($28|0);
   var $or_cond=$40&$41;
   if ($or_cond) {
    break;
   } else {
    var $_0=0;
   }
   var $_0;
   return $_0;
  }
 } while(0);
 var $42=($length_0_lcssa_i|0)!=($_pre|0);
 var $43=($42&1);
 var $_0=$43;
 var $_0;
 return $_0;
}
function _FLAC__metadata_chain_write($chain,$use_padding,$preserve_file_stats){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8280)|0;
 var $buffer_i_i20=sp;
 var $buffer_i_i=(sp)+(8192);
 var $stats=(sp)+(8200);
 var $1=(($chain+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $5=(($chain+20)|0);
  HEAP32[(($5)>>2)]=12;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $7=(($chain)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if ($9) {
  var $11=(($chain+20)|0);
  HEAP32[(($11)>>2)]=14;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $13=_chain_prepare_for_write_($chain,$use_padding);
 var $14=($13|0)==0;
 if ($14) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $16=($preserve_file_stats|0)!=0;
 if ($16) {
  var $18=HEAP32[(($7)>>2)];
  var $19=_stat($18,$stats);
 }
 var $21=(($chain+32)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($13|0)==($22|0);
 var $24=HEAP32[(($7)>>2)];
 L2875: do {
  if ($23) {
   var $26=_fopen($24,2824);
   var $27=($26|0)==0;
   if ($27) {
    var $28=(($chain+20)|0);
    HEAP32[(($28)>>2)]=2;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $30=$26;
   var $31=(($chain+24)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=_fseek($26,$32,0);
   var $34=($33|0)==0;
   do {
    if ($34) {
     var $38=(($chain+8)|0);
     var $39=(($buffer_i_i)|0);
     var $40=(($buffer_i_i+3)|0);
     var $41=(($buffer_i_i+2)|0);
     var $42=(($buffer_i_i+1)|0);
     var $node_0_in_i_i=$38;
     while(1) {
      var $node_0_in_i_i;
      var $node_0_i_i=HEAP32[(($node_0_in_i_i)>>2)];
      var $44=($node_0_i_i|0)==0;
      if ($44) {
       label = 2117;
       break;
      }
      var $46=(($node_0_i_i)|0);
      var $47=HEAP32[(($46)>>2)];
      var $_idx_i_i=(($47)|0);
      var $_idx_val_i_i=HEAP32[(($_idx_i_i)>>2)];
      var $_idx15_i_i=(($47+4)|0);
      var $_idx15_val_i_i=HEAP32[(($_idx15_i_i)>>2)];
      var $_idx16_i_i=(($47+8)|0);
      var $_idx16_val_i_i=HEAP32[(($_idx16_i_i)>>2)];
      var $48=($_idx15_val_i_i|0)!=0;
      var $49=$48?128:0;
      var $50=$49|$_idx_val_i_i;
      var $51=(($50)&255);
      HEAP8[($39)]=$51;
      var $52=(($_idx16_val_i_i)&255);
      HEAP8[($40)]=$52;
      var $53=$_idx16_val_i_i>>>8;
      var $54=(($53)&255);
      HEAP8[($41)]=$54;
      var $55=$_idx16_val_i_i>>>16;
      var $56=(($55)&255);
      HEAP8[($42)]=$56;
      var $57=_fwrite($39,1,4,$26);
      var $58=($57|0)==4;
      if (!($58)) {
       label = 2114;
       break;
      }
      var $62=HEAP32[(($46)>>2)];
      var $63=_write_metadata_block_data_cb_($30,(82),$62);
      var $64=($63|0)==0;
      var $65=(($node_0_i_i+8)|0);
      if ($64) {
       label = 2116;
       break;
      } else {
       var $node_0_in_i_i=$65;
      }
     }
     if (label == 2114) {
      var $60=(($chain+20)|0);
      HEAP32[(($60)>>2)]=8;
      var $_0_i_i=1;
      break;
     }
     else if (label == 2116) {
      var $67=(($chain+20)|0);
      HEAP32[(($67)>>2)]=8;
      var $_0_i_i=1;
      break;
     }
     else if (label == 2117) {
      var $69=(($chain+20)|0);
      HEAP32[(($69)>>2)]=0;
      var $_0_i_i=0;
      break;
     }
    } else {
     var $36=(($chain+20)|0);
     HEAP32[(($36)>>2)]=7;
     var $_0_i_i=1;
    }
   } while(0);
   var $_0_i_i;
   var $70=_fclose($26);
   var $_not=$16^1;
   var $brmerge=$_0_i_i|$_not;
   var $71=($_0_i_i&1);
   var $_mux=$71^1;
   if ($brmerge) {
    var $_0=$_mux;
   } else {
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $73=_fopen($24,2880);
   var $74=($73|0)==0;
   if ($74) {
    var $76=(($chain+20)|0);
    HEAP32[(($76)>>2)]=2;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $78=HEAP32[(($7)>>2)];
   var $79=_strlen($78);
   var $80=((($79)+(15))|0);
   var $81=($80|0)==0;
   var $82=($81&1);
   var $_size_i_i_i=((($82)+($80))|0);
   var $83=_malloc($_size_i_i_i);
   var $84=($83|0)==0;
   do {
    if ($84) {
     var $status_0_load1931_ph_i=11;
     label = 2123;
    } else {
     _local_snprintf($83,$80,3128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$78,HEAP32[(((tempVarArgs)+(8))>>2)]=3256,tempVarArgs)); STACKTOP=tempVarArgs;
     var $86=_fopen($83,2936);
     var $87=($86|0)==0;
     if ($87) {
      var $status_0_load1931_ph_i=2;
      label = 2123;
      break;
     }
     var $91=(($chain+24)|0);
     var $92=HEAP32[(($91)>>2)];
     var $93=(($buffer_i_i20)|0);
     var $_013_i_i=$92;
     while(1) {
      var $_013_i_i;
      var $95=($_013_i_i|0)>0;
      if (!($95)) {
       label = 2129;
       break;
      }
      var $97=($_013_i_i>>>0)>8192;
      var $98=$97?8192:$_013_i_i;
      var $99=_fread($93,1,$98,$73);
      var $100=($99|0)==($98|0);
      if (!($100)) {
       var $status_0_load1932_ph_i=6;
       label = 2128;
       break;
      }
      var $102=_fwrite($93,1,$98,$86);
      var $103=($102|0)==($98|0);
      var $104=((($_013_i_i)-($98))|0);
      if ($103) {
       var $_013_i_i=$104;
      } else {
       var $status_0_load1932_ph_i=8;
       label = 2128;
       break;
      }
     }
     L2906: do {
      if (label == 2128) {
       var $status_0_load1932_ph_i;
       var $106=(($chain+20)|0);
       HEAP32[(($106)>>2)]=$status_0_load1932_ph_i;
      }
      else if (label == 2129) {
       var $108=(($chain+8)|0);
       var $109=(($buffer_i_i)|0);
       var $110=(($buffer_i_i+3)|0);
       var $111=(($buffer_i_i+2)|0);
       var $112=(($buffer_i_i+1)|0);
       var $113=$86;
       var $node_0_in_i=$108;
       while(1) {
        var $node_0_in_i;
        var $node_0_i=HEAP32[(($node_0_in_i)>>2)];
        var $115=($node_0_i|0)==0;
        if ($115) {
         label = 2135;
         break;
        }
        var $117=(($node_0_i)|0);
        var $118=HEAP32[(($117)>>2)];
        var $_idx_i=(($118)|0);
        var $_idx_val_i=HEAP32[(($_idx_i)>>2)];
        var $_idx1_i=(($118+4)|0);
        var $_idx1_val_i=HEAP32[(($_idx1_i)>>2)];
        var $_idx2_i=(($118+8)|0);
        var $_idx2_val_i=HEAP32[(($_idx2_i)>>2)];
        var $119=($_idx1_val_i|0)!=0;
        var $120=$119?128:0;
        var $121=$120|$_idx_val_i;
        var $122=(($121)&255);
        HEAP8[($109)]=$122;
        var $123=(($_idx2_val_i)&255);
        HEAP8[($110)]=$123;
        var $124=$_idx2_val_i>>>8;
        var $125=(($124)&255);
        HEAP8[($111)]=$125;
        var $126=$_idx2_val_i>>>16;
        var $127=(($126)&255);
        HEAP8[($112)]=$127;
        var $128=_fwrite($109,1,4,$86);
        var $129=($128|0)==4;
        if (!($129)) {
         label = 2132;
         break;
        }
        var $133=HEAP32[(($117)>>2)];
        var $134=_write_metadata_block_data_cb_($113,(82),$133);
        var $135=($134|0)==0;
        var $136=(($node_0_i+8)|0);
        if ($135) {
         label = 2134;
         break;
        } else {
         var $node_0_in_i=$136;
        }
       }
       if (label == 2132) {
        var $131=(($chain+20)|0);
        HEAP32[(($131)>>2)]=8;
        break;
       }
       else if (label == 2134) {
        var $138=(($chain+20)|0);
        HEAP32[(($138)>>2)]=8;
        break;
       }
       else if (label == 2135) {
        var $140=(($chain+28)|0);
        var $141=HEAP32[(($140)>>2)];
        var $142=_fseek($73,$141,0);
        var $143=($142|0)==0;
        if (!($143)) {
         var $145=(($chain+20)|0);
         HEAP32[(($145)>>2)]=7;
         break;
        }
        var $147=_feof($73);
        var $148=($147|0)==0;
        L2920: do {
         if ($148) {
          while(1) {
           var $149=_fread($93,1,8192,$73);
           var $cond_i_i=($149|0)==0;
           if ($cond_i_i) {
            var $151=_feof($73);
            var $152=($151|0)==0;
            if ($152) {
             var $status_0_load1935_ph_i=6;
             break;
            }
           } else {
            var $154=_fwrite($93,1,$149,$86);
            var $155=($154|0)==($149|0);
            if (!($155)) {
             var $status_0_load1935_ph_i=8;
             break;
            }
           }
           var $156=_feof($73);
           var $157=($156|0)==0;
           if (!($157)) {
            break L2920;
           }
          }
          var $status_0_load1935_ph_i;
          var $159=(($chain+20)|0);
          HEAP32[(($159)>>2)]=$status_0_load1935_ph_i;
          break L2906;
         }
        } while(0);
        var $166=_fclose($73);
        var $167=HEAP32[(($7)>>2)];
        var $168=_fclose($86);
        var $169=_rename($83,$167);
        var $170=_unlink($83);
        _free($83);
        var $not__i=($169|0)==0;
        if (!($not__i)) {
         var $_0=0;
         var $_0;
         STACKTOP=sp;return $_0;
        }
        HEAP32[(($21)>>2)]=$13;
        var $172=HEAP32[(($91)>>2)];
        HEAP32[(($140)>>2)]=$172;
        var $node_025=HEAP32[(($108)>>2)];
        var $173=($node_025|0)==0;
        if (!($173)) {
         var $node_026=$node_025;var $174=$172;
         while(1) {
          var $174;
          var $node_026;
          var $175=(($node_026)|0);
          var $176=HEAP32[(($175)>>2)];
          var $177=(($176+8)|0);
          var $178=HEAP32[(($177)>>2)];
          var $179=((($178)+(4))|0);
          var $180=((($179)+($174))|0);
          HEAP32[(($140)>>2)]=$180;
          var $181=(($node_026+8)|0);
          var $node_0=HEAP32[(($181)>>2)];
          var $182=($node_0|0)==0;
          if ($182) {
           break;
          } else {
           var $node_026=$node_0;var $174=$180;
          }
         }
        }
        if ($16) {
         break L2875;
        } else {
         var $_0=1;
        }
        var $_0;
        STACKTOP=sp;return $_0;
       }
      }
     } while(0);
     var $161=_fclose($73);
     var $162=_fclose($86);
    }
   } while(0);
   if (label == 2123) {
    var $status_0_load1931_ph_i;
    var $88=(($chain+20)|0);
    HEAP32[(($88)>>2)]=$status_0_load1931_ph_i;
    var $89=_fclose($73);
   }
   if ($84) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $165=_unlink($83);
   _free($83);
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $184=HEAP32[(($7)>>2)];
 _set_file_stats_($184,$stats);
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _chain_prepare_for_write_($chain,$use_padding){
 var label=0;
 var $1=(($chain+8)|0);
 var $node_04_i=HEAP32[(($1)>>2)];
 var $2=($node_04_i|0)==0;
 if ($2) {
  var $length_0_lcssa_i=0;
 } else {
  var $length_05_i=0;var $node_06_i=$node_04_i;
  while(1) {
   var $node_06_i;
   var $length_05_i;
   var $3=(($node_06_i)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=((($length_05_i)+(4))|0);
   var $8=((($7)+($6))|0);
   var $9=(($node_06_i+8)|0);
   var $node_0_i=HEAP32[(($9)>>2)];
   var $10=($node_0_i|0)==0;
   if ($10) {
    var $length_0_lcssa_i=$8;
    break;
   } else {
    var $length_05_i=$8;var $node_06_i=$node_0_i;
   }
  }
 }
 var $length_0_lcssa_i;
 var $11=($use_padding|0)==0;
 if ($11) {
  var $_0=$length_0_lcssa_i;
  var $_0;
  return $_0;
 }
 var $13=(($chain+32)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($length_0_lcssa_i|0)<($14|0);
 do {
  if ($15) {
   var $17=(($chain+12)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=($22|0)==1;
   if (!($23)) {
    break;
   }
   var $25=((($14)-($length_0_lcssa_i))|0);
   var $26=(($20+8)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($25)+($27))|0);
   HEAP32[(($26)>>2)]=$28;
   var $_0=$14;
   var $_0;
   return $_0;
  }
 } while(0);
 var $30=((($length_0_lcssa_i)+(4))|0);
 var $31=($30|0)>($14|0);
 if (!($31)) {
  var $33=_FLAC__metadata_object_new(1);
  var $34=($33|0)==0;
  if ($34) {
   var $36=(($chain+20)|0);
   HEAP32[(($36)>>2)]=11;
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $38=HEAP32[(($13)>>2)];
  var $_neg=(((-4)-($length_0_lcssa_i))|0);
  var $39=((($_neg)+($38))|0);
  var $40=(($33+8)|0);
  HEAP32[(($40)>>2)]=$39;
  var $41=_calloc(1,12);
  var $42=$41;
  var $43=($41|0)==0;
  if ($43) {
   _FLAC__metadata_object_delete($33);
   var $45=(($chain+20)|0);
   HEAP32[(($45)>>2)]=11;
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $47=$41;
  HEAP32[(($47)>>2)]=$33;
  var $48=(($41+4)|0);
  var $49=$48;
  HEAP32[(($49)>>2)]=0;
  var $50=(($41+8)|0);
  var $51=$50;
  HEAP32[(($51)>>2)]=0;
  var $52=(($33+4)|0);
  HEAP32[(($52)>>2)]=1;
  var $53=(($chain+12)|0);
  var $54=HEAP32[(($53)>>2)];
  var $55=($54|0)==0;
  if (!($55)) {
   var $57=(($54)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+4)|0);
   HEAP32[(($59)>>2)]=0;
  }
  var $61=HEAP32[(($1)>>2)];
  var $62=($61|0)==0;
  if ($62) {
   HEAP32[(($1)>>2)]=$42;
   var $node_04_i41=$42;
  } else {
   var $65=HEAP32[(($53)>>2)];
   var $66=(($65+8)|0);
   HEAP32[(($66)>>2)]=$42;
   var $67=HEAP32[(($53)>>2)];
   HEAP32[(($49)>>2)]=$67;
   var $node_04_i41_pre=HEAP32[(($1)>>2)];
   var $node_04_i41=$node_04_i41_pre;
  }
  var $node_04_i41;
  HEAP32[(($53)>>2)]=$42;
  var $68=(($chain+16)|0);
  var $69=HEAP32[(($68)>>2)];
  var $70=((($69)+(1))|0);
  HEAP32[(($68)>>2)]=$70;
  var $71=($node_04_i41|0)==0;
  if ($71) {
   var $_0=0;
   var $_0;
   return $_0;
  } else {
   var $length_05_i43=0;var $node_06_i42=$node_04_i41;
  }
  while(1) {
   var $node_06_i42;
   var $length_05_i43;
   var $72=(($node_06_i42)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($73+8)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=((($length_05_i43)+(4))|0);
   var $77=((($76)+($75))|0);
   var $78=(($node_06_i42+8)|0);
   var $node_0_i44=HEAP32[(($78)>>2)];
   var $79=($node_0_i44|0)==0;
   if ($79) {
    var $_0=$77;
    break;
   } else {
    var $length_05_i43=$77;var $node_06_i42=$node_0_i44;
   }
  }
  var $_0;
  return $_0;
 }
 var $81=($length_0_lcssa_i|0)>($14|0);
 if (!($81)) {
  var $_0=$length_0_lcssa_i;
  var $_0;
  return $_0;
 }
 var $83=((($length_0_lcssa_i)-($14))|0);
 var $84=(($chain+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==1;
 if (!($90)) {
  var $_0=$length_0_lcssa_i;
  var $_0;
  return $_0;
 }
 var $92=(($87+8)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=((($93)+(4))|0);
 var $95=($94|0)==($83|0);
 if (!($95)) {
  var $137=($93|0)<($83|0);
  if ($137) {
   var $_0=$length_0_lcssa_i;
   var $_0;
   return $_0;
  }
  var $139=((($93)-($83))|0);
  HEAP32[(($92)>>2)]=$139;
  var $_0=$14;
  var $_0;
  return $_0;
 }
 var $97=($node_04_i|0)==($85|0);
 var $98=(($85+8)|0);
 var $99=HEAP32[(($98)>>2)];
 if ($97) {
  HEAP32[(($1)>>2)]=$99;
  var $_pre_i_i=(($node_04_i+4)|0);
  var $_pre_phi_i_i=$_pre_i_i;var $106=$node_04_i;
 } else {
  var $102=(($85+4)|0);
  var $103=HEAP32[(($102)>>2)];
  var $104=(($103+8)|0);
  HEAP32[(($104)>>2)]=$99;
  var $_pre=HEAP32[(($84)>>2)];
  var $_pre_phi_i_i=$102;var $106=$_pre;
 }
 var $106;
 var $_pre_phi_i_i;
 var $107=($106|0)==($85|0);
 var $108=HEAP32[(($_pre_phi_i_i)>>2)];
 if ($107) {
  HEAP32[(($84)>>2)]=$108;
  var $114=$108;
 } else {
  var $111=HEAP32[(($98)>>2)];
  var $112=(($111+4)|0);
  HEAP32[(($112)>>2)]=$108;
  var $_pr_i_i=HEAP32[(($84)>>2)];
  var $114=$_pr_i_i;
 }
 var $114;
 var $115=($114|0)==0;
 if (!($115)) {
  var $117=(($114)|0);
  var $118=HEAP32[(($117)>>2)];
  var $119=(($118+4)|0);
  HEAP32[(($119)>>2)]=1;
 }
 var $120=(($chain+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=((($121)-(1))|0);
 HEAP32[(($120)>>2)]=$122;
 var $123=HEAP32[(($86)>>2)];
 var $124=($123|0)==0;
 if (!($124)) {
  _FLAC__metadata_object_delete($123);
 }
 var $126=$85;
 _free($126);
 var $node_04_i34=HEAP32[(($1)>>2)];
 var $127=($node_04_i34|0)==0;
 if ($127) {
  var $_0=0;
  var $_0;
  return $_0;
 } else {
  var $length_05_i36=0;var $node_06_i35=$node_04_i34;
 }
 while(1) {
  var $node_06_i35;
  var $length_05_i36;
  var $128=(($node_06_i35)|0);
  var $129=HEAP32[(($128)>>2)];
  var $130=(($129+8)|0);
  var $131=HEAP32[(($130)>>2)];
  var $132=((($length_05_i36)+(4))|0);
  var $133=((($132)+($131))|0);
  var $134=(($node_06_i35+8)|0);
  var $node_0_i37=HEAP32[(($134)>>2)];
  var $135=($node_0_i37|0)==0;
  if ($135) {
   var $_0=$133;
   break;
  } else {
   var $length_05_i36=$133;var $node_06_i35=$node_0_i37;
  }
 }
 var $_0;
 return $_0;
}
function _set_file_stats_($filename,$stats){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $srctime=sp;
 var $1=(($stats+48)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($srctime)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($stats+56)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($srctime+4)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=(($stats+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_chmod($filename,$8);
 var $10=_utime($filename,$srctime);
 var $11=(($stats+20)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=_chown($filename,$12,-1);
 var $14=($13|0)<0;
 if ($14) {
  var $16=___errno_location();
  var $17=HEAP32[(($16)>>2)];
  var $18=_strerror($17);
  var $19=_printf(3824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=3656,HEAP32[(((tempVarArgs)+(8))>>2)]=$18,tempVarArgs)); STACKTOP=tempVarArgs;
 }
 var $21=(($stats+24)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=_chown($filename,-1,$22);
 var $24=($23|0)<0;
 if (!($24)) {
  STACKTOP=sp;return;
 }
 var $26=___errno_location();
 var $27=HEAP32[(($26)>>2)];
 var $28=_strerror($27);
 var $29=_printf(3824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=3400,HEAP32[(((tempVarArgs)+(8))>>2)]=$28,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}
function _FLAC__metadata_chain_write_with_callbacks($chain,$use_padding,$handle,$callbacks){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var tempParam = $callbacks; $callbacks=STACKTOP;STACKTOP = (STACKTOP + 24)|0;HEAP32[(($callbacks)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($callbacks)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($callbacks)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($callbacks)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($callbacks)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($callbacks)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 var $buffer_i=sp;
 var $1=(($chain+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $5=(($chain+20)|0);
  HEAP32[(($5)>>2)]=12;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $7=(($chain)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if (!($9)) {
  var $11=(($chain+20)|0);
  HEAP32[(($11)>>2)]=14;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $13=(($callbacks+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 do {
  if (!($15)) {
   var $17=(($callbacks+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=($18|0)==0;
   if ($19) {
    break;
   }
   var $23=(($chain+8)|0);
   var $node_04_i_i=HEAP32[(($23)>>2)];
   var $24=($node_04_i_i|0)==0;
   if ($24) {
    var $length_0_lcssa_i_i=0;
   } else {
    var $length_05_i_i=0;var $node_06_i_i=$node_04_i_i;
    while(1) {
     var $node_06_i_i;
     var $length_05_i_i;
     var $25=(($node_06_i_i)|0);
     var $26=HEAP32[(($25)>>2)];
     var $27=(($26+8)|0);
     var $28=HEAP32[(($27)>>2)];
     var $29=((($length_05_i_i)+(4))|0);
     var $30=((($29)+($28))|0);
     var $31=(($node_06_i_i+8)|0);
     var $node_0_i_i=HEAP32[(($31)>>2)];
     var $32=($node_0_i_i|0)==0;
     if ($32) {
      var $length_0_lcssa_i_i=$30;
      break;
     } else {
      var $length_05_i_i=$30;var $node_06_i_i=$node_0_i_i;
     }
    }
   }
   var $length_0_lcssa_i_i;
   var $33=($use_padding|0)==0;
   var $_phi_trans_insert_i=(($chain+32)|0);
   var $_pre_i=HEAP32[(($_phi_trans_insert_i)>>2)];
   do {
    if ($33) {
     label = 2234;
    } else {
     var $35=($length_0_lcssa_i_i|0)<($_pre_i|0);
     if ($35) {
      var $37=(($chain+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=($42|0)==1;
      if ($43) {
       break;
      }
     }
     var $45=((($length_0_lcssa_i_i)+(4))|0);
     var $46=($45|0)>($_pre_i|0);
     if (!($46)) {
      break;
     }
     var $48=($length_0_lcssa_i_i|0)>($_pre_i|0);
     if (!($48)) {
      label = 2234;
      break;
     }
     var $50=((($length_0_lcssa_i_i)-($_pre_i))|0);
     var $51=(($chain+12)|0);
     var $52=HEAP32[(($51)>>2)];
     var $53=(($52)|0);
     var $54=HEAP32[(($53)>>2)];
     var $55=(($54)|0);
     var $56=HEAP32[(($55)>>2)];
     var $57=($56|0)==1;
     if (!($57)) {
      label = 2234;
      break;
     }
     var $59=(($54+8)|0);
     var $60=HEAP32[(($59)>>2)];
     var $61=((($60)+(4))|0);
     var $notlhs=($61|0)==($50|0);
     var $notrhs=($60|0)>=($50|0);
     var $or_cond_i_not=$notrhs|$notlhs;
     var $62=($length_0_lcssa_i_i|0)==($_pre_i|0);
     var $or_cond=$or_cond_i_not|$62;
     if (!($or_cond)) {
      label = 2235;
     }
    }
   } while(0);
   if (label == 2234) {
    var $_old=($length_0_lcssa_i_i|0)==($_pre_i|0);
    if (!($_old)) {
     label = 2235;
    }
   }
   if (label == 2235) {
    var $64=(($chain+20)|0);
    HEAP32[(($64)>>2)]=15;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $65=_chain_prepare_for_write_($chain,$use_padding);
   var $66=($65|0)==0;
   if ($66) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $68=(($chain+24)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70$0=$69;
   var $70$1=(((($69|0)<0))|0)?-1:0;
   var $71=FUNCTION_TABLE[$18]($handle,$70$0,$70$1,0);
   var $72=($71|0)==0;
   if (!($72)) {
    var $78=(($chain+20)|0);
    HEAP32[(($78)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $73=(($buffer_i)|0);
   var $74=(($buffer_i+3)|0);
   var $75=(($buffer_i+2)|0);
   var $76=(($buffer_i+1)|0);
   var $node_0_in_i=$23;
   while(1) {
    var $node_0_in_i;
    var $node_0_i=HEAP32[(($node_0_in_i)>>2)];
    var $80=($node_0_i|0)==0;
    if ($80) {
     label = 2245;
     break;
    }
    var $82=(($node_0_i)|0);
    var $83=HEAP32[(($82)>>2)];
    var $_idx_i=(($83)|0);
    var $_idx_val_i=HEAP32[(($_idx_i)>>2)];
    var $_idx15_i=(($83+4)|0);
    var $_idx15_val_i=HEAP32[(($_idx15_i)>>2)];
    var $_idx16_i=(($83+8)|0);
    var $_idx16_val_i=HEAP32[(($_idx16_i)>>2)];
    var $84=($_idx15_val_i|0)!=0;
    var $85=$84?128:0;
    var $86=$85|$_idx_val_i;
    var $87=(($86)&255);
    HEAP8[($73)]=$87;
    var $88=(($_idx16_val_i)&255);
    HEAP8[($74)]=$88;
    var $89=$_idx16_val_i>>>8;
    var $90=(($89)&255);
    HEAP8[($75)]=$90;
    var $91=$_idx16_val_i>>>16;
    var $92=(($91)&255);
    HEAP8[($76)]=$92;
    var $93=FUNCTION_TABLE[$14]($73,1,4,$handle);
    var $94=($93|0)==4;
    if (!($94)) {
     label = 2242;
     break;
    }
    var $98=HEAP32[(($82)>>2)];
    var $99=_write_metadata_block_data_cb_($handle,$14,$98);
    var $100=($99|0)==0;
    var $101=(($node_0_i+8)|0);
    if ($100) {
     label = 2244;
     break;
    } else {
     var $node_0_in_i=$101;
    }
   }
   if (label == 2245) {
    var $105=(($chain+20)|0);
    HEAP32[(($105)>>2)]=0;
    var $_0=1;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 2242) {
    var $96=(($chain+20)|0);
    HEAP32[(($96)>>2)]=8;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 2244) {
    var $103=(($chain+20)|0);
    HEAP32[(($103)>>2)]=8;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
  }
 } while(0);
 var $21=(($chain+20)|0);
 HEAP32[(($21)>>2)]=13;
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_chain_write_with_callbacks_and_tempfile($chain,$use_padding,$handle,$callbacks,$temp_handle,$temp_callbacks){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8200)|0;
 var tempParam = $callbacks; $callbacks=STACKTOP;STACKTOP = (STACKTOP + 24)|0;HEAP32[(($callbacks)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($callbacks)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($callbacks)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($callbacks)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($callbacks)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($callbacks)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 var tempParam = $temp_callbacks; $temp_callbacks=STACKTOP;STACKTOP = (STACKTOP + 24)|0;HEAP32[(($temp_callbacks)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($temp_callbacks)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($temp_callbacks)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($temp_callbacks)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($temp_callbacks)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($temp_callbacks)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 var $buffer_i29_i=sp;
 var $buffer_i_i=(sp)+(8);
 var $1=(($chain+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $5=(($chain+20)|0);
  HEAP32[(($5)>>2)]=12;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $7=(($chain)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if (!($9)) {
  var $11=(($chain+20)|0);
  HEAP32[(($11)>>2)]=14;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $13=(($callbacks)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 do {
  if (!($15)) {
   var $17=(($callbacks+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=($18|0)==0;
   if ($19) {
    break;
   }
   var $21=(($callbacks+16)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=($22|0)==0;
   if ($23) {
    break;
   }
   var $27=(($temp_callbacks+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=($28|0)==0;
   if ($29) {
    var $31=(($chain+20)|0);
    HEAP32[(($31)>>2)]=13;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $33=(($chain+8)|0);
   var $node_04_i_i=HEAP32[(($33)>>2)];
   var $34=($node_04_i_i|0)==0;
   if ($34) {
    var $length_0_lcssa_i_i=0;
   } else {
    var $length_05_i_i=0;var $node_06_i_i=$node_04_i_i;
    while(1) {
     var $node_06_i_i;
     var $length_05_i_i;
     var $35=(($node_06_i_i)|0);
     var $36=HEAP32[(($35)>>2)];
     var $37=(($36+8)|0);
     var $38=HEAP32[(($37)>>2)];
     var $39=((($length_05_i_i)+(4))|0);
     var $40=((($39)+($38))|0);
     var $41=(($node_06_i_i+8)|0);
     var $node_0_i_i=HEAP32[(($41)>>2)];
     var $42=($node_0_i_i|0)==0;
     if ($42) {
      var $length_0_lcssa_i_i=$40;
      break;
     } else {
      var $length_05_i_i=$40;var $node_06_i_i=$node_0_i_i;
     }
    }
   }
   var $length_0_lcssa_i_i;
   var $43=($use_padding|0)==0;
   var $_phi_trans_insert_i=(($chain+32)|0);
   var $_pre_i=HEAP32[(($_phi_trans_insert_i)>>2)];
   do {
    if ($43) {
     label = 2275;
    } else {
     var $45=($length_0_lcssa_i_i|0)<($_pre_i|0);
     if ($45) {
      var $47=(($chain+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=($52|0)==1;
      if ($53) {
       label = 2276;
       break;
      }
     }
     var $55=((($length_0_lcssa_i_i)+(4))|0);
     var $56=($55|0)>($_pre_i|0);
     if (!($56)) {
      label = 2276;
      break;
     }
     var $58=($length_0_lcssa_i_i|0)>($_pre_i|0);
     if (!($58)) {
      label = 2275;
      break;
     }
     var $60=((($length_0_lcssa_i_i)-($_pre_i))|0);
     var $61=(($chain+12)|0);
     var $62=HEAP32[(($61)>>2)];
     var $63=(($62)|0);
     var $64=HEAP32[(($63)>>2)];
     var $65=(($64)|0);
     var $66=HEAP32[(($65)>>2)];
     var $67=($66|0)==1;
     if (!($67)) {
      label = 2275;
      break;
     }
     var $69=(($64+8)|0);
     var $70=HEAP32[(($69)>>2)];
     var $71=((($70)+(4))|0);
     var $notlhs=($71|0)==($60|0);
     var $notrhs=($70|0)>=($60|0);
     var $or_cond_i_not=$notrhs|$notlhs;
     var $72=($length_0_lcssa_i_i|0)==($_pre_i|0);
     var $or_cond=$or_cond_i_not|$72;
     if ($or_cond) {
      label = 2276;
     }
    }
   } while(0);
   if (label == 2275) {
    var $_old=($length_0_lcssa_i_i|0)==($_pre_i|0);
    if ($_old) {
     label = 2276;
    }
   }
   if (label == 2276) {
    var $73=(($chain+20)|0);
    HEAP32[(($73)>>2)]=15;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $75=_chain_prepare_for_write_($chain,$use_padding);
   var $76=($75|0)==0;
   if ($76) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $$etemp$0$0=0;
   var $$etemp$0$1=0;
   var $78=FUNCTION_TABLE[$18]($handle,$$etemp$0$0,$$etemp$0$1,0);
   var $79=($78|0)==0;
   if (!($79)) {
    var $81=(($chain+20)|0);
    HEAP32[(($81)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $83=(($chain+24)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($buffer_i_i)|0);
   var $_015_i_i=$84;
   while(1) {
    var $_015_i_i;
    var $87=($_015_i_i|0)>0;
    if (!($87)) {
     break;
    }
    var $89=($_015_i_i>>>0)>8192;
    var $90=$89?8192:$_015_i_i;
    var $91=FUNCTION_TABLE[$14]($85,1,$90,$handle);
    var $92=($91|0)==($90|0);
    if (!($92)) {
     var $status_0_load3435_ph_i=6;
     label = 2284;
     break;
    }
    var $94=FUNCTION_TABLE[$28]($85,1,$90,$temp_handle);
    var $95=($94|0)==($90|0);
    var $96=((($_015_i_i)-($90))|0);
    if ($95) {
     var $_015_i_i=$96;
    } else {
     var $status_0_load3435_ph_i=8;
     label = 2284;
     break;
    }
   }
   if (label == 2284) {
    var $status_0_load3435_ph_i;
    var $98=(($chain+20)|0);
    HEAP32[(($98)>>2)]=$status_0_load3435_ph_i;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $100=(($buffer_i29_i)|0);
   var $101=(($buffer_i29_i+3)|0);
   var $102=(($buffer_i29_i+2)|0);
   var $103=(($buffer_i29_i+1)|0);
   var $node_0_in_i=$33;
   while(1) {
    var $node_0_in_i;
    var $node_0_i=HEAP32[(($node_0_in_i)>>2)];
    var $105=($node_0_i|0)==0;
    if ($105) {
     label = 2291;
     break;
    }
    var $107=(($node_0_i)|0);
    var $108=HEAP32[(($107)>>2)];
    var $_idx_i=(($108)|0);
    var $_idx_val_i=HEAP32[(($_idx_i)>>2)];
    var $_idx27_i=(($108+4)|0);
    var $_idx27_val_i=HEAP32[(($_idx27_i)>>2)];
    var $_idx28_i=(($108+8)|0);
    var $_idx28_val_i=HEAP32[(($_idx28_i)>>2)];
    var $109=($_idx27_val_i|0)!=0;
    var $110=$109?128:0;
    var $111=$110|$_idx_val_i;
    var $112=(($111)&255);
    HEAP8[($100)]=$112;
    var $113=(($_idx28_val_i)&255);
    HEAP8[($101)]=$113;
    var $114=$_idx28_val_i>>>8;
    var $115=(($114)&255);
    HEAP8[($102)]=$115;
    var $116=$_idx28_val_i>>>16;
    var $117=(($116)&255);
    HEAP8[($103)]=$117;
    var $118=FUNCTION_TABLE[$28]($100,1,4,$temp_handle);
    var $119=($118|0)==4;
    if (!($119)) {
     label = 2288;
     break;
    }
    var $123=HEAP32[(($107)>>2)];
    var $124=_write_metadata_block_data_cb_($temp_handle,$28,$123);
    var $125=($124|0)==0;
    var $126=(($node_0_i+8)|0);
    if ($125) {
     label = 2290;
     break;
    } else {
     var $node_0_in_i=$126;
    }
   }
   if (label == 2290) {
    var $128=(($chain+20)|0);
    HEAP32[(($128)>>2)]=8;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 2288) {
    var $121=(($chain+20)|0);
    HEAP32[(($121)>>2)]=8;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 2291) {
    var $130=(($chain+28)|0);
    var $131=HEAP32[(($130)>>2)];
    var $132$0=$131;
    var $132$1=(((($131|0)<0))|0)?-1:0;
    var $133=FUNCTION_TABLE[$18]($handle,$132$0,$132$1,0);
    var $134=($133|0)==0;
    if (!($134)) {
     var $136=(($chain+20)|0);
     HEAP32[(($136)>>2)]=7;
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
    }
    var $138=FUNCTION_TABLE[$22]($handle);
    var $139=($138|0)==0;
    L3137: do {
     if ($139) {
      while(1) {
       var $140=FUNCTION_TABLE[$14]($85,1,8192,$handle);
       var $cond_i_i=($140|0)==0;
       if ($cond_i_i) {
        var $142=FUNCTION_TABLE[$22]($handle);
        var $143=($142|0)==0;
        if ($143) {
         var $status_0_load3436_ph_i=6;
         break;
        }
       } else {
        var $145=FUNCTION_TABLE[$28]($85,1,$140,$temp_handle);
        var $146=($145|0)==($140|0);
        if (!($146)) {
         var $status_0_load3436_ph_i=8;
         break;
        }
       }
       var $147=FUNCTION_TABLE[$22]($handle);
       var $148=($147|0)==0;
       if (!($148)) {
        break L3137;
       }
      }
      var $status_0_load3436_ph_i;
      var $150=(($chain+20)|0);
      HEAP32[(($150)>>2)]=$status_0_load3436_ph_i;
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
    } while(0);
    HEAP32[(($_phi_trans_insert_i)>>2)]=$75;
    var $151=HEAP32[(($83)>>2)];
    HEAP32[(($130)>>2)]=$151;
    var $node_025=HEAP32[(($33)>>2)];
    var $152=($node_025|0)==0;
    if ($152) {
     var $_0=1;
     var $_0;
     STACKTOP=sp;return $_0;
    } else {
     var $node_026=$node_025;var $153=$151;
    }
    while(1) {
     var $153;
     var $node_026;
     var $154=(($node_026)|0);
     var $155=HEAP32[(($154)>>2)];
     var $156=(($155+8)|0);
     var $157=HEAP32[(($156)>>2)];
     var $158=((($157)+(4))|0);
     var $159=((($158)+($153))|0);
     HEAP32[(($130)>>2)]=$159;
     var $160=(($node_026+8)|0);
     var $node_0=HEAP32[(($160)>>2)];
     var $161=($node_0|0)==0;
     if ($161) {
      var $_0=1;
      break;
     } else {
      var $node_026=$node_0;var $153=$159;
     }
    }
    var $_0;
    STACKTOP=sp;return $_0;
   }
  }
 } while(0);
 var $25=(($chain+20)|0);
 HEAP32[(($25)>>2)]=13;
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_chain_merge_padding($chain){
 var label=0;
 var $1=(($chain+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if ($3) {
  return;
 }
 var $4=(($chain+12)|0);
 var $5=(($chain+16)|0);
 var $node_0_ph4=$2;
 L3158: while(1) {
  var $node_0_ph4;
  var $6=(($node_0_ph4)|0);
  var $7=(($node_0_ph4+8)|0);
  while(1) {
   var $9=HEAP32[(($6)>>2)];
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=($11|0)==1;
   var $13=HEAP32[(($7)>>2)];
   var $14=($13|0)==0;
   if (!($12)) {
    break;
   }
   if ($14) {
    label = 2337;
    break L3158;
   }
   var $17=(($13)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=($20|0)==1;
   if (!($21)) {
    var $node_0_ph4=$13;
    continue L3158;
   }
   var $23=(($18+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)+(4))|0);
   var $26=(($9+8)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($25)+($27))|0);
   HEAP32[(($26)>>2)]=$28;
   var $29=HEAP32[(($7)>>2)];
   var $30=HEAP32[(($1)>>2)];
   var $31=($30|0)==($29|0);
   var $32=(($29+8)|0);
   var $33=HEAP32[(($32)>>2)];
   if ($31) {
    HEAP32[(($1)>>2)]=$33;
    var $_pre_i_i_i=(($29+4)|0);
    var $_pre_phi_i_i_i=$_pre_i_i_i;
   } else {
    var $36=(($29+4)|0);
    var $37=HEAP32[(($36)>>2)];
    var $38=(($37+8)|0);
    HEAP32[(($38)>>2)]=$33;
    var $_pre_phi_i_i_i=$36;
   }
   var $_pre_phi_i_i_i;
   var $40=HEAP32[(($4)>>2)];
   var $41=($40|0)==($29|0);
   var $42=HEAP32[(($_pre_phi_i_i_i)>>2)];
   if ($41) {
    HEAP32[(($4)>>2)]=$42;
    var $48=$42;
   } else {
    var $45=HEAP32[(($32)>>2)];
    var $46=(($45+4)|0);
    HEAP32[(($46)>>2)]=$42;
    var $_pr_i_i_i=HEAP32[(($4)>>2)];
    var $48=$_pr_i_i_i;
   }
   var $48;
   var $49=($48|0)==0;
   if (!($49)) {
    var $51=(($48)|0);
    var $52=HEAP32[(($51)>>2)];
    var $53=(($52+4)|0);
    HEAP32[(($53)>>2)]=1;
   }
   var $54=HEAP32[(($5)>>2)];
   var $55=((($54)-(1))|0);
   HEAP32[(($5)>>2)]=$55;
   var $56=(($29)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=($57|0)==0;
   if (!($58)) {
    _FLAC__metadata_object_delete($57);
   }
   var $60=$29;
   _free($60);
  }
  if ($14) {
   label = 2335;
   break;
  } else {
   var $node_0_ph4=$13;
  }
 }
 if (label == 2335) {
  return;
 }
 else if (label == 2337) {
  return;
 }
}
function _FLAC__metadata_chain_sort_padding($chain){
 var label=0;
 var $1=(($chain+8)|0);
 var $2=(($chain+16)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if ($4) {
  _FLAC__metadata_chain_merge_padding($chain);
  return;
 }
 var $5=HEAP32[(($1)>>2)];
 var $6=(($chain+12)|0);
 var $node_09=$5;var $i_010=0;var $8=$3;
 while(1) {
  var $8;
  var $i_010;
  var $node_09;
  var $9=(($node_09)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=($12|0)==1;
  var $14=(($node_09+8)|0);
  var $15=HEAP32[(($14)>>2)];
  if ($13) {
   var $17=HEAP32[(($1)>>2)];
   var $18=($17|0)==($node_09|0);
   if ($18) {
    HEAP32[(($1)>>2)]=$15;
    var $_pre_i=(($node_09+4)|0);
    var $_pre_phi_i=$_pre_i;
   } else {
    var $21=(($node_09+4)|0);
    var $22=HEAP32[(($21)>>2)];
    var $23=(($22+8)|0);
    HEAP32[(($23)>>2)]=$15;
    var $_pre_phi_i=$21;
   }
   var $_pre_phi_i;
   var $25=HEAP32[(($6)>>2)];
   var $26=($25|0)==($node_09|0);
   var $27=HEAP32[(($_pre_phi_i)>>2)];
   if ($26) {
    HEAP32[(($6)>>2)]=$27;
    var $33=$27;
   } else {
    var $30=HEAP32[(($14)>>2)];
    var $31=(($30+4)|0);
    HEAP32[(($31)>>2)]=$27;
    var $_pr_i=HEAP32[(($6)>>2)];
    var $33=$_pr_i;
   }
   var $33;
   var $34=($33|0)==0;
   if (!($34)) {
    var $36=(($33)|0);
    var $37=HEAP32[(($36)>>2)];
    var $38=(($37+4)|0);
    HEAP32[(($38)>>2)]=1;
   }
   var $39=HEAP32[(($2)>>2)];
   var $40=((($39)-(1))|0);
   HEAP32[(($2)>>2)]=$40;
   var $41=(($node_09+4)|0);
   HEAP32[(($41)>>2)]=0;
   HEAP32[(($14)>>2)]=0;
   var $42=HEAP32[(($9)>>2)];
   var $43=(($42+4)|0);
   HEAP32[(($43)>>2)]=1;
   var $44=HEAP32[(($6)>>2)];
   var $45=($44|0)==0;
   if (!($45)) {
    var $47=(($44)|0);
    var $48=HEAP32[(($47)>>2)];
    var $49=(($48+4)|0);
    HEAP32[(($49)>>2)]=0;
   }
   var $51=HEAP32[(($1)>>2)];
   var $52=($51|0)==0;
   if ($52) {
    HEAP32[(($1)>>2)]=$node_09;
   } else {
    var $55=HEAP32[(($6)>>2)];
    var $56=(($55+8)|0);
    HEAP32[(($56)>>2)]=$node_09;
    var $57=HEAP32[(($6)>>2)];
    HEAP32[(($41)>>2)]=$57;
   }
   HEAP32[(($6)>>2)]=$node_09;
   var $58=HEAP32[(($2)>>2)];
   var $59=((($58)+(1))|0);
   HEAP32[(($2)>>2)]=$59;
   var $61=$59;
  } else {
   var $61=$8;
  }
  var $61;
  var $62=((($i_010)+(1))|0);
  var $63=($62>>>0)<($61>>>0);
  if ($63) {
   var $node_09=$15;var $i_010=$62;var $8=$61;
  } else {
   break;
  }
 }
 _FLAC__metadata_chain_merge_padding($chain);
 return;
}
function _FLAC__metadata_iterator_new(){
 var label=0;
 var $1=_calloc(1,8);
 var $2=$1;
 return $2;
}
function _FLAC__metadata_iterator_delete($iterator){
 var label=0;
 var $1=$iterator;
 _free($1);
 return;
}
function _FLAC__metadata_iterator_init($iterator,$chain){
 var label=0;
 var $1=(($iterator)|0);
 HEAP32[(($1)>>2)]=$chain;
 var $2=(($chain+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($iterator+4)|0);
 HEAP32[(($4)>>2)]=$3;
 return;
}
function _FLAC__metadata_iterator_next($iterator){
 var label=0;
 var $1=(($iterator+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 do {
  if ($3) {
   var $_0=0;
  } else {
   var $5=(($2+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=($6|0)==0;
   if ($7) {
    var $_0=0;
    break;
   }
   HEAP32[(($1)>>2)]=$6;
   var $_0=1;
  }
 } while(0);
 var $_0;
 return $_0;
}
function _FLAC__metadata_iterator_prev($iterator){
 var label=0;
 var $1=(($iterator+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 do {
  if ($3) {
   var $_0=0;
  } else {
   var $5=(($2+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=($6|0)==0;
   if ($7) {
    var $_0=0;
    break;
   }
   HEAP32[(($1)>>2)]=$6;
   var $_0=1;
  }
 } while(0);
 var $_0;
 return $_0;
}
function _FLAC__metadata_iterator_get_block_type($iterator){
 var label=0;
 var $1=(($iterator+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 return $6;
}
function _FLAC__metadata_iterator_get_block($iterator){
 var label=0;
 var $1=(($iterator+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__metadata_iterator_set_block($iterator,$block){
 var label=0;
 var $1=(($iterator+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if ($5) {
  var $79=0;
  var $79;
  return $79;
 }
 var $7=(($iterator)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==($2|0);
 var $12=(($2+8)|0);
 var $13=HEAP32[(($12)>>2)];
 if ($11) {
  HEAP32[(($9)>>2)]=$13;
 } else {
  var $16=(($4+8)|0);
  HEAP32[(($16)>>2)]=$13;
 }
 var $18=(($8+12)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($2|0);
 var $21=HEAP32[(($3)>>2)];
 if ($20) {
  HEAP32[(($18)>>2)]=$21;
  var $27=$21;
 } else {
  var $24=HEAP32[(($12)>>2)];
  var $25=(($24+4)|0);
  HEAP32[(($25)>>2)]=$21;
  var $_pr_i_i_i=HEAP32[(($18)>>2)];
  var $27=$_pr_i_i_i;
 }
 var $27;
 var $28=($27|0)==0;
 if (!($28)) {
  var $30=(($27)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31+4)|0);
  HEAP32[(($32)>>2)]=1;
 }
 var $33=(($8+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=((($34)-(1))|0);
 HEAP32[(($33)>>2)]=$35;
 var $36=(($2)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if (!($38)) {
  _FLAC__metadata_object_delete($37);
 }
 var $41=$2;
 _free($41);
 HEAP32[(($1)>>2)]=$4;
 var $42=(($block)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if ($44) {
  var $79=0;
  var $79;
  return $79;
 }
 var $46=_calloc(1,12);
 var $47=$46;
 var $48=($46|0)==0;
 if ($48) {
  var $79=0;
  var $79;
  return $79;
 }
 var $50=$46;
 HEAP32[(($50)>>2)]=$block;
 var $51=(($4)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+4)|0);
 HEAP32[(($53)>>2)]=0;
 var $54=HEAP32[(($1)>>2)];
 var $55=(($46+4)|0);
 var $56=$55;
 HEAP32[(($56)>>2)]=$54;
 var $57=(($54+8)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($46+8)|0);
 var $60=$59;
 HEAP32[(($60)>>2)]=$58;
 var $61=($58|0)==0;
 if ($61) {
  var $63=HEAP32[(($7)>>2)];
  var $64=(($63+12)|0);
  HEAP32[(($64)>>2)]=$47;
 } else {
  var $66=(($58+4)|0);
  HEAP32[(($66)>>2)]=$47;
 }
 var $67=HEAP32[(($56)>>2)];
 var $68=(($67+8)|0);
 HEAP32[(($68)>>2)]=$47;
 var $69=HEAP32[(($7)>>2)];
 var $70=(($69+12)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+4)|0);
 HEAP32[(($74)>>2)]=1;
 var $75=HEAP32[(($7)>>2)];
 var $76=(($75+16)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=((($77)+(1))|0);
 HEAP32[(($76)>>2)]=$78;
 HEAP32[(($1)>>2)]=$47;
 var $79=1;
 var $79;
 return $79;
}
function _FLAC__metadata_iterator_delete_block($iterator,$replace_with_padding){
 var label=0;
 var $1=(($iterator+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if ($5) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=($replace_with_padding|0)==0;
 if ($7) {
  var $16=(($iterator)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=(($17+8)|0);
  var $19=HEAP32[(($18)>>2)];
  var $20=($19|0)==($2|0);
  var $21=(($2+8)|0);
  var $22=HEAP32[(($21)>>2)];
  if ($20) {
   HEAP32[(($18)>>2)]=$22;
  } else {
   var $25=(($4+8)|0);
   HEAP32[(($25)>>2)]=$22;
  }
  var $27=(($17+12)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=($28|0)==($2|0);
  var $30=HEAP32[(($3)>>2)];
  if ($29) {
   HEAP32[(($27)>>2)]=$30;
   var $36=$30;
  } else {
   var $33=HEAP32[(($21)>>2)];
   var $34=(($33+4)|0);
   HEAP32[(($34)>>2)]=$30;
   var $_pr_i_i=HEAP32[(($27)>>2)];
   var $36=$_pr_i_i;
  }
  var $36;
  var $37=($36|0)==0;
  if (!($37)) {
   var $39=(($36)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+4)|0);
   HEAP32[(($41)>>2)]=1;
  }
  var $42=(($17+16)|0);
  var $43=HEAP32[(($42)>>2)];
  var $44=((($43)-(1))|0);
  HEAP32[(($42)>>2)]=$44;
  var $45=(($2)|0);
  var $46=HEAP32[(($45)>>2)];
  var $47=($46|0)==0;
  if (!($47)) {
   _FLAC__metadata_object_delete($46);
  }
  var $49=$2;
  _free($49);
 } else {
  var $9=(($2)|0);
  var $10=HEAP32[(($9)>>2)];
  _FLAC__metadata_object_delete_data($10);
  var $11=HEAP32[(($1)>>2)];
  var $12=(($11)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13)|0);
  HEAP32[(($14)>>2)]=1;
 }
 HEAP32[(($1)>>2)]=$4;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__metadata_iterator_insert_block_after($iterator,$block){
 var label=0;
 var $1=(($block)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if ($3) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=_calloc(1,12);
 var $6=$5;
 var $7=($5|0)==0;
 if ($7) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9=$5;
 HEAP32[(($9)>>2)]=$block;
 var $10=(($iterator+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+4)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=HEAP32[(($10)>>2)];
 var $16=(($5+4)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=$15;
 var $18=(($15+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($5+8)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=$19;
 var $22=($19|0)==0;
 if ($22) {
  var $24=(($iterator)|0);
  var $25=HEAP32[(($24)>>2)];
  var $26=(($25+12)|0);
  HEAP32[(($26)>>2)]=$6;
  var $_pre_phi_i=$24;
 } else {
  var $28=(($19+4)|0);
  HEAP32[(($28)>>2)]=$6;
  var $_pre_i=(($iterator)|0);
  var $_pre_phi_i=$_pre_i;
 }
 var $_pre_phi_i;
 var $29=HEAP32[(($17)>>2)];
 var $30=(($29+8)|0);
 HEAP32[(($30)>>2)]=$6;
 var $31=HEAP32[(($_pre_phi_i)>>2)];
 var $32=(($31+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+4)|0);
 HEAP32[(($36)>>2)]=1;
 var $37=HEAP32[(($_pre_phi_i)>>2)];
 var $38=(($37+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=((($39)+(1))|0);
 HEAP32[(($38)>>2)]=$40;
 HEAP32[(($10)>>2)]=$6;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__metadata_iterator_insert_block_before($iterator,$block){
 var label=0;
 var $1=(($block)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if ($3) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=(($iterator+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if ($9) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $11=_calloc(1,12);
 var $12=$11;
 var $13=($11|0)==0;
 if ($13) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $15=$11;
 HEAP32[(($15)>>2)]=$block;
 var $16=(($block+4)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=HEAP32[(($5)>>2)];
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($11+4)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=$19;
 var $22=(($11+8)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=$17;
 var $24=($19|0)==0;
 if ($24) {
  var $26=(($iterator)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=(($27+8)|0);
  HEAP32[(($28)>>2)]=$12;
  var $_pre_phi_i=$26;
 } else {
  var $30=(($19+8)|0);
  HEAP32[(($30)>>2)]=$12;
  var $_pre_i=(($iterator)|0);
  var $_pre_phi_i=$_pre_i;
 }
 var $_pre_phi_i;
 var $31=HEAP32[(($5)>>2)];
 var $32=(($31+4)|0);
 HEAP32[(($32)>>2)]=$12;
 var $33=HEAP32[(($_pre_phi_i)>>2)];
 var $34=(($33+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)+(1))|0);
 HEAP32[(($34)>>2)]=$36;
 HEAP32[(($5)>>2)]=$12;
 var $_0=1;
 var $_0;
 return $_0;
}
function _write_metadata_block_data_cb_($handle,$write_cb,$block){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1096)|0;
 var $buffer_i36=sp;
 var $buffer_i33=(sp)+(8);
 var $buffer_i29=(sp)+(32);
 var $buffer_i=(sp)+(1056);
 var $1=(($block)|0);
 var $2=HEAP32[(($1)>>2)];
 switch (($2|0)) {
 case 0: {
  var $4=(($block+16)|0);
  var $5=(($buffer_i)|0);
  var $6=(($block+36)|0);
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=(($block+40)|0);
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$4;
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13)&255);
  var $15=(($buffer_i+1)|0);
  HEAP8[($15)]=$14;
  var $16=$13>>>8;
  var $17=(($16)&255);
  HEAP8[($5)]=$17;
  var $18=((($11)-(1))|0);
  var $19=(($block+20)|0);
  var $20=$19;
  var $21=HEAP32[(($20)>>2)];
  var $22=(($21)&255);
  var $23=(($buffer_i+3)|0);
  HEAP8[($23)]=$22;
  var $24=$21>>>8;
  var $25=(($24)&255);
  var $26=(($buffer_i+2)|0);
  HEAP8[($26)]=$25;
  var $27=(($block+24)|0);
  var $28=$27;
  var $29=HEAP32[(($28)>>2)];
  var $30=(($29)&255);
  var $31=(($buffer_i+6)|0);
  HEAP8[($31)]=$30;
  var $32=$29>>>8;
  var $33=(($32)&255);
  var $34=(($buffer_i+5)|0);
  HEAP8[($34)]=$33;
  var $35=$29>>>16;
  var $36=(($35)&255);
  var $37=(($buffer_i+4)|0);
  HEAP8[($37)]=$36;
  var $38=(($block+28)|0);
  var $39=$38;
  var $40=HEAP32[(($39)>>2)];
  var $41=(($buffer_i+10)|0);
  var $42=(($40)&255);
  var $43=(($buffer_i+9)|0);
  HEAP8[($43)]=$42;
  var $44=$40>>>8;
  var $45=(($44)&255);
  var $46=(($buffer_i+8)|0);
  HEAP8[($46)]=$45;
  var $47=$40>>>16;
  var $48=(($47)&255);
  var $49=(($buffer_i+7)|0);
  HEAP8[($49)]=$48;
  var $50=(($block+32)|0);
  var $51=$50;
  var $52=HEAP32[(($51)>>2)];
  var $53=$52>>>12;
  var $54=(($53)&255);
  HEAP8[($41)]=$54;
  var $55=$52>>>4;
  var $56=(($55)&255);
  var $57=(($buffer_i+11)|0);
  HEAP8[($57)]=$56;
  var $58=$52<<4;
  var $59=$8<<1;
  var $60=((($59)+(254))|0);
  var $61=$18>>>4;
  var $62=$61|$60;
  var $63=$62|$58;
  var $64=(($63)&255);
  var $65=(($buffer_i+12)|0);
  HEAP8[($65)]=$64;
  var $66=$18<<4;
  var $67$0=$66;
  var $67$1=0;
  var $68=(($block+48)|0);
  var $69=$68;
  var $ld$0$0=(($69)|0);
  var $70$0=HEAP32[(($ld$0$0)>>2)];
  var $ld$1$1=(($69+4)|0);
  var $70$1=HEAP32[(($ld$1$1)>>2)];
  var $71$0=$70$1;
  var $71$1=0;
  var $$etemp$2$0=15;
  var $$etemp$2$1=0;
  var $72$0=$71$0&$$etemp$2$0;
  var $72$1=$71$1&$$etemp$2$1;
  var $73$0=$72$0|$67$0;
  var $73$1=$72$1|$67$1;
  var $74$0=$73$0;
  var $74=$74$0&255;
  var $75=(($buffer_i+13)|0);
  HEAP8[($75)]=$74;
  var $76$0=$70$0;
  var $76=$76$0;
  var $77=(($buffer_i+18)|0);
  var $78$0=$70$0;
  var $78=$78$0&255;
  var $79=(($buffer_i+17)|0);
  HEAP8[($79)]=$78;
  var $80=$76>>>8;
  var $81=(($80)&255);
  var $82=(($buffer_i+16)|0);
  HEAP8[($82)]=$81;
  var $83=$76>>>16;
  var $84=(($83)&255);
  var $85=(($buffer_i+15)|0);
  HEAP8[($85)]=$84;
  var $86=$76>>>24;
  var $87=(($86)&255);
  var $88=(($buffer_i+14)|0);
  HEAP8[($88)]=$87;
  var $89=(($block+56)|0);
  (_memcpy($77, $89, 16)|0);
  var $90=FUNCTION_TABLE[$write_cb]($5,1,34,$handle);
  var $91=($90|0)==34;
  var $__i=($91&1);
  var $_0=$__i;
  var $_0;
  STACKTOP=sp;return $_0;
  break;
 }
 case 2: {
  var $108=(($block+8)|0);
  var $109=HEAP32[(($108)>>2)];
  var $110=HEAP32[((10224)>>2)];
  var $111=$110>>>3;
  var $112=(($block+16)|0);
  var $113=FUNCTION_TABLE[$write_cb]($112,1,$111,$handle);
  var $114=($113|0)==($111|0);
  if (!($114)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $116=((($109)-($111))|0);
  var $117=(($block+20)|0);
  var $118=$117;
  var $119=HEAP32[(($118)>>2)];
  var $120=FUNCTION_TABLE[$write_cb]($119,1,$116,$handle);
  var $121=($120|0)==($116|0);
  var $__i31=($121&1);
  var $_0=$__i31;
  var $_0;
  STACKTOP=sp;return $_0;
  break;
 }
 case 6: {
  var $431=(($buffer_i36)|0);
  var $432=HEAP32[((10032)>>2)];
  var $433=$432>>>3;
  var $434=($433|0)==0;
  if (!($434)) {
   var $435=(($block+16)|0);
   var $436=$435;
   var $437=HEAP32[(($436)>>2)];
   var $438=(($buffer_i36+$433)|0);
   var $_078_i_i48=$438;var $_09_i_i47=$437;var $i_010_i_i46=0;
   while(1) {
    var $i_010_i_i46;
    var $_09_i_i47;
    var $_078_i_i48;
    var $440=(($_09_i_i47)&255);
    var $441=((($_078_i_i48)-(1))|0);
    HEAP8[($441)]=$440;
    var $442=$_09_i_i47>>>8;
    var $443=((($i_010_i_i46)+(1))|0);
    var $444=($443>>>0)<($433>>>0);
    if ($444) {
     var $_078_i_i48=$441;var $_09_i_i47=$442;var $i_010_i_i46=$443;
    } else {
     break;
    }
   }
  }
  var $445=FUNCTION_TABLE[$write_cb]($431,1,$433,$handle);
  var $446=($445|0)==($433|0);
  if (!($446)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $448=HEAP32[((10040)>>2)];
  var $449=$448>>>3;
  var $450=(($block+20)|0);
  var $451=$450;
  var $452=HEAP32[(($451)>>2)];
  var $453=_strlen($452);
  var $454=($449|0)==0;
  if (!($454)) {
   var $455=(($buffer_i36+$449)|0);
   var $_078_i67_i=$455;var $_09_i66_i=$453;var $i_010_i65_i=0;
   while(1) {
    var $i_010_i65_i;
    var $_09_i66_i;
    var $_078_i67_i;
    var $457=(($_09_i66_i)&255);
    var $458=((($_078_i67_i)-(1))|0);
    HEAP8[($458)]=$457;
    var $459=$_09_i66_i>>>8;
    var $460=((($i_010_i65_i)+(1))|0);
    var $461=($460>>>0)<($449>>>0);
    if ($461) {
     var $_078_i67_i=$458;var $_09_i66_i=$459;var $i_010_i65_i=$460;
    } else {
     break;
    }
   }
  }
  var $462=FUNCTION_TABLE[$write_cb]($431,1,$449,$handle);
  var $463=($462|0)==($449|0);
  if (!($463)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $465=HEAP32[(($451)>>2)];
  var $466=FUNCTION_TABLE[$write_cb]($465,1,$453,$handle);
  var $467=($466|0)==($453|0);
  if (!($467)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $469=HEAP32[((10056)>>2)];
  var $470=$469>>>3;
  var $471=(($block+24)|0);
  var $472=$471;
  var $473=HEAP32[(($472)>>2)];
  var $474=_strlen($473);
  var $475=($470|0)==0;
  if (!($475)) {
   var $476=(($buffer_i36+$470)|0);
   var $_078_i72_i=$476;var $_09_i71_i=$474;var $i_010_i70_i=0;
   while(1) {
    var $i_010_i70_i;
    var $_09_i71_i;
    var $_078_i72_i;
    var $478=(($_09_i71_i)&255);
    var $479=((($_078_i72_i)-(1))|0);
    HEAP8[($479)]=$478;
    var $480=$_09_i71_i>>>8;
    var $481=((($i_010_i70_i)+(1))|0);
    var $482=($481>>>0)<($470>>>0);
    if ($482) {
     var $_078_i72_i=$479;var $_09_i71_i=$480;var $i_010_i70_i=$481;
    } else {
     break;
    }
   }
  }
  var $483=FUNCTION_TABLE[$write_cb]($431,1,$470,$handle);
  var $484=($483|0)==($470|0);
  if (!($484)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $486=HEAP32[(($472)>>2)];
  var $487=FUNCTION_TABLE[$write_cb]($486,1,$474,$handle);
  var $488=($487|0)==($474|0);
  if (!($488)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $490=HEAP32[((10024)>>2)];
  var $491=$490>>>3;
  var $492=($491|0)==0;
  if (!($492)) {
   var $493=(($block+28)|0);
   var $494=$493;
   var $495=HEAP32[(($494)>>2)];
   var $496=(($buffer_i36+$491)|0);
   var $_078_i82_i=$496;var $_09_i81_i=$495;var $i_010_i80_i=0;
   while(1) {
    var $i_010_i80_i;
    var $_09_i81_i;
    var $_078_i82_i;
    var $498=(($_09_i81_i)&255);
    var $499=((($_078_i82_i)-(1))|0);
    HEAP8[($499)]=$498;
    var $500=$_09_i81_i>>>8;
    var $501=((($i_010_i80_i)+(1))|0);
    var $502=($501>>>0)<($491>>>0);
    if ($502) {
     var $_078_i82_i=$499;var $_09_i81_i=$500;var $i_010_i80_i=$501;
    } else {
     break;
    }
   }
  }
  var $503=FUNCTION_TABLE[$write_cb]($431,1,$491,$handle);
  var $504=($503|0)==($491|0);
  if (!($504)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $506=HEAP32[((10048)>>2)];
  var $507=$506>>>3;
  var $508=($507|0)==0;
  if (!($508)) {
   var $509=(($block+32)|0);
   var $510=$509;
   var $511=HEAP32[(($510)>>2)];
   var $512=(($buffer_i36+$507)|0);
   var $_078_i92_i=$512;var $_09_i91_i=$511;var $i_010_i90_i=0;
   while(1) {
    var $i_010_i90_i;
    var $_09_i91_i;
    var $_078_i92_i;
    var $514=(($_09_i91_i)&255);
    var $515=((($_078_i92_i)-(1))|0);
    HEAP8[($515)]=$514;
    var $516=$_09_i91_i>>>8;
    var $517=((($i_010_i90_i)+(1))|0);
    var $518=($517>>>0)<($507>>>0);
    if ($518) {
     var $_078_i92_i=$515;var $_09_i91_i=$516;var $i_010_i90_i=$517;
    } else {
     break;
    }
   }
  }
  var $519=FUNCTION_TABLE[$write_cb]($431,1,$507,$handle);
  var $520=($519|0)==($507|0);
  if (!($520)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $522=HEAP32[((10064)>>2)];
  var $523=$522>>>3;
  var $524=($523|0)==0;
  if (!($524)) {
   var $525=(($block+36)|0);
   var $526=$525;
   var $527=HEAP32[(($526)>>2)];
   var $528=(($buffer_i36+$523)|0);
   var $_078_i97_i=$528;var $_09_i96_i=$527;var $i_010_i95_i=0;
   while(1) {
    var $i_010_i95_i;
    var $_09_i96_i;
    var $_078_i97_i;
    var $530=(($_09_i96_i)&255);
    var $531=((($_078_i97_i)-(1))|0);
    HEAP8[($531)]=$530;
    var $532=$_09_i96_i>>>8;
    var $533=((($i_010_i95_i)+(1))|0);
    var $534=($533>>>0)<($523>>>0);
    if ($534) {
     var $_078_i97_i=$531;var $_09_i96_i=$532;var $i_010_i95_i=$533;
    } else {
     break;
    }
   }
  }
  var $535=FUNCTION_TABLE[$write_cb]($431,1,$523,$handle);
  var $536=($535|0)==($523|0);
  if (!($536)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $538=HEAP32[((10080)>>2)];
  var $539=$538>>>3;
  var $540=($539|0)==0;
  if (!($540)) {
   var $541=(($block+40)|0);
   var $542=$541;
   var $543=HEAP32[(($542)>>2)];
   var $544=(($buffer_i36+$539)|0);
   var $_078_i87_i=$544;var $_09_i86_i=$543;var $i_010_i85_i=0;
   while(1) {
    var $i_010_i85_i;
    var $_09_i86_i;
    var $_078_i87_i;
    var $546=(($_09_i86_i)&255);
    var $547=((($_078_i87_i)-(1))|0);
    HEAP8[($547)]=$546;
    var $548=$_09_i86_i>>>8;
    var $549=((($i_010_i85_i)+(1))|0);
    var $550=($549>>>0)<($539>>>0);
    if ($550) {
     var $_078_i87_i=$547;var $_09_i86_i=$548;var $i_010_i85_i=$549;
    } else {
     break;
    }
   }
  }
  var $551=FUNCTION_TABLE[$write_cb]($431,1,$539,$handle);
  var $552=($551|0)==($539|0);
  if (!($552)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $554=HEAP32[((10072)>>2)];
  var $555=$554>>>3;
  var $556=(($block+44)|0);
  var $557=$556;
  var $558=($555|0)==0;
  if (!($558)) {
   var $559=HEAP32[(($557)>>2)];
   var $560=(($buffer_i36+$555)|0);
   var $_078_i77_i=$560;var $_09_i76_i=$559;var $i_010_i75_i=0;
   while(1) {
    var $i_010_i75_i;
    var $_09_i76_i;
    var $_078_i77_i;
    var $562=(($_09_i76_i)&255);
    var $563=((($_078_i77_i)-(1))|0);
    HEAP8[($563)]=$562;
    var $564=$_09_i76_i>>>8;
    var $565=((($i_010_i75_i)+(1))|0);
    var $566=($565>>>0)<($555>>>0);
    if ($566) {
     var $_078_i77_i=$563;var $_09_i76_i=$564;var $i_010_i75_i=$565;
    } else {
     break;
    }
   }
  }
  var $567=FUNCTION_TABLE[$write_cb]($431,1,$555,$handle);
  var $568=($567|0)==($555|0);
  if (!($568)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $570=(($block+48)|0);
  var $571=$570;
  var $572=HEAP32[(($571)>>2)];
  var $573=HEAP32[(($557)>>2)];
  var $574=FUNCTION_TABLE[$write_cb]($572,1,$573,$handle);
  var $575=HEAP32[(($557)>>2)];
  var $576=($574|0)==($575|0);
  var $__i50=($576&1);
  var $_0=$__i50;
  var $_0;
  STACKTOP=sp;return $_0;
  break;
 }
 case 5: {
  var $257=(($buffer_i29)|0);
  var $258=HEAP32[((10176)>>2)];
  var $259=$258>>>3;
  var $260=(($block+16)|0);
  var $261=FUNCTION_TABLE[$write_cb]($260,1,$259,$handle);
  var $262=($261|0)==($259|0);
  if (!($262)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $264=HEAP32[((10184)>>2)];
  var $265=$264>>>3;
  var $266=($265|0)==0;
  if (!($266)) {
   var $267=(($block+152)|0);
   var $ld$7$0=(($267)|0);
   var $268$0=HEAP32[(($ld$7$0)>>2)];
   var $ld$8$1=(($267+4)|0);
   var $268$1=HEAP32[(($ld$8$1)>>2)];
   var $269=(($buffer_i29+$265)|0);
   var $_078_i_i=$269;var $_09_i_i$1=$268$1;var $_09_i_i$0=$268$0;var $i_010_i_i=0;
   while(1) {
    var $i_010_i_i;
    var $_09_i_i$0;
    var $_09_i_i$1;
    var $_078_i_i;
    var $271$0=$_09_i_i$0;
    var $271=$271$0&255;
    var $272=((($_078_i_i)-(1))|0);
    HEAP8[($272)]=$271;
    var $273$0=($_09_i_i$0>>>8)|($_09_i_i$1<<24);
    var $273$1=($_09_i_i$1>>>8)|(0<<24);
    var $274=((($i_010_i_i)+(1))|0);
    var $275=($274>>>0)<($265>>>0);
    if ($275) {
     var $_078_i_i=$272;var $_09_i_i$1=$273$1;var $_09_i_i$0=$273$0;var $i_010_i_i=$274;
    } else {
     break;
    }
   }
  }
  var $276=FUNCTION_TABLE[$write_cb]($257,1,$265,$handle);
  var $277=($276|0)==($265|0);
  if (!($277)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $279=HEAP32[((10192)>>2)];
  var $280=HEAP32[((10160)>>2)];
  var $281=((($280)+($279))|0);
  var $282=$281>>>3;
  _memset($257, 0, $282);
  var $283=(($block+160)|0);
  var $284=HEAP32[(($283)>>2)];
  var $285=($284|0)==0;
  if (!($285)) {
   var $287=HEAP8[($257)];
   var $288=$287|-128;
   HEAP8[($257)]=$288;
  }
  var $290=FUNCTION_TABLE[$write_cb]($257,1,$282,$handle);
  var $291=($290|0)==($282|0);
  if (!($291)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $293=HEAP32[((10168)>>2)];
  var $294=$293>>>3;
  var $295=(($block+164)|0);
  var $296=($294|0)==0;
  if (!($296)) {
   var $297=HEAP32[(($295)>>2)];
   var $298=(($buffer_i29+$294)|0);
   var $_078_i79_i=$298;var $_09_i78_i=$297;var $i_010_i77_i=0;
   while(1) {
    var $i_010_i77_i;
    var $_09_i78_i;
    var $_078_i79_i;
    var $300=(($_09_i78_i)&255);
    var $301=((($_078_i79_i)-(1))|0);
    HEAP8[($301)]=$300;
    var $302=$_09_i78_i>>>8;
    var $303=((($i_010_i77_i)+(1))|0);
    var $304=($303>>>0)<($294>>>0);
    if ($304) {
     var $_078_i79_i=$301;var $_09_i78_i=$302;var $i_010_i77_i=$303;
    } else {
     break;
    }
   }
  }
  var $305=FUNCTION_TABLE[$write_cb]($257,1,$294,$handle);
  var $306=($305|0)==($294|0);
  if (!($306)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $307=HEAP32[(($295)>>2)];
  var $308=($307|0)==0;
  if ($308) {
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $309=(($block+168)|0);
  var $310=HEAP32[((10128)>>2)];
  var $311=$310>>>3;
  var $312=($311|0)==0;
  var $313=HEAP32[((10144)>>2)];
  var $314=$313>>>3;
  var $315=($314|0)==0;
  var $316=HEAP32[((10152)>>2)];
  var $317=$316>>>3;
  var $318=HEAP32[((10104)>>2)];
  var $319=HEAP32[((10120)>>2)];
  var $320=((($319)+($318))|0);
  var $321=HEAP32[((10112)>>2)];
  var $322=((($320)+($321))|0);
  var $323=$322>>>3;
  var $324=HEAP32[((10136)>>2)];
  var $325=$324>>>3;
  var $326=($325|0)==0;
  var $327=HEAP32[((10208)>>2)];
  var $328=$327>>>3;
  var $329=($328|0)==0;
  var $330=HEAP32[((10216)>>2)];
  var $331=$330>>>3;
  var $332=($331|0)==0;
  var $333=HEAP32[((10200)>>2)];
  var $334=$333>>>3;
  var $335=(($buffer_i29+$331)|0);
  var $336=(($buffer_i29+$328)|0);
  var $337=(($buffer_i29+$325)|0);
  var $338=(($buffer_i29+$314)|0);
  var $339=(($buffer_i29+$311)|0);
  var $i_0107_i=0;
  L3415: while(1) {
   var $i_0107_i;
   var $341=HEAP32[(($309)>>2)];
   if (!($312)) {
    var $342=(($341+($i_0107_i<<5))|0);
    var $ld$9$0=(($342)|0);
    var $343$0=HEAP32[(($ld$9$0)>>2)];
    var $ld$10$1=(($342+4)|0);
    var $343$1=HEAP32[(($ld$10$1)>>2)];
    var $_078_i83_i=$339;var $_09_i82_i$1=$343$1;var $_09_i82_i$0=$343$0;var $i_010_i81_i=0;
    while(1) {
     var $i_010_i81_i;
     var $_09_i82_i$0;
     var $_09_i82_i$1;
     var $_078_i83_i;
     var $345$0=$_09_i82_i$0;
     var $345=$345$0&255;
     var $346=((($_078_i83_i)-(1))|0);
     HEAP8[($346)]=$345;
     var $347$0=($_09_i82_i$0>>>8)|($_09_i82_i$1<<24);
     var $347$1=($_09_i82_i$1>>>8)|(0<<24);
     var $348=((($i_010_i81_i)+(1))|0);
     var $349=($348>>>0)<($311>>>0);
     if ($349) {
      var $_078_i83_i=$346;var $_09_i82_i$1=$347$1;var $_09_i82_i$0=$347$0;var $i_010_i81_i=$348;
     } else {
      break;
     }
    }
   }
   var $350=FUNCTION_TABLE[$write_cb]($257,1,$311,$handle);
   var $351=($350|0)==($311|0);
   if (!($351)) {
    var $_0=0;
    label = 2553;
    break;
   }
   if (!($315)) {
    var $353=(($341+($i_0107_i<<5)+8)|0);
    var $354=HEAP8[($353)];
    var $355=($354&255);
    var $_078_i93_i=$338;var $_09_i92_i=$355;var $i_010_i91_i=0;
    while(1) {
     var $i_010_i91_i;
     var $_09_i92_i;
     var $_078_i93_i;
     var $357=(($_09_i92_i)&255);
     var $358=((($_078_i93_i)-(1))|0);
     HEAP8[($358)]=$357;
     var $359=$_09_i92_i>>>8;
     var $360=((($i_010_i91_i)+(1))|0);
     var $361=($360>>>0)<($314>>>0);
     if ($361) {
      var $_078_i93_i=$358;var $_09_i92_i=$359;var $i_010_i91_i=$360;
     } else {
      break;
     }
    }
   }
   var $362=FUNCTION_TABLE[$write_cb]($257,1,$314,$handle);
   var $363=($362|0)==($314|0);
   if (!($363)) {
    var $_0=0;
    label = 2551;
    break;
   }
   var $365=(($341+($i_0107_i<<5)+9)|0);
   var $366=FUNCTION_TABLE[$write_cb]($365,1,$317,$handle);
   var $367=($366|0)==($317|0);
   if (!($367)) {
    var $_0=0;
    label = 2559;
    break;
   }
   _memset($257, 0, $323);
   var $369=(($341+($i_0107_i<<5)+20)|0);
   var $370=$369;
   var $371=HEAP32[(($370)>>2)];
   var $372=$371>>>16;
   var $373=$372<<7;
   var $374=$371>>>17;
   var $375=$374<<6;
   var $376=$375&64;
   var $377=$376|$373;
   var $378=(($377)&255);
   HEAP8[($257)]=$378;
   var $379=FUNCTION_TABLE[$write_cb]($257,1,$323,$handle);
   var $380=($379|0)==($323|0);
   if (!($380)) {
    var $_0=0;
    label = 2560;
    break;
   }
   var $382=(($341+($i_0107_i<<5)+23)|0);
   if (!($326)) {
    var $383=HEAP8[($382)];
    var $384=($383&255);
    var $_078_i103_i=$337;var $_09_i102_i=$384;var $i_010_i101_i=0;
    while(1) {
     var $i_010_i101_i;
     var $_09_i102_i;
     var $_078_i103_i;
     var $386=(($_09_i102_i)&255);
     var $387=((($_078_i103_i)-(1))|0);
     HEAP8[($387)]=$386;
     var $388=$_09_i102_i>>>8;
     var $389=((($i_010_i101_i)+(1))|0);
     var $390=($389>>>0)<($325>>>0);
     if ($390) {
      var $_078_i103_i=$387;var $_09_i102_i=$388;var $i_010_i101_i=$389;
     } else {
      break;
     }
    }
   }
   var $391=FUNCTION_TABLE[$write_cb]($257,1,$325,$handle);
   var $392=($391|0)==($325|0);
   if (!($392)) {
    var $_0=0;
    label = 2571;
    break;
   }
   var $393=(($341+($i_0107_i<<5)+24)|0);
   var $j_0_i=0;
   while(1) {
    var $j_0_i;
    var $395=HEAP8[($382)];
    var $396=($395&255);
    var $397=($j_0_i>>>0)<($396>>>0);
    if (!($397)) {
     break;
    }
    var $399=HEAP32[(($393)>>2)];
    if (!($329)) {
     var $400=(($399+($j_0_i<<4))|0);
     var $ld$11$0=(($400)|0);
     var $401$0=HEAP32[(($ld$11$0)>>2)];
     var $ld$12$1=(($400+4)|0);
     var $401$1=HEAP32[(($ld$12$1)>>2)];
     var $_078_i98_i=$336;var $_09_i97_i$1=$401$1;var $_09_i97_i$0=$401$0;var $i_010_i96_i=0;
     while(1) {
      var $i_010_i96_i;
      var $_09_i97_i$0;
      var $_09_i97_i$1;
      var $_078_i98_i;
      var $403$0=$_09_i97_i$0;
      var $403=$403$0&255;
      var $404=((($_078_i98_i)-(1))|0);
      HEAP8[($404)]=$403;
      var $405$0=($_09_i97_i$0>>>8)|($_09_i97_i$1<<24);
      var $405$1=($_09_i97_i$1>>>8)|(0<<24);
      var $406=((($i_010_i96_i)+(1))|0);
      var $407=($406>>>0)<($328>>>0);
      if ($407) {
       var $_078_i98_i=$404;var $_09_i97_i$1=$405$1;var $_09_i97_i$0=$405$0;var $i_010_i96_i=$406;
      } else {
       break;
      }
     }
    }
    var $408=FUNCTION_TABLE[$write_cb]($257,1,$328,$handle);
    var $409=($408|0)==($328|0);
    if (!($409)) {
     var $_0=0;
     label = 2575;
     break L3415;
    }
    if (!($332)) {
     var $411=(($399+($j_0_i<<4)+8)|0);
     var $412=HEAP8[($411)];
     var $413=($412&255);
     var $_078_i88_i=$335;var $_09_i87_i=$413;var $i_010_i86_i=0;
     while(1) {
      var $i_010_i86_i;
      var $_09_i87_i;
      var $_078_i88_i;
      var $415=(($_09_i87_i)&255);
      var $416=((($_078_i88_i)-(1))|0);
      HEAP8[($416)]=$415;
      var $417=$_09_i87_i>>>8;
      var $418=((($i_010_i86_i)+(1))|0);
      var $419=($418>>>0)<($331>>>0);
      if ($419) {
       var $_078_i88_i=$416;var $_09_i87_i=$417;var $i_010_i86_i=$418;
      } else {
       break;
      }
     }
    }
    var $420=FUNCTION_TABLE[$write_cb]($257,1,$331,$handle);
    var $421=($420|0)==($331|0);
    if (!($421)) {
     var $_0=0;
     label = 2564;
     break L3415;
    }
    _memset($257, 0, $334);
    var $423=FUNCTION_TABLE[$write_cb]($257,1,$334,$handle);
    var $424=($423|0)==($334|0);
    var $425=((($j_0_i)+(1))|0);
    if ($424) {
     var $j_0_i=$425;
    } else {
     var $_0=0;
     label = 2549;
     break L3415;
    }
   }
   var $427=((($i_0107_i)+(1))|0);
   var $428=HEAP32[(($295)>>2)];
   var $429=($427>>>0)<($428>>>0);
   if ($429) {
    var $i_0107_i=$427;
   } else {
    var $_0=1;
    label = 2539;
    break;
   }
  }
  if (label == 2539) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2549) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2551) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2553) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2559) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2560) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2564) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2571) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2575) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  break;
 }
 case 3: {
  var $123=(($block+16)|0);
  var $124=(($buffer_i33)|0);
  var $125=$123;
  var $126=(($block+20)|0);
  var $127=$126;
  var $128=(($buffer_i33+7)|0);
  var $129=(($buffer_i33+6)|0);
  var $130=(($buffer_i33+5)|0);
  var $131=(($buffer_i33+4)|0);
  var $132=(($buffer_i33+3)|0);
  var $133=(($buffer_i33+2)|0);
  var $134=(($buffer_i33+1)|0);
  var $135=(($buffer_i33+15)|0);
  var $136=(($buffer_i33+14)|0);
  var $137=(($buffer_i33+13)|0);
  var $138=(($buffer_i33+12)|0);
  var $139=(($buffer_i33+11)|0);
  var $140=(($buffer_i33+10)|0);
  var $141=(($buffer_i33+9)|0);
  var $142=(($buffer_i33+8)|0);
  var $143=(($buffer_i33+17)|0);
  var $144=(($buffer_i33+16)|0);
  var $i_0_i34=0;
  while(1) {
   var $i_0_i34;
   var $146=HEAP32[(($125)>>2)];
   var $147=($i_0_i34>>>0)<($146>>>0);
   if (!($147)) {
    var $_0=1;
    label = 2543;
    break;
   }
   var $148=HEAP32[(($127)>>2)];
   var $149=(($148+((($i_0_i34)*(24))&-1))|0);
   var $ld$3$0=(($149)|0);
   var $150$0=HEAP32[(($ld$3$0)>>2)];
   var $ld$4$1=(($149+4)|0);
   var $150$1=HEAP32[(($ld$4$1)>>2)];
   var $151$0=$150$0;
   var $151=$151$0&255;
   HEAP8[($128)]=$151;
   var $152$0=($150$0>>>8)|($150$1<<24);
   var $152$1=($150$1>>>8)|(0<<24);
   var $153$0=$152$0;
   var $153=$153$0&255;
   HEAP8[($129)]=$153;
   var $154$0=($150$0>>>16)|($150$1<<16);
   var $154$1=($150$1>>>16)|(0<<16);
   var $155$0=$154$0;
   var $155=$155$0&255;
   HEAP8[($130)]=$155;
   var $156$0=($150$0>>>24)|($150$1<<8);
   var $156$1=($150$1>>>24)|(0<<8);
   var $157$0=$156$0;
   var $157=$157$0&255;
   HEAP8[($131)]=$157;
   var $158$0=$150$1;
   var $158$1=0;
   var $159$0=$158$0;
   var $159=$159$0&255;
   HEAP8[($132)]=$159;
   var $160$0=($150$1>>>8)|(0<<24);
   var $160$1=(0>>>8)|(0<<24);
   var $161$0=$160$0;
   var $161=$161$0&255;
   HEAP8[($133)]=$161;
   var $162$0=($150$1>>>16)|(0<<16);
   var $162$1=(0>>>16)|(0<<16);
   var $163$0=$162$0;
   var $163=$163$0&255;
   HEAP8[($134)]=$163;
   var $164$0=($150$1>>>24)|(0<<8);
   var $164$1=(0>>>24)|(0<<8);
   var $165$0=$164$0;
   var $165=$165$0&255;
   HEAP8[($124)]=$165;
   var $166=(($148+((($i_0_i34)*(24))&-1)+8)|0);
   var $ld$5$0=(($166)|0);
   var $167$0=HEAP32[(($ld$5$0)>>2)];
   var $ld$6$1=(($166+4)|0);
   var $167$1=HEAP32[(($ld$6$1)>>2)];
   var $168$0=$167$0;
   var $168=$168$0&255;
   HEAP8[($135)]=$168;
   var $169$0=($167$0>>>8)|($167$1<<24);
   var $169$1=($167$1>>>8)|(0<<24);
   var $170$0=$169$0;
   var $170=$170$0&255;
   HEAP8[($136)]=$170;
   var $171$0=($167$0>>>16)|($167$1<<16);
   var $171$1=($167$1>>>16)|(0<<16);
   var $172$0=$171$0;
   var $172=$172$0&255;
   HEAP8[($137)]=$172;
   var $173$0=($167$0>>>24)|($167$1<<8);
   var $173$1=($167$1>>>24)|(0<<8);
   var $174$0=$173$0;
   var $174=$174$0&255;
   HEAP8[($138)]=$174;
   var $175$0=$167$1;
   var $175$1=0;
   var $176$0=$175$0;
   var $176=$176$0&255;
   HEAP8[($139)]=$176;
   var $177$0=($167$1>>>8)|(0<<24);
   var $177$1=(0>>>8)|(0<<24);
   var $178$0=$177$0;
   var $178=$178$0&255;
   HEAP8[($140)]=$178;
   var $179$0=($167$1>>>16)|(0<<16);
   var $179$1=(0>>>16)|(0<<16);
   var $180$0=$179$0;
   var $180=$180$0&255;
   HEAP8[($141)]=$180;
   var $181$0=($167$1>>>24)|(0<<8);
   var $181$1=(0>>>24)|(0<<8);
   var $182$0=$181$0;
   var $182=$182$0&255;
   HEAP8[($142)]=$182;
   var $183=(($148+((($i_0_i34)*(24))&-1)+16)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($184)&255);
   HEAP8[($143)]=$185;
   var $186=$184>>>8;
   var $187=(($186)&255);
   HEAP8[($144)]=$187;
   var $188=FUNCTION_TABLE[$write_cb]($124,1,18,$handle);
   var $189=($188|0)==18;
   var $190=((($i_0_i34)+(1))|0);
   if ($189) {
    var $i_0_i34=$190;
   } else {
    var $_0=0;
    label = 2557;
    break;
   }
  }
  if (label == 2543) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2557) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  break;
 }
 case 1: {
  var $93=(($block+8)|0);
  var $94=HEAP32[(($93)>>2)];
  var $95=(($buffer_i29)|0);
  _memset($95, 0, 1024);
  var $96=$94>>>10;
  var $i_0_i=0;
  while(1) {
   var $i_0_i;
   var $98=($i_0_i>>>0)<($96>>>0);
   if (!($98)) {
    break;
   }
   var $100=FUNCTION_TABLE[$write_cb]($95,1,1024,$handle);
   var $101=($100|0)==1024;
   var $102=((($i_0_i)+(1))|0);
   if ($101) {
    var $i_0_i=$102;
   } else {
    var $_0=0;
    label = 2552;
    break;
   }
  }
  if (label == 2552) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $104=$94&1023;
  var $105=FUNCTION_TABLE[$write_cb]($95,1,$104,$handle);
  var $106=($105|0)==($104|0);
  var $__i30=($106&1);
  var $_0=$__i30;
  var $_0;
  STACKTOP=sp;return $_0;
  break;
 }
 case 4: {
  var $192=(($block+16)|0);
  var $193=(($buffer_i36)|0);
  var $194=HEAP32[((9904)>>2)];
  var $195=$194>>>3;
  var $196=HEAP32[((9896)>>2)];
  var $197=$196>>>3;
  var $198=$192;
  var $199=($195|0)==0;
  if (!($199)) {
   var $200=HEAP32[(($198)>>2)];
   var $_056_i_i=$193;var $_07_i_i=$200;var $i_08_i_i=0;
   while(1) {
    var $i_08_i_i;
    var $_07_i_i;
    var $_056_i_i;
    var $201=(($_07_i_i)&255);
    var $202=(($_056_i_i+1)|0);
    HEAP8[($_056_i_i)]=$201;
    var $203=$_07_i_i>>>8;
    var $204=((($i_08_i_i)+(1))|0);
    var $205=($204>>>0)<($195>>>0);
    if ($205) {
     var $_056_i_i=$202;var $_07_i_i=$203;var $i_08_i_i=$204;
    } else {
     break;
    }
   }
  }
  var $206=FUNCTION_TABLE[$write_cb]($193,1,$195,$handle);
  var $207=($206|0)==($195|0);
  if (!($207)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $209=(($block+20)|0);
  var $210=$209;
  var $211=HEAP32[(($210)>>2)];
  var $212=HEAP32[(($198)>>2)];
  var $213=FUNCTION_TABLE[$write_cb]($211,1,$212,$handle);
  var $214=HEAP32[(($198)>>2)];
  var $215=($213|0)==($214|0);
  if (!($215)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $217=(($block+24)|0);
  var $218=$217;
  var $219=($197|0)==0;
  if (!($219)) {
   var $220=HEAP32[(($218)>>2)];
   var $_056_i35_i=$193;var $_07_i34_i=$220;var $i_08_i33_i=0;
   while(1) {
    var $i_08_i33_i;
    var $_07_i34_i;
    var $_056_i35_i;
    var $221=(($_07_i34_i)&255);
    var $222=(($_056_i35_i+1)|0);
    HEAP8[($_056_i35_i)]=$221;
    var $223=$_07_i34_i>>>8;
    var $224=((($i_08_i33_i)+(1))|0);
    var $225=($224>>>0)<($197>>>0);
    if ($225) {
     var $_056_i35_i=$222;var $_07_i34_i=$223;var $i_08_i33_i=$224;
    } else {
     break;
    }
   }
  }
  var $226=FUNCTION_TABLE[$write_cb]($193,1,$197,$handle);
  var $227=($226|0)==($197|0);
  if (!($227)) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $228=(($block+28)|0);
  var $229=$228;
  var $i_0_i37=0;
  while(1) {
   var $i_0_i37;
   var $231=HEAP32[(($218)>>2)];
   var $232=($i_0_i37>>>0)<($231>>>0);
   if (!($232)) {
    var $_0=1;
    label = 2548;
    break;
   }
   if (!($199)) {
    var $234=HEAP32[(($229)>>2)];
    var $235=(($234+($i_0_i37<<3))|0);
    var $236=HEAP32[(($235)>>2)];
    var $_056_i40_i=$193;var $_07_i39_i=$236;var $i_08_i38_i=0;
    while(1) {
     var $i_08_i38_i;
     var $_07_i39_i;
     var $_056_i40_i;
     var $237=(($_07_i39_i)&255);
     var $238=(($_056_i40_i+1)|0);
     HEAP8[($_056_i40_i)]=$237;
     var $239=$_07_i39_i>>>8;
     var $240=((($i_08_i38_i)+(1))|0);
     var $241=($240>>>0)<($195>>>0);
     if ($241) {
      var $_056_i40_i=$238;var $_07_i39_i=$239;var $i_08_i38_i=$240;
     } else {
      break;
     }
    }
   }
   var $242=FUNCTION_TABLE[$write_cb]($193,1,$195,$handle);
   var $243=($242|0)==($195|0);
   if (!($243)) {
    var $_0=0;
    label = 2544;
    break;
   }
   var $245=HEAP32[(($229)>>2)];
   var $246=(($245+($i_0_i37<<3)+4)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=(($245+($i_0_i37<<3))|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=FUNCTION_TABLE[$write_cb]($247,1,$249,$handle);
   var $251=HEAP32[(($229)>>2)];
   var $252=(($251+($i_0_i37<<3))|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=($250|0)==($253|0);
   var $255=((($i_0_i37)+(1))|0);
   if ($254) {
    var $i_0_i37=$255;
   } else {
    var $_0=0;
    label = 2576;
    break;
   }
  }
  if (label == 2544) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2548) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2576) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  break;
 }
 default: {
  var $578=(($block+16)|0);
  var $579=(($block+8)|0);
  var $580=HEAP32[(($579)>>2)];
  var $_idx=$578;
  var $_idx_val=HEAP32[(($_idx)>>2)];
  var $581=FUNCTION_TABLE[$write_cb]($_idx_val,1,$580,$handle);
  var $582=($581|0)==($580|0);
  var $__i52=($582&1);
  var $_0=$__i52;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 }
}
function _open_tempfile_($filename,$tempfile_path_prefix,$tempfile,$tempfilename,$status){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=($tempfile_path_prefix|0)==0;
 do {
  if ($1) {
   var $3=_strlen($filename);
   var $4=((($3)+(15))|0);
   var $5=($4|0)==0;
   var $6=($5&1);
   var $_size_i=((($6)+($4))|0);
   var $7=_malloc($_size_i);
   HEAP32[(($tempfilename)>>2)]=$7;
   var $8=($7|0)==0;
   if (!($8)) {
    _local_snprintf($7,$4,3128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$filename,HEAP32[(((tempVarArgs)+(8))>>2)]=3256,tempVarArgs)); STACKTOP=tempVarArgs;
    break;
   }
   HEAP32[(($status)>>2)]=11;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $12=_strrchr($filename,47);
   var $13=($12|0)==0;
   var $14=(($12+1)|0);
   var $p_0=$13?$filename:$14;
   var $15=_strlen($tempfile_path_prefix);
   var $16=_strlen($p_0);
   var $17=((($15)+(16))|0);
   var $18=((($17)+($16))|0);
   var $19=($18|0)==0;
   var $20=($19&1);
   var $_size_i21=((($20)+($18))|0);
   var $21=_malloc($_size_i21);
   HEAP32[(($tempfilename)>>2)]=$21;
   var $22=($21|0)==0;
   if (!($22)) {
    _local_snprintf($21,$18,3048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$tempfile_path_prefix,HEAP32[(((tempVarArgs)+(8))>>2)]=$p_0,HEAP32[(((tempVarArgs)+(16))>>2)]=3256,tempVarArgs)); STACKTOP=tempVarArgs;
    break;
   }
   HEAP32[(($status)>>2)]=11;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $26=HEAP32[(($tempfilename)>>2)];
 var $27=_fopen($26,2936);
 HEAP32[(($tempfile)>>2)]=$27;
 var $28=($27|0)==0;
 if (!($28)) {
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 HEAP32[(($status)>>2)]=2;
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _local_snprintf($str,$size,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $va=sp;
 var $1=(($va)|0);
 var $2=$va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vsnprintf($str,$size,$fmt,$1);
 STACKTOP=sp;return;
}
function _read_metadata_block_data_cb_($handle,$read_cb,$seek_cb,$block){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1136)|0;
 var $len_i=sp;
 var $buffer_i_i=(sp)+(8);
 var $buffer_i37=(sp)+(40);
 var $buffer_i34=(sp)+(1064);
 var $buffer_i31=(sp)+(1072);
 var $buffer_i=(sp)+(1096);
 var $1=(($block)|0);
 var $2=HEAP32[(($1)>>2)];
 switch (($2|0)) {
 case 0: {
  var $4=(($buffer_i)|0);
  var $5=FUNCTION_TABLE[$read_cb]($4,1,34,$handle);
  var $6=($5|0)==34;
  if (!($6)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $7=(($block+16)|0);
  var $8=(($buffer_i+1)|0);
  var $9=HEAP8[($4)];
  var $10=($9&255);
  var $11=$10<<8;
  var $12=HEAP8[($8)];
  var $13=($12&255);
  var $14=$13|$11;
  var $15=$7;
  HEAP32[(($15)>>2)]=$14;
  var $16=(($buffer_i+2)|0);
  var $17=(($buffer_i+3)|0);
  var $18=HEAP8[($16)];
  var $19=($18&255);
  var $20=$19<<8;
  var $21=HEAP8[($17)];
  var $22=($21&255);
  var $23=$22|$20;
  var $24=(($block+20)|0);
  var $25=$24;
  HEAP32[(($25)>>2)]=$23;
  var $26=(($buffer_i+4)|0);
  var $27=(($buffer_i+5)|0);
  var $28=HEAP8[($26)];
  var $29=($28&255);
  var $30=$29<<8;
  var $31=(($buffer_i+6)|0);
  var $32=HEAP8[($27)];
  var $33=($32&255);
  var $34=$33|$30;
  var $35=$34<<8;
  var $36=HEAP8[($31)];
  var $37=($36&255);
  var $38=$35|$37;
  var $39=(($block+24)|0);
  var $40=$39;
  HEAP32[(($40)>>2)]=$38;
  var $41=(($buffer_i+7)|0);
  var $42=(($buffer_i+8)|0);
  var $43=HEAP8[($41)];
  var $44=($43&255);
  var $45=$44<<8;
  var $46=(($buffer_i+9)|0);
  var $47=HEAP8[($42)];
  var $48=($47&255);
  var $49=$48|$45;
  var $50=$49<<8;
  var $51=HEAP8[($46)];
  var $52=($51&255);
  var $53=$50|$52;
  var $54=(($block+28)|0);
  var $55=$54;
  HEAP32[(($55)>>2)]=$53;
  var $56=(($buffer_i+10)|0);
  var $57=(($buffer_i+11)|0);
  var $58=HEAP8[($56)];
  var $59=($58&255);
  var $60=$59<<8;
  var $61=HEAP8[($57)];
  var $62=($61&255);
  var $63=$62|$60;
  var $64=$63<<4;
  var $65=(($buffer_i+12)|0);
  var $66=HEAP8[($65)];
  var $67=($66&255);
  var $68=$67>>>4;
  var $69=$68|$64;
  var $70=(($block+32)|0);
  var $71=$70;
  HEAP32[(($71)>>2)]=$69;
  var $72=$67>>>1;
  var $73=$72&7;
  var $74=((($73)+(1))|0);
  var $75=(($block+36)|0);
  var $76=$75;
  HEAP32[(($76)>>2)]=$74;
  var $77=$67<<4;
  var $78=$77&16;
  var $79=(($buffer_i+13)|0);
  var $80=HEAP8[($79)];
  var $81=($80&255);
  var $82=$81>>>4;
  var $83=$78|$82;
  var $84=((($83)+(1))|0);
  var $85=(($block+40)|0);
  var $86=$85;
  HEAP32[(($86)>>2)]=$84;
  var $87=$81&15;
  var $88$0=$87;
  var $88$1=0;
  var $89=(($buffer_i+14)|0);
  var $90=(($buffer_i+15)|0);
  var $91=HEAP8[($89)];
  var $92$0=($91&255);
  var $92$1=0;
  var $93$0=($92$0<<8)|(0>>>24);
  var $93$1=($92$1<<8)|($92$0>>>24);
  var $94=(($buffer_i+16)|0);
  var $95=HEAP8[($90)];
  var $96$0=($95&255);
  var $96$1=0;
  var $97$0=$96$0|$93$0;
  var $97$1=$96$1|$93$1;
  var $98$0=($97$0<<8)|(0>>>24);
  var $98$1=($97$1<<8)|($97$0>>>24);
  var $99=(($buffer_i+17)|0);
  var $100=HEAP8[($94)];
  var $101$0=($100&255);
  var $101$1=0;
  var $102$0=$98$0|$101$0;
  var $102$1=$98$1|$101$1;
  var $103$0=($102$0<<8)|(0>>>24);
  var $103$1=($102$1<<8)|($102$0>>>24);
  var $104=HEAP8[($99)];
  var $105$0=($104&255);
  var $105$1=0;
  var $106$0=0;
  var $106$1=$88$0;
  var $107$0=$105$0|$106$0;
  var $107$1=$105$1|$106$1;
  var $108$0=$107$0|$103$0;
  var $108$1=$107$1|$103$1;
  var $109=(($block+48)|0);
  var $110=$109;
  var $st$0$0=(($110)|0);
  HEAP32[(($st$0$0)>>2)]=$108$0;
  var $st$1$1=(($110+4)|0);
  HEAP32[(($st$1$1)>>2)]=$108$1;
  var $111=(($block+56)|0);
  var $112=(($buffer_i+18)|0);
  (_memcpy($111, $112, 16)|0);
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
  break;
 }
 case 2: {
  var $120=(($block+8)|0);
  var $121=HEAP32[(($120)>>2)];
  var $122=HEAP32[((10224)>>2)];
  var $123=$122>>>3;
  var $124=(($block+16)|0);
  var $125=FUNCTION_TABLE[$read_cb]($124,1,$123,$handle);
  var $126=($125|0)!=($123|0);
  var $127=($123>>>0)>($121>>>0);
  var $or_cond_i=$126|$127;
  if ($or_cond_i) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $129=((($121)-($123))|0);
  var $130=($123|0)==($121|0);
  do {
   if ($130) {
    var $132=(($block+20)|0);
    var $133=$132;
    HEAP32[(($133)>>2)]=0;
   } else {
    var $135=_malloc($129);
    var $136=(($block+20)|0);
    var $137=$136;
    HEAP32[(($137)>>2)]=$135;
    var $138=($135|0)==0;
    if ($138) {
     var $_0=11;
     var $_0;
     STACKTOP=sp;return $_0;
    }
    var $140=FUNCTION_TABLE[$read_cb]($135,1,$129,$handle);
    var $141=($140|0)==($129|0);
    if ($141) {
     break;
    } else {
     var $_0=6;
    }
    var $_0;
    STACKTOP=sp;return $_0;
   }
  } while(0);
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
  break;
 }
 case 5: {
  var $308=(($buffer_i37)|0);
  var $309=HEAP32[((10176)>>2)];
  var $310=$309>>>3;
  var $311=(($block+16)|0);
  var $312=FUNCTION_TABLE[$read_cb]($311,1,$310,$handle);
  var $313=($312|0)==($310|0);
  if (!($313)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $315=HEAP32[((10184)>>2)];
  var $316=$315>>>3;
  var $317=FUNCTION_TABLE[$read_cb]($308,1,$316,$handle);
  var $318=($317|0)==($316|0);
  if (!($318)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $320=($316|0)==0;
  if ($320) {
   var $ret_0_lcssa_i_i$1=0;var $ret_0_lcssa_i_i$0=0;
  } else {
   var $_03_i_i=$308;var $ret_04_i_i$1=0;var $ret_04_i_i$0=0;var $i_05_i_i=0;
   while(1) {
    var $i_05_i_i;
    var $ret_04_i_i$0;
    var $ret_04_i_i$1;
    var $_03_i_i;
    var $321$0=($ret_04_i_i$0<<8)|(0>>>24);
    var $321$1=($ret_04_i_i$1<<8)|($ret_04_i_i$0>>>24);
    var $322=(($_03_i_i+1)|0);
    var $323=HEAP8[($_03_i_i)];
    var $324$0=($323&255);
    var $324$1=0;
    var $325$0=$324$0|$321$0;
    var $325$1=$324$1|$321$1;
    var $326=((($i_05_i_i)+(1))|0);
    var $327=($326>>>0)<($316>>>0);
    if ($327) {
     var $_03_i_i=$322;var $ret_04_i_i$1=$325$1;var $ret_04_i_i$0=$325$0;var $i_05_i_i=$326;
    } else {
     var $ret_0_lcssa_i_i$1=$325$1;var $ret_0_lcssa_i_i$0=$325$0;
     break;
    }
   }
  }
  var $ret_0_lcssa_i_i$0;
  var $ret_0_lcssa_i_i$1;
  var $328=(($block+152)|0);
  var $st$6$0=(($328)|0);
  HEAP32[(($st$6$0)>>2)]=$ret_0_lcssa_i_i$0;
  var $st$7$1=(($328+4)|0);
  HEAP32[(($st$7$1)>>2)]=$ret_0_lcssa_i_i$1;
  var $329=HEAP32[((10192)>>2)];
  var $330=HEAP32[((10160)>>2)];
  var $331=((($330)+($329))|0);
  var $332=$331>>>3;
  var $333=FUNCTION_TABLE[$read_cb]($308,1,$332,$handle);
  var $334=($333|0)==($332|0);
  if (!($334)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $336=HEAP8[($308)];
  var $_lobit_i=($336&255)>>>7;
  var $337=($_lobit_i&255);
  var $338=(($block+160)|0);
  HEAP32[(($338)>>2)]=$337;
  var $339=HEAP32[((10168)>>2)];
  var $340=$339>>>3;
  var $341=FUNCTION_TABLE[$read_cb]($308,1,$340,$handle);
  var $342=($341|0)==($340|0);
  if (!($342)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $344=($340|0)==0;
  do {
   if ($344) {
    var $345=(($block+164)|0);
    HEAP32[(($345)>>2)]=0;
    var $356=$345;
    label = 2633;
   } else {
    var $_03_i33_i=$308;var $ret_04_i32_i=0;var $i_05_i31_i=0;
    while(1) {
     var $i_05_i31_i;
     var $ret_04_i32_i;
     var $_03_i33_i;
     var $346=$ret_04_i32_i<<8;
     var $347=(($_03_i33_i+1)|0);
     var $348=HEAP8[($_03_i33_i)];
     var $349=($348&255);
     var $350=$349|$346;
     var $351=((($i_05_i31_i)+(1))|0);
     var $352=($351>>>0)<($340>>>0);
     if ($352) {
      var $_03_i33_i=$347;var $ret_04_i32_i=$350;var $i_05_i31_i=$351;
     } else {
      break;
     }
    }
    var $353=(($block+164)|0);
    HEAP32[(($353)>>2)]=$350;
    var $354=($350|0)==0;
    if ($354) {
     var $356=$353;
     label = 2633;
     break;
    }
    var $359=_calloc($350,32);
    var $360=$359;
    var $361=(($block+168)|0);
    HEAP32[(($361)>>2)]=$360;
    var $362=($359|0)==0;
    if ($362) {
     var $_0=11;
    } else {
     var $_ph_i40=$353;var $364=$350;var $363=$360;
     break;
    }
    var $_0;
    STACKTOP=sp;return $_0;
   }
  } while(0);
  if (label == 2633) {
   var $356;
   var $357=(($block+168)|0);
   HEAP32[(($357)>>2)]=0;
   var $_pre_i39=HEAP32[(($356)>>2)];
   var $_ph_i40=$356;var $364=$_pre_i39;var $363=0;
  }
  var $363;
  var $364;
  var $_ph_i40;
  var $365=($364|0)==0;
  if ($365) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $366=(($block+168)|0);
  var $367=(($buffer_i_i)|0);
  var $368=HEAP32[((10128)>>2)];
  var $369=$368>>>3;
  var $370=($369|0)==0;
  var $371=HEAP32[((10144)>>2)];
  var $372=$371>>>3;
  var $373=($372|0)==0;
  var $374=HEAP32[((10152)>>2)];
  var $375=$374>>>3;
  var $376=HEAP32[((10104)>>2)];
  var $377=HEAP32[((10120)>>2)];
  var $378=((($377)+($376))|0);
  var $379=HEAP32[((10112)>>2)];
  var $380=((($378)+($379))|0);
  var $381=$380>>>3;
  var $382=HEAP32[((10136)>>2)];
  var $383=$382>>>3;
  var $384=($383|0)==0;
  var $385=HEAP32[((10208)>>2)];
  var $386=$385>>>3;
  var $387=($386|0)==0;
  var $388=HEAP32[((10216)>>2)];
  var $389=$388>>>3;
  var $390=($389|0)==0;
  var $391=HEAP32[((10200)>>2)];
  var $392=$391>>>3;
  var $393=((($372)-(1))|0);
  var $scevgep_i=(($buffer_i_i+$393)|0);
  var $394=((($389)-(1))|0);
  var $scevgep51_i=(($buffer_i_i+$394)|0);
  var $395=FUNCTION_TABLE[$read_cb]($367,1,$369,$handle);
  var $396=($395|0)==($369|0);
  if ($396) {
   var $397=$363;var $i_044_i68=0;
  } else {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  L3583: while(1) {
   var $i_044_i68;
   var $397;
   if ($370) {
    var $ret_0_lcssa_i_i_i$1=0;var $ret_0_lcssa_i_i_i$0=0;
   } else {
    var $_03_i_i_i=$367;var $ret_04_i_i_i$1=0;var $ret_04_i_i_i$0=0;var $i_05_i_i_i=0;
    while(1) {
     var $i_05_i_i_i;
     var $ret_04_i_i_i$0;
     var $ret_04_i_i_i$1;
     var $_03_i_i_i;
     var $398$0=($ret_04_i_i_i$0<<8)|(0>>>24);
     var $398$1=($ret_04_i_i_i$1<<8)|($ret_04_i_i_i$0>>>24);
     var $399=(($_03_i_i_i+1)|0);
     var $400=HEAP8[($_03_i_i_i)];
     var $401$0=($400&255);
     var $401$1=0;
     var $402$0=$401$0|$398$0;
     var $402$1=$401$1|$398$1;
     var $403=((($i_05_i_i_i)+(1))|0);
     var $404=($403>>>0)<($369>>>0);
     if ($404) {
      var $_03_i_i_i=$399;var $ret_04_i_i_i$1=$402$1;var $ret_04_i_i_i$0=$402$0;var $i_05_i_i_i=$403;
     } else {
      var $ret_0_lcssa_i_i_i$1=$402$1;var $ret_0_lcssa_i_i_i$0=$402$0;
      break;
     }
    }
   }
   var $ret_0_lcssa_i_i_i$0;
   var $ret_0_lcssa_i_i_i$1;
   var $405=(($397+($i_044_i68<<5))|0);
   var $st$8$0=(($405)|0);
   HEAP32[(($st$8$0)>>2)]=$ret_0_lcssa_i_i_i$0;
   var $st$9$1=(($405+4)|0);
   HEAP32[(($st$9$1)>>2)]=$ret_0_lcssa_i_i_i$1;
   var $406=FUNCTION_TABLE[$read_cb]($367,1,$372,$handle);
   var $407=($406|0)==($372|0);
   if (!($407)) {
    var $_0=6;
    label = 2704;
    break;
   }
   if ($373) {
    var $ret_0_lcssa_i56_off0_i_i=0;
   } else {
    var $409=HEAP8[($scevgep_i)];
    var $ret_0_lcssa_i56_off0_i_i=$409;
   }
   var $ret_0_lcssa_i56_off0_i_i;
   var $410=(($397+($i_044_i68<<5)+8)|0);
   HEAP8[($410)]=$ret_0_lcssa_i56_off0_i_i;
   var $411=(($397+($i_044_i68<<5)+9)|0);
   var $412=FUNCTION_TABLE[$read_cb]($411,1,$375,$handle);
   var $413=($412|0)==($375|0);
   if (!($413)) {
    var $_0=6;
    label = 2715;
    break;
   }
   var $415=FUNCTION_TABLE[$read_cb]($367,1,$381,$handle);
   var $416=($415|0)==($381|0);
   if (!($416)) {
    var $_0=6;
    label = 2716;
    break;
   }
   var $418=HEAP8[($367)];
   var $419=($418&255);
   var $420=$419>>>7;
   var $421=(($397+($i_044_i68<<5)+20)|0);
   var $422=$421;
   var $423=$420<<16;
   var $424=HEAP32[(($422)>>2)];
   var $425=$419>>>6;
   var $426=$425<<17;
   var $427=$426&131072;
   var $_masked_i_i=$424&-196609;
   var $428=$423|$_masked_i_i;
   var $429=$428|$427;
   HEAP32[(($422)>>2)]=$429;
   var $430=FUNCTION_TABLE[$read_cb]($367,1,$383,$handle);
   var $431=($430|0)==($383|0);
   if (!($431)) {
    var $_0=6;
    label = 2717;
    break;
   }
   do {
    if ($384) {
     var $433=(($397+($i_044_i68<<5)+23)|0);
     HEAP8[($433)]=0;
     var $442=$433;
     label = 2649;
    } else {
     var $_03_i65_i_i=$367;var $i_05_i63_i_i=0;
     while(1) {
      var $i_05_i63_i_i;
      var $_03_i65_i_i;
      var $434=(($_03_i65_i_i+1)|0);
      var $435=HEAP8[($_03_i65_i_i)];
      var $436=($435&255);
      var $437=((($i_05_i63_i_i)+(1))|0);
      var $438=($437>>>0)<($383>>>0);
      if ($438) {
       var $_03_i65_i_i=$434;var $i_05_i63_i_i=$437;
      } else {
       break;
      }
     }
     var $439=(($397+($i_044_i68<<5)+23)|0);
     HEAP8[($439)]=$435;
     var $440=(($435<<24)>>24)==0;
     if ($440) {
      var $442=$439;
      label = 2649;
      break;
     }
     var $445=_calloc($436,16);
     var $446=$445;
     var $447=(($397+($i_044_i68<<5)+24)|0);
     HEAP32[(($447)>>2)]=$446;
     var $448=($445|0)==0;
     if ($448) {
      var $_0=11;
      label = 2713;
      break L3583;
     } else {
      var $_ph_i_i=$439;
     }
    }
   } while(0);
   if (label == 2649) {
    label = 0;
    var $442;
    var $443=(($397+($i_044_i68<<5)+24)|0);
    HEAP32[(($443)>>2)]=0;
    var $_ph_i_i=$442;
   }
   var $_ph_i_i;
   var $449=(($397+($i_044_i68<<5)+24)|0);
   L3605: do {
    if ($387) {
     var $i_0_us_i_i=0;
     while(1) {
      var $i_0_us_i_i;
      var $472=HEAP8[($_ph_i_i)];
      var $473=($472&255);
      var $474=($i_0_us_i_i>>>0)<($473>>>0);
      if (!($474)) {
       break L3605;
      }
      var $476=FUNCTION_TABLE[$read_cb]($367,1,0,$handle);
      var $477=($476|0)==0;
      if (!($477)) {
       var $_0=6;
       label = 2739;
       break L3583;
      }
      var $478=HEAP32[(($449)>>2)];
      var $479=(($478+($i_0_us_i_i<<4))|0);
      var $$etemp$12$0=0;
      var $$etemp$12$1=0;
      var $st$13$0=(($479)|0);
      HEAP32[(($st$13$0)>>2)]=$$etemp$12$0;
      var $st$14$1=(($479+4)|0);
      HEAP32[(($st$14$1)>>2)]=$$etemp$12$1;
      var $480=FUNCTION_TABLE[$read_cb]($367,1,$389,$handle);
      var $481=($480|0)==($389|0);
      if (!($481)) {
       var $_0=6;
       label = 2728;
       break L3583;
      }
      if ($390) {
       var $ret_0_lcssa_i61_off0_us_i_i=0;
      } else {
       var $483=HEAP8[($scevgep51_i)];
       var $ret_0_lcssa_i61_off0_us_i_i=$483;
      }
      var $ret_0_lcssa_i61_off0_us_i_i;
      var $484=HEAP32[(($449)>>2)];
      var $485=(($484+($i_0_us_i_i<<4)+8)|0);
      HEAP8[($485)]=$ret_0_lcssa_i61_off0_us_i_i;
      var $486=FUNCTION_TABLE[$read_cb]($367,1,$392,$handle);
      var $487=($486|0)==($392|0);
      if (!($487)) {
       var $_0=6;
       label = 2718;
       break L3583;
      }
      var $488=((($i_0_us_i_i)+(1))|0);
      var $i_0_us_i_i=$488;
     }
    } else {
     if ($390) {
      var $i_0_i_us_i=0;
      while(1) {
       var $i_0_i_us_i;
       var $450=HEAP8[($_ph_i_i)];
       var $451=($450&255);
       var $452=($i_0_i_us_i>>>0)<($451>>>0);
       if (!($452)) {
        break L3605;
       }
       var $454=FUNCTION_TABLE[$read_cb]($367,1,$386,$handle);
       var $455=($454|0)==($386|0);
       if ($455) {
        var $_03_i71_i_us_i=$367;var $ret_04_i70_i_us_i$1=0;var $ret_04_i70_i_us_i$0=0;var $i_05_i69_i_us_i=0;
       } else {
        var $_0=6;
        label = 2724;
        break L3583;
       }
       while(1) {
        var $i_05_i69_i_us_i;
        var $ret_04_i70_i_us_i$0;
        var $ret_04_i70_i_us_i$1;
        var $_03_i71_i_us_i;
        var $456$0=($ret_04_i70_i_us_i$0<<8)|(0>>>24);
        var $456$1=($ret_04_i70_i_us_i$1<<8)|($ret_04_i70_i_us_i$0>>>24);
        var $457=(($_03_i71_i_us_i+1)|0);
        var $458=HEAP8[($_03_i71_i_us_i)];
        var $459$0=($458&255);
        var $459$1=0;
        var $460$0=$459$0|$456$0;
        var $460$1=$459$1|$456$1;
        var $461=((($i_05_i69_i_us_i)+(1))|0);
        var $462=($461>>>0)<($386>>>0);
        if ($462) {
         var $_03_i71_i_us_i=$457;var $ret_04_i70_i_us_i$1=$460$1;var $ret_04_i70_i_us_i$0=$460$0;var $i_05_i69_i_us_i=$461;
        } else {
         break;
        }
       }
       var $463=HEAP32[(($449)>>2)];
       var $464=(($463+($i_0_i_us_i<<4))|0);
       var $st$10$0=(($464)|0);
       HEAP32[(($st$10$0)>>2)]=$460$0;
       var $st$11$1=(($464+4)|0);
       HEAP32[(($st$11$1)>>2)]=$460$1;
       var $465=FUNCTION_TABLE[$read_cb]($367,1,0,$handle);
       var $466=($465|0)==0;
       if (!($466)) {
        var $_0=6;
        label = 2731;
        break L3583;
       }
       var $467=HEAP32[(($449)>>2)];
       var $468=(($467+($i_0_i_us_i<<4)+8)|0);
       HEAP8[($468)]=0;
       var $469=FUNCTION_TABLE[$read_cb]($367,1,$392,$handle);
       var $470=($469|0)==($392|0);
       if (!($470)) {
        var $_0=6;
        label = 2738;
        break L3583;
       }
       var $471=((($i_0_i_us_i)+(1))|0);
       var $i_0_i_us_i=$471;
      }
     } else {
      var $i_0_i_i=0;
      while(1) {
       var $i_0_i_i;
       var $489=HEAP8[($_ph_i_i)];
       var $490=($489&255);
       var $491=($i_0_i_i>>>0)<($490>>>0);
       if (!($491)) {
        break L3605;
       }
       var $493=FUNCTION_TABLE[$read_cb]($367,1,$386,$handle);
       var $494=($493|0)==($386|0);
       if ($494) {
        var $_03_i71_i_i=$367;var $ret_04_i70_i_i$1=0;var $ret_04_i70_i_i$0=0;var $i_05_i69_i_i=0;
       } else {
        var $_0=6;
        label = 2712;
        break L3583;
       }
       while(1) {
        var $i_05_i69_i_i;
        var $ret_04_i70_i_i$0;
        var $ret_04_i70_i_i$1;
        var $_03_i71_i_i;
        var $495$0=($ret_04_i70_i_i$0<<8)|(0>>>24);
        var $495$1=($ret_04_i70_i_i$1<<8)|($ret_04_i70_i_i$0>>>24);
        var $496=(($_03_i71_i_i+1)|0);
        var $497=HEAP8[($_03_i71_i_i)];
        var $498$0=($497&255);
        var $498$1=0;
        var $499$0=$498$0|$495$0;
        var $499$1=$498$1|$495$1;
        var $500=((($i_05_i69_i_i)+(1))|0);
        var $501=($500>>>0)<($386>>>0);
        if ($501) {
         var $_03_i71_i_i=$496;var $ret_04_i70_i_i$1=$499$1;var $ret_04_i70_i_i$0=$499$0;var $i_05_i69_i_i=$500;
        } else {
         break;
        }
       }
       var $502=HEAP32[(($449)>>2)];
       var $503=(($502+($i_0_i_i<<4))|0);
       var $st$15$0=(($503)|0);
       HEAP32[(($st$15$0)>>2)]=$499$0;
       var $st$16$1=(($503+4)|0);
       HEAP32[(($st$16$1)>>2)]=$499$1;
       var $504=FUNCTION_TABLE[$read_cb]($367,1,$389,$handle);
       var $505=($504|0)==($389|0);
       if (!($505)) {
        var $_0=6;
        label = 2744;
        break L3583;
       }
       var $506=HEAP8[($scevgep51_i)];
       var $507=HEAP32[(($449)>>2)];
       var $508=(($507+($i_0_i_i<<4)+8)|0);
       HEAP8[($508)]=$506;
       var $509=FUNCTION_TABLE[$read_cb]($367,1,$392,$handle);
       var $510=($509|0)==($392|0);
       if (!($510)) {
        var $_0=6;
        label = 2745;
        break L3583;
       }
       var $511=((($i_0_i_i)+(1))|0);
       var $i_0_i_i=$511;
      }
     }
    }
   } while(0);
   var $512=((($i_044_i68)+(1))|0);
   var $513=HEAP32[(($_ph_i40)>>2)];
   var $514=($512>>>0)<($513>>>0);
   if (!($514)) {
    var $_0=0;
    label = 2720;
    break;
   }
   var $_pre56_i=HEAP32[(($366)>>2)];
   var $515=FUNCTION_TABLE[$read_cb]($367,1,$369,$handle);
   var $516=($515|0)==($369|0);
   if ($516) {
    var $397=$_pre56_i;var $i_044_i68=$512;
   } else {
    var $_0=6;
    label = 2722;
    break;
   }
  }
  if (label == 2704) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2712) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2713) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2715) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2716) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2717) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2718) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2720) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2722) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2724) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2728) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2731) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2738) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2739) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2744) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2745) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  break;
 }
 case 6: {
  var $518=(($block+16)|0);
  var $519=(($buffer_i34)|0);
  var $520=$len_i;
  var $521=HEAP32[((10032)>>2)];
  var $522=$521>>>3;
  HEAP32[(($len_i)>>2)]=$522;
  var $523=FUNCTION_TABLE[$read_cb]($519,1,$522,$handle);
  var $524=($523|0)==($522|0);
  if (!($524)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $526=($522|0)==0;
  if ($526) {
   var $ret_0_lcssa_i_i50=0;
  } else {
   var $_03_i_i48=$519;var $ret_04_i_i47=0;var $i_05_i_i46=0;
   while(1) {
    var $i_05_i_i46;
    var $ret_04_i_i47;
    var $_03_i_i48;
    var $527=$ret_04_i_i47<<8;
    var $528=(($_03_i_i48+1)|0);
    var $529=HEAP8[($_03_i_i48)];
    var $530=($529&255);
    var $531=$530|$527;
    var $532=((($i_05_i_i46)+(1))|0);
    var $533=($532>>>0)<($522>>>0);
    if ($533) {
     var $_03_i_i48=$528;var $ret_04_i_i47=$531;var $i_05_i_i46=$532;
    } else {
     var $ret_0_lcssa_i_i50=$531;
     break;
    }
   }
  }
  var $ret_0_lcssa_i_i50;
  var $534=$518;
  HEAP32[(($534)>>2)]=$ret_0_lcssa_i_i50;
  var $535=(($block+20)|0);
  var $536=$535;
  var $537=HEAP32[((10040)>>2)];
  var $538=_read_metadata_block_data_picture_cstring_cb_($handle,$read_cb,$536,$len_i,$537);
  var $539=($538|0)==0;
  if (!($539)) {
   var $_0=$538;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $541=(($block+24)|0);
  var $542=$541;
  var $543=HEAP32[((10056)>>2)];
  var $544=_read_metadata_block_data_picture_cstring_cb_($handle,$read_cb,$542,$len_i,$543);
  var $545=($544|0)==0;
  if (!($545)) {
   var $_0=$544;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $547=HEAP32[((10024)>>2)];
  var $548=$547>>>3;
  HEAP32[(($len_i)>>2)]=$548;
  var $549=FUNCTION_TABLE[$read_cb]($519,1,$548,$handle);
  var $550=($549|0)==($548|0);
  if (!($550)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $552=($548|0)==0;
  if ($552) {
   var $ret_0_lcssa_i32_i=0;
  } else {
   var $_03_i30_i=$519;var $ret_04_i29_i=0;var $i_05_i28_i=0;
   while(1) {
    var $i_05_i28_i;
    var $ret_04_i29_i;
    var $_03_i30_i;
    var $553=$ret_04_i29_i<<8;
    var $554=(($_03_i30_i+1)|0);
    var $555=HEAP8[($_03_i30_i)];
    var $556=($555&255);
    var $557=$556|$553;
    var $558=((($i_05_i28_i)+(1))|0);
    var $559=($558>>>0)<($548>>>0);
    if ($559) {
     var $_03_i30_i=$554;var $ret_04_i29_i=$557;var $i_05_i28_i=$558;
    } else {
     var $ret_0_lcssa_i32_i=$557;
     break;
    }
   }
  }
  var $ret_0_lcssa_i32_i;
  var $560=(($block+28)|0);
  var $561=$560;
  HEAP32[(($561)>>2)]=$ret_0_lcssa_i32_i;
  var $562=HEAP32[((10048)>>2)];
  var $563=$562>>>3;
  HEAP32[(($len_i)>>2)]=$563;
  var $564=FUNCTION_TABLE[$read_cb]($519,1,$563,$handle);
  var $565=($564|0)==($563|0);
  if (!($565)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $567=($563|0)==0;
  if ($567) {
   var $ret_0_lcssa_i44_i=0;
  } else {
   var $_03_i42_i=$519;var $ret_04_i41_i=0;var $i_05_i40_i=0;
   while(1) {
    var $i_05_i40_i;
    var $ret_04_i41_i;
    var $_03_i42_i;
    var $568=$ret_04_i41_i<<8;
    var $569=(($_03_i42_i+1)|0);
    var $570=HEAP8[($_03_i42_i)];
    var $571=($570&255);
    var $572=$571|$568;
    var $573=((($i_05_i40_i)+(1))|0);
    var $574=($573>>>0)<($563>>>0);
    if ($574) {
     var $_03_i42_i=$569;var $ret_04_i41_i=$572;var $i_05_i40_i=$573;
    } else {
     var $ret_0_lcssa_i44_i=$572;
     break;
    }
   }
  }
  var $ret_0_lcssa_i44_i;
  var $575=(($block+32)|0);
  var $576=$575;
  HEAP32[(($576)>>2)]=$ret_0_lcssa_i44_i;
  var $577=HEAP32[((10064)>>2)];
  var $578=$577>>>3;
  HEAP32[(($len_i)>>2)]=$578;
  var $579=FUNCTION_TABLE[$read_cb]($519,1,$578,$handle);
  var $580=($579|0)==($578|0);
  if (!($580)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $582=($578|0)==0;
  if ($582) {
   var $ret_0_lcssa_i50_i=0;
  } else {
   var $_03_i48_i=$519;var $ret_04_i47_i=0;var $i_05_i46_i=0;
   while(1) {
    var $i_05_i46_i;
    var $ret_04_i47_i;
    var $_03_i48_i;
    var $583=$ret_04_i47_i<<8;
    var $584=(($_03_i48_i+1)|0);
    var $585=HEAP8[($_03_i48_i)];
    var $586=($585&255);
    var $587=$586|$583;
    var $588=((($i_05_i46_i)+(1))|0);
    var $589=($588>>>0)<($578>>>0);
    if ($589) {
     var $_03_i48_i=$584;var $ret_04_i47_i=$587;var $i_05_i46_i=$588;
    } else {
     var $ret_0_lcssa_i50_i=$587;
     break;
    }
   }
  }
  var $ret_0_lcssa_i50_i;
  var $590=(($block+36)|0);
  var $591=$590;
  HEAP32[(($591)>>2)]=$ret_0_lcssa_i50_i;
  var $592=HEAP32[((10080)>>2)];
  var $593=$592>>>3;
  HEAP32[(($len_i)>>2)]=$593;
  var $594=FUNCTION_TABLE[$read_cb]($519,1,$593,$handle);
  var $595=($594|0)==($593|0);
  if (!($595)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $597=($593|0)==0;
  if ($597) {
   var $ret_0_lcssa_i38_i=0;
  } else {
   var $_03_i36_i=$519;var $ret_04_i35_i=0;var $i_05_i34_i=0;
   while(1) {
    var $i_05_i34_i;
    var $ret_04_i35_i;
    var $_03_i36_i;
    var $598=$ret_04_i35_i<<8;
    var $599=(($_03_i36_i+1)|0);
    var $600=HEAP8[($_03_i36_i)];
    var $601=($600&255);
    var $602=$601|$598;
    var $603=((($i_05_i34_i)+(1))|0);
    var $604=($603>>>0)<($593>>>0);
    if ($604) {
     var $_03_i36_i=$599;var $ret_04_i35_i=$602;var $i_05_i34_i=$603;
    } else {
     var $ret_0_lcssa_i38_i=$602;
     break;
    }
   }
  }
  var $ret_0_lcssa_i38_i;
  var $605=(($block+40)|0);
  var $606=$605;
  HEAP32[(($606)>>2)]=$ret_0_lcssa_i38_i;
  var $607=(($block+48)|0);
  var $608=$607;
  var $609=(($block+44)|0);
  var $610=$609;
  var $611=HEAP32[((10072)>>2)];
  var $612=_read_metadata_block_data_picture_cstring_cb_($handle,$read_cb,$608,$610,$611);
  var $_0=$612;
  var $_0;
  STACKTOP=sp;return $_0;
  break;
 }
 case 1: {
  var $114=(($block+8)|0);
  var $115=HEAP32[(($114)>>2)];
  var $116$0=$115;
  var $116$1=0;
  var $117=FUNCTION_TABLE[$seek_cb]($handle,$116$0,$116$1,1);
  var $118=($117|0)==0;
  var $__i=$118?0:7;
  var $_0=$__i;
  var $_0;
  STACKTOP=sp;return $_0;
  break;
 }
 case 3: {
  var $144=(($block+16)|0);
  var $145=(($block+8)|0);
  var $146=HEAP32[(($145)>>2)];
  var $147=(($buffer_i31)|0);
  var $148=(((($146>>>0))/(18))&-1);
  var $149=$144;
  HEAP32[(($149)>>2)]=$148;
  var $150=($146>>>0)<18;
  do {
   if ($150) {
    var $152=(($block+20)|0);
    var $153=$152;
    HEAP32[(($153)>>2)]=0;
    var $160=$148;
   } else {
    var $155=_safe_malloc_mul_2op_p($148,24);
    var $156=$155;
    var $157=(($block+20)|0);
    var $158=$157;
    HEAP32[(($158)>>2)]=$156;
    var $159=($155|0)==0;
    if ($159) {
     var $_0=11;
     var $_0;
     STACKTOP=sp;return $_0;
    } else {
     var $_pre_i=HEAP32[(($149)>>2)];
     var $160=$_pre_i;
     break;
    }
   }
  } while(0);
  var $160;
  var $161=($160|0)==0;
  if ($161) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $162=(($block+20)|0);
  var $163=$162;
  var $164=(($buffer_i31+8)|0);
  var $165=(($buffer_i31+16)|0);
  var $166=(($buffer_i31+1)|0);
  var $167=(($buffer_i31+2)|0);
  var $168=(($buffer_i31+3)|0);
  var $169=(($buffer_i31+4)|0);
  var $170=(($buffer_i31+5)|0);
  var $171=(($buffer_i31+6)|0);
  var $172=(($buffer_i31+7)|0);
  var $173=(($buffer_i31+9)|0);
  var $174=(($buffer_i31+10)|0);
  var $175=(($buffer_i31+11)|0);
  var $176=(($buffer_i31+12)|0);
  var $177=(($buffer_i31+13)|0);
  var $178=(($buffer_i31+14)|0);
  var $179=(($buffer_i31+15)|0);
  var $180=(($buffer_i31+17)|0);
  var $i_027_i=0;
  while(1) {
   var $i_027_i;
   var $182=FUNCTION_TABLE[$read_cb]($147,1,18,$handle);
   var $183=($182|0)==18;
   if (!($183)) {
    var $_0=6;
    label = 2709;
    break;
   }
   var $184=HEAP8[($147)];
   var $185$0=($184&255);
   var $185$1=0;
   var $186$0=($185$0<<8)|(0>>>24);
   var $186$1=($185$1<<8)|($185$0>>>24);
   var $187=HEAP8[($166)];
   var $188$0=($187&255);
   var $188$1=0;
   var $189$0=$188$0|$186$0;
   var $189$1=$188$1|$186$1;
   var $190$0=($189$0<<8)|(0>>>24);
   var $190$1=($189$1<<8)|($189$0>>>24);
   var $191=HEAP8[($167)];
   var $192$0=($191&255);
   var $192$1=0;
   var $193$0=$190$0|$192$0;
   var $193$1=$190$1|$192$1;
   var $194$0=($193$0<<8)|(0>>>24);
   var $194$1=($193$1<<8)|($193$0>>>24);
   var $195=HEAP8[($168)];
   var $196$0=($195&255);
   var $196$1=0;
   var $197$0=$194$0|$196$0;
   var $197$1=$194$1|$196$1;
   var $198$0=($197$0<<8)|(0>>>24);
   var $198$1=($197$1<<8)|($197$0>>>24);
   var $199=HEAP8[($169)];
   var $200$0=($199&255);
   var $200$1=0;
   var $201$0=$198$0|$200$0;
   var $201$1=$198$1|$200$1;
   var $202$0=($201$0<<8)|(0>>>24);
   var $202$1=($201$1<<8)|($201$0>>>24);
   var $203=HEAP8[($170)];
   var $204$0=($203&255);
   var $204$1=0;
   var $205$0=$202$0|$204$0;
   var $205$1=$202$1|$204$1;
   var $206$0=($205$0<<8)|(0>>>24);
   var $206$1=($205$1<<8)|($205$0>>>24);
   var $207=HEAP8[($171)];
   var $208$0=($207&255);
   var $208$1=0;
   var $209$0=$206$0|$208$0;
   var $209$1=$206$1|$208$1;
   var $210$0=($209$0<<8)|(0>>>24);
   var $210$1=($209$1<<8)|($209$0>>>24);
   var $211=HEAP8[($172)];
   var $212$0=($211&255);
   var $212$1=0;
   var $213$0=$210$0|$212$0;
   var $213$1=$210$1|$212$1;
   var $214=HEAP32[(($163)>>2)];
   var $215=(($214+((($i_027_i)*(24))&-1))|0);
   var $st$2$0=(($215)|0);
   HEAP32[(($st$2$0)>>2)]=$213$0;
   var $st$3$1=(($215+4)|0);
   HEAP32[(($st$3$1)>>2)]=$213$1;
   var $216=HEAP8[($164)];
   var $217$0=($216&255);
   var $217$1=0;
   var $218$0=($217$0<<8)|(0>>>24);
   var $218$1=($217$1<<8)|($217$0>>>24);
   var $219=HEAP8[($173)];
   var $220$0=($219&255);
   var $220$1=0;
   var $221$0=$220$0|$218$0;
   var $221$1=$220$1|$218$1;
   var $222$0=($221$0<<8)|(0>>>24);
   var $222$1=($221$1<<8)|($221$0>>>24);
   var $223=HEAP8[($174)];
   var $224$0=($223&255);
   var $224$1=0;
   var $225$0=$222$0|$224$0;
   var $225$1=$222$1|$224$1;
   var $226$0=($225$0<<8)|(0>>>24);
   var $226$1=($225$1<<8)|($225$0>>>24);
   var $227=HEAP8[($175)];
   var $228$0=($227&255);
   var $228$1=0;
   var $229$0=$226$0|$228$0;
   var $229$1=$226$1|$228$1;
   var $230$0=($229$0<<8)|(0>>>24);
   var $230$1=($229$1<<8)|($229$0>>>24);
   var $231=HEAP8[($176)];
   var $232$0=($231&255);
   var $232$1=0;
   var $233$0=$230$0|$232$0;
   var $233$1=$230$1|$232$1;
   var $234$0=($233$0<<8)|(0>>>24);
   var $234$1=($233$1<<8)|($233$0>>>24);
   var $235=HEAP8[($177)];
   var $236$0=($235&255);
   var $236$1=0;
   var $237$0=$234$0|$236$0;
   var $237$1=$234$1|$236$1;
   var $238$0=($237$0<<8)|(0>>>24);
   var $238$1=($237$1<<8)|($237$0>>>24);
   var $239=HEAP8[($178)];
   var $240$0=($239&255);
   var $240$1=0;
   var $241$0=$238$0|$240$0;
   var $241$1=$238$1|$240$1;
   var $242$0=($241$0<<8)|(0>>>24);
   var $242$1=($241$1<<8)|($241$0>>>24);
   var $243=HEAP8[($179)];
   var $244$0=($243&255);
   var $244$1=0;
   var $245$0=$242$0|$244$0;
   var $245$1=$242$1|$244$1;
   var $246=HEAP32[(($163)>>2)];
   var $247=(($246+((($i_027_i)*(24))&-1)+8)|0);
   var $st$4$0=(($247)|0);
   HEAP32[(($st$4$0)>>2)]=$245$0;
   var $st$5$1=(($247+4)|0);
   HEAP32[(($st$5$1)>>2)]=$245$1;
   var $248=HEAP8[($165)];
   var $249=($248&255);
   var $250=$249<<8;
   var $251=HEAP8[($180)];
   var $252=($251&255);
   var $253=$252|$250;
   var $254=HEAP32[(($163)>>2)];
   var $255=(($254+((($i_027_i)*(24))&-1)+16)|0);
   HEAP32[(($255)>>2)]=$253;
   var $256=((($i_027_i)+(1))|0);
   var $257=HEAP32[(($149)>>2)];
   var $258=($256>>>0)<($257>>>0);
   if ($258) {
    var $i_027_i=$256;
   } else {
    var $_0=0;
    label = 2711;
    break;
   }
  }
  if (label == 2709) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2711) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  break;
 }
 case 4: {
  var $260=(($block+16)|0);
  var $261=(($buffer_i34)|0);
  var $262=HEAP32[((9896)>>2)];
  var $263=$262>>>3;
  var $264=$260;
  var $265=_read_metadata_block_data_vorbis_comment_entry_cb_($handle,$read_cb,$264);
  var $266=($265|0)==0;
  if (!($266)) {
   var $_0=$265;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $268=FUNCTION_TABLE[$read_cb]($261,1,$263,$handle);
  var $269=($268|0)==($263|0);
  if (!($269)) {
   var $_0=6;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $271=($263|0)==0;
  do {
   if ($271) {
    var $272=(($block+24)|0);
    var $273=$272;
    HEAP32[(($273)>>2)]=0;
    var $287=$273;
    label = 2617;
   } else {
    var $274=(($buffer_i34+$263)|0);
    var $_05_i_i=$274;var $ret_06_i_i=0;var $i_07_i_i=0;
    while(1) {
     var $i_07_i_i;
     var $ret_06_i_i;
     var $_05_i_i;
     var $276=$ret_06_i_i<<8;
     var $277=((($_05_i_i)-(1))|0);
     var $278=HEAP8[($277)];
     var $279=($278&255);
     var $280=$279|$276;
     var $281=((($i_07_i_i)+(1))|0);
     var $282=($281>>>0)<($263>>>0);
     if ($282) {
      var $_05_i_i=$277;var $ret_06_i_i=$280;var $i_07_i_i=$281;
     } else {
      break;
     }
    }
    var $283=(($block+24)|0);
    var $284=$283;
    HEAP32[(($284)>>2)]=$280;
    var $285=($280|0)==0;
    if ($285) {
     var $287=$284;
     label = 2617;
     break;
    }
    var $291=_calloc($280,8);
    var $292=$291;
    var $293=(($block+28)|0);
    var $294=$293;
    HEAP32[(($294)>>2)]=$292;
    var $295=($291|0)==0;
    if ($295) {
     var $_0=11;
    } else {
     var $_ph_i=$284;
     break;
    }
    var $_0;
    STACKTOP=sp;return $_0;
   }
  } while(0);
  if (label == 2617) {
   var $287;
   var $288=(($block+28)|0);
   var $289=$288;
   HEAP32[(($289)>>2)]=0;
   var $_ph_i=$287;
  }
  var $_ph_i;
  var $296=(($block+28)|0);
  var $297=$296;
  var $i_0_i=0;
  while(1) {
   var $i_0_i;
   var $299=HEAP32[(($_ph_i)>>2)];
   var $300=($i_0_i>>>0)<($299>>>0);
   if (!($300)) {
    var $_0=0;
    label = 2721;
    break;
   }
   var $302=HEAP32[(($297)>>2)];
   var $303=(($302+($i_0_i<<3))|0);
   var $304=_read_metadata_block_data_vorbis_comment_entry_cb_($handle,$read_cb,$303);
   var $305=($304|0)==0;
   if (!($305)) {
    var $_0=$304;
    label = 2727;
    break;
   }
   var $306=((($i_0_i)+(1))|0);
   var $i_0_i=$306;
  }
  if (label == 2721) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2727) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  break;
 }
 default: {
  var $614=(($block+16)|0);
  var $615=(($block+8)|0);
  var $616=HEAP32[(($615)>>2)];
  var $617=($616|0)==0;
  do {
   if ($617) {
    var $619=$614;
    HEAP32[(($619)>>2)]=0;
   } else {
    var $621=_malloc($616);
    var $622=$614;
    HEAP32[(($622)>>2)]=$621;
    var $623=($621|0)==0;
    if ($623) {
     var $_0=11;
     var $_0;
     STACKTOP=sp;return $_0;
    }
    var $625=FUNCTION_TABLE[$read_cb]($621,1,$616,$handle);
    var $626=($625|0)==($616|0);
    if ($626) {
     break;
    } else {
     var $_0=6;
    }
    var $_0;
    STACKTOP=sp;return $_0;
   }
  } while(0);
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 }
}
function _fseek_wrapper_($handle,$offset$0,$offset$1,$whence){
 var label=0;
 var $1=$handle;
 var $2$0=$offset$0;
 var $2=$2$0;
 var $3=_fseek($1,$2,$whence);
 return $3;
}
function _read_metadata_block_data_picture_cstring_cb_($handle,$read_cb,$data,$length,$length_len){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $buffer=sp;
 var $1=$length_len>>>3;
 var $2=(($buffer)|0);
 var $3=FUNCTION_TABLE[$read_cb]($2,1,$1,$handle);
 var $4=($3|0)==($1|0);
 if (!($4)) {
  var $_0=6;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $6=($1|0)==0;
 if ($6) {
  var $ret_0_lcssa_i=0;
 } else {
  var $_03_i=$2;var $ret_04_i=0;var $i_05_i=0;
  while(1) {
   var $i_05_i;
   var $ret_04_i;
   var $_03_i;
   var $7=$ret_04_i<<8;
   var $8=(($_03_i+1)|0);
   var $9=HEAP8[($_03_i)];
   var $10=($9&255);
   var $11=$10|$7;
   var $12=((($i_05_i)+(1))|0);
   var $13=($12>>>0)<($1>>>0);
   if ($13) {
    var $_03_i=$8;var $ret_04_i=$11;var $i_05_i=$12;
   } else {
    var $ret_0_lcssa_i=$11;
    break;
   }
  }
 }
 var $ret_0_lcssa_i;
 HEAP32[(($length)>>2)]=$ret_0_lcssa_i;
 var $14=HEAP32[(($data)>>2)];
 var $15=($14|0)==0;
 if ($15) {
  var $18=$ret_0_lcssa_i;
 } else {
  _free($14);
  var $_pre=HEAP32[(($length)>>2)];
  var $18=$_pre;
 }
 var $18;
 var $uadd_i$0=_llvm_uadd_with_overflow_i32($18,1);
 var $uadd_i$1=tempRet0;
 var $19=$uadd_i$1;
 if ($19) {
  HEAP32[(($data)>>2)]=0;
  var $_0=11;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $20=$uadd_i$0;
 var $21=($20|0)==0;
 var $22=($21&1);
 var $_size_i_i=((($22)+($20))|0);
 var $23=_malloc($_size_i_i);
 HEAP32[(($data)>>2)]=$23;
 var $24=($23|0)==0;
 if ($24) {
  var $_0=11;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $26=HEAP32[(($length)>>2)];
 var $27=($26|0)==0;
 do {
  if ($27) {
   var $34=0;var $33=$23;
  } else {
   var $29=FUNCTION_TABLE[$read_cb]($23,1,$26,$handle);
   var $30=HEAP32[(($length)>>2)];
   var $31=($29|0)==($30|0);
   if ($31) {
    var $_pre20=HEAP32[(($data)>>2)];
    var $34=$29;var $33=$_pre20;
    break;
   } else {
    var $_0=6;
    var $_0;
    STACKTOP=sp;return $_0;
   }
  }
 } while(0);
 var $33;
 var $34;
 var $35=(($33+$34)|0);
 HEAP8[($35)]=0;
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _read_metadata_block_data_vorbis_comment_entry_cb_($handle,$read_cb,$entry){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $buffer=sp;
 var $1=HEAP32[((9904)>>2)];
 var $2=$1>>>3;
 var $3=(($buffer)|0);
 var $4=FUNCTION_TABLE[$read_cb]($3,1,$2,$handle);
 var $5=($4|0)==($2|0);
 if (!($5)) {
  var $_0=6;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $7=($2|0)==0;
 if ($7) {
  var $ret_0_lcssa_i=0;
 } else {
  var $8=(($buffer+$2)|0);
  var $_05_i=$8;var $ret_06_i=0;var $i_07_i=0;
  while(1) {
   var $i_07_i;
   var $ret_06_i;
   var $_05_i;
   var $10=$ret_06_i<<8;
   var $11=((($_05_i)-(1))|0);
   var $12=HEAP8[($11)];
   var $13=($12&255);
   var $14=$13|$10;
   var $15=((($i_07_i)+(1))|0);
   var $16=($15>>>0)<($2>>>0);
   if ($16) {
    var $_05_i=$11;var $ret_06_i=$14;var $i_07_i=$15;
   } else {
    var $ret_0_lcssa_i=$14;
    break;
   }
  }
 }
 var $ret_0_lcssa_i;
 var $17=(($entry)|0);
 HEAP32[(($17)>>2)]=$ret_0_lcssa_i;
 var $18=(($entry+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if ($20) {
  var $23=$ret_0_lcssa_i;
 } else {
  _free($19);
  var $_pr=HEAP32[(($17)>>2)];
  var $23=$_pr;
 }
 var $23;
 var $24=($23|0)==0;
 if ($24) {
  HEAP32[(($18)>>2)]=0;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $uadd_i$0=_llvm_uadd_with_overflow_i32($23,1);
 var $uadd_i$1=tempRet0;
 var $27=$uadd_i$1;
 if ($27) {
  HEAP32[(($18)>>2)]=0;
  var $_0=11;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $28=$uadd_i$0;
 var $29=($28|0)==0;
 var $30=($29&1);
 var $_size_i_i=((($30)+($28))|0);
 var $31=_malloc($_size_i_i);
 HEAP32[(($18)>>2)]=$31;
 var $32=($31|0)==0;
 if ($32) {
  var $_0=11;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $34=FUNCTION_TABLE[$read_cb]($31,1,$23,$handle);
 var $35=HEAP32[(($17)>>2)];
 var $36=($34|0)==($35|0);
 if (!($36)) {
  var $_0=6;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $38=HEAP32[(($18)>>2)];
 var $39=(($38+$34)|0);
 HEAP8[($39)]=0;
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _chain_read_ogg_cb_($chain,$handle,$read_cb){
 var label=0;
 var $1=(($chain+36)|0);
 HEAP32[(($1)>>2)]=$handle;
 var $2=(($chain+40)|0);
 HEAP32[(($2)>>2)]=$read_cb;
 var $3=_FLAC__stream_decoder_new();
 var $4=($3|0)==0;
 if ($4) {
  var $6=(($chain+20)|0);
  HEAP32[(($6)>>2)]=11;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $8=_FLAC__stream_decoder_set_metadata_respond_all($3);
 var $9=$chain;
 var $10=_FLAC__stream_decoder_init_ogg_stream($3,94,0,0,0,0,90,74,48,$9);
 var $11=($10|0)==0;
 if (!($11)) {
  _FLAC__stream_decoder_delete($3);
  var $13=(($chain+20)|0);
  HEAP32[(($13)>>2)]=12;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $15=(($chain+24)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=_FLAC__stream_decoder_process_until_end_of_metadata($3);
 var $17=($16|0)==0;
 var $18=(($chain+20)|0);
 if ($17) {
  HEAP32[(($18)>>2)]=12;
  _FLAC__stream_decoder_delete($3);
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $_pre=HEAP32[(($18)>>2)];
 var $phitmp=($_pre|0)==0;
 _FLAC__stream_decoder_delete($3);
 if (!($phitmp)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $21=(($chain+28)|0);
 HEAP32[(($21)>>2)]=0;
 var $22=(($chain+8)|0);
 var $node_04_i=HEAP32[(($22)>>2)];
 var $23=($node_04_i|0)==0;
 if ($23) {
  var $length_0_lcssa_i=0;
 } else {
  var $length_05_i=0;var $node_06_i=$node_04_i;
  while(1) {
   var $node_06_i;
   var $length_05_i;
   var $24=(($node_06_i)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+8)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($length_05_i)+(4))|0);
   var $29=((($28)+($27))|0);
   var $30=(($node_06_i+8)|0);
   var $node_0_i=HEAP32[(($30)>>2)];
   var $31=($node_0_i|0)==0;
   if ($31) {
    var $length_0_lcssa_i=$29;
    break;
   } else {
    var $length_05_i=$29;var $node_06_i=$node_0_i;
   }
  }
 }
 var $length_0_lcssa_i;
 var $32=(($chain+32)|0);
 HEAP32[(($32)>>2)]=$length_0_lcssa_i;
 var $_0=1;
 var $_0;
 return $_0;
}
function _chain_read_cb_($chain,$handle,$read_cb,$seek_cb,$tell_cb){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $raw_header_i=sp;
 var $1=_seek_to_first_metadata_block_cb_($handle,$read_cb,$seek_cb);
 if (($1|0)==1) {
  var $3=(($chain+20)|0);
  HEAP32[(($3)>>2)]=6;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 } else if (($1|0)==3) {
  var $7=(($chain+20)|0);
  HEAP32[(($7)>>2)]=3;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 } else if (($1|0)==0) {
  var $9$0=FUNCTION_TABLE[$tell_cb]($handle);
  var $9$1=tempRet0;
  var $$etemp$0$0=0;
  var $$etemp$0$1=0;
  var $10=(($9$1|0) < ($$etemp$0$1|0)) | (((($9$1|0) == ($$etemp$0$1|0) & ($9$0>>>0) <  ($$etemp$0$0>>>0))));
  if ($10) {
   var $12=(($chain+20)|0);
   HEAP32[(($12)>>2)]=6;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $14$0=$9$0;
  var $14=$14$0;
  var $15=(($chain+24)|0);
  HEAP32[(($15)>>2)]=$14;
  var $16=(($raw_header_i)|0);
  var $17=(($raw_header_i+1)|0);
  var $18=(($raw_header_i+2)|0);
  var $19=(($raw_header_i+3)|0);
  var $20=(($chain+20)|0);
  var $21=(($chain+12)|0);
  var $22=(($chain+8)|0);
  var $23=(($chain+16)|0);
  while(1) {
   var $25=_calloc(1,12);
   var $26=$25;
   var $27=($25|0)==0;
   if ($27) {
    label = 2811;
    break;
   }
   var $30=FUNCTION_TABLE[$read_cb]($16,1,4,$handle);
   var $31=($30|0)==4;
   if (!($31)) {
    label = 2813;
    break;
   }
   var $38=HEAP8[($16)];
   var $_lobit_i=($38&255)>>>7;
   var $39=($38&255);
   var $40=$39&127;
   var $41=HEAP8[($17)];
   var $42=HEAP8[($18)];
   var $43=HEAP8[($19)];
   var $44=_FLAC__metadata_object_new($40);
   var $45=$25;
   HEAP32[(($45)>>2)]=$44;
   var $46=($44|0)==0;
   if ($46) {
    label = 2817;
    break;
   }
   var $48=($41&255);
   var $49=($42&255);
   var $50=$48<<8;
   var $51=$49|$50;
   var $52=($43&255);
   var $53=$51<<8;
   var $54=($_lobit_i&255);
   var $55=$53|$52;
   var $56=(($44+4)|0);
   HEAP32[(($56)>>2)]=$54;
   var $57=HEAP32[(($45)>>2)];
   var $58=(($57+8)|0);
   HEAP32[(($58)>>2)]=$55;
   var $59=HEAP32[(($45)>>2)];
   var $60=_read_metadata_block_data_cb_($handle,$read_cb,$seek_cb,$59);
   var $switch_i=($60>>>0)<12;
   var $status__i=$switch_i?$60:12;
   HEAP32[(($20)>>2)]=$status__i;
   var $61=($status__i|0)==0;
   if (!($61)) {
    label = 2819;
    break;
   }
   var $66=(($25+4)|0);
   var $67=$66;
   HEAP32[(($67)>>2)]=0;
   var $68=(($25+8)|0);
   var $69=$68;
   HEAP32[(($69)>>2)]=0;
   var $70=(($59+4)|0);
   HEAP32[(($70)>>2)]=1;
   var $71=HEAP32[(($21)>>2)];
   var $72=($71|0)==0;
   if (!($72)) {
    var $74=(($71)|0);
    var $75=HEAP32[(($74)>>2)];
    var $76=(($75+4)|0);
    HEAP32[(($76)>>2)]=0;
   }
   var $78=HEAP32[(($22)>>2)];
   var $79=($78|0)==0;
   if ($79) {
    HEAP32[(($22)>>2)]=$26;
   } else {
    var $82=HEAP32[(($21)>>2)];
    var $83=(($82+8)|0);
    HEAP32[(($83)>>2)]=$26;
    var $84=HEAP32[(($21)>>2)];
    HEAP32[(($67)>>2)]=$84;
   }
   HEAP32[(($21)>>2)]=$26;
   var $85=HEAP32[(($23)>>2)];
   var $86=((($85)+(1))|0);
   HEAP32[(($23)>>2)]=$86;
   var $87=(($_lobit_i<<24)>>24)==0;
   if (!($87)) {
    label = 2828;
    break;
   }
  }
  if (label == 2813) {
   var $33=$25;
   var $34=HEAP32[(($33)>>2)];
   var $35=($34|0)==0;
   if (!($35)) {
    _FLAC__metadata_object_delete($34);
   }
   _free($25);
   HEAP32[(($20)>>2)]=6;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2819) {
   var $63=($59|0)==0;
   if (!($63)) {
    _FLAC__metadata_object_delete($59);
   }
   _free($25);
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2828) {
   var $89$0=FUNCTION_TABLE[$tell_cb]($handle);
   var $89$1=tempRet0;
   var $$etemp$1$0=0;
   var $$etemp$1$1=0;
   var $90=(($89$1|0) < ($$etemp$1$1|0)) | (((($89$1|0) == ($$etemp$1$1|0) & ($89$0>>>0) <  ($$etemp$1$0>>>0))));
   if ($90) {
    HEAP32[(($20)>>2)]=6;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $93$0=$89$0;
   var $93=$93$0;
   var $94=(($chain+28)|0);
   HEAP32[(($94)>>2)]=$93;
   var $node_04_i=HEAP32[(($22)>>2)];
   var $95=($node_04_i|0)==0;
   if ($95) {
    var $length_0_lcssa_i=0;
   } else {
    var $length_05_i=0;var $node_06_i=$node_04_i;
    while(1) {
     var $node_06_i;
     var $length_05_i;
     var $96=(($node_06_i)|0);
     var $97=HEAP32[(($96)>>2)];
     var $98=(($97+8)|0);
     var $99=HEAP32[(($98)>>2)];
     var $100=((($length_05_i)+(4))|0);
     var $101=((($100)+($99))|0);
     var $102=(($node_06_i+8)|0);
     var $node_0_i=HEAP32[(($102)>>2)];
     var $103=($node_0_i|0)==0;
     if ($103) {
      var $length_0_lcssa_i=$101;
      break;
     } else {
      var $length_05_i=$101;var $node_06_i=$node_0_i;
     }
    }
   }
   var $length_0_lcssa_i;
   var $104=(($chain+32)|0);
   HEAP32[(($104)>>2)]=$length_0_lcssa_i;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2817) {
   _free($25);
   HEAP32[(($20)>>2)]=11;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 2811) {
   HEAP32[(($20)>>2)]=11;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } else if (($1|0)==2) {
  var $5=(($chain+20)|0);
  HEAP32[(($5)>>2)]=7;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 } else {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _seek_to_first_metadata_block_cb_($handle,$read_cb,$seek_cb){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $buffer=sp;
 var $1=___errno_location();
 HEAP32[(($1)>>2)]=0;
 var $2=(($buffer)|0);
 var $3=FUNCTION_TABLE[$read_cb]($2,1,4,$handle);
 var $4=HEAP32[(($1)>>2)];
 var $5=($4|0)==0;
 do {
  if ($5) {
   var $7=($3|0)==4;
   if (!($7)) {
    var $_0=3;
    break;
   }
   var $9=_memcmp($2,2760,3);
   var $10=($9|0)==0;
   if ($10) {
    var $$etemp$0$0=2;
    var $$etemp$0$1=0;
    var $12=FUNCTION_TABLE[$seek_cb]($handle,$$etemp$0$0,$$etemp$0$1,1);
    var $13=($12|0)<0;
    if ($13) {
     var $_0=2;
     break;
    }
    var $14=FUNCTION_TABLE[$read_cb]($2,1,1,$handle);
    var $15=($14|0)==0;
    if ($15) {
     var $_0=1;
     break;
    }
    var $17=HEAP8[($2)];
    var $18=($17&255);
    var $19=$18&128;
    var $20=($19|0)==0;
    if (!($20)) {
     var $_0=1;
     break;
    }
    var $22=FUNCTION_TABLE[$read_cb]($2,1,1,$handle);
    var $23=($22|0)==0;
    if ($23) {
     var $_0=1;
     break;
    }
    var $34=HEAP8[($2)];
    var $35=($34&255);
    var $36=$35&128;
    var $37=($36|0)==0;
    if (!($37)) {
     var $_0=1;
     break;
    }
    var $39=$18<<7;
    var $40=$39&16256;
    var $41=$35&127;
    var $42=$41|$40;
    var $43=FUNCTION_TABLE[$read_cb]($2,1,1,$handle);
    var $44=($43|0)==0;
    if ($44) {
     var $_0=1;
     break;
    }
    var $46=HEAP8[($2)];
    var $47=($46&255);
    var $48=$47&128;
    var $49=($48|0)==0;
    if (!($49)) {
     var $_0=1;
     break;
    }
    var $51=$42<<7;
    var $52=$47&127;
    var $53=$52|$51;
    var $54=FUNCTION_TABLE[$read_cb]($2,1,1,$handle);
    var $55=($54|0)==0;
    if ($55) {
     var $_0=1;
     break;
    }
    var $57=HEAP8[($2)];
    var $58=($57&255);
    var $59=$58&128;
    var $60=($59|0)==0;
    if (!($60)) {
     var $_0=1;
     break;
    }
    var $62=$53<<7;
    var $63=$58&127;
    var $64=$63|$62;
    var $65$0=$64;
    var $65$1=0;
    var $66=FUNCTION_TABLE[$seek_cb]($handle,$65$0,$65$1,1);
    var $67=($66|0)<0;
    if ($67) {
     var $_0=2;
     break;
    }
    HEAP32[(($1)>>2)]=0;
    var $25=FUNCTION_TABLE[$read_cb]($2,1,4,$handle);
    var $26=HEAP32[(($1)>>2)];
    var $27=($26|0)==0;
    if (!($27)) {
     var $_0=1;
     break;
    }
    var $29=($25|0)==4;
    if (!($29)) {
     var $_0=3;
     break;
    }
   }
   var $31=_memcmp(9872,$2,4);
   var $32=($31|0)==0;
   var $_=$32?0:3;
   var $_0=$_;
  } else {
   var $_0=1;
  }
 } while(0);
 var $_0;
 STACKTOP=sp;return $_0;
}
function _chain_read_ogg_read_cb_($decoder,$buffer,$bytes,$client_data){
 var label=0;
 var $1=HEAP32[(($bytes)>>2)];
 var $2=($1|0)==0;
 if ($2) {
  var $_0=2;
  var $_0;
  return $_0;
 }
 var $4=(($client_data+20)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if (!($7)) {
  var $_0=2;
  var $_0;
  return $_0;
 }
 var $9=(($client_data+40)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($client_data+36)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$11]($buffer,1,$1,$14);
 HEAP32[(($bytes)>>2)]=$15;
 var $16=($15|0)==0;
 var $_=($16&1);
 var $_0=$_;
 var $_0;
 return $_0;
}
function _chain_read_ogg_write_cb_($decoder,$frame,$buffer,$client_data){
 var label=0;
 return 1;
}
function _chain_read_ogg_metadata_cb_($decoder,$metadata,$client_data){
 var label=0;
 var $1=_calloc(1,12);
 var $2=$1;
 var $3=($1|0)==0;
 if ($3) {
  var $5=(($client_data+20)|0);
  var $6=$5;
  HEAP32[(($6)>>2)]=11;
  return;
 }
 var $8=_FLAC__metadata_object_clone($metadata);
 var $9=$1;
 HEAP32[(($9)>>2)]=$8;
 var $10=($8|0)==0;
 if ($10) {
  _free($1);
  var $11=(($client_data+20)|0);
  var $12=$11;
  HEAP32[(($12)>>2)]=11;
  return;
 }
 var $14=(($1+4)|0);
 var $15=$14;
 HEAP32[(($15)>>2)]=0;
 var $16=(($1+8)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=0;
 var $18=(($8+4)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($client_data+12)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if (!($22)) {
  var $24=(($21)|0);
  var $25=HEAP32[(($24)>>2)];
  var $26=(($25+4)|0);
  HEAP32[(($26)>>2)]=0;
 }
 var $28=(($client_data+8)|0);
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if ($31) {
  HEAP32[(($29)>>2)]=$2;
 } else {
  var $34=HEAP32[(($20)>>2)];
  var $35=(($34+8)|0);
  HEAP32[(($35)>>2)]=$2;
  var $36=HEAP32[(($20)>>2)];
  HEAP32[(($15)>>2)]=$36;
 }
 HEAP32[(($20)>>2)]=$2;
 var $37=(($client_data+16)|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $40=((($39)+(1))|0);
 HEAP32[(($38)>>2)]=$40;
 return;
}
function _chain_read_ogg_error_cb_($decoder,$status,$client_data){
 var label=0;
 var $1=(($client_data+20)|0);
 var $2=$1;
 HEAP32[(($2)>>2)]=12;
 return;
}
function _ftell_wrapper_($handle){
 var label=0;
 var $1=$handle;
 var $2=_ftell($1);
 var $3$0=$2;
 var $3$1=(((($2|0)<0))|0)?-1:0;
 return (tempRet0=$3$1,$3$0);
}
function _write_callback_($decoder,$frame,$buffer,$client_data){
 var label=0;
 return 0;
}
function _metadata_callback_($decoder,$metadata,$client_data){
 var label=0;
 var $1=$client_data;
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  return;
 }
 var $5=(($client_data+4)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if (!($8)) {
  return;
 }
 var $10=_FLAC__metadata_object_clone($metadata);
 HEAP32[(($6)>>2)]=$10;
 var $11=($10|0)==0;
 if (!($11)) {
  return;
 }
 HEAP32[(($1)>>2)]=1;
 return;
}
function _error_callback_($decoder,$status,$client_data){
 var label=0;
 var $1=($status|0)==0;
 if ($1) {
  return;
 }
 var $3=$client_data;
 HEAP32[(($3)>>2)]=1;
 return;
}
function _FLAC__metadata_object_new($type){
 var label=0;
 var $1=($type>>>0)>126;
 if ($1) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $3=_calloc(1,176);
 var $4=$3;
 var $5=($3|0)==0;
 if ($5) {
  var $_0=$4;
  var $_0;
  return $_0;
 }
 var $7=(($3+4)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=0;
 var $9=$3;
 HEAP32[(($9)>>2)]=$type;
 switch (($type|0)) {
 case 2: {
  var $14=HEAP32[((10224)>>2)];
  var $15=$14>>>3;
  var $16=(($3+8)|0);
  var $17=$16;
  HEAP32[(($17)>>2)]=$15;
  var $_0=$4;
  var $_0;
  return $_0;
  break;
 }
 case 0: {
  var $11=(($3+8)|0);
  var $12=$11;
  HEAP32[(($12)>>2)]=34;
  var $_0=$4;
  var $_0;
  return $_0;
  break;
 }
 case 5: {
  var $57=HEAP32[((10176)>>2)];
  var $58=HEAP32[((10184)>>2)];
  var $59=((($58)+($57))|0);
  var $60=HEAP32[((10192)>>2)];
  var $61=((($59)+($60))|0);
  var $62=HEAP32[((10160)>>2)];
  var $63=((($61)+($62))|0);
  var $64=HEAP32[((10168)>>2)];
  var $65=((($63)+($64))|0);
  var $66=$65>>>3;
  var $67=(($3+8)|0);
  var $68=$67;
  var $69=(($3+164)|0);
  var $70=$69;
  var $71=HEAP32[(($70)>>2)];
  var $72=HEAP32[((10128)>>2)];
  var $73=HEAP32[((10144)>>2)];
  var $74=((($73)+($72))|0);
  var $75=HEAP32[((10152)>>2)];
  var $76=((($74)+($75))|0);
  var $77=HEAP32[((10104)>>2)];
  var $78=((($76)+($77))|0);
  var $79=HEAP32[((10120)>>2)];
  var $80=((($78)+($79))|0);
  var $81=HEAP32[((10112)>>2)];
  var $82=((($80)+($81))|0);
  var $83=HEAP32[((10136)>>2)];
  var $84=((($82)+($83))|0);
  var $85=(Math_imul($84,$71)|0);
  var $86=$85>>>3;
  var $87=((($86)+($66))|0);
  HEAP32[(($68)>>2)]=$87;
  var $88=($71|0)==0;
  if ($88) {
   var $_0=$4;
   var $_0;
   return $_0;
  }
  var $89=(($3+168)|0);
  var $90=$89;
  var $91=HEAP32[((10208)>>2)];
  var $92=HEAP32[((10216)>>2)];
  var $93=((($92)+($91))|0);
  var $94=HEAP32[((10200)>>2)];
  var $95=((($93)+($94))|0);
  var $_pre_i24=HEAP32[(($90)>>2)];
  var $i_08_i=0;var $97=$87;
  while(1) {
   var $97;
   var $i_08_i;
   var $98=(($_pre_i24+($i_08_i<<5)+23)|0);
   var $99=HEAP8[($98)];
   var $100=($99&255);
   var $101=(Math_imul($100,$95)|0);
   var $102=$101>>>3;
   var $103=((($102)+($97))|0);
   HEAP32[(($68)>>2)]=$103;
   var $104=((($i_08_i)+(1))|0);
   var $105=($104>>>0)<($71>>>0);
   if ($105) {
    var $i_08_i=$104;var $97=$103;
   } else {
    var $_0=$4;
    break;
   }
  }
  var $_0;
  return $_0;
  break;
 }
 case 4: {
  var $19=HEAP32[((9392)>>2)];
  var $20=_strlen($19);
  var $21=(($3+16)|0);
  var $22=$21;
  HEAP32[(($22)>>2)]=$20;
  var $23=(($3+20)|0);
  var $24=$23;
  var $25=((($20)+(1))|0);
  var $26=($25|0)==0;
  var $27=($19|0)==0;
  var $or_cond_i=$26|$27;
  do {
   if ($or_cond_i) {
    var $storemerge_i=0;
   } else {
    var $29=_malloc($25);
    var $30=($29|0)==0;
    if (!($30)) {
     (_memcpy($29, $19, $25)|0);
     var $storemerge_i=$29;
     break;
    }
    _free($3);
    var $_0=0;
    var $_0;
    return $_0;
   }
  } while(0);
  var $storemerge_i;
  HEAP32[(($24)>>2)]=$storemerge_i;
  var $34=HEAP32[((9904)>>2)];
  var $35=$34>>>3;
  var $36=(($3+8)|0);
  var $37=$36;
  var $38=((($35)+($20))|0);
  var $39=HEAP32[((9896)>>2)];
  var $40=$39>>>3;
  var $41=((($38)+($40))|0);
  HEAP32[(($37)>>2)]=$41;
  var $42=(($3+24)|0);
  var $43=$42;
  var $44=HEAP32[(($43)>>2)];
  var $45=($44|0)==0;
  if ($45) {
   var $_0=$4;
   var $_0;
   return $_0;
  }
  var $46=(($3+28)|0);
  var $47=$46;
  var $_pre_i=HEAP32[(($47)>>2)];
  var $i_010_i=0;var $49=$41;
  while(1) {
   var $49;
   var $i_010_i;
   var $50=((($49)+($35))|0);
   HEAP32[(($37)>>2)]=$50;
   var $51=(($_pre_i+($i_010_i<<3))|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=((($52)+($50))|0);
   HEAP32[(($37)>>2)]=$53;
   var $54=((($i_010_i)+(1))|0);
   var $55=($54>>>0)<($44>>>0);
   if ($55) {
    var $i_010_i=$54;var $49=$53;
   } else {
    var $_0=$4;
    break;
   }
  }
  var $_0;
  return $_0;
  break;
 }
 case 6: {
  var $107=HEAP32[((10032)>>2)];
  var $108=HEAP32[((10040)>>2)];
  var $109=((($108)+($107))|0);
  var $110=HEAP32[((10056)>>2)];
  var $111=((($109)+($110))|0);
  var $112=HEAP32[((10024)>>2)];
  var $113=((($111)+($112))|0);
  var $114=HEAP32[((10048)>>2)];
  var $115=((($113)+($114))|0);
  var $116=HEAP32[((10064)>>2)];
  var $117=((($115)+($116))|0);
  var $118=HEAP32[((10080)>>2)];
  var $119=((($117)+($118))|0);
  var $120=HEAP32[((10072)>>2)];
  var $121=((($119)+($120))|0);
  var $122=$121>>>3;
  var $123=(($3+8)|0);
  var $124=$123;
  HEAP32[(($124)>>2)]=$122;
  var $125=(($3+16)|0);
  var $126=$125;
  HEAP32[(($126)>>2)]=0;
  var $127=(($3+20)|0);
  var $128=$127;
  HEAP32[(($128)>>2)]=0;
  var $129=(($3+24)|0);
  var $130=$129;
  HEAP32[(($130)>>2)]=0;
  var $131=_strdup(10600);
  var $132=($131|0)==0;
  if ($132) {
   _free($3);
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $134=HEAP32[(($128)>>2)];
  var $135=($134|0)==0;
  if (!($135)) {
   _free($134);
  }
  HEAP32[(($128)>>2)]=$131;
  var $139=_strdup(10600);
  var $140=($139|0)==0;
  if ($140) {
   var $146=HEAP32[(($128)>>2)];
   var $147=($146|0)==0;
   if (!($147)) {
    _free($146);
   }
   _free($3);
   var $_0=0;
   var $_0;
   return $_0;
  } else {
   var $142=HEAP32[(($130)>>2)];
   var $143=($142|0)==0;
   if (!($143)) {
    _free($142);
   }
   HEAP32[(($130)>>2)]=$139;
   var $_0=$4;
   var $_0;
   return $_0;
  }
  break;
 }
 default: {
  var $_0=$4;
  var $_0;
  return $_0;
 }
 }
}
function _FLAC__metadata_object_clone($object){
 var label=0;
 var $1=(($object)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_FLAC__metadata_object_new($2);
 var $4=($3|0)==0;
 if ($4) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $6=(($object+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($3+4)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=HEAP32[(($1)>>2)];
 var $10=(($3)|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=(($object+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($3+8)|0);
 HEAP32[(($13)>>2)]=$12;
 switch (($9|0)) {
 case 0: {
  var $15=(($3+16)|0);
  var $16=(($object+16)|0);
  HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];HEAP32[((($15)+(12))>>2)]=HEAP32[((($16)+(12))>>2)];HEAP32[((($15)+(16))>>2)]=HEAP32[((($16)+(16))>>2)];HEAP32[((($15)+(20))>>2)]=HEAP32[((($16)+(20))>>2)];HEAP32[((($15)+(24))>>2)]=HEAP32[((($16)+(24))>>2)];HEAP32[((($15)+(28))>>2)]=HEAP32[((($16)+(28))>>2)];HEAP32[((($15)+(32))>>2)]=HEAP32[((($16)+(32))>>2)];HEAP32[((($15)+(36))>>2)]=HEAP32[((($16)+(36))>>2)];HEAP32[((($15)+(40))>>2)]=HEAP32[((($16)+(40))>>2)];HEAP32[((($15)+(44))>>2)]=HEAP32[((($16)+(44))>>2)];HEAP32[((($15)+(48))>>2)]=HEAP32[((($16)+(48))>>2)];HEAP32[((($15)+(52))>>2)]=HEAP32[((($16)+(52))>>2)];
  var $_0=$3;
  var $_0;
  return $_0;
  break;
 }
 case 1: {
  var $_0=$3;
  var $_0;
  return $_0;
  break;
 }
 case 5: {
  var $146=(($3+16)|0);
  var $147=(($object+16)|0);
  (_memcpy($146, $147, 160)|0);
  var $148=(($object+164)|0);
  var $149=HEAP32[(($148)>>2)];
  var $150=($149|0)==0;
  if ($150) {
   var $_0=$3;
   var $_0;
   return $_0;
  }
  var $151=(($object+168)|0);
  var $152=HEAP32[(($151)>>2)];
  var $153=_calloc($149,32);
  var $154=$153;
  var $155=($153|0)==0;
  do {
   if ($155) {
    var $156=(($3+168)|0);
    HEAP32[(($156)>>2)]=$154;
   } else {
    var $i_012_i=0;
    while(1) {
     var $i_012_i;
     var $157=(($154+($i_012_i<<5))|0);
     var $158=(($152+($i_012_i<<5))|0);
     var $159=$157;
     var $160=$158;
     HEAP32[(($159)>>2)]=HEAP32[(($160)>>2)];HEAP32[((($159)+(4))>>2)]=HEAP32[((($160)+(4))>>2)];HEAP32[((($159)+(8))>>2)]=HEAP32[((($160)+(8))>>2)];HEAP32[((($159)+(12))>>2)]=HEAP32[((($160)+(12))>>2)];HEAP32[((($159)+(16))>>2)]=HEAP32[((($160)+(16))>>2)];HEAP32[((($159)+(20))>>2)]=HEAP32[((($160)+(20))>>2)];HEAP32[((($159)+(24))>>2)]=HEAP32[((($160)+(24))>>2)];HEAP32[((($159)+(28))>>2)]=HEAP32[((($160)+(28))>>2)];
     var $161=(($152+($i_012_i<<5)+24)|0);
     var $162=HEAP32[(($161)>>2)];
     var $163=($162|0)==0;
     if (!($163)) {
      var $165=(($152+($i_012_i<<5)+23)|0);
      var $166=HEAP8[($165)];
      var $167=($166&255);
      var $168=_safe_malloc_mul_2op_p($167,16);
      var $169=($168|0)==0;
      if ($169) {
       var $i_08_i_i82=0;
       break;
      }
      var $171=$168;
      var $172=HEAP32[(($161)>>2)];
      var $173=$172;
      var $174=HEAP8[($165)];
      var $175=($174&255);
      var $176=$175<<4;
      (_memcpy($168, $173, $176)|0);
      var $177=(($154+($i_012_i<<5)+24)|0);
      HEAP32[(($177)>>2)]=$171;
     }
     var $188=((($i_012_i)+(1))|0);
     var $189=($188>>>0)<($149>>>0);
     if ($189) {
      var $i_012_i=$188;
     } else {
      label = 2993;
      break;
     }
    }
    if (label == 2993) {
     var $190=(($3+168)|0);
     HEAP32[(($190)>>2)]=$154;
     if ($155) {
      break;
     } else {
      var $_0=$3;
     }
     var $_0;
     return $_0;
    }
    while(1) {
     var $i_08_i_i82;
     var $178=(($154+($i_08_i_i82<<5)+24)|0);
     var $179=HEAP32[(($178)>>2)];
     var $180=($179|0)==0;
     if (!($180)) {
      var $182=$179;
      _free($182);
     }
     var $184=((($i_08_i_i82)+(1))|0);
     var $185=($184>>>0)<($149>>>0);
     if ($185) {
      var $i_08_i_i82=$184;
     } else {
      break;
     }
    }
    _free($153);
    var $186=(($3+168)|0);
    HEAP32[(($186)>>2)]=0;
   }
  } while(0);
  _FLAC__metadata_object_delete_data($3);
  var $192=$3;
  _free($192);
  var $_0=0;
  var $_0;
  return $_0;
  break;
 }
 case 6: {
  var $194=(($object+16)|0);
  var $195=$194;
  var $196=HEAP32[(($195)>>2)];
  var $197=(($3+16)|0);
  var $198=$197;
  HEAP32[(($198)>>2)]=$196;
  var $199=(($3+20)|0);
  var $200=$199;
  var $201=(($object+20)|0);
  var $202=$201;
  var $203=HEAP32[(($202)>>2)];
  var $204=_strdup($203);
  var $205=($204|0)==0;
  if ($205) {
   _FLAC__metadata_object_delete_data($3);
   var $211=$3;
   _free($211);
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $207=HEAP32[(($200)>>2)];
  var $208=($207|0)==0;
  if (!($208)) {
   _free($207);
  }
  HEAP32[(($200)>>2)]=$204;
  var $213=(($3+24)|0);
  var $214=$213;
  var $215=(($object+24)|0);
  var $216=$215;
  var $217=HEAP32[(($216)>>2)];
  var $218=_strdup($217);
  var $219=($218|0)==0;
  if ($219) {
   _FLAC__metadata_object_delete_data($3);
   var $225=$3;
   _free($225);
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $221=HEAP32[(($214)>>2)];
  var $222=($221|0)==0;
  if (!($222)) {
   _free($221);
  }
  HEAP32[(($214)>>2)]=$218;
  var $227=(($object+28)|0);
  var $228=$227;
  var $229=HEAP32[(($228)>>2)];
  var $230=(($3+28)|0);
  var $231=$230;
  HEAP32[(($231)>>2)]=$229;
  var $232=(($object+32)|0);
  var $233=$232;
  var $234=HEAP32[(($233)>>2)];
  var $235=(($3+32)|0);
  var $236=$235;
  HEAP32[(($236)>>2)]=$234;
  var $237=(($object+36)|0);
  var $238=$237;
  var $239=HEAP32[(($238)>>2)];
  var $240=(($3+36)|0);
  var $241=$240;
  HEAP32[(($241)>>2)]=$239;
  var $242=(($object+40)|0);
  var $243=$242;
  var $244=HEAP32[(($243)>>2)];
  var $245=(($3+40)|0);
  var $246=$245;
  HEAP32[(($246)>>2)]=$244;
  var $247=(($object+44)|0);
  var $248=$247;
  var $249=HEAP32[(($248)>>2)];
  var $250=(($3+44)|0);
  var $251=$250;
  HEAP32[(($251)>>2)]=$249;
  var $252=(($3+48)|0);
  var $253=$252;
  var $254=(($object+48)|0);
  var $255=$254;
  var $256=HEAP32[(($255)>>2)];
  var $257=($249|0)==0;
  var $258=($256|0)==0;
  var $or_cond_i89=$257|$258;
  do {
   if ($or_cond_i89) {
    var $storemerge_i90=0;
   } else {
    var $260=_malloc($249);
    var $261=($260|0)==0;
    if (!($261)) {
     (_memcpy($260, $256, $249)|0);
     var $storemerge_i90=$260;
     break;
    }
    _FLAC__metadata_object_delete_data($3);
    var $264=$3;
    _free($264);
    var $_0=0;
    var $_0;
    return $_0;
   }
  } while(0);
  var $storemerge_i90;
  HEAP32[(($253)>>2)]=$storemerge_i90;
  var $_0=$3;
  var $_0;
  return $_0;
  break;
 }
 case 2: {
  var $18=HEAP32[((10224)>>2)];
  var $19=$18>>>3;
  var $20=($12>>>0)<($19>>>0);
  if ($20) {
   _FLAC__metadata_object_delete_data($3);
   var $22=$3;
   _free($22);
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $24=(($3+16)|0);
  var $25=(($object+16)|0);
  (_memcpy($24, $25, $19)|0);
  var $26=(($3+20)|0);
  var $27=$26;
  var $28=(($object+20)|0);
  var $29=$28;
  var $30=HEAP32[(($29)>>2)];
  var $31=((($12)-($19))|0);
  var $32=($12|0)==($19|0);
  var $33=($30|0)==0;
  var $or_cond_i=$32|$33;
  do {
   if ($or_cond_i) {
    var $storemerge_i=0;
   } else {
    var $35=_malloc($31);
    var $36=($35|0)==0;
    if (!($36)) {
     (_memcpy($35, $30, $31)|0);
     var $storemerge_i=$35;
     break;
    }
    _FLAC__metadata_object_delete_data($3);
    var $39=$3;
    _free($39);
    var $_0=0;
    var $_0;
    return $_0;
   }
  } while(0);
  var $storemerge_i;
  HEAP32[(($27)>>2)]=$storemerge_i;
  var $_0=$3;
  var $_0;
  return $_0;
  break;
 }
 case 4: {
  var $66=(($3+16)|0);
  var $67=(($3+20)|0);
  var $68=$67;
  var $69=HEAP32[(($68)>>2)];
  var $70=($69|0)==0;
  if (!($70)) {
   _free($69);
   HEAP32[(($68)>>2)]=0;
  }
  var $73=(($object+16)|0);
  var $74=$73;
  var $75=HEAP32[(($74)>>2)];
  var $76=$66;
  HEAP32[(($76)>>2)]=$75;
  var $77=(($object+20)|0);
  var $78=$77;
  var $79=HEAP32[(($78)>>2)];
  var $80=($79|0)==0;
  L4063: do {
   if ($80) {
    var $storemerge=0;
   } else {
    var $uadd_i_i$0=_llvm_uadd_with_overflow_i32($75,1);
    var $uadd_i_i$1=tempRet0;
    var $82=$uadd_i_i$1;
    do {
     if (!($82)) {
      var $83=$uadd_i_i$0;
      var $84=($83|0)==0;
      var $85=($84&1);
      var $_size_i_i_i=((($85)+($83))|0);
      var $86=_malloc($_size_i_i_i);
      var $87=($86|0)==0;
      if ($87) {
       break;
      }
      (_memcpy($86, $79, $75)|0);
      var $89=(($86+$75)|0);
      HEAP8[($89)]=0;
      var $storemerge=$86;
      break L4063;
     }
    } while(0);
    _FLAC__metadata_object_delete_data($3);
    var $91=$3;
    _free($91);
    var $_0=0;
    var $_0;
    return $_0;
   }
  } while(0);
  var $storemerge;
  HEAP32[(($68)>>2)]=$storemerge;
  var $93=(($object+24)|0);
  var $94=$93;
  var $95=HEAP32[(($94)>>2)];
  var $96=($95|0)==0;
  L4071: do {
   if ($96) {
    var $98=(($3+28)|0);
    var $99=$98;
    HEAP32[(($99)>>2)]=0;
   } else {
    var $100=(($object+28)|0);
    var $101=$100;
    var $102=HEAP32[(($101)>>2)];
    var $103=_calloc($95,8);
    var $104=$103;
    var $105=($103|0)==0;
    do {
     if ($105) {
      var $106=(($3+28)|0);
      var $107=$106;
      HEAP32[(($107)>>2)]=$104;
     } else {
      var $i_013_i=0;
      while(1) {
       var $i_013_i;
       var $108=(($102+($i_013_i<<3))|0);
       var $109=HEAP32[(($108)>>2)];
       var $110=(($104+($i_013_i<<3))|0);
       HEAP32[(($110)>>2)]=$109;
       var $111=(($102+($i_013_i<<3)+4)|0);
       var $112=HEAP32[(($111)>>2)];
       var $113=($112|0)==0;
       if ($113) {
        var $115=(($104+($i_013_i<<3)+4)|0);
        HEAP32[(($115)>>2)]=0;
       } else {
        var $uadd_i_i_i$0=_llvm_uadd_with_overflow_i32($109,1);
        var $uadd_i_i_i$1=tempRet0;
        var $117=$uadd_i_i_i$1;
        if ($117) {
         var $i_08_i_i=0;
         break;
        }
        var $118=$uadd_i_i_i$0;
        var $119=($118|0)==0;
        var $120=($119&1);
        var $_size_i_i_i_i=((($120)+($118))|0);
        var $121=_malloc($_size_i_i_i_i);
        var $122=($121|0)==0;
        if ($122) {
         var $i_08_i_i=0;
         break;
        }
        (_memcpy($121, $112, $109)|0);
        var $124=(($121+$109)|0);
        HEAP8[($124)]=0;
        var $125=(($104+($i_013_i<<3)+4)|0);
        HEAP32[(($125)>>2)]=$121;
       }
       var $136=((($i_013_i)+(1))|0);
       var $137=($136>>>0)<($95>>>0);
       if ($137) {
        var $i_013_i=$136;
       } else {
        label = 2979;
        break;
       }
      }
      if (label == 2979) {
       var $138=(($3+28)|0);
       var $139=$138;
       HEAP32[(($139)>>2)]=$104;
       if ($105) {
        break;
       } else {
        break L4071;
       }
      }
      while(1) {
       var $i_08_i_i;
       var $126=(($104+($i_08_i_i<<3)+4)|0);
       var $127=HEAP32[(($126)>>2)];
       var $128=($127|0)==0;
       if (!($128)) {
        _free($127);
       }
       var $131=((($i_08_i_i)+(1))|0);
       var $132=($131>>>0)<($95>>>0);
       if ($132) {
        var $i_08_i_i=$131;
       } else {
        break;
       }
      }
      _free($103);
      var $133=(($3+28)|0);
      var $134=$133;
      HEAP32[(($134)>>2)]=0;
     }
    } while(0);
    _FLAC__metadata_object_delete_data($3);
    var $141=$3;
    _free($141);
    var $_0=0;
    var $_0;
    return $_0;
   }
  } while(0);
  var $143=(($3+24)|0);
  var $144=$143;
  HEAP32[(($144)>>2)]=$95;
  var $_0=$3;
  var $_0;
  return $_0;
  break;
 }
 case 3: {
  var $41=(($object+16)|0);
  var $42=$41;
  var $43=HEAP32[(($42)>>2)];
  var $44=(($3+16)|0);
  var $45=$44;
  HEAP32[(($45)>>2)]=$43;
  var $46=($43>>>0)>178956970;
  if ($46) {
   _FLAC__metadata_object_delete_data($3);
   var $48=$3;
   _free($48);
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $50=(($3+20)|0);
  var $51=$50;
  var $52=(($object+20)|0);
  var $53=$52;
  var $54=HEAP32[(($53)>>2)];
  var $55=$54;
  var $56=((($43)*(24))&-1);
  var $57=($56|0)==0;
  var $58=($54|0)==0;
  var $or_cond_i73=$57|$58;
  do {
   if ($or_cond_i73) {
    var $storemerge_i74=0;
   } else {
    var $60=_malloc($56);
    var $61=($60|0)==0;
    if (!($61)) {
     (_memcpy($60, $55, $56)|0);
     var $storemerge_i74=$60;
     break;
    }
    _FLAC__metadata_object_delete_data($3);
    var $64=$3;
    _free($64);
    var $_0=0;
    var $_0;
    return $_0;
   }
  } while(0);
  var $storemerge_i74;
  HEAP32[(($51)>>2)]=$storemerge_i74;
  var $_0=$3;
  var $_0;
  return $_0;
  break;
 }
 default: {
  var $266=(($3+16)|0);
  var $267=$266;
  var $268=(($object+16)|0);
  var $269=$268;
  var $270=HEAP32[(($269)>>2)];
  var $271=($12|0)==0;
  var $272=($270|0)==0;
  var $or_cond_i93=$271|$272;
  do {
   if ($or_cond_i93) {
    var $storemerge_i94=0;
   } else {
    var $274=_malloc($12);
    var $275=($274|0)==0;
    if (!($275)) {
     (_memcpy($274, $270, $12)|0);
     var $storemerge_i94=$274;
     break;
    }
    _FLAC__metadata_object_delete_data($3);
    var $278=$3;
    _free($278);
    var $_0=0;
    var $_0;
    return $_0;
   }
  } while(0);
  var $storemerge_i94;
  HEAP32[(($267)>>2)]=$storemerge_i94;
  var $_0=$3;
  var $_0;
  return $_0;
 }
 }
}
function _FLAC__metadata_object_delete($object){
 var label=0;
 _FLAC__metadata_object_delete_data($object);
 var $1=$object;
 _free($1);
 return;
}
function _FLAC__metadata_object_delete_data($object){
 var label=0;
 var $1=(($object)|0);
 var $2=HEAP32[(($1)>>2)];
 switch (($2|0)) {
 case 2: {
  var $4=(($object+20)|0);
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=($6|0)==0;
  if ($7) {
   return;
  }
  _free($6);
  HEAP32[(($5)>>2)]=0;
  return;
  break;
 }
 case 5: {
  var $41=(($object+168)|0);
  var $42=HEAP32[(($41)>>2)];
  var $43=($42|0)==0;
  if ($43) {
   return;
  }
  var $45=(($object+164)|0);
  var $46=HEAP32[(($45)>>2)];
  var $47=($46|0)==0;
  if (!($47)) {
   var $i_08_i28=0;
   while(1) {
    var $i_08_i28;
    var $48=(($42+($i_08_i28<<5)+24)|0);
    var $49=HEAP32[(($48)>>2)];
    var $50=($49|0)==0;
    if (!($50)) {
     var $52=$49;
     _free($52);
    }
    var $54=((($i_08_i28)+(1))|0);
    var $55=($54>>>0)<($46>>>0);
    if ($55) {
     var $i_08_i28=$54;
    } else {
     break;
    }
   }
  }
  var $56=$42;
  _free($56);
  return;
  break;
 }
 case 6: {
  var $58=(($object+20)|0);
  var $59=$58;
  var $60=HEAP32[(($59)>>2)];
  var $61=($60|0)==0;
  if (!($61)) {
   _free($60);
   HEAP32[(($59)>>2)]=0;
  }
  var $64=(($object+24)|0);
  var $65=$64;
  var $66=HEAP32[(($65)>>2)];
  var $67=($66|0)==0;
  if (!($67)) {
   _free($66);
   HEAP32[(($65)>>2)]=0;
  }
  var $70=(($object+48)|0);
  var $71=$70;
  var $72=HEAP32[(($71)>>2)];
  var $73=($72|0)==0;
  if ($73) {
   return;
  }
  _free($72);
  HEAP32[(($71)>>2)]=0;
  return;
  break;
 }
 case 3: {
  var $10=(($object+20)|0);
  var $11=$10;
  var $12=HEAP32[(($11)>>2)];
  var $13=($12|0)==0;
  if ($13) {
   return;
  }
  var $15=$12;
  _free($15);
  HEAP32[(($11)>>2)]=0;
  return;
  break;
 }
 case 4: {
  var $17=(($object+20)|0);
  var $18=$17;
  var $19=HEAP32[(($18)>>2)];
  var $20=($19|0)==0;
  if (!($20)) {
   _free($19);
   HEAP32[(($18)>>2)]=0;
  }
  var $23=(($object+28)|0);
  var $24=$23;
  var $25=HEAP32[(($24)>>2)];
  var $26=($25|0)==0;
  if ($26) {
   return;
  }
  var $28=(($object+24)|0);
  var $29=$28;
  var $30=HEAP32[(($29)>>2)];
  var $31=($30|0)==0;
  if (!($31)) {
   var $i_08_i=0;
   while(1) {
    var $i_08_i;
    var $32=(($25+($i_08_i<<3)+4)|0);
    var $33=HEAP32[(($32)>>2)];
    var $34=($33|0)==0;
    if (!($34)) {
     _free($33);
    }
    var $37=((($i_08_i)+(1))|0);
    var $38=($37>>>0)<($30>>>0);
    if ($38) {
     var $i_08_i=$37;
    } else {
     break;
    }
   }
  }
  var $39=$25;
  _free($39);
  return;
  break;
 }
 case 0:case 1: {
  return;
  break;
 }
 default: {
  var $76=(($object+16)|0);
  var $77=$76;
  var $78=HEAP32[(($77)>>2)];
  var $79=($78|0)==0;
  if ($79) {
   return;
  }
  _free($78);
  HEAP32[(($77)>>2)]=0;
  return;
 }
 }
}
function _FLAC__metadata_object_is_equal($block1,$block2){
 var label=0;
 var $1=(($block1)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($block2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($block1+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($block2+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($8|0)==($10|0);
 if (!($11)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $13=(($block1+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($block2+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($14|0)==($16|0);
 if (!($17)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 switch (($2|0)) {
 case 0: {
  var $20=(($block1+16)|0);
  var $21=(($block2+16)|0);
  var $22=$20;
  var $23=HEAP32[(($22)>>2)];
  var $24=$21;
  var $25=HEAP32[(($24)>>2)];
  var $26=($23|0)==($25|0);
  if (!($26)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $28=(($block1+20)|0);
  var $29=$28;
  var $30=HEAP32[(($29)>>2)];
  var $31=(($block2+20)|0);
  var $32=$31;
  var $33=HEAP32[(($32)>>2)];
  var $34=($30|0)==($33|0);
  if (!($34)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $36=(($block1+24)|0);
  var $37=$36;
  var $38=HEAP32[(($37)>>2)];
  var $39=(($block2+24)|0);
  var $40=$39;
  var $41=HEAP32[(($40)>>2)];
  var $42=($38|0)==($41|0);
  if (!($42)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $44=(($block1+28)|0);
  var $45=$44;
  var $46=HEAP32[(($45)>>2)];
  var $47=(($block2+28)|0);
  var $48=$47;
  var $49=HEAP32[(($48)>>2)];
  var $50=($46|0)==($49|0);
  if (!($50)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $52=(($block1+32)|0);
  var $53=$52;
  var $54=HEAP32[(($53)>>2)];
  var $55=(($block2+32)|0);
  var $56=$55;
  var $57=HEAP32[(($56)>>2)];
  var $58=($54|0)==($57|0);
  if (!($58)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $60=(($block1+36)|0);
  var $61=$60;
  var $62=HEAP32[(($61)>>2)];
  var $63=(($block2+36)|0);
  var $64=$63;
  var $65=HEAP32[(($64)>>2)];
  var $66=($62|0)==($65|0);
  if (!($66)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $68=(($block1+40)|0);
  var $69=$68;
  var $70=HEAP32[(($69)>>2)];
  var $71=(($block2+40)|0);
  var $72=$71;
  var $73=HEAP32[(($72)>>2)];
  var $74=($70|0)==($73|0);
  if (!($74)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $76=(($block1+48)|0);
  var $77=$76;
  var $ld$0$0=(($77)|0);
  var $78$0=HEAP32[(($ld$0$0)>>2)];
  var $ld$1$1=(($77+4)|0);
  var $78$1=HEAP32[(($ld$1$1)>>2)];
  var $79=(($block2+48)|0);
  var $80=$79;
  var $ld$2$0=(($80)|0);
  var $81$0=HEAP32[(($ld$2$0)>>2)];
  var $ld$3$1=(($80+4)|0);
  var $81$1=HEAP32[(($ld$3$1)>>2)];
  var $82=(($78$0|0) == ($81$0|0)) & (($78$1|0) == ($81$1|0));
  if (!($82)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $84=(($block1+56)|0);
  var $85=(($block2+56)|0);
  var $86=_memcmp($84,$85,16);
  var $87=($86|0)==0;
  var $__i=($87&1);
  var $_0=$__i;
  var $_0;
  return $_0;
  break;
 }
 case 2: {
  var $89=(($block1+16)|0);
  var $90=(($block2+16)|0);
  var $91=_memcmp($89,$90,4);
  var $92=($91|0)==0;
  if (!($92)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $94=(($block1+20)|0);
  var $95=$94;
  var $96=HEAP32[(($95)>>2)];
  var $97=($96|0)==0;
  var $_phi_trans_insert_i=(($block2+20)|0);
  var $98=$_phi_trans_insert_i;
  var $_pre_i=HEAP32[(($98)>>2)];
  do {
   if ($97) {
    var $106=$_pre_i;
   } else {
    var $100=($_pre_i|0)==0;
    if ($100) {
     var $106=0;
     break;
    }
    var $102=((($14)-(4))|0);
    var $103=_memcmp($96,$_pre_i,$102);
    var $104=($103|0)==0;
    var $105=($104&1);
    var $_0=$105;
    var $_0;
    return $_0;
   }
  } while(0);
  var $106;
  var $107=($96|0)==($106|0);
  var $108=($107&1);
  var $_0=$108;
  var $_0;
  return $_0;
  break;
 }
 case 4: {
  var $149=(($block1+16)|0);
  var $150=(($block2+16)|0);
  var $151=$149;
  var $152=HEAP32[(($151)>>2)];
  var $153=$150;
  var $154=HEAP32[(($153)>>2)];
  var $155=($152|0)==($154|0);
  if (!($155)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $157=(($block1+20)|0);
  var $158=$157;
  var $159=HEAP32[(($158)>>2)];
  var $160=($159|0)==0;
  var $_phi_trans_insert_i29=(($block2+20)|0);
  var $161=$_phi_trans_insert_i29;
  var $_pre_i30=HEAP32[(($161)>>2)];
  do {
   if ($160) {
    var $167=$_pre_i30;
    label = 3107;
   } else {
    var $163=($_pre_i30|0)==0;
    if ($163) {
     var $167=0;
     label = 3107;
     break;
    }
    var $165=_memcmp($159,$_pre_i30,$152);
    var $166=($165|0)==0;
    if ($166) {
     break;
    } else {
     var $_0=0;
    }
    var $_0;
    return $_0;
   }
  } while(0);
  do {
   if (label == 3107) {
    var $167;
    var $168=($159|0)==($167|0);
    if ($168) {
     break;
    } else {
     var $_0=0;
    }
    var $_0;
    return $_0;
   }
  } while(0);
  var $170=(($block1+24)|0);
  var $171=$170;
  var $172=HEAP32[(($171)>>2)];
  var $173=(($block2+24)|0);
  var $174=$173;
  var $175=HEAP32[(($174)>>2)];
  var $176=($172|0)==($175|0);
  if (!($176)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $177=($172|0)==0;
  if ($177) {
   var $_0=1;
   var $_0;
   return $_0;
  }
  var $178=(($block1+28)|0);
  var $179=$178;
  var $180=HEAP32[(($179)>>2)];
  var $181=(($block2+28)|0);
  var $182=$181;
  var $_pre31_i=HEAP32[(($182)>>2)];
  var $i_028_i=0;
  L4240: while(1) {
   var $i_028_i;
   var $184=(($180+($i_028_i<<3)+4)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=($185|0)==0;
   var $_phi_trans_insert32_i=(($_pre31_i+($i_028_i<<3)+4)|0);
   var $_pre33_i=HEAP32[(($_phi_trans_insert32_i)>>2)];
   do {
    if ($186) {
     var $194=$_pre33_i;
     label = 3114;
    } else {
     var $188=($_pre33_i|0)==0;
     if ($188) {
      var $194=0;
      label = 3114;
      break;
     }
     var $190=(($180+($i_028_i<<3))|0);
     var $191=HEAP32[(($190)>>2)];
     var $192=_memcmp($185,$_pre33_i,$191);
     var $193=($192|0)==0;
     if (!($193)) {
      var $_0=0;
      label = 3195;
      break L4240;
     }
    }
   } while(0);
   if (label == 3114) {
    label = 0;
    var $194;
    var $195=($185|0)==($194|0);
    if (!($195)) {
     var $_0=0;
     label = 3187;
     break;
    }
   }
   var $197=((($i_028_i)+(1))|0);
   var $198=($197>>>0)<($172>>>0);
   if ($198) {
    var $i_028_i=$197;
   } else {
    var $_0=1;
    label = 3188;
    break;
   }
  }
  if (label == 3187) {
   var $_0;
   return $_0;
  }
  else if (label == 3188) {
   var $_0;
   return $_0;
  }
  else if (label == 3195) {
   var $_0;
   return $_0;
  }
  break;
 }
 case 5: {
  var $200=(($block1+16)|0);
  var $201=(($block2+16)|0);
  var $202=_strcmp($200,$201);
  var $203=($202|0)==0;
  if (!($203)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $205=(($block1+152)|0);
  var $ld$12$0=(($205)|0);
  var $206$0=HEAP32[(($ld$12$0)>>2)];
  var $ld$13$1=(($205+4)|0);
  var $206$1=HEAP32[(($ld$13$1)>>2)];
  var $207=(($block2+152)|0);
  var $ld$14$0=(($207)|0);
  var $208$0=HEAP32[(($ld$14$0)>>2)];
  var $ld$15$1=(($207+4)|0);
  var $208$1=HEAP32[(($ld$15$1)>>2)];
  var $209=(($206$0|0) == ($208$0|0)) & (($206$1|0) == ($208$1|0));
  if (!($209)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $211=(($block1+160)|0);
  var $212=HEAP32[(($211)>>2)];
  var $213=(($block2+160)|0);
  var $214=HEAP32[(($213)>>2)];
  var $215=($212|0)==($214|0);
  if (!($215)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $217=(($block1+164)|0);
  var $218=HEAP32[(($217)>>2)];
  var $219=(($block2+164)|0);
  var $220=HEAP32[(($219)>>2)];
  var $221=($218|0)==($220|0);
  if (!($221)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $223=(($block1+168)|0);
  var $224=HEAP32[(($223)>>2)];
  var $225=($224|0)==0;
  var $_phi_trans_insert_i34=(($block2+168)|0);
  var $_pre_i35=HEAP32[(($_phi_trans_insert_i34)>>2)];
  L4265: do {
   if ($225) {
    var $287=$_pre_i35;
    label = 3136;
   } else {
    var $227=($_pre_i35|0)==0;
    if ($227) {
     var $287=0;
     label = 3136;
     break;
    }
    var $228=($218|0)==0;
    if ($228) {
     break;
    } else {
     var $i_067_i=0;
    }
    L4268: while(1) {
     var $i_067_i;
     var $229=(($224+($i_067_i<<5))|0);
     var $ld$16$0=(($229)|0);
     var $230$0=HEAP32[(($ld$16$0)>>2)];
     var $ld$17$1=(($229+4)|0);
     var $230$1=HEAP32[(($ld$17$1)>>2)];
     var $231=(($_pre_i35+($i_067_i<<5))|0);
     var $ld$18$0=(($231)|0);
     var $232$0=HEAP32[(($ld$18$0)>>2)];
     var $ld$19$1=(($231+4)|0);
     var $232$1=HEAP32[(($ld$19$1)>>2)];
     var $233=(($230$0|0) == ($232$0|0)) & (($230$1|0) == ($232$1|0));
     if (!($233)) {
      var $_0=0;
      label = 3203;
      break;
     }
     var $235=(($224+($i_067_i<<5)+8)|0);
     var $236=HEAP8[($235)];
     var $237=(($_pre_i35+($i_067_i<<5)+8)|0);
     var $238=HEAP8[($237)];
     var $239=(($236<<24)>>24)==(($238<<24)>>24);
     if (!($239)) {
      var $_0=0;
      label = 3189;
      break;
     }
     var $241=(($224+($i_067_i<<5)+9)|0);
     var $242=(($_pre_i35+($i_067_i<<5)+9)|0);
     var $243=_memcmp($241,$242,13);
     var $244=($243|0)==0;
     if (!($244)) {
      var $_0=0;
      label = 3180;
      break;
     }
     var $246=(($224+($i_067_i<<5)+20)|0);
     var $247=$246;
     var $248=HEAP32[(($247)>>2)];
     var $249=(($_pre_i35+($i_067_i<<5)+20)|0);
     var $250=$249;
     var $251=HEAP32[(($250)>>2)];
     var $252=$251^$248;
     var $253=$252&196608;
     var $254=($253|0)==0;
     if (!($254)) {
      var $_0=0;
      label = 3185;
      break;
     }
     var $256=(($224+($i_067_i<<5)+23)|0);
     var $257=HEAP8[($256)];
     var $258=(($_pre_i35+($i_067_i<<5)+23)|0);
     var $259=HEAP8[($258)];
     var $260=(($257<<24)>>24)==(($259<<24)>>24);
     if (!($260)) {
      var $_0=0;
      label = 3182;
      break;
     }
     var $262=(($224+($i_067_i<<5)+24)|0);
     var $263=HEAP32[(($262)>>2)];
     var $264=($263|0)==0;
     var $_pre70_i=(($_pre_i35+($i_067_i<<5)+24)|0);
     var $_pre=HEAP32[(($_pre70_i)>>2)];
     L4275: do {
      if ($264) {
       var $283=$_pre;
       label = 3134;
      } else {
       var $266=($_pre|0)==0;
       if ($266) {
        var $283=0;
        label = 3134;
        break;
       }
       var $267=($257&255);
       var $j_0_i=0;
       while(1) {
        var $j_0_i;
        var $269=($j_0_i>>>0)<($267>>>0);
        if (!($269)) {
         break L4275;
        }
        var $271=(($263+($j_0_i<<4))|0);
        var $ld$20$0=(($271)|0);
        var $272$0=HEAP32[(($ld$20$0)>>2)];
        var $ld$21$1=(($271+4)|0);
        var $272$1=HEAP32[(($ld$21$1)>>2)];
        var $273=(($_pre+($j_0_i<<4))|0);
        var $ld$22$0=(($273)|0);
        var $274$0=HEAP32[(($ld$22$0)>>2)];
        var $ld$23$1=(($273+4)|0);
        var $274$1=HEAP32[(($ld$23$1)>>2)];
        var $275=(($272$0|0) == ($274$0|0)) & (($272$1|0) == ($274$1|0));
        if (!($275)) {
         var $_0=0;
         label = 3173;
         break L4268;
        }
        var $277=(($263+($j_0_i<<4)+8)|0);
        var $278=HEAP8[($277)];
        var $279=(($_pre+($j_0_i<<4)+8)|0);
        var $280=HEAP8[($279)];
        var $281=(($278<<24)>>24)==(($280<<24)>>24);
        var $282=((($j_0_i)+(1))|0);
        if ($281) {
         var $j_0_i=$282;
        } else {
         var $_0=0;
         label = 3208;
         break L4268;
        }
       }
      }
     } while(0);
     if (label == 3134) {
      label = 0;
      var $283;
      var $284=($263|0)==($283|0);
      if (!($284)) {
       var $_0=0;
       label = 3212;
       break;
      }
     }
     var $285=((($i_067_i)+(1))|0);
     var $286=($285>>>0)<($218>>>0);
     if ($286) {
      var $i_067_i=$285;
     } else {
      break L4265;
     }
    }
    if (label == 3173) {
     var $_0;
     return $_0;
    }
    else if (label == 3180) {
     var $_0;
     return $_0;
    }
    else if (label == 3182) {
     var $_0;
     return $_0;
    }
    else if (label == 3185) {
     var $_0;
     return $_0;
    }
    else if (label == 3189) {
     var $_0;
     return $_0;
    }
    else if (label == 3203) {
     var $_0;
     return $_0;
    }
    else if (label == 3208) {
     var $_0;
     return $_0;
    }
    else if (label == 3212) {
     var $_0;
     return $_0;
    }
   }
  } while(0);
  do {
   if (label == 3136) {
    var $287;
    var $288=($224|0)==($287|0);
    if ($288) {
     break;
    } else {
     var $_0=0;
    }
    var $_0;
    return $_0;
   }
  } while(0);
  var $_0=1;
  var $_0;
  return $_0;
  break;
 }
 case 1: {
  var $_0=1;
  var $_0;
  return $_0;
  break;
 }
 case 3: {
  var $110=(($block1+16)|0);
  var $111=(($block2+16)|0);
  var $112=$110;
  var $113=HEAP32[(($112)>>2)];
  var $114=$111;
  var $115=HEAP32[(($114)>>2)];
  var $116=($113|0)==($115|0);
  if (!($116)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $118=(($block1+20)|0);
  var $119=$118;
  var $120=HEAP32[(($119)>>2)];
  var $121=($120|0)==0;
  var $_phi_trans_insert_i25=(($block2+20)|0);
  var $122=$_phi_trans_insert_i25;
  var $_pre_i26=HEAP32[(($122)>>2)];
  do {
   if ($121) {
    var $145=$_pre_i26;
   } else {
    var $124=($_pre_i26|0)==0;
    if ($124) {
     var $145=0;
     break;
    } else {
     var $i_0_i=0;
    }
    while(1) {
     var $i_0_i;
     var $125=($i_0_i>>>0)<($113>>>0);
     if (!($125)) {
      var $_0=1;
      label = 3198;
      break;
     }
     var $127=(($120+((($i_0_i)*(24))&-1))|0);
     var $ld$4$0=(($127)|0);
     var $128$0=HEAP32[(($ld$4$0)>>2)];
     var $ld$5$1=(($127+4)|0);
     var $128$1=HEAP32[(($ld$5$1)>>2)];
     var $129=(($_pre_i26+((($i_0_i)*(24))&-1))|0);
     var $ld$6$0=(($129)|0);
     var $130$0=HEAP32[(($ld$6$0)>>2)];
     var $ld$7$1=(($129+4)|0);
     var $130$1=HEAP32[(($ld$7$1)>>2)];
     var $131=(($128$0|0) == ($130$0|0)) & (($128$1|0) == ($130$1|0));
     if (!($131)) {
      var $_0=0;
      label = 3199;
      break;
     }
     var $133=(($120+((($i_0_i)*(24))&-1)+8)|0);
     var $ld$8$0=(($133)|0);
     var $134$0=HEAP32[(($ld$8$0)>>2)];
     var $ld$9$1=(($133+4)|0);
     var $134$1=HEAP32[(($ld$9$1)>>2)];
     var $135=(($_pre_i26+((($i_0_i)*(24))&-1)+8)|0);
     var $ld$10$0=(($135)|0);
     var $136$0=HEAP32[(($ld$10$0)>>2)];
     var $ld$11$1=(($135+4)|0);
     var $136$1=HEAP32[(($ld$11$1)>>2)];
     var $137=(($134$0|0) == ($136$0|0)) & (($134$1|0) == ($136$1|0));
     if (!($137)) {
      var $_0=0;
      label = 3216;
      break;
     }
     var $139=(($120+((($i_0_i)*(24))&-1)+16)|0);
     var $140=HEAP32[(($139)>>2)];
     var $141=(($_pre_i26+((($i_0_i)*(24))&-1)+16)|0);
     var $142=HEAP32[(($141)>>2)];
     var $143=($140|0)==($142|0);
     var $144=((($i_0_i)+(1))|0);
     if ($143) {
      var $i_0_i=$144;
     } else {
      var $_0=0;
      label = 3179;
      break;
     }
    }
    if (label == 3179) {
     var $_0;
     return $_0;
    }
    else if (label == 3198) {
     var $_0;
     return $_0;
    }
    else if (label == 3199) {
     var $_0;
     return $_0;
    }
    else if (label == 3216) {
     var $_0;
     return $_0;
    }
   }
  } while(0);
  var $145;
  var $146=($120|0)==($145|0);
  var $147=($146&1);
  var $_0=$147;
  var $_0;
  return $_0;
  break;
 }
 case 6: {
  var $290=(($block1+16)|0);
  var $291=(($block2+16)|0);
  var $292=$290;
  var $293=HEAP32[(($292)>>2)];
  var $294=$291;
  var $295=HEAP32[(($294)>>2)];
  var $296=($293|0)==($295|0);
  if (!($296)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $298=(($block1+20)|0);
  var $299=$298;
  var $300=HEAP32[(($299)>>2)];
  var $301=(($block2+20)|0);
  var $302=$301;
  var $303=HEAP32[(($302)>>2)];
  var $304=($300|0)==($303|0);
  do {
   if (!($304)) {
    var $306=($300|0)==0;
    var $307=($303|0)==0;
    var $or_cond_i=$306|$307;
    if ($or_cond_i) {
     var $_0=0;
     var $_0;
     return $_0;
    }
    var $309=_strcmp($300,$303);
    var $310=($309|0)==0;
    if ($310) {
     break;
    } else {
     var $_0=0;
    }
    var $_0;
    return $_0;
   }
  } while(0);
  var $312=(($block1+24)|0);
  var $313=$312;
  var $314=HEAP32[(($313)>>2)];
  var $315=(($block2+24)|0);
  var $316=$315;
  var $317=HEAP32[(($316)>>2)];
  var $318=($314|0)==($317|0);
  do {
   if (!($318)) {
    var $320=($314|0)==0;
    var $321=($317|0)==0;
    var $or_cond32_i=$320|$321;
    if ($or_cond32_i) {
     var $_0=0;
     var $_0;
     return $_0;
    }
    var $323=_strcmp($314,$317);
    var $324=($323|0)==0;
    if ($324) {
     break;
    } else {
     var $_0=0;
    }
    var $_0;
    return $_0;
   }
  } while(0);
  var $326=(($block1+28)|0);
  var $327=$326;
  var $328=HEAP32[(($327)>>2)];
  var $329=(($block2+28)|0);
  var $330=$329;
  var $331=HEAP32[(($330)>>2)];
  var $332=($328|0)==($331|0);
  if (!($332)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $334=(($block1+32)|0);
  var $335=$334;
  var $336=HEAP32[(($335)>>2)];
  var $337=(($block2+32)|0);
  var $338=$337;
  var $339=HEAP32[(($338)>>2)];
  var $340=($336|0)==($339|0);
  if (!($340)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $342=(($block1+36)|0);
  var $343=$342;
  var $344=HEAP32[(($343)>>2)];
  var $345=(($block2+36)|0);
  var $346=$345;
  var $347=HEAP32[(($346)>>2)];
  var $348=($344|0)==($347|0);
  if (!($348)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $350=(($block1+40)|0);
  var $351=$350;
  var $352=HEAP32[(($351)>>2)];
  var $353=(($block2+40)|0);
  var $354=$353;
  var $355=HEAP32[(($354)>>2)];
  var $356=($352|0)==($355|0);
  if (!($356)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $358=(($block1+44)|0);
  var $359=$358;
  var $360=HEAP32[(($359)>>2)];
  var $361=(($block2+44)|0);
  var $362=$361;
  var $363=HEAP32[(($362)>>2)];
  var $364=($360|0)==($363|0);
  if (!($364)) {
   var $_0=0;
   var $_0;
   return $_0;
  }
  var $366=(($block1+48)|0);
  var $367=$366;
  var $368=HEAP32[(($367)>>2)];
  var $369=(($block2+48)|0);
  var $370=$369;
  var $371=HEAP32[(($370)>>2)];
  var $372=($368|0)==($371|0);
  do {
   if (!($372)) {
    var $374=($368|0)==0;
    var $375=($371|0)==0;
    var $or_cond33_i=$374|$375;
    if ($or_cond33_i) {
     var $_0=0;
     var $_0;
     return $_0;
    }
    var $377=_memcmp($368,$371,$360);
    var $378=($377|0)==0;
    if ($378) {
     break;
    } else {
     var $_0=0;
    }
    var $_0;
    return $_0;
   }
  } while(0);
  var $_0=1;
  var $_0;
  return $_0;
  break;
 }
 default: {
  var $381=(($block1+16)|0);
  var $382=(($block2+16)|0);
  var $_idx=$381;
  var $_idx_val=HEAP32[(($_idx)>>2)];
  var $383=($_idx_val|0)==0;
  var $_phi_trans_insert_i41=$382;
  var $_pre_i42=HEAP32[(($_phi_trans_insert_i41)>>2)];
  do {
   if ($383) {
    var $389=$_pre_i42;
    label = 3157;
   } else {
    var $385=($_pre_i42|0)==0;
    if ($385) {
     var $389=0;
     label = 3157;
     break;
    }
    var $387=_memcmp($_idx_val,$_pre_i42,$14);
    var $388=($387|0)==0;
    var $_0_in_i=$388;
   }
  } while(0);
  if (label == 3157) {
   var $389;
   var $390=($389|0)==($_idx_val|0);
   var $_0_in_i=$390;
  }
  var $_0_in_i;
  var $_0_i44=($_0_in_i&1);
  var $_0=$_0_i44;
  var $_0;
  return $_0;
 }
 }
}
function _FLAC__metadata_object_application_set_data($object,$data,$length,$copy){
 var label=0;
 var $1=(($object+20)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($copy|0)==0;
 do {
  if ($4) {
   var $storemerge=$data;
  } else {
   var $6=($length|0)==0;
   var $7=($data|0)==0;
   var $or_cond_i=$6|$7;
   if ($or_cond_i) {
    var $storemerge=0;
    break;
   }
   var $9=_malloc($length);
   var $10=($9|0)==0;
   if ($10) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    (_memcpy($9, $data, $length)|0);
    var $storemerge=$9;
    break;
   }
  }
 } while(0);
 var $storemerge;
 HEAP32[(($2)>>2)]=$storemerge;
 var $12=($3|0)==0;
 if (!($12)) {
  _free($3);
 }
 var $15=HEAP32[((10224)>>2)];
 var $16=$15>>>3;
 var $17=((($16)+($length))|0);
 var $18=(($object+8)|0);
 HEAP32[(($18)>>2)]=$17;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_seektable_resize_points($object,$new_num_points){
 var label=0;
 var $1=(($object+16)|0);
 var $2=(($object+20)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 L4380: do {
  if ($5) {
   var $7=($new_num_points|0)==0;
   if ($7) {
    var $_0=1;
    var $_0;
    return $_0;
   }
   var $9=_safe_malloc_mul_2op_p($new_num_points,24);
   var $10=$9;
   var $11=($9|0)==0;
   if ($11) {
    HEAP32[(($3)>>2)]=$10;
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $ld$0$0=10008;
   var $12$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=10012;
   var $12$1=HEAP32[(($ld$1$1)>>2)];
   var $i_010_i=0;
   while(1) {
    var $i_010_i;
    var $14=(($10+((($i_010_i)*(24))&-1))|0);
    var $st$2$0=(($14)|0);
    HEAP32[(($st$2$0)>>2)]=$12$0;
    var $st$3$1=(($14+4)|0);
    HEAP32[(($st$3$1)>>2)]=$12$1;
    var $15=(($10+((($i_010_i)*(24))&-1)+8)|0);
    var $$etemp$4$0=0;
    var $$etemp$4$1=0;
    var $st$5$0=(($15)|0);
    HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
    var $st$6$1=(($15+4)|0);
    HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
    var $16=(($10+((($i_010_i)*(24))&-1)+16)|0);
    HEAP32[(($16)>>2)]=0;
    var $17=((($i_010_i)+(1))|0);
    var $18=($17>>>0)<($new_num_points>>>0);
    if ($18) {
     var $i_010_i=$17;
    } else {
     break;
    }
   }
   HEAP32[(($3)>>2)]=$10;
  } else {
   var $20=$1;
   var $21=HEAP32[(($20)>>2)];
   var $22=((($21)*(24))&-1);
   var $23=((($new_num_points)*(24))&-1);
   var $24=($new_num_points>>>0)>178956970;
   if ($24) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $26=($23|0)==0;
   var $27=$4;
   do {
    if ($26) {
     _free($27);
     HEAP32[(($3)>>2)]=0;
     var $34=0;
    } else {
     var $30=_realloc($27,$23);
     var $31=$30;
     HEAP32[(($3)>>2)]=$31;
     var $32=($30|0)==0;
     if ($32) {
      var $_0=0;
     } else {
      var $34=$31;
      break;
     }
     var $_0;
     return $_0;
    }
   } while(0);
   var $34;
   var $35=($23>>>0)>($22>>>0);
   if (!($35)) {
    break;
   }
   var $37=HEAP32[(($20)>>2)];
   var $38=($37>>>0)<($new_num_points>>>0);
   if (!($38)) {
    break;
   }
   var $ld$7$0=10008;
   var $39$0=HEAP32[(($ld$7$0)>>2)];
   var $ld$8$1=10012;
   var $39$1=HEAP32[(($ld$8$1)>>2)];
   var $i_025=$37;var $41=$34;
   while(1) {
    var $41;
    var $i_025;
    var $42=(($41+((($i_025)*(24))&-1))|0);
    var $st$9$0=(($42)|0);
    HEAP32[(($st$9$0)>>2)]=$39$0;
    var $st$10$1=(($42+4)|0);
    HEAP32[(($st$10$1)>>2)]=$39$1;
    var $43=HEAP32[(($3)>>2)];
    var $44=(($43+((($i_025)*(24))&-1)+8)|0);
    var $$etemp$11$0=0;
    var $$etemp$11$1=0;
    var $st$12$0=(($44)|0);
    HEAP32[(($st$12$0)>>2)]=$$etemp$11$0;
    var $st$13$1=(($44+4)|0);
    HEAP32[(($st$13$1)>>2)]=$$etemp$11$1;
    var $45=HEAP32[(($3)>>2)];
    var $46=(($45+((($i_025)*(24))&-1)+16)|0);
    HEAP32[(($46)>>2)]=0;
    var $47=((($i_025)+(1))|0);
    var $48=($47>>>0)<($new_num_points>>>0);
    if (!($48)) {
     break L4380;
    }
    var $_pre=HEAP32[(($3)>>2)];
    var $i_025=$47;var $41=$_pre;
   }
  }
 } while(0);
 var $49=$1;
 HEAP32[(($49)>>2)]=$new_num_points;
 var $50=((($new_num_points)*(18))&-1);
 var $51=(($object+8)|0);
 HEAP32[(($51)>>2)]=$50;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_seektable_set_point($object,$point_num,$point){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $point; $point=STACKTOP;STACKTOP = (STACKTOP + 24)|0;HEAP32[(($point)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($point)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($point)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($point)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($point)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($point)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 var $1=(($object+20)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+((($point_num)*(24))&-1))|0);
 var $5=$4;
 var $6=$point;
 HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];HEAP32[((($5)+(12))>>2)]=HEAP32[((($6)+(12))>>2)];HEAP32[((($5)+(16))>>2)]=HEAP32[((($6)+(16))>>2)];HEAP32[((($5)+(20))>>2)]=HEAP32[((($6)+(20))>>2)];
 STACKTOP=sp;return;
}
function _FLAC__metadata_object_seektable_insert_point($object,$point_num,$point){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $point; $point=STACKTOP;STACKTOP = (STACKTOP + 24)|0;HEAP32[(($point)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($point)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($point)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($point)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($point)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($point)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 var $1=(($object+16)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)+(1))|0);
 var $5=_FLAC__metadata_object_seektable_resize_points($object,$4);
 var $6=($5|0)==0;
 if ($6) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $8=HEAP32[(($2)>>2)];
 var $i_015=((($8)-(1))|0);
 var $9=($i_015|0)>($point_num|0);
 var $10=(($object+20)|0);
 var $11=$10;
 if ($9) {
  var $i_0_in16=$8;var $i_017=$i_015;
  while(1) {
   var $i_017;
   var $i_0_in16;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+((($i_017)*(24))&-1))|0);
   var $14=((($i_0_in16)-(2))|0);
   var $15=(($12+((($14)*(24))&-1))|0);
   var $16=$13;
   var $17=$15;
   HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];HEAP32[((($16)+(12))>>2)]=HEAP32[((($17)+(12))>>2)];HEAP32[((($16)+(16))>>2)]=HEAP32[((($17)+(16))>>2)];HEAP32[((($16)+(20))>>2)]=HEAP32[((($17)+(20))>>2)];
   var $i_0=((($i_017)-(1))|0);
   var $18=($i_0|0)>($point_num|0);
   if ($18) {
    var $i_0_in16=$i_017;var $i_017=$i_0;
   } else {
    break;
   }
  }
 }
 var $tmp14=$point;
 var $19=HEAP32[(($11)>>2)];
 var $20=(($19+((($point_num)*(24))&-1))|0);
 var $21=$20;
 (_memcpy($21, $tmp14, 24)|0);
 var $22=HEAP32[(($2)>>2)];
 var $23=((($22)*(18))&-1);
 var $24=(($object+8)|0);
 HEAP32[(($24)>>2)]=$23;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_object_seektable_delete_point($object,$point_num){
 var label=0;
 var $1=(($object+16)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(1))|0);
 var $5=($4>>>0)>($point_num>>>0);
 if (!($5)) {
  var $_lcssa=$4;
  var $_lcssa;
  var $18=_FLAC__metadata_object_seektable_resize_points($object,$_lcssa);
  return $18;
 }
 var $6=(($object+20)|0);
 var $7=$6;
 var $i_09=$point_num;
 while(1) {
  var $i_09;
  var $9=HEAP32[(($7)>>2)];
  var $10=(($9+((($i_09)*(24))&-1))|0);
  var $11=((($i_09)+(1))|0);
  var $12=(($9+((($11)*(24))&-1))|0);
  var $13=$10;
  var $14=$12;
  HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];HEAP32[((($13)+(12))>>2)]=HEAP32[((($14)+(12))>>2)];HEAP32[((($13)+(16))>>2)]=HEAP32[((($14)+(16))>>2)];HEAP32[((($13)+(20))>>2)]=HEAP32[((($14)+(20))>>2)];
  var $15=HEAP32[(($2)>>2)];
  var $16=((($15)-(1))|0);
  var $17=($11>>>0)<($16>>>0);
  if ($17) {
   var $i_09=$11;
  } else {
   var $_lcssa=$16;
   break;
  }
 }
 var $_lcssa;
 var $18=_FLAC__metadata_object_seektable_resize_points($object,$_lcssa);
 return $18;
}
function _FLAC__metadata_object_seektable_is_legal($object){
 var label=0;
 var $1=(($object+16)|0);
 var $2=$1;
 var $3=_FLAC__format_seektable_is_legal($2);
 return $3;
}
function _FLAC__metadata_object_seektable_template_append_placeholders($object,$num){
 var label=0;
 var $1=($num|0)==0;
 if ($1) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $3=(($object+16)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)+($num))|0);
 var $7=_FLAC__metadata_object_seektable_resize_points($object,$6);
 var $_0=$7;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_seektable_template_append_point($object,$sample_number$0,$sample_number$1){
 var label=0;
 var $1=(($object+16)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)+(1))|0);
 var $5=_FLAC__metadata_object_seektable_resize_points($object,$4);
 var $6=($5|0)==0;
 if ($6) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $8=HEAP32[(($2)>>2)];
 var $9=((($8)-(1))|0);
 var $10=(($object+20)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+((($9)*(24))&-1))|0);
 var $st$0$0=(($13)|0);
 HEAP32[(($st$0$0)>>2)]=$sample_number$0;
 var $st$1$1=(($13+4)|0);
 HEAP32[(($st$1$1)>>2)]=$sample_number$1;
 var $14=HEAP32[(($2)>>2)];
 var $15=((($14)-(1))|0);
 var $16=HEAP32[(($11)>>2)];
 var $17=(($16+((($15)*(24))&-1)+8)|0);
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $st$3$0=(($17)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 var $st$4$1=(($17+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 var $18=HEAP32[(($2)>>2)];
 var $19=((($18)-(1))|0);
 var $20=HEAP32[(($11)>>2)];
 var $21=(($20+((($19)*(24))&-1)+16)|0);
 HEAP32[(($21)>>2)]=0;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_seektable_template_append_points($object,$sample_numbers,$num){
 var label=0;
 var $1=($num|0)==0;
 if ($1) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $3=(($object+16)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=((($5)+($num))|0);
 var $7=_FLAC__metadata_object_seektable_resize_points($object,$6);
 var $8=($7|0)==0;
 if ($8) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9=(($object+20)|0);
 var $10=$9;
 var $i_016=$5;var $j_017=0;
 while(1) {
  var $j_017;
  var $i_016;
  var $12=(($sample_numbers+($j_017<<3))|0);
  var $ld$0$0=(($12)|0);
  var $13$0=HEAP32[(($ld$0$0)>>2)];
  var $ld$1$1=(($12+4)|0);
  var $13$1=HEAP32[(($ld$1$1)>>2)];
  var $14=HEAP32[(($10)>>2)];
  var $15=(($14+((($i_016)*(24))&-1))|0);
  var $st$2$0=(($15)|0);
  HEAP32[(($st$2$0)>>2)]=$13$0;
  var $st$3$1=(($15+4)|0);
  HEAP32[(($st$3$1)>>2)]=$13$1;
  var $16=HEAP32[(($10)>>2)];
  var $17=(($16+((($i_016)*(24))&-1)+8)|0);
  var $$etemp$4$0=0;
  var $$etemp$4$1=0;
  var $st$5$0=(($17)|0);
  HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
  var $st$6$1=(($17+4)|0);
  HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
  var $18=HEAP32[(($10)>>2)];
  var $19=(($18+((($i_016)*(24))&-1)+16)|0);
  HEAP32[(($19)>>2)]=0;
  var $20=((($i_016)+(1))|0);
  var $21=((($j_017)+(1))|0);
  var $22=($21>>>0)<($num>>>0);
  if ($22) {
   var $i_016=$20;var $j_017=$21;
  } else {
   var $_0=1;
   break;
  }
 }
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_seektable_template_append_spaced_points($object,$num,$total_samples$0,$total_samples$1){
 var label=0;
 var $1=($num|0)==0;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $2=(($total_samples$0|0) == ($$etemp$0$0|0)) & (($total_samples$1|0) == ($$etemp$0$1|0));
 var $or_cond=$1|$2;
 if ($or_cond) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $4=(($object+16)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)+($num))|0);
 var $8=_FLAC__metadata_object_seektable_resize_points($object,$7);
 var $9=($8|0)==0;
 if ($9) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $10$0=$num;
 var $10$1=0;
 var $11=(($object+20)|0);
 var $12=$11;
 var $i_018=$6;var $j_019=0;
 while(1) {
  var $j_019;
  var $i_018;
  var $14$0=$j_019;
  var $14$1=0;
  var $15$0=___muldi3($14$0,$14$1,$total_samples$0,$total_samples$1);var $15$1=tempRet0;
  var $16$0=___udivdi3($15$0,$15$1,$10$0,$10$1);var $16$1=tempRet0;
  var $17=HEAP32[(($12)>>2)];
  var $18=(($17+((($i_018)*(24))&-1))|0);
  var $st$1$0=(($18)|0);
  HEAP32[(($st$1$0)>>2)]=$16$0;
  var $st$2$1=(($18+4)|0);
  HEAP32[(($st$2$1)>>2)]=$16$1;
  var $19=HEAP32[(($12)>>2)];
  var $20=(($19+((($i_018)*(24))&-1)+8)|0);
  var $$etemp$3$0=0;
  var $$etemp$3$1=0;
  var $st$4$0=(($20)|0);
  HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
  var $st$5$1=(($20+4)|0);
  HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
  var $21=HEAP32[(($12)>>2)];
  var $22=(($21+((($i_018)*(24))&-1)+16)|0);
  HEAP32[(($22)>>2)]=0;
  var $23=((($i_018)+(1))|0);
  var $24=((($j_019)+(1))|0);
  var $25=($24>>>0)<($num>>>0);
  if ($25) {
   var $i_018=$23;var $j_019=$24;
  } else {
   var $_0=1;
   break;
  }
 }
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_seektable_template_append_spaced_points_by_samples($object,$samples,$total_samples$0,$total_samples$1){
 var label=0;
 var $1=($samples|0)==0;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $2=(($total_samples$0|0) == ($$etemp$0$0|0)) & (($total_samples$1|0) == ($$etemp$0$1|0));
 var $or_cond=$1|$2;
 if ($or_cond) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $4=(($object+16)|0);
 var $5$0=$samples;
 var $5$1=0;
 var $6$0=___udivdi3($total_samples$0,$total_samples$1,$5$0,$5$1);var $6$1=tempRet0;
 var $7$0=___uremdi3($total_samples$0,$total_samples$1,$5$0,$5$1);var $7$1=tempRet0;
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $not_=(($7$0|0) != ($$etemp$1$0|0)) | (($7$1|0) != ($$etemp$1$1|0));
 var $8$0=($not_&1);
 var $8$1=0;
 var $_$0=_i64Add($8$0,$8$1,$6$0,$6$1);var $_$1=tempRet0;
 var $9=$4;
 var $10=HEAP32[(($9)>>2)];
 var $11$0=$_$0;
 var $11=$11$0;
 var $12=((($11)+($10))|0);
 var $13=_FLAC__metadata_object_seektable_resize_points($object,$12);
 var $14=($13|0)==0;
 if ($14) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $15=(($_$0|0) == ($$etemp$2$0|0)) & (($_$1|0) == ($$etemp$2$1|0));
 if ($15) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $16=(($object+20)|0);
 var $17=$16;
 var $i_021=$10;var $j_022=0;var $sample_023$1=0;var $sample_023$0=0;
 while(1) {
  var $sample_023$0;
  var $sample_023$1;
  var $j_022;
  var $i_021;
  var $19=HEAP32[(($17)>>2)];
  var $20=(($19+((($i_021)*(24))&-1))|0);
  var $st$3$0=(($20)|0);
  HEAP32[(($st$3$0)>>2)]=$sample_023$0;
  var $st$4$1=(($20+4)|0);
  HEAP32[(($st$4$1)>>2)]=$sample_023$1;
  var $21=HEAP32[(($17)>>2)];
  var $22=(($21+((($i_021)*(24))&-1)+8)|0);
  var $$etemp$5$0=0;
  var $$etemp$5$1=0;
  var $st$6$0=(($22)|0);
  HEAP32[(($st$6$0)>>2)]=$$etemp$5$0;
  var $st$7$1=(($22+4)|0);
  HEAP32[(($st$7$1)>>2)]=$$etemp$5$1;
  var $23=HEAP32[(($17)>>2)];
  var $24=(($23+((($i_021)*(24))&-1)+16)|0);
  HEAP32[(($24)>>2)]=0;
  var $25=((($i_021)+(1))|0);
  var $26=((($j_022)+(1))|0);
  var $27$0=_i64Add($sample_023$0,$sample_023$1,$5$0,$5$1);var $27$1=tempRet0;
  var $28$0=$26;
  var $28$1=0;
  var $29=(($28$1>>>0) < ($_$1>>>0)) | (((($28$1>>>0) == ($_$1>>>0) & ($28$0>>>0) <  ($_$0>>>0))));
  if ($29) {
   var $i_021=$25;var $j_022=$26;var $sample_023$1=$27$1;var $sample_023$0=$27$0;
  } else {
   var $_0=1;
   break;
  }
 }
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_seektable_template_sort($object,$compact){
 var label=0;
 var $1=(($object+16)|0);
 var $2=$1;
 var $3=_FLAC__format_seektable_sort($2);
 var $4=($compact|0)==0;
 if ($4) {
  var $9=1;
  var $9;
  return $9;
 }
 var $6=_FLAC__metadata_object_seektable_resize_points($object,$3);
 var $7=($6|0)!=0;
 var $phitmp=($7&1);
 var $9=$phitmp;
 var $9;
 return $9;
}
function _FLAC__metadata_object_vorbiscomment_set_vendor_string($object,$entry,$copy){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $entry; $entry=STACKTOP;STACKTOP = (STACKTOP + 8)|0;HEAP32[(($entry)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($entry)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1=(($entry+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($entry)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_FLAC__format_vorbiscomment_entry_value_is_legal($2,$4);
 var $6=($5|0)==0;
 if ($6) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $8=(($object+16)|0);
 var $9=$8;
 var $10=_vorbiscomment_set_entry_($object,$9,$entry,$copy);
 var $_0=$10;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _vorbiscomment_set_entry_($object,$dest,$src,$copy){
 var label=0;
 var $1=(($dest+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($src+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 do {
  if ($5) {
   label = 3323;
  } else {
   var $7=(($src)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=($8|0)==0;
   if ($9) {
    label = 3323;
    break;
   }
   var $11=($copy|0)==0;
   if ($11) {
    var $uadd_i_i15$0=_llvm_uadd_with_overflow_i32($8,1);
    var $uadd_i_i15$1=tempRet0;
    var $28=$uadd_i_i15$1;
    if ($28) {
     var $_0=0;
     var $_0;
     return $_0;
    }
    var $29=$uadd_i_i15$0;
    var $30=_realloc($4,$29);
    var $31=($30|0)==0;
    if ($31) {
     var $_0=0;
     var $_0;
     return $_0;
    } else {
     var $33=(($30+$8)|0);
     HEAP8[($33)]=0;
     HEAP32[(($3)>>2)]=$30;
     var $34=$src;
     var $35=$dest;
     var $ld$0$0=(($34)|0);
     var $36$0=HEAP32[(($ld$0$0)>>2)];
     var $ld$1$1=(($34+4)|0);
     var $36$1=HEAP32[(($ld$1$1)>>2)];
     var $st$2$0=(($35)|0);
     HEAP32[(($st$2$0)>>2)]=$36$0;
     var $st$3$1=(($35+4)|0);
     HEAP32[(($st$3$1)>>2)]=$36$1;
     break;
    }
   }
   var $13=(($dest)|0);
   HEAP32[(($13)>>2)]=$8;
   var $14=HEAP32[(($3)>>2)];
   var $15=($14|0)==0;
   if ($15) {
    HEAP32[(($1)>>2)]=0;
    break;
   }
   var $18=HEAP32[(($7)>>2)];
   var $uadd_i_i$0=_llvm_uadd_with_overflow_i32($18,1);
   var $uadd_i_i$1=tempRet0;
   var $19=$uadd_i_i$1;
   if ($19) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $20=$uadd_i_i$0;
   var $21=($20|0)==0;
   var $22=($21&1);
   var $_size_i_i_i=((($22)+($20))|0);
   var $23=_malloc($_size_i_i_i);
   var $24=($23|0)==0;
   if ($24) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    (_memcpy($23, $14, $18)|0);
    var $26=(($23+$18)|0);
    HEAP8[($26)]=0;
    HEAP32[(($1)>>2)]=$23;
    break;
   }
  }
 } while(0);
 if (label == 3323) {
  var $38=$src;
  var $39=$dest;
  var $ld$4$0=(($38)|0);
  var $40$0=HEAP32[(($ld$4$0)>>2)];
  var $ld$5$1=(($38+4)|0);
  var $40$1=HEAP32[(($ld$5$1)>>2)];
  var $st$6$0=(($39)|0);
  HEAP32[(($st$6$0)>>2)]=$40$0;
  var $st$7$1=(($39+4)|0);
  HEAP32[(($st$7$1)>>2)]=$40$1;
 }
 var $41=($2|0)==0;
 if (!($41)) {
  _free($2);
 }
 var $44=HEAP32[((9904)>>2)];
 var $45=$44>>>3;
 var $46=(($object+8)|0);
 var $47=(($object+16)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=((($45)+($49))|0);
 var $51=HEAP32[((9896)>>2)];
 var $52=$51>>>3;
 var $53=((($50)+($52))|0);
 HEAP32[(($46)>>2)]=$53;
 var $54=(($object+24)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if ($57) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $58=(($object+28)|0);
 var $59=$58;
 var $_pre_i=HEAP32[(($59)>>2)];
 var $i_010_i=0;var $61=$53;
 while(1) {
  var $61;
  var $i_010_i;
  var $62=((($61)+($45))|0);
  HEAP32[(($46)>>2)]=$62;
  var $63=(($_pre_i+($i_010_i<<3))|0);
  var $64=HEAP32[(($63)>>2)];
  var $65=((($64)+($62))|0);
  HEAP32[(($46)>>2)]=$65;
  var $66=((($i_010_i)+(1))|0);
  var $67=($66>>>0)<($56>>>0);
  if ($67) {
   var $i_010_i=$66;var $61=$65;
  } else {
   var $_0=1;
   break;
  }
 }
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_vorbiscomment_resize_comments($object,$new_num_comments){
 var label=0;
 var $1=(($object+28)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 do {
  if ($4) {
   var $6=($new_num_comments|0)==0;
   if ($6) {
    var $_0=1;
    var $_0;
    return $_0;
   }
   var $7=_calloc($new_num_comments,8);
   var $8=$7;
   HEAP32[(($2)>>2)]=$8;
   var $9=($7|0)==0;
   if ($9) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    var $_pre34=(($object+24)|0);
    var $_pre35=$_pre34;
    var $_pre_i=$8;var $_pre_phi36=$_pre35;
    break;
   }
  } else {
   var $11=(($object+24)|0);
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   var $14=$13<<3;
   var $15=$new_num_comments<<3;
   var $16=($new_num_comments>>>0)>536870911;
   if ($16) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $18=($13>>>0)>($new_num_comments>>>0);
   if ($18) {
    var $i_029=$new_num_comments;var $20=$13;var $19=$3;
    while(1) {
     var $19;
     var $20;
     var $i_029;
     var $21=(($19+($i_029<<3)+4)|0);
     var $22=HEAP32[(($21)>>2)];
     var $23=($22|0)==0;
     if ($23) {
      var $26=$20;
     } else {
      _free($22);
      var $_pre31=HEAP32[(($12)>>2)];
      var $26=$_pre31;
     }
     var $26;
     var $27=((($i_029)+(1))|0);
     var $28=($27>>>0)<($26>>>0);
     var $_pre33=HEAP32[(($2)>>2)];
     if ($28) {
      var $i_029=$27;var $20=$26;var $19=$_pre33;
     } else {
      var $29=$_pre33;
      break;
     }
    }
   } else {
    var $29=$3;
   }
   var $29;
   var $30=($15|0)==0;
   var $31=$29;
   do {
    if ($30) {
     _free($31);
     HEAP32[(($2)>>2)]=0;
     var $38=0;
    } else {
     var $34=_realloc($31,$15);
     var $35=$34;
     HEAP32[(($2)>>2)]=$35;
     var $36=($34|0)==0;
     if ($36) {
      var $_0=0;
     } else {
      var $38=$35;
      break;
     }
     var $_0;
     return $_0;
    }
   } while(0);
   var $38;
   var $39=($15>>>0)>($14>>>0);
   if (!($39)) {
    var $_pre_i=$38;var $_pre_phi36=$12;
    break;
   }
   var $41=HEAP32[(($12)>>2)];
   var $42=(($38+($41<<3))|0);
   var $43=$42;
   var $44=((($15)-($14))|0);
   _memset($43, 0, $44);
   var $_pre_i=$38;var $_pre_phi36=$12;
  }
 } while(0);
 var $_pre_phi36;
 var $_pre_i;
 HEAP32[(($_pre_phi36)>>2)]=$new_num_comments;
 var $46=HEAP32[((9904)>>2)];
 var $47=$46>>>3;
 var $48=(($object+8)|0);
 var $49=(($object+16)|0);
 var $50=$49;
 var $51=HEAP32[(($50)>>2)];
 var $52=((($47)+($51))|0);
 var $53=HEAP32[((9896)>>2)];
 var $54=$53>>>3;
 var $55=((($52)+($54))|0);
 HEAP32[(($48)>>2)]=$55;
 var $56=($new_num_comments|0)==0;
 if ($56) {
  var $_0=1;
  var $_0;
  return $_0;
 } else {
  var $i_010_i=0;var $57=$55;
 }
 while(1) {
  var $57;
  var $i_010_i;
  var $58=((($57)+($47))|0);
  HEAP32[(($48)>>2)]=$58;
  var $59=(($_pre_i+($i_010_i<<3))|0);
  var $60=HEAP32[(($59)>>2)];
  var $61=((($60)+($58))|0);
  HEAP32[(($48)>>2)]=$61;
  var $62=((($i_010_i)+(1))|0);
  var $63=($62>>>0)<($new_num_comments>>>0);
  if ($63) {
   var $i_010_i=$62;var $57=$61;
  } else {
   var $_0=1;
   break;
  }
 }
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_vorbiscomment_set_comment($object,$comment_num,$entry,$copy){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $entry; $entry=STACKTOP;STACKTOP = (STACKTOP + 8)|0;HEAP32[(($entry)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($entry)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1=(($entry+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($entry)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_FLAC__format_vorbiscomment_entry_is_legal($2,$4);
 var $6=($5|0)==0;
 if ($6) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $8=(($object+28)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+($comment_num<<3))|0);
 var $12=_vorbiscomment_set_entry_($object,$11,$entry,$copy);
 var $_0=$12;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_object_vorbiscomment_insert_comment($object,$comment_num,$entry,$copy){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var tempParam = $entry; $entry=STACKTOP;STACKTOP = (STACKTOP + 8)|0;HEAP32[(($entry)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($entry)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $entry16=sp;
 var $tmpcast=$entry16;
 var $1=(($entry+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($entry)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_FLAC__format_vorbiscomment_entry_is_legal($2,$4);
 var $6=($5|0)==0;
 if ($6) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $8=(($object+24)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)+(1))|0);
 var $12=_FLAC__metadata_object_vorbiscomment_resize_comments($object,$11);
 var $13=($12|0)==0;
 if ($13) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $15=((($comment_num)+(1))|0);
 var $16=(($object+28)|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+($15<<3))|0);
 var $20=$19;
 var $21=(($18+($comment_num<<3))|0);
 var $22=$21;
 var $23=HEAP32[(($9)>>2)];
 var $24=(((536870911)-($comment_num))|0);
 var $25=((($24)+($23))|0);
 var $26=$25<<3;
 _memmove($20,$22,$26,4,0);
 var $27=HEAP32[(($17)>>2)];
 var $28=(($27+($comment_num<<3))|0);
 HEAP32[(($28)>>2)]=0;
 var $29=HEAP32[(($17)>>2)];
 var $30=(($29+($comment_num<<3)+4)|0);
 HEAP32[(($30)>>2)]=0;
 var $31=$entry;
 var $ld$0$0=(($31)|0);
 var $32$0=((((HEAPU8[($ld$0$0)])|(HEAPU8[((($ld$0$0)+(1))|0)]<<8)|(HEAPU8[((($ld$0$0)+(2))|0)]<<16)|(HEAPU8[((($ld$0$0)+(3))|0)]<<24))|0));
 var $ld$1$1=(($31+4)|0);
 var $32$1=((((HEAPU8[($ld$1$1)])|(HEAPU8[((($ld$1$1)+(1))|0)]<<8)|(HEAPU8[((($ld$1$1)+(2))|0)]<<16)|(HEAPU8[((($ld$1$1)+(3))|0)]<<24))|0));
 var $st$2$0=(($entry16)|0);
 HEAP32[(($st$2$0)>>2)]=$32$0;
 var $st$3$1=(($entry16+4)|0);
 HEAP32[(($st$3$1)>>2)]=$32$1;
 var $33$0=$32$1;
 var $33$1=0;
 var $34$0=$33$0;
 var $34=$34$0;
 var $35=$34;
 var $trunc$0=$32$0;
 var $trunc=$trunc$0;
 var $36=_FLAC__format_vorbiscomment_entry_is_legal($35,$trunc);
 var $37=($36|0)==0;
 if ($37) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $39=HEAP32[(($17)>>2)];
 var $40=(($39+($comment_num<<3))|0);
 var $41=_vorbiscomment_set_entry_($object,$40,$tmpcast,$copy);
 var $_0=$41;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_object_vorbiscomment_append_comment($object,$entry,$copy){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $entry; $entry=STACKTOP;STACKTOP = (STACKTOP + 8)|0;HEAP32[(($entry)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($entry)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1=(($object+24)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=_FLAC__metadata_object_vorbiscomment_insert_comment($object,$3,$entry,$copy);
 STACKTOP=sp;return $4;
}
function _FLAC__metadata_object_vorbiscomment_replace_comment($object,$entry,$all,$copy){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var tempParam = $entry; $entry=STACKTOP;STACKTOP = (STACKTOP + 8)|0;HEAP32[(($entry)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($entry)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $entry41=sp;
 var $tmpcast=$entry41;
 var $entry26=STACKTOP;STACKTOP = (STACKTOP + 8)|0;
 var $tmpcast44=$entry26;
 var $1=(($entry+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($entry)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_FLAC__format_vorbiscomment_entry_is_legal($2,$4);
 var $6=($5|0)==0;
 if ($6) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $8=_memchr($2,61,$4);
 var $9=($8|0)==0;
 if ($9) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $11=$8;
 var $12=$2;
 var $13=((($11)-($12))|0);
 var $14=(($object+24)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 L4569: do {
  if (!($17)) {
   var $18=(($object+28)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $i_08_i=0;
   L4571: while(1) {
    var $i_08_i;
    var $22=(($20+($i_08_i<<3)+4)|0);
    var $23=HEAP32[(($22)>>2)];
    var $24=(($20+($i_08_i<<3))|0);
    var $25=HEAP32[(($24)>>2)];
    var $26=_memchr($23,61,$25);
    var $27=($26|0)==0;
    do {
     if (!($27)) {
      var $29=$26;
      var $30=$23;
      var $31=((($29)-($30))|0);
      var $32=($31|0)==($13|0);
      if (!($32)) {
       break;
      }
      var $33=_strncasecmp($2,$23,$13);
      var $34=($33|0)==0;
      if ($34) {
       break L4571;
      }
     }
    } while(0);
    var $35=((($i_08_i)+(1))|0);
    var $36=($35>>>0)<($16>>>0);
    if ($36) {
     var $i_08_i=$35;
    } else {
     break L4569;
    }
   }
   var $37=($i_08_i|0)>-1;
   if (!($37)) {
    break;
   }
   var $39=$entry;
   var $ld$0$0=(($39)|0);
   var $40$0=((((HEAPU8[($ld$0$0)])|(HEAPU8[((($ld$0$0)+(1))|0)]<<8)|(HEAPU8[((($ld$0$0)+(2))|0)]<<16)|(HEAPU8[((($ld$0$0)+(3))|0)]<<24))|0));
   var $ld$1$1=(($39+4)|0);
   var $40$1=((((HEAPU8[($ld$1$1)])|(HEAPU8[((($ld$1$1)+(1))|0)]<<8)|(HEAPU8[((($ld$1$1)+(2))|0)]<<16)|(HEAPU8[((($ld$1$1)+(3))|0)]<<24))|0));
   var $st$2$0=(($entry26)|0);
   HEAP32[(($st$2$0)>>2)]=$40$0;
   var $st$3$1=(($entry26+4)|0);
   HEAP32[(($st$3$1)>>2)]=$40$1;
   var $41$0=$40$1;
   var $41$1=0;
   var $42$0=$41$0;
   var $42=$42$0;
   var $43=$42;
   var $trunc$0=$40$0;
   var $trunc=$trunc$0;
   var $44=_FLAC__format_vorbiscomment_entry_is_legal($43,$trunc);
   var $45=($44|0)==0;
   if ($45) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $46=HEAP32[(($19)>>2)];
   var $47=(($46+($i_08_i<<3))|0);
   var $48=_vorbiscomment_set_entry_($object,$47,$tmpcast44,$copy);
   var $49=($48|0)==0;
   if ($49) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $51=HEAP32[(($19)>>2)];
   var $52=(($51+($i_08_i<<3))|0);
   var $53=$52;
   var $ld$4$0=(($53)|0);
   var $54$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($53+4)|0);
   var $54$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($39)|0);
   HEAP32[(($st$6$0)>>2)]=$54$0;
   var $st$7$1=(($39+4)|0);
   HEAP32[(($st$7$1)>>2)]=$54$1;
   var $55=((($i_08_i)+(1))|0);
   var $56=($all|0)==0;
   var $57$0=$54$1;
   var $57$1=0;
   var $58$0=$57$0;
   var $58=$58$0;
   var $59=$58;
   if ($56) {
    var $_0=1;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $61=HEAP32[(($15)>>2)];
   var $62=($55>>>0)<($61>>>0);
   if ($62) {
    var $i_08_i30=$55;
   } else {
    var $_0=1;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   L4590: while(1) {
    var $i_08_i30;
    var $63=(($51+($i_08_i30<<3)+4)|0);
    var $64=HEAP32[(($63)>>2)];
    var $65=(($51+($i_08_i30<<3))|0);
    var $66=HEAP32[(($65)>>2)];
    var $67=_memchr($64,61,$66);
    var $68=($67|0)==0;
    do {
     if (!($68)) {
      var $70=$67;
      var $71=$64;
      var $72=((($70)-($71))|0);
      var $73=($72|0)==($13|0);
      if (!($73)) {
       break;
      }
      var $74=_strncasecmp($59,$64,$13);
      var $75=($74|0)==0;
      if ($75) {
       break L4590;
      }
     }
    } while(0);
    var $76=((($i_08_i30)+(1))|0);
    var $77=($76>>>0)<($61>>>0);
    if ($77) {
     var $i_08_i30=$76;
    } else {
     var $_0=1;
     label = 3417;
     break;
    }
   }
   if (label == 3417) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $78=($i_08_i30|0)>-1;
   if ($78) {
    var $i_046=$i_08_i30;var $80=$61;var $79=$51;
   } else {
    var $_0=1;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   L4601: while(1) {
    var $79;
    var $80;
    var $i_046;
    var $81=(($79+($i_046<<3)+4)|0);
    var $82=HEAP32[(($81)>>2)];
    var $83=($82|0)==0;
    if ($83) {
     var $86=$79;var $85=$80;
    } else {
     _free($82);
     var $_pre_i=HEAP32[(($19)>>2)];
     var $_pre=HEAP32[(($15)>>2)];
     var $86=$_pre_i;var $85=$_pre;
    }
    var $85;
    var $86;
    var $87=(($86+($i_046<<3))|0);
    var $88=$87;
    var $89=((($i_046)+(1))|0);
    var $90=(($86+($89<<3))|0);
    var $91=$90;
    var $92=((($85)-($i_046))|0);
    var $93=$92<<3;
    var $94=((($93)-(8))|0);
    _memmove($88,$91,$94,4,0);
    var $95=HEAP32[(($15)>>2)];
    var $96=((($95)-(1))|0);
    var $97=HEAP32[(($19)>>2)];
    var $98=(($97+($96<<3))|0);
    HEAP32[(($98)>>2)]=0;
    var $99=HEAP32[(($15)>>2)];
    var $100=((($99)-(1))|0);
    var $101=HEAP32[(($19)>>2)];
    var $102=(($101+($100<<3)+4)|0);
    HEAP32[(($102)>>2)]=0;
    var $103=HEAP32[(($15)>>2)];
    var $104=((($103)-(1))|0);
    var $105=_FLAC__metadata_object_vorbiscomment_resize_comments($object,$104);
    var $106=($105|0)==0;
    if ($106) {
     var $_0=0;
     label = 3410;
     break;
    }
    var $108=HEAP32[(($15)>>2)];
    var $109=($i_046>>>0)<($108>>>0);
    if (!($109)) {
     var $_0=1;
     label = 3409;
     break;
    }
    var $111=HEAP32[(($19)>>2)];
    var $i_08_i36=$i_046;
    L4608: while(1) {
     var $i_08_i36;
     var $113=(($111+($i_08_i36<<3)+4)|0);
     var $114=HEAP32[(($113)>>2)];
     var $115=(($111+($i_08_i36<<3))|0);
     var $116=HEAP32[(($115)>>2)];
     var $117=_memchr($114,61,$116);
     var $118=($117|0)==0;
     do {
      if (!($118)) {
       var $120=$117;
       var $121=$114;
       var $122=((($120)-($121))|0);
       var $123=($122|0)==($13|0);
       if (!($123)) {
        break;
       }
       var $124=_strncasecmp($59,$114,$13);
       var $125=($124|0)==0;
       if ($125) {
        break L4608;
       }
      }
     } while(0);
     var $126=((($i_08_i36)+(1))|0);
     var $127=($126>>>0)<($108>>>0);
     if ($127) {
      var $i_08_i36=$126;
     } else {
      var $_0=1;
      label = 3416;
      break L4601;
     }
    }
    var $110=($i_08_i36|0)>-1;
    if (!($110)) {
     var $_0=1;
     label = 3412;
     break;
    }
    var $_pre49=HEAP32[(($19)>>2)];
    var $i_046=$i_08_i36;var $80=$108;var $79=$_pre49;
   }
   if (label == 3409) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 3410) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 3416) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 3412) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
  }
 } while(0);
 var $128=$entry;
 var $ld$8$0=(($128)|0);
 var $129$0=((((HEAPU8[($ld$8$0)])|(HEAPU8[((($ld$8$0)+(1))|0)]<<8)|(HEAPU8[((($ld$8$0)+(2))|0)]<<16)|(HEAPU8[((($ld$8$0)+(3))|0)]<<24))|0));
 var $ld$9$1=(($128+4)|0);
 var $129$1=((((HEAPU8[($ld$9$1)])|(HEAPU8[((($ld$9$1)+(1))|0)]<<8)|(HEAPU8[((($ld$9$1)+(2))|0)]<<16)|(HEAPU8[((($ld$9$1)+(3))|0)]<<24))|0));
 var $st$10$0=(($entry41)|0);
 HEAP32[(($st$10$0)>>2)]=$129$0;
 var $st$11$1=(($entry41+4)|0);
 HEAP32[(($st$11$1)>>2)]=$129$1;
 var $130=_FLAC__metadata_object_vorbiscomment_insert_comment($object,$16,$tmpcast,$copy);
 var $_0=$130;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_object_vorbiscomment_delete_comment($object,$comment_num){
 var label=0;
 var $1=(($object+28)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+($comment_num<<3)+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if ($6) {
  var $9=$3;
 } else {
  _free($5);
  var $_pre=HEAP32[(($2)>>2)];
  var $9=$_pre;
 }
 var $9;
 var $10=(($9+($comment_num<<3))|0);
 var $11=$10;
 var $12=((($comment_num)+(1))|0);
 var $13=(($9+($12<<3))|0);
 var $14=$13;
 var $15=(($object+24)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=((($17)-($comment_num))|0);
 var $19=$18<<3;
 var $20=((($19)-(8))|0);
 _memmove($11,$14,$20,4,0);
 var $21=HEAP32[(($16)>>2)];
 var $22=((($21)-(1))|0);
 var $23=HEAP32[(($2)>>2)];
 var $24=(($23+($22<<3))|0);
 HEAP32[(($24)>>2)]=0;
 var $25=HEAP32[(($16)>>2)];
 var $26=((($25)-(1))|0);
 var $27=HEAP32[(($2)>>2)];
 var $28=(($27+($26<<3)+4)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=HEAP32[(($16)>>2)];
 var $30=((($29)-(1))|0);
 var $31=_FLAC__metadata_object_vorbiscomment_resize_comments($object,$30);
 return $31;
}
function _FLAC__metadata_object_vorbiscomment_entry_from_name_value_pair($entry,$field_name,$field_value){
 var label=0;
 var $1=_FLAC__format_vorbiscomment_entry_name_is_legal($field_name);
 var $2=($1|0)==0;
 if ($2) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $4=_FLAC__format_vorbiscomment_entry_value_is_legal($field_value,-1);
 var $5=($4|0)==0;
 if ($5) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=_strlen($field_name);
 var $8=_strlen($field_value);
 var $9=((($7)+(1))|0);
 var $10=((($9)+($8))|0);
 var $11=(($entry)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=($7|0)==-1;
 do {
  if (!($12)) {
   var $uadd1_i$0=_llvm_uadd_with_overflow_i32($9,$8);
   var $uadd1_i$1=tempRet0;
   var $14=$uadd1_i$1;
   if ($14) {
    break;
   }
   var $16=$uadd1_i$0;
   var $uadd2_i$0=_llvm_uadd_with_overflow_i32($16,1);
   var $uadd2_i$1=tempRet0;
   var $17=$uadd2_i$1;
   if ($17) {
    break;
   }
   var $19=$uadd2_i$0;
   var $20=($19|0)==0;
   var $21=($20&1);
   var $_size_i_i=((($21)+($19))|0);
   var $22=_malloc($_size_i_i);
   var $23=(($entry+4)|0);
   HEAP32[(($23)>>2)]=$22;
   var $24=($22|0)==0;
   if ($24) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   (_memcpy($22, $field_name, $7)|0);
   var $26=(($22+$7)|0);
   HEAP8[($26)]=61;
   var $27=(($22+$9)|0);
   (_memcpy($27, $field_value, $8)|0);
   var $28=(($22+$10)|0);
   HEAP8[($28)]=0;
   var $_0=1;
   var $_0;
   return $_0;
  }
 } while(0);
 var $18=(($entry+4)|0);
 HEAP32[(($18)>>2)]=0;
 var $_0=0;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_vorbiscomment_entry_to_name_value_pair($entry,$field_name,$field_value){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $entry; $entry=STACKTOP;STACKTOP = (STACKTOP + 8)|0;HEAP32[(($entry)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($entry)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1=(($entry+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($entry)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_FLAC__format_vorbiscomment_entry_is_legal($2,$4);
 var $6=($5|0)==0;
 if ($6) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $8=_memchr($2,61,$4);
 var $9=$8;
 var $10=$2;
 var $11=((($9)-($10))|0);
 var $12=((($4)-($11))|0);
 var $13=((($12)-(1))|0);
 var $14=($8|0)==0;
 if ($14) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $uadd_i$0=_llvm_uadd_with_overflow_i32($11,1);
 var $uadd_i$1=tempRet0;
 var $16=$uadd_i$1;
 if ($16) {
  HEAP32[(($field_name)>>2)]=0;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $17=$uadd_i$0;
 var $18=($17|0)==0;
 var $19=($18&1);
 var $_size_i_i=((($19)+($17))|0);
 var $20=_malloc($_size_i_i);
 HEAP32[(($field_name)>>2)]=$20;
 var $21=($20|0)==0;
 if ($21) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $uadd_i14$0=_llvm_uadd_with_overflow_i32($13,1);
 var $uadd_i14$1=tempRet0;
 var $23=$uadd_i14$1;
 do {
  if ($23) {
   HEAP32[(($field_value)>>2)]=0;
   var $24=HEAP32[(($field_name)>>2)];
   var $32=$24;
  } else {
   var $25=$uadd_i14$0;
   var $26=($25|0)==0;
   var $27=($26&1);
   var $_size_i_i15=((($27)+($25))|0);
   var $28=_malloc($_size_i_i15);
   HEAP32[(($field_value)>>2)]=$28;
   var $29=($28|0)==0;
   var $30=HEAP32[(($field_name)>>2)];
   if ($29) {
    var $32=$30;
    break;
   }
   (_memcpy($30, $2, $11)|0);
   var $34=HEAP32[(($field_value)>>2)];
   var $_sum=((($11)+(1))|0);
   var $35=(($2+$_sum)|0);
   (_memcpy($34, $35, $13)|0);
   var $36=HEAP32[(($field_name)>>2)];
   var $37=(($36+$11)|0);
   HEAP8[($37)]=0;
   var $38=HEAP32[(($field_value)>>2)];
   var $39=(($38+$13)|0);
   HEAP8[($39)]=0;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $32;
 _free($32);
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_object_vorbiscomment_entry_matches($entry,$field_name,$field_name_length){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $entry; $entry=STACKTOP;STACKTOP = (STACKTOP + 8)|0;HEAP32[(($entry)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($entry)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1=(($entry+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($entry)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_memchr($2,61,$4);
 var $6=($5|0)==0;
 if ($6) {
  var $16=0;
  var $16;
  STACKTOP=sp;return $16;
 }
 var $8=$5;
 var $9=$2;
 var $10=((($8)-($9))|0);
 var $11=($10|0)==($field_name_length|0);
 if (!($11)) {
  var $16=0;
  var $16;
  STACKTOP=sp;return $16;
 }
 var $13=_strncasecmp($field_name,$2,$field_name_length);
 var $14=($13|0)==0;
 var $phitmp=($14&1);
 var $16=$phitmp;
 var $16;
 STACKTOP=sp;return $16;
}
function _FLAC__metadata_object_vorbiscomment_find_entry_from($object,$offset,$field_name){
 var label=0;
 var $1=_strlen($field_name);
 var $2=(($object+24)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=($4>>>0)>($offset>>>0);
 if (!($5)) {
  var $_0_i=-1;
  var $_0_i;
  return $_0_i;
 }
 var $6=(($object+28)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $i_08_i=$offset;
 L4677: while(1) {
  var $i_08_i;
  var $10=(($8+($i_08_i<<3)+4)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($8+($i_08_i<<3))|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=_memchr($11,61,$13);
  var $15=($14|0)==0;
  do {
   if (!($15)) {
    var $17=$14;
    var $18=$11;
    var $19=((($17)-($18))|0);
    var $20=($19|0)==($1|0);
    if (!($20)) {
     break;
    }
    var $21=_strncasecmp($field_name,$11,$1);
    var $22=($21|0)==0;
    if ($22) {
     var $_0_i=$i_08_i;
     label = 3466;
     break L4677;
    }
   }
  } while(0);
  var $23=((($i_08_i)+(1))|0);
  var $24=($23>>>0)<($4>>>0);
  if ($24) {
   var $i_08_i=$23;
  } else {
   var $_0_i=-1;
   label = 3468;
   break;
  }
 }
 if (label == 3466) {
  var $_0_i;
  return $_0_i;
 }
 else if (label == 3468) {
  var $_0_i;
  return $_0_i;
 }
}
function _FLAC__metadata_object_vorbiscomment_remove_entry_matching($object,$field_name){
 var label=0;
 var $1=_strlen($field_name);
 var $2=(($object+24)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if ($5) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $6=(($object+28)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $i_011=0;
 L4690: while(1) {
  var $i_011;
  var $10=(($8+($i_011<<3)+4)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($8+($i_011<<3))|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=_memchr($11,61,$13);
  var $15=($14|0)==0;
  do {
   if (!($15)) {
    var $17=$14;
    var $18=$11;
    var $19=((($17)-($18))|0);
    var $20=($19|0)==($1|0);
    if (!($20)) {
     break;
    }
    var $21=_strncasecmp($field_name,$11,$1);
    var $22=($21|0)==0;
    if ($22) {
     break L4690;
    }
   }
  } while(0);
  var $48=((($i_011)+(1))|0);
  var $49=($48>>>0)<($4>>>0);
  if ($49) {
   var $i_011=$48;
  } else {
   var $_0=0;
   label = 3481;
   break;
  }
 }
 if (label == 3481) {
  var $_0;
  return $_0;
 }
 var $24=($11|0)==0;
 if ($24) {
  var $27=$8;var $26=$4;
 } else {
  _free($11);
  var $_pre_i=HEAP32[(($7)>>2)];
  var $_pre=HEAP32[(($3)>>2)];
  var $27=$_pre_i;var $26=$_pre;
 }
 var $26;
 var $27;
 var $28=(($27+($i_011<<3))|0);
 var $29=$28;
 var $30=((($i_011)+(1))|0);
 var $31=(($27+($30<<3))|0);
 var $32=$31;
 var $33=((($26)-($i_011))|0);
 var $34=$33<<3;
 var $35=((($34)-(8))|0);
 _memmove($29,$32,$35,4,0);
 var $36=HEAP32[(($3)>>2)];
 var $37=((($36)-(1))|0);
 var $38=HEAP32[(($7)>>2)];
 var $39=(($38+($37<<3))|0);
 HEAP32[(($39)>>2)]=0;
 var $40=HEAP32[(($3)>>2)];
 var $41=((($40)-(1))|0);
 var $42=HEAP32[(($7)>>2)];
 var $43=(($42+($41<<3)+4)|0);
 HEAP32[(($43)>>2)]=0;
 var $44=HEAP32[(($3)>>2)];
 var $45=((($44)-(1))|0);
 var $46=_FLAC__metadata_object_vorbiscomment_resize_comments($object,$45);
 var $47=($46|0)==0;
 var $_=$47?-1:1;
 var $_0=$_;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_vorbiscomment_remove_entries_matching($object,$field_name){
 var label=0;
 var $1=_strlen($field_name);
 var $2=(($object+24)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)>0;
 if (!($5)) {
  var $_lcssa=1;var $matching_0_ph21=0;
  var $matching_0_ph21;
  var $_lcssa;
  var $50=$_lcssa?$matching_0_ph21:-1;
  return $50;
 }
 var $6=(($object+28)|0);
 var $7=$6;
 var $matching_0_ph27=0;var $ok_0_ph29=1;var $i_01531_in=$4;
 L4707: while(1) {
  var $i_01531_in;
  var $ok_0_ph29;
  var $matching_0_ph27;
  var $8=HEAP32[(($7)>>2)];
  var $i_0_in17_us=$i_01531_in;var $i_018_us_in=$i_01531_in;
  L4709: while(1) {
   var $i_018_us_in;
   var $i_0_in17_us;
   var $i_018_us=((($i_018_us_in)-(1))|0);
   var $10=(($8+($i_018_us<<3)+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($8+($i_018_us<<3))|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=_memchr($11,61,$13);
   var $15=($14|0)==0;
   do {
    if (!($15)) {
     var $17=$14;
     var $18=$11;
     var $19=((($17)-($18))|0);
     var $20=($19|0)==($1|0);
     if (!($20)) {
      break;
     }
     var $21=_strncasecmp($field_name,$11,$1);
     var $22=($21|0)==0;
     if ($22) {
      break L4709;
     }
    }
   } while(0);
   var $23=($i_018_us|0)>0;
   if ($23) {
    var $i_0_in17_us=$i_018_us;var $i_018_us_in=$i_018_us;
   } else {
    var $_lcssa=1;var $matching_0_ph21=$matching_0_ph27;
    label = 3495;
    break L4707;
   }
  }
  var $24=((($matching_0_ph27)+(1))|0);
  var $25=($11|0)==0;
  if ($25) {
   var $27=$8;
  } else {
   _free($11);
   var $_pre_i=HEAP32[(($7)>>2)];
   var $27=$_pre_i;
  }
  var $27;
  var $28=(($27+($i_018_us<<3))|0);
  var $29=$28;
  var $30=(($27+($i_0_in17_us<<3))|0);
  var $31=$30;
  var $32=HEAP32[(($3)>>2)];
  var $33=((($32)-($i_018_us))|0);
  var $34=$33<<3;
  var $35=((($34)-(8))|0);
  _memmove($29,$31,$35,4,0);
  var $36=HEAP32[(($3)>>2)];
  var $37=((($36)-(1))|0);
  var $38=HEAP32[(($7)>>2)];
  var $39=(($38+($37<<3))|0);
  HEAP32[(($39)>>2)]=0;
  var $40=HEAP32[(($3)>>2)];
  var $41=((($40)-(1))|0);
  var $42=HEAP32[(($7)>>2)];
  var $43=(($42+($41<<3)+4)|0);
  HEAP32[(($43)>>2)]=0;
  var $44=HEAP32[(($3)>>2)];
  var $45=((($44)-(1))|0);
  var $46=_FLAC__metadata_object_vorbiscomment_resize_comments($object,$45);
  var $47=$46&$ok_0_ph29;
  var $48=($47|0)!=0;
  var $49=($i_018_us|0)>0;
  var $or_cond16=$48&$49;
  if ($or_cond16) {
   var $matching_0_ph27=$24;var $ok_0_ph29=$47;var $i_01531_in=$i_018_us;
  } else {
   var $_lcssa=$48;var $matching_0_ph21=$24;
   label = 3493;
   break;
  }
 }
 if (label == 3495) {
  var $matching_0_ph21;
  var $_lcssa;
  var $50=$_lcssa?$matching_0_ph21:-1;
  return $50;
 }
 else if (label == 3493) {
  var $matching_0_ph21;
  var $_lcssa;
  var $50=$_lcssa?$matching_0_ph21:-1;
  return $50;
 }
}
function _FLAC__metadata_object_cuesheet_track_new(){
 var label=0;
 var $1=_calloc(1,32);
 var $2=$1;
 return $2;
}
function _FLAC__metadata_object_cuesheet_track_clone($object){
 var label=0;
 var $1=_calloc(1,32);
 var $2=$1;
 var $3=($1|0)==0;
 if ($3) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=$object;
 HEAP32[(($1)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];HEAP32[((($1)+(12))>>2)]=HEAP32[((($5)+(12))>>2)];HEAP32[((($1)+(16))>>2)]=HEAP32[((($5)+(16))>>2)];HEAP32[((($1)+(20))>>2)]=HEAP32[((($5)+(20))>>2)];HEAP32[((($1)+(24))>>2)]=HEAP32[((($5)+(24))>>2)];HEAP32[((($1)+(28))>>2)]=HEAP32[((($5)+(28))>>2)];
 var $6=(($object+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if ($8) {
  var $_0=$2;
  var $_0;
  return $_0;
 }
 var $10=(($object+23)|0);
 var $11=HEAP8[($10)];
 var $12=($11&255);
 var $13=_safe_malloc_mul_2op_p($12,16);
 var $14=($13|0)==0;
 if (!($14)) {
  var $16=$13;
  var $17=HEAP32[(($6)>>2)];
  var $18=$17;
  var $19=HEAP8[($10)];
  var $20=($19&255);
  var $21=$20<<4;
  (_memcpy($13, $18, $21)|0);
  var $22=(($1+24)|0);
  var $23=$22;
  HEAP32[(($23)>>2)]=$16;
  var $_0=$2;
  var $_0;
  return $_0;
 }
 var $25=(($1+24)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if (!($28)) {
  var $30=$27;
  _free($30);
 }
 _free($1);
 var $_0=0;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_cuesheet_track_delete($object){
 var label=0;
 var $1=(($object+24)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if (!($3)) {
  var $5=$2;
  _free($5);
 }
 var $6=$object;
 _free($6);
 return;
}
function _FLAC__metadata_object_cuesheet_track_delete_data($object){
 var label=0;
 var $1=(($object+24)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if ($3) {
  return;
 }
 var $5=$2;
 _free($5);
 return;
}
function _FLAC__metadata_object_cuesheet_track_resize_indices($object,$track_num,$new_num_indices){
 var label=0;
 var $1=(($object+168)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($track_num<<5)+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 do {
  if ($5) {
   var $7=($new_num_indices|0)==0;
   if ($7) {
    var $_0=1;
    var $_0;
    return $_0;
   }
   var $8=_calloc($new_num_indices,16);
   var $9=$8;
   HEAP32[(($3)>>2)]=$9;
   var $10=($8|0)==0;
   if ($10) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    var $_pre=(($2+($track_num<<5)+23)|0);
    var $_pre_phi=$_pre;
    break;
   }
  } else {
   var $12=(($2+($track_num<<5)+23)|0);
   var $13=HEAP8[($12)];
   var $14=($13&255);
   var $15=$14<<4;
   var $16=$new_num_indices<<4;
   var $17=($new_num_indices>>>0)>268435455;
   if ($17) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $19=($16|0)==0;
   var $20=$4;
   do {
    if ($19) {
     _free($20);
     HEAP32[(($3)>>2)]=0;
     var $27=0;
    } else {
     var $23=_realloc($20,$16);
     var $24=$23;
     HEAP32[(($3)>>2)]=$24;
     var $25=($23|0)==0;
     if ($25) {
      var $_0=0;
     } else {
      var $27=$24;
      break;
     }
     var $_0;
     return $_0;
    }
   } while(0);
   var $27;
   var $28=($16>>>0)>($15>>>0);
   if (!($28)) {
    var $_pre_phi=$12;
    break;
   }
   var $30=HEAP8[($12)];
   var $31=($30&255);
   var $32=(($27+($31<<4))|0);
   var $33=$32;
   var $34=((($16)-($15))|0);
   _memset($33, 0, $34);
   var $_pre_phi=$12;
  }
 } while(0);
 var $_pre_phi;
 var $36=(($new_num_indices)&255);
 HEAP8[($_pre_phi)]=$36;
 var $37=HEAP32[((10176)>>2)];
 var $38=HEAP32[((10184)>>2)];
 var $39=((($38)+($37))|0);
 var $40=HEAP32[((10192)>>2)];
 var $41=((($39)+($40))|0);
 var $42=HEAP32[((10160)>>2)];
 var $43=((($41)+($42))|0);
 var $44=HEAP32[((10168)>>2)];
 var $45=((($43)+($44))|0);
 var $46=$45>>>3;
 var $47=(($object+8)|0);
 var $48=(($object+164)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=HEAP32[((10128)>>2)];
 var $51=HEAP32[((10144)>>2)];
 var $52=((($51)+($50))|0);
 var $53=HEAP32[((10152)>>2)];
 var $54=((($52)+($53))|0);
 var $55=HEAP32[((10104)>>2)];
 var $56=((($54)+($55))|0);
 var $57=HEAP32[((10120)>>2)];
 var $58=((($56)+($57))|0);
 var $59=HEAP32[((10112)>>2)];
 var $60=((($58)+($59))|0);
 var $61=HEAP32[((10136)>>2)];
 var $62=((($60)+($61))|0);
 var $63=(Math_imul($62,$49)|0);
 var $64=$63>>>3;
 var $65=((($64)+($46))|0);
 HEAP32[(($47)>>2)]=$65;
 var $66=($49|0)==0;
 if ($66) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $67=HEAP32[((10208)>>2)];
 var $68=HEAP32[((10216)>>2)];
 var $69=((($68)+($67))|0);
 var $70=HEAP32[((10200)>>2)];
 var $71=((($69)+($70))|0);
 var $_pre_i=HEAP32[(($1)>>2)];
 var $i_08_i=0;var $73=$65;
 while(1) {
  var $73;
  var $i_08_i;
  var $74=(($_pre_i+($i_08_i<<5)+23)|0);
  var $75=HEAP8[($74)];
  var $76=($75&255);
  var $77=(Math_imul($76,$71)|0);
  var $78=$77>>>3;
  var $79=((($78)+($73))|0);
  HEAP32[(($47)>>2)]=$79;
  var $80=((($i_08_i)+(1))|0);
  var $81=($80>>>0)<($49>>>0);
  if ($81) {
   var $i_08_i=$80;var $73=$79;
  } else {
   var $_0=1;
   break;
  }
 }
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_cuesheet_track_insert_index($object,$track_num,$index_num,$indx){
 var label=0;
 var sp=STACKTOP;
 var tempParam = $indx; $indx=STACKTOP;STACKTOP = (STACKTOP + 16)|0;HEAP32[(($indx)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($indx)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($indx)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($indx)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $1=(($object+168)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($track_num<<5)+23)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 var $6=((($5)+(1))|0);
 var $7=_FLAC__metadata_object_cuesheet_track_resize_indices($object,$track_num,$6);
 var $8=($7|0)==0;
 if ($8) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $10=((($index_num)+(1))|0);
 var $11=(($2+($track_num<<5)+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+($10<<4))|0);
 var $14=$13;
 var $15=(($12+($index_num<<4))|0);
 var $16=$15;
 var $17=HEAP8[($3)];
 var $18=($17&255);
 var $19=(((268435455)-($index_num))|0);
 var $20=((($19)+($18))|0);
 var $21=$20<<4;
 _memmove($14,$16,$21,8,0);
 var $22=HEAP32[(($11)>>2)];
 var $23=(($22+($index_num<<4))|0);
 var $24=$23;
 var $25=$indx;
 HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];HEAP32[((($24)+(12))>>2)]=HEAP32[((($25)+(12))>>2)];
 var $26=HEAP32[((10176)>>2)];
 var $27=HEAP32[((10184)>>2)];
 var $28=((($27)+($26))|0);
 var $29=HEAP32[((10192)>>2)];
 var $30=((($28)+($29))|0);
 var $31=HEAP32[((10160)>>2)];
 var $32=((($30)+($31))|0);
 var $33=HEAP32[((10168)>>2)];
 var $34=((($32)+($33))|0);
 var $35=$34>>>3;
 var $36=(($object+8)|0);
 var $37=(($object+164)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=HEAP32[((10128)>>2)];
 var $40=HEAP32[((10144)>>2)];
 var $41=((($40)+($39))|0);
 var $42=HEAP32[((10152)>>2)];
 var $43=((($41)+($42))|0);
 var $44=HEAP32[((10104)>>2)];
 var $45=((($43)+($44))|0);
 var $46=HEAP32[((10120)>>2)];
 var $47=((($45)+($46))|0);
 var $48=HEAP32[((10112)>>2)];
 var $49=((($47)+($48))|0);
 var $50=HEAP32[((10136)>>2)];
 var $51=((($49)+($50))|0);
 var $52=(Math_imul($51,$38)|0);
 var $53=$52>>>3;
 var $54=((($53)+($35))|0);
 HEAP32[(($36)>>2)]=$54;
 var $55=($38|0)==0;
 if ($55) {
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $56=HEAP32[((10208)>>2)];
 var $57=HEAP32[((10216)>>2)];
 var $58=((($57)+($56))|0);
 var $59=HEAP32[((10200)>>2)];
 var $60=((($58)+($59))|0);
 var $_pre_i=HEAP32[(($1)>>2)];
 var $i_08_i=0;var $62=$54;
 while(1) {
  var $62;
  var $i_08_i;
  var $63=(($_pre_i+($i_08_i<<5)+23)|0);
  var $64=HEAP8[($63)];
  var $65=($64&255);
  var $66=(Math_imul($65,$60)|0);
  var $67=$66>>>3;
  var $68=((($67)+($62))|0);
  HEAP32[(($36)>>2)]=$68;
  var $69=((($i_08_i)+(1))|0);
  var $70=($69>>>0)<($38>>>0);
  if ($70) {
   var $i_08_i=$69;var $62=$68;
  } else {
   var $_0=1;
   break;
  }
 }
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__metadata_object_cuesheet_track_insert_blank_index($object,$track_num,$index_num){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $indx=sp;
 var $1=$indx;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0; HEAP32[((($1)+(12))>>2)]=0;
 var $2=_FLAC__metadata_object_cuesheet_track_insert_index($object,$track_num,$index_num,$indx);
 STACKTOP=sp;return $2;
}
function _FLAC__metadata_object_cuesheet_track_delete_index($object,$track_num,$index_num){
 var label=0;
 var $1=(($object+168)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($track_num<<5)+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+($index_num<<4))|0);
 var $6=$5;
 var $7=((($index_num)+(1))|0);
 var $8=(($4+($7<<4))|0);
 var $9=$8;
 var $10=(($2+($track_num<<5)+23)|0);
 var $11=HEAP8[($10)];
 var $12=($11&255);
 var $13=((($12)-($index_num))|0);
 var $14=$13<<4;
 var $15=((($14)-(16))|0);
 _memmove($6,$9,$15,8,0);
 var $16=HEAP8[($10)];
 var $17=($16&255);
 var $18=((($17)-(1))|0);
 var $19=_FLAC__metadata_object_cuesheet_track_resize_indices($object,$track_num,$18);
 var $20=HEAP32[((10176)>>2)];
 var $21=HEAP32[((10184)>>2)];
 var $22=((($21)+($20))|0);
 var $23=HEAP32[((10192)>>2)];
 var $24=((($22)+($23))|0);
 var $25=HEAP32[((10160)>>2)];
 var $26=((($24)+($25))|0);
 var $27=HEAP32[((10168)>>2)];
 var $28=((($26)+($27))|0);
 var $29=$28>>>3;
 var $30=(($object+8)|0);
 var $31=(($object+164)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=HEAP32[((10128)>>2)];
 var $34=HEAP32[((10144)>>2)];
 var $35=((($34)+($33))|0);
 var $36=HEAP32[((10152)>>2)];
 var $37=((($35)+($36))|0);
 var $38=HEAP32[((10104)>>2)];
 var $39=((($37)+($38))|0);
 var $40=HEAP32[((10120)>>2)];
 var $41=((($39)+($40))|0);
 var $42=HEAP32[((10112)>>2)];
 var $43=((($41)+($42))|0);
 var $44=HEAP32[((10136)>>2)];
 var $45=((($43)+($44))|0);
 var $46=(Math_imul($45,$32)|0);
 var $47=$46>>>3;
 var $48=((($47)+($29))|0);
 HEAP32[(($30)>>2)]=$48;
 var $49=($32|0)==0;
 if ($49) {
  return 1;
 }
 var $50=HEAP32[((10208)>>2)];
 var $51=HEAP32[((10216)>>2)];
 var $52=((($51)+($50))|0);
 var $53=HEAP32[((10200)>>2)];
 var $54=((($52)+($53))|0);
 var $_pre_i=HEAP32[(($1)>>2)];
 var $i_08_i=0;var $56=$48;
 while(1) {
  var $56;
  var $i_08_i;
  var $57=(($_pre_i+($i_08_i<<5)+23)|0);
  var $58=HEAP8[($57)];
  var $59=($58&255);
  var $60=(Math_imul($59,$54)|0);
  var $61=$60>>>3;
  var $62=((($61)+($56))|0);
  HEAP32[(($30)>>2)]=$62;
  var $63=((($i_08_i)+(1))|0);
  var $64=($63>>>0)<($32>>>0);
  if ($64) {
   var $i_08_i=$63;var $56=$62;
  } else {
   break;
  }
 }
 return 1;
}
function _FLAC__metadata_object_cuesheet_resize_tracks($object,$new_num_tracks){
 var label=0;
 var $1=(($object+168)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 do {
  if ($3) {
   var $5=($new_num_tracks|0)==0;
   if ($5) {
    var $_0=1;
    var $_0;
    return $_0;
   }
   var $6=_calloc($new_num_tracks,32);
   var $7=$6;
   HEAP32[(($1)>>2)]=$7;
   var $8=($6|0)==0;
   if ($8) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    var $_pre34=(($object+164)|0);
    var $_pre_i=$7;var $_pre_phi=$_pre34;
    break;
   }
  } else {
   var $10=(($object+164)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11<<5;
   var $13=$new_num_tracks<<5;
   var $14=($new_num_tracks>>>0)>134217727;
   if ($14) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $16=($11>>>0)>($new_num_tracks>>>0);
   if ($16) {
    var $i_029=$new_num_tracks;var $18=$11;var $17=$2;
    while(1) {
     var $17;
     var $18;
     var $i_029;
     var $19=(($17+($i_029<<5)+24)|0);
     var $20=HEAP32[(($19)>>2)];
     var $21=($20|0)==0;
     if ($21) {
      var $25=$18;
     } else {
      var $23=$20;
      _free($23);
      var $_pre31=HEAP32[(($10)>>2)];
      var $25=$_pre31;
     }
     var $25;
     var $26=((($i_029)+(1))|0);
     var $27=($26>>>0)<($25>>>0);
     var $_pre33=HEAP32[(($1)>>2)];
     if ($27) {
      var $i_029=$26;var $18=$25;var $17=$_pre33;
     } else {
      var $28=$_pre33;
      break;
     }
    }
   } else {
    var $28=$2;
   }
   var $28;
   var $29=($13|0)==0;
   var $30=$28;
   do {
    if ($29) {
     _free($30);
     HEAP32[(($1)>>2)]=0;
     var $37=0;
    } else {
     var $33=_realloc($30,$13);
     var $34=$33;
     HEAP32[(($1)>>2)]=$34;
     var $35=($33|0)==0;
     if ($35) {
      var $_0=0;
     } else {
      var $37=$34;
      break;
     }
     var $_0;
     return $_0;
    }
   } while(0);
   var $37;
   var $38=($13>>>0)>($12>>>0);
   if (!($38)) {
    var $_pre_i=$37;var $_pre_phi=$10;
    break;
   }
   var $40=HEAP32[(($10)>>2)];
   var $41=(($37+($40<<5))|0);
   var $42=$41;
   var $43=((($13)-($12))|0);
   _memset($42, 0, $43);
   var $_pre_i=$37;var $_pre_phi=$10;
  }
 } while(0);
 var $_pre_phi;
 var $_pre_i;
 HEAP32[(($_pre_phi)>>2)]=$new_num_tracks;
 var $45=HEAP32[((10176)>>2)];
 var $46=HEAP32[((10184)>>2)];
 var $47=((($46)+($45))|0);
 var $48=HEAP32[((10192)>>2)];
 var $49=((($47)+($48))|0);
 var $50=HEAP32[((10160)>>2)];
 var $51=((($49)+($50))|0);
 var $52=HEAP32[((10168)>>2)];
 var $53=((($51)+($52))|0);
 var $54=$53>>>3;
 var $55=(($object+8)|0);
 var $56=HEAP32[((10128)>>2)];
 var $57=HEAP32[((10144)>>2)];
 var $58=((($57)+($56))|0);
 var $59=HEAP32[((10152)>>2)];
 var $60=((($58)+($59))|0);
 var $61=HEAP32[((10104)>>2)];
 var $62=((($60)+($61))|0);
 var $63=HEAP32[((10120)>>2)];
 var $64=((($62)+($63))|0);
 var $65=HEAP32[((10112)>>2)];
 var $66=((($64)+($65))|0);
 var $67=HEAP32[((10136)>>2)];
 var $68=((($66)+($67))|0);
 var $69=(Math_imul($68,$new_num_tracks)|0);
 var $70=$69>>>3;
 var $71=((($70)+($54))|0);
 HEAP32[(($55)>>2)]=$71;
 var $72=($new_num_tracks|0)==0;
 if ($72) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $73=HEAP32[((10208)>>2)];
 var $74=HEAP32[((10216)>>2)];
 var $75=((($74)+($73))|0);
 var $76=HEAP32[((10200)>>2)];
 var $77=((($75)+($76))|0);
 var $i_08_i=0;var $79=$71;
 while(1) {
  var $79;
  var $i_08_i;
  var $80=(($_pre_i+($i_08_i<<5)+23)|0);
  var $81=HEAP8[($80)];
  var $82=($81&255);
  var $83=(Math_imul($82,$77)|0);
  var $84=$83>>>3;
  var $85=((($84)+($79))|0);
  HEAP32[(($55)>>2)]=$85;
  var $86=((($i_08_i)+(1))|0);
  var $87=($86>>>0)<($new_num_tracks>>>0);
  if ($87) {
   var $i_08_i=$86;var $79=$85;
  } else {
   var $_0=1;
   break;
  }
 }
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_cuesheet_set_track($object,$track_num,$track,$copy){
 var label=0;
 var $1=(($object+168)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($track_num<<5))|0);
 var $4=(($2+($track_num<<5)+24)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($copy|0)==0;
 var $7=$3;
 var $8=$track;
 HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];HEAP32[((($7)+(12))>>2)]=HEAP32[((($8)+(12))>>2)];HEAP32[((($7)+(16))>>2)]=HEAP32[((($8)+(16))>>2)];HEAP32[((($7)+(20))>>2)]=HEAP32[((($8)+(20))>>2)];HEAP32[((($7)+(24))>>2)]=HEAP32[((($8)+(24))>>2)];HEAP32[((($7)+(28))>>2)]=HEAP32[((($8)+(28))>>2)];
 do {
  if (!($6)) {
   var $10=(($track+24)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=($11|0)==0;
   if ($12) {
    break;
   }
   var $14=(($track+23)|0);
   var $15=HEAP8[($14)];
   var $16=($15&255);
   var $17=_safe_malloc_mul_2op_p($16,16);
   var $18=($17|0)==0;
   if ($18) {
    var $_0_i=0;
    var $_0_i;
    return $_0_i;
   } else {
    var $20=$17;
    var $21=HEAP32[(($10)>>2)];
    var $22=$21;
    var $23=HEAP8[($14)];
    var $24=($23&255);
    var $25=$24<<4;
    (_memcpy($17, $22, $25)|0);
    HEAP32[(($4)>>2)]=$20;
    break;
   }
  }
 } while(0);
 var $26=($5|0)==0;
 if (!($26)) {
  var $28=$5;
  _free($28);
 }
 var $30=HEAP32[((10176)>>2)];
 var $31=HEAP32[((10184)>>2)];
 var $32=((($31)+($30))|0);
 var $33=HEAP32[((10192)>>2)];
 var $34=((($32)+($33))|0);
 var $35=HEAP32[((10160)>>2)];
 var $36=((($34)+($35))|0);
 var $37=HEAP32[((10168)>>2)];
 var $38=((($36)+($37))|0);
 var $39=$38>>>3;
 var $40=(($object+8)|0);
 var $41=(($object+164)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=HEAP32[((10128)>>2)];
 var $44=HEAP32[((10144)>>2)];
 var $45=((($44)+($43))|0);
 var $46=HEAP32[((10152)>>2)];
 var $47=((($45)+($46))|0);
 var $48=HEAP32[((10104)>>2)];
 var $49=((($47)+($48))|0);
 var $50=HEAP32[((10120)>>2)];
 var $51=((($49)+($50))|0);
 var $52=HEAP32[((10112)>>2)];
 var $53=((($51)+($52))|0);
 var $54=HEAP32[((10136)>>2)];
 var $55=((($53)+($54))|0);
 var $56=(Math_imul($55,$42)|0);
 var $57=$56>>>3;
 var $58=((($57)+($39))|0);
 HEAP32[(($40)>>2)]=$58;
 var $59=($42|0)==0;
 if ($59) {
  var $_0_i=1;
  var $_0_i;
  return $_0_i;
 }
 var $60=HEAP32[((10208)>>2)];
 var $61=HEAP32[((10216)>>2)];
 var $62=((($61)+($60))|0);
 var $63=HEAP32[((10200)>>2)];
 var $64=((($62)+($63))|0);
 var $_pre_i_i=HEAP32[(($1)>>2)];
 var $i_08_i_i=0;var $66=$58;
 while(1) {
  var $66;
  var $i_08_i_i;
  var $67=(($_pre_i_i+($i_08_i_i<<5)+23)|0);
  var $68=HEAP8[($67)];
  var $69=($68&255);
  var $70=(Math_imul($69,$64)|0);
  var $71=$70>>>3;
  var $72=((($71)+($66))|0);
  HEAP32[(($40)>>2)]=$72;
  var $73=((($i_08_i_i)+(1))|0);
  var $74=($73>>>0)<($42>>>0);
  if ($74) {
   var $i_08_i_i=$73;var $66=$72;
  } else {
   var $_0_i=1;
   break;
  }
 }
 var $_0_i;
 return $_0_i;
}
function _FLAC__metadata_object_cuesheet_insert_track($object,$track_num,$track,$copy){
 var label=0;
 var $1=(($object+164)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)+(1))|0);
 var $4=_FLAC__metadata_object_cuesheet_resize_tracks($object,$3);
 var $5=($4|0)==0;
 if ($5) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=((($track_num)+(1))|0);
 var $8=(($object+168)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+($7<<5))|0);
 var $11=$10;
 var $12=(($9+($track_num<<5))|0);
 var $13=$12;
 var $14=HEAP32[(($1)>>2)];
 var $15=(((134217727)-($track_num))|0);
 var $16=((($15)+($14))|0);
 var $17=$16<<5;
 _memmove($11,$13,$17,8,0);
 var $18=HEAP32[(($8)>>2)];
 var $19=(($18+($track_num<<5)+23)|0);
 HEAP8[($19)]=0;
 var $20=HEAP32[(($8)>>2)];
 var $21=(($20+($track_num<<5)+24)|0);
 HEAP32[(($21)>>2)]=0;
 var $22=_FLAC__metadata_object_cuesheet_set_track($object,$track_num,$track,$copy);
 var $_0=$22;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_cuesheet_insert_blank_track($object,$track_num){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 var $track=sp;
 var $1=$track;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0; HEAP32[((($1)+(12))>>2)]=0; HEAP32[((($1)+(16))>>2)]=0; HEAP32[((($1)+(20))>>2)]=0; HEAP32[((($1)+(24))>>2)]=0; HEAP32[((($1)+(28))>>2)]=0;
 var $2=(($object+164)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)+(1))|0);
 var $5=_FLAC__metadata_object_cuesheet_resize_tracks($object,$4);
 var $6=($5|0)==0;
 if ($6) {
  var $_0_i=0;
  var $_0_i;
  STACKTOP=sp;return $_0_i;
 }
 var $8=((($track_num)+(1))|0);
 var $9=(($object+168)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+($8<<5))|0);
 var $12=$11;
 var $13=(($10+($track_num<<5))|0);
 var $14=$13;
 var $15=HEAP32[(($2)>>2)];
 var $16=(((134217727)-($track_num))|0);
 var $17=((($16)+($15))|0);
 var $18=$17<<5;
 _memmove($12,$14,$18,8,0);
 var $19=HEAP32[(($9)>>2)];
 var $20=(($19+($track_num<<5)+23)|0);
 HEAP8[($20)]=0;
 var $21=HEAP32[(($9)>>2)];
 var $22=(($21+($track_num<<5)+24)|0);
 HEAP32[(($22)>>2)]=0;
 var $23=_FLAC__metadata_object_cuesheet_set_track($object,$track_num,$track,0);
 var $_0_i=$23;
 var $_0_i;
 STACKTOP=sp;return $_0_i;
}
function _FLAC__metadata_object_cuesheet_delete_track($object,$track_num){
 var label=0;
 var $1=(($object+168)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+($track_num<<5)+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if ($5) {
  var $9=$2;
 } else {
  var $7=$4;
  _free($7);
  var $_pre=HEAP32[(($1)>>2)];
  var $9=$_pre;
 }
 var $9;
 var $10=(($9+($track_num<<5))|0);
 var $11=$10;
 var $12=((($track_num)+(1))|0);
 var $13=(($9+($12<<5))|0);
 var $14=$13;
 var $15=(($object+164)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=((($16)-($track_num))|0);
 var $18=$17<<5;
 var $19=((($18)-(32))|0);
 _memmove($11,$14,$19,8,0);
 var $20=HEAP32[(($15)>>2)];
 var $21=((($20)-(1))|0);
 var $22=HEAP32[(($1)>>2)];
 var $23=(($22+($21<<5)+23)|0);
 HEAP8[($23)]=0;
 var $24=HEAP32[(($15)>>2)];
 var $25=((($24)-(1))|0);
 var $26=HEAP32[(($1)>>2)];
 var $27=(($26+($25<<5)+24)|0);
 HEAP32[(($27)>>2)]=0;
 var $28=HEAP32[(($15)>>2)];
 var $29=((($28)-(1))|0);
 var $30=_FLAC__metadata_object_cuesheet_resize_tracks($object,$29);
 return $30;
}
function _FLAC__metadata_object_cuesheet_is_legal($object,$check_cd_da_subset,$violation){
 var label=0;
 var $1=(($object+16)|0);
 var $2=_FLAC__format_cuesheet_is_legal($1,$check_cd_da_subset,$violation);
 return $2;
}
function _FLAC__metadata_object_cuesheet_calculate_cddb_id($object){
 var label=0;
 var $1=(($object+164)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2>>>0)<2;
 if ($3) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $4=((($2)-(1))|0);
 var $5=($4|0)==0;
 var $_pre=(($object+168)|0);
 var $_pre19=(($object+152)|0);
 if ($5) {
  var $sum_0_lcssa=0;var $_lcssa13=0;
 } else {
  var $i_014=0;var $sum_015=0;
  while(1) {
   var $sum_015;
   var $i_014;
   var $6=($4>>>0)>($i_014>>>0);
   do {
    if ($6) {
     var $8=HEAP32[(($_pre)>>2)];
     var $9=(($8+($i_014<<5))|0);
     var $10=(($8+($i_014<<5)+23)|0);
     var $11=HEAP8[($10)];
     var $12=(($11<<24)>>24)==0;
     if ($12) {
      var $_0_i$1=0;var $_0_i$0=0;
      break;
     }
     var $14=(($8+($i_014<<5)+24)|0);
     var $15=HEAP32[(($14)>>2)];
     var $16=(($15+8)|0);
     var $17=HEAP8[($16)];
     var $18=(($17<<24)>>24)==1;
     if ($18) {
      var $20=(($15)|0);
      var $ld$0$0=(($20)|0);
      var $21$0=HEAP32[(($ld$0$0)>>2)];
      var $ld$1$1=(($20+4)|0);
      var $21$1=HEAP32[(($ld$1$1)>>2)];
      var $22=(($9)|0);
      var $ld$2$0=(($22)|0);
      var $23$0=HEAP32[(($ld$2$0)>>2)];
      var $ld$3$1=(($22+4)|0);
      var $23$1=HEAP32[(($ld$3$1)>>2)];
      var $24$0=_i64Add($23$0,$23$1,$21$0,$21$1);var $24$1=tempRet0;
      var $ld$4$0=(($_pre19)|0);
      var $25$0=HEAP32[(($ld$4$0)>>2)];
      var $ld$5$1=(($_pre19+4)|0);
      var $25$1=HEAP32[(($ld$5$1)>>2)];
      var $26$0=_i64Add($24$0,$24$1,$25$0,$25$1);var $26$1=tempRet0;
      var $_0_i$1=$26$1;var $_0_i$0=$26$0;
      break;
     }
     var $28=($11&255)<2;
     if ($28) {
      var $_0_i$1=0;var $_0_i$0=0;
      break;
     }
     var $30=(($15+24)|0);
     var $31=HEAP8[($30)];
     var $32=(($31<<24)>>24)==1;
     if (!($32)) {
      var $_0_i$1=0;var $_0_i$0=0;
      break;
     }
     var $34=(($15+16)|0);
     var $ld$6$0=(($34)|0);
     var $35$0=HEAP32[(($ld$6$0)>>2)];
     var $ld$7$1=(($34+4)|0);
     var $35$1=HEAP32[(($ld$7$1)>>2)];
     var $36=(($9)|0);
     var $ld$8$0=(($36)|0);
     var $37$0=HEAP32[(($ld$8$0)>>2)];
     var $ld$9$1=(($36+4)|0);
     var $37$1=HEAP32[(($ld$9$1)>>2)];
     var $38$0=_i64Add($37$0,$37$1,$35$0,$35$1);var $38$1=tempRet0;
     var $ld$10$0=(($_pre19)|0);
     var $39$0=HEAP32[(($ld$10$0)>>2)];
     var $ld$11$1=(($_pre19+4)|0);
     var $39$1=HEAP32[(($ld$11$1)>>2)];
     var $40$0=_i64Add($38$0,$38$1,$39$0,$39$1);var $40$1=tempRet0;
     var $_0_i$1=$40$1;var $_0_i$0=$40$0;
    } else {
     var $_0_i$1=0;var $_0_i$0=0;
    }
   } while(0);
   var $_0_i$0;
   var $_0_i$1;
   var $$etemp$12$0=44100;
   var $$etemp$12$1=0;
   var $41$0=___udivdi3($_0_i$0,$_0_i$1,$$etemp$12$0,$$etemp$12$1);var $41$1=tempRet0;
   var $42$0=$41$0;
   var $42=$42$0;
   var $43=($42|0)==0;
   if ($43) {
    var $n_0_lcssa_i=0;
   } else {
    var $_04_i=$42;var $n_05_i=0;
    while(1) {
     var $n_05_i;
     var $_04_i;
     var $44=(((($_04_i>>>0))%(10))&-1);
     var $45=((($44)+($n_05_i))|0);
     var $46=(((($_04_i>>>0))/(10))&-1);
     var $47=($_04_i>>>0)<10;
     if ($47) {
      var $n_0_lcssa_i=$45;
      break;
     } else {
      var $_04_i=$46;var $n_05_i=$45;
     }
    }
   }
   var $n_0_lcssa_i;
   var $48=((($n_0_lcssa_i)+($sum_015))|0);
   var $49=((($i_014)+(1))|0);
   var $50=($49>>>0)<($4>>>0);
   if ($50) {
    var $i_014=$49;var $sum_015=$48;
   } else {
    break;
   }
  }
  var $phitmp=(((($48>>>0))%(255))&-1);
  var $phitmp17=$phitmp<<24;
  var $sum_0_lcssa=$phitmp17;var $_lcssa13=$4;
 }
 var $_lcssa13;
 var $sum_0_lcssa;
 var $51=HEAP32[(($_pre)>>2)];
 var $52=(($51+($_lcssa13<<5))|0);
 var $ld$13$0=(($52)|0);
 var $53$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($52+4)|0);
 var $53$1=HEAP32[(($ld$14$1)>>2)];
 var $ld$15$0=(($_pre19)|0);
 var $54$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($_pre19+4)|0);
 var $54$1=HEAP32[(($ld$16$1)>>2)];
 var $55$0=_i64Add($54$0,$54$1,$53$0,$53$1);var $55$1=tempRet0;
 var $$etemp$17$0=44100;
 var $$etemp$17$1=0;
 var $56$0=___udivdi3($55$0,$55$1,$$etemp$17$0,$$etemp$17$1);var $56$1=tempRet0;
 var $57$0=$56$0;
 var $57=$57$0;
 var $58=($2|0)==1;
 do {
  if ($58) {
   var $_0_i11$1=0;var $_0_i11$0=0;
  } else {
   var $60=(($51+23)|0);
   var $61=HEAP8[($60)];
   var $62=(($61<<24)>>24)==0;
   if ($62) {
    var $_0_i11$1=0;var $_0_i11$0=0;
    break;
   }
   var $64=(($51+24)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+8)|0);
   var $67=HEAP8[($66)];
   var $68=(($67<<24)>>24)==1;
   if ($68) {
    var $70=(($65)|0);
    var $ld$18$0=(($70)|0);
    var $71$0=HEAP32[(($ld$18$0)>>2)];
    var $ld$19$1=(($70+4)|0);
    var $71$1=HEAP32[(($ld$19$1)>>2)];
    var $72=(($51)|0);
    var $ld$20$0=(($72)|0);
    var $73$0=HEAP32[(($ld$20$0)>>2)];
    var $ld$21$1=(($72+4)|0);
    var $73$1=HEAP32[(($ld$21$1)>>2)];
    var $74$0=_i64Add($73$0,$73$1,$71$0,$71$1);var $74$1=tempRet0;
    var $75$0=_i64Add($74$0,$74$1,$54$0,$54$1);var $75$1=tempRet0;
    var $_0_i11$1=$75$1;var $_0_i11$0=$75$0;
    break;
   }
   var $77=($61&255)<2;
   if ($77) {
    var $_0_i11$1=0;var $_0_i11$0=0;
    break;
   }
   var $79=(($65+24)|0);
   var $80=HEAP8[($79)];
   var $81=(($80<<24)>>24)==1;
   if (!($81)) {
    var $_0_i11$1=0;var $_0_i11$0=0;
    break;
   }
   var $83=(($65+16)|0);
   var $ld$22$0=(($83)|0);
   var $84$0=HEAP32[(($ld$22$0)>>2)];
   var $ld$23$1=(($83+4)|0);
   var $84$1=HEAP32[(($ld$23$1)>>2)];
   var $85=(($51)|0);
   var $ld$24$0=(($85)|0);
   var $86$0=HEAP32[(($ld$24$0)>>2)];
   var $ld$25$1=(($85+4)|0);
   var $86$1=HEAP32[(($ld$25$1)>>2)];
   var $87$0=_i64Add($86$0,$86$1,$84$0,$84$1);var $87$1=tempRet0;
   var $88$0=_i64Add($87$0,$87$1,$54$0,$54$1);var $88$1=tempRet0;
   var $_0_i11$1=$88$1;var $_0_i11$0=$88$0;
  }
 } while(0);
 var $_0_i11$0;
 var $_0_i11$1;
 var $$etemp$26$0=44100;
 var $$etemp$26$1=0;
 var $89$0=___udivdi3($_0_i11$0,$_0_i11$1,$$etemp$26$0,$$etemp$26$1);var $89$1=tempRet0;
 var $90$0=$89$0;
 var $90=$90$0;
 var $91=((($57)-($90))|0);
 var $92=$91<<8;
 var $93=$92|$sum_0_lcssa;
 var $94=$93|$4;
 var $_0=$94;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_picture_set_mime_type($object,$mime_type,$copy){
 var label=0;
 var $1=(($object+20)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)!=0;
 if ($4) {
  var $6=_strlen($3);
  var $8=$6;
 } else {
  var $8=0;
 }
 var $8;
 var $9=_strlen($mime_type);
 var $10=($copy|0)==0;
 do {
  if ($10) {
   var $storemerge=$mime_type;
  } else {
   var $12=($9|0)==-1;
   if ($12) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $14=((($9)+(1))|0);
   var $15=($14|0)==0;
   var $16=($mime_type|0)==0;
   var $or_cond_i=$15|$16;
   if ($or_cond_i) {
    var $storemerge=0;
    break;
   }
   var $18=_malloc($14);
   var $19=($18|0)==0;
   if ($19) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    (_memcpy($18, $mime_type, $14)|0);
    var $storemerge=$18;
    break;
   }
  }
 } while(0);
 var $storemerge;
 HEAP32[(($2)>>2)]=$storemerge;
 if ($4) {
  _free($3);
 }
 var $23=(($object+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=((($9)-($8))|0);
 var $26=((($25)+($24))|0);
 HEAP32[(($23)>>2)]=$26;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_picture_set_description($object,$description,$copy){
 var label=0;
 var $1=(($object+24)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)!=0;
 if ($4) {
  var $6=_strlen($3);
  var $8=$6;
 } else {
  var $8=0;
 }
 var $8;
 var $9=_strlen($description);
 var $10=($copy|0)==0;
 do {
  if ($10) {
   var $storemerge=$description;
  } else {
   var $12=($9|0)==-1;
   if ($12) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $14=((($9)+(1))|0);
   var $15=($14|0)==0;
   var $16=($description|0)==0;
   var $or_cond_i=$15|$16;
   if ($or_cond_i) {
    var $storemerge=0;
    break;
   }
   var $18=_malloc($14);
   var $19=($18|0)==0;
   if ($19) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    (_memcpy($18, $description, $14)|0);
    var $storemerge=$18;
    break;
   }
  }
 } while(0);
 var $storemerge;
 HEAP32[(($2)>>2)]=$storemerge;
 if ($4) {
  _free($3);
 }
 var $23=(($object+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=((($9)-($8))|0);
 var $26=((($25)+($24))|0);
 HEAP32[(($23)>>2)]=$26;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_picture_set_data($object,$data,$length,$copy){
 var label=0;
 var $1=(($object+48)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($copy|0)==0;
 do {
  if ($4) {
   var $storemerge=$data;
  } else {
   var $6=($length|0)==0;
   var $7=($data|0)==0;
   var $or_cond_i=$6|$7;
   if ($or_cond_i) {
    var $storemerge=0;
    break;
   }
   var $9=_malloc($length);
   var $10=($9|0)==0;
   if ($10) {
    var $_0=0;
    var $_0;
    return $_0;
   } else {
    (_memcpy($9, $data, $length)|0);
    var $storemerge=$9;
    break;
   }
  }
 } while(0);
 var $storemerge;
 HEAP32[(($2)>>2)]=$storemerge;
 var $12=($3|0)==0;
 if (!($12)) {
  _free($3);
 }
 var $15=(($object+44)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($object+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=((($19)-($17))|0);
 HEAP32[(($16)>>2)]=$length;
 var $21=((($20)+($length))|0);
 HEAP32[(($18)>>2)]=$21;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__metadata_object_picture_is_legal($object,$violation){
 var label=0;
 var $1=(($object+16)|0);
 var $2=$1;
 var $3=_FLAC__format_picture_is_legal($2,$violation);
 return $3;
}
function _FLAC__stream_decoder_new(){
 var label=0;
 var $1=_calloc(1,8);
 var $2=$1;
 var $3=($1|0)==0;
 if ($3) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=_calloc(1,28);
 var $6=$5;
 var $7=$1;
 HEAP32[(($7)>>2)]=$6;
 var $8=($5|0)==0;
 if ($8) {
  _free($1);
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $11=_calloc(1,6152);
 var $12=$11;
 var $13=(($1+4)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=$12;
 var $15=($11|0)==0;
 if ($15) {
  _free($5);
  _free($1);
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $18=_FLAC__bitreader_new();
 var $19=(($11+60)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=$18;
 var $21=($18|0)==0;
 if ($21) {
  _free($11);
  _free($5);
  _free($1);
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $24=(($11+1128)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=16;
 var $26=HEAP32[((10224)>>2)];
 var $27=$26>>>3;
 var $28=$27<<4;
 var $29=_malloc($28);
 var $30=(($11+1120)|0);
 var $31=$30;
 HEAP32[(($31)>>2)]=$29;
 var $32=($29|0)==0;
 if ($32) {
  _FLAC__bitreader_delete($18);
  _free($11);
  _free($5);
  _free($1);
  var $_0=0;
  var $_0;
  return $_0;
 } else {
  var $33=(($11+64)|0);
  var $34=(($11+3584)|0);
  var $35=(($11+224)|0);
  var $36=$35;
  HEAP32[(($36)>>2)]=0;
  var $37=(($11+228)|0);
  var $38=$37;
  HEAP32[(($38)>>2)]=0;
  var $39=(($11+252)|0);
  var $40=$39;
  HEAP32[(($40)>>2)]=0;
  var $41=(($11+128)|0);
  var $42=$41;
  _memset($33, 0, 64);
  _memset($34, 0, 32);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($42);
  var $43=(($11+140)|0);
  var $44=$43;
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($44);
  var $45=(($11+152)|0);
  var $46=$45;
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($46);
  var $47=(($11+164)|0);
  var $48=$47;
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($48);
  var $49=(($11+176)|0);
  var $50=$49;
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($50);
  var $51=(($11+188)|0);
  var $52=$51;
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($52);
  var $53=(($11+200)|0);
  var $54=$53;
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($54);
  var $55=(($11+212)|0);
  var $56=$55;
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($56);
  var $57=(($11+56)|0);
  var $58=$57;
  HEAP32[(($58)>>2)]=0;
  var $59=(($11+52)|0);
  var $60=$59;
  HEAP32[(($60)>>2)]=0;
  var $61=(($11+608)|0);
  _memset($61, 0, 512);
  var $62=(($11+608)|0);
  var $63=$62;
  _memset($11, 0, 32);
  HEAP32[(($63)>>2)]=1;
  var $64=(($11+1124)|0);
  var $65=$64;
  HEAP32[(($65)>>2)]=0;
  var $66=(($5+24)|0);
  var $67=$66;
  HEAP32[(($67)>>2)]=0;
  var $68=$5;
  HEAP32[(($68)>>2)]=9;
  var $_0=$2;
  var $_0;
  return $_0;
 }
}
function _FLAC__stream_decoder_delete($decoder){
 var label=0;
 var $1=($decoder|0)==0;
 if ($1) {
  return;
 }
 var $3=_FLAC__stream_decoder_finish($decoder);
 var $4=(($decoder+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+1120)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if ($8) {
  var $11=$5;
 } else {
  _free($7);
  var $_pre=HEAP32[(($4)>>2)];
  var $11=$_pre;
 }
 var $11;
 var $12=(($11+60)|0);
 var $13=HEAP32[(($12)>>2)];
 _FLAC__bitreader_delete($13);
 var $14=HEAP32[(($4)>>2)];
 var $15=(($14+128)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($15);
 var $16=HEAP32[(($4)>>2)];
 var $17=(($16+140)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($17);
 var $18=HEAP32[(($4)>>2)];
 var $19=(($18+152)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($19);
 var $20=HEAP32[(($4)>>2)];
 var $21=(($20+164)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($21);
 var $22=HEAP32[(($4)>>2)];
 var $23=(($22+176)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($23);
 var $24=HEAP32[(($4)>>2)];
 var $25=(($24+188)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($25);
 var $26=HEAP32[(($4)>>2)];
 var $27=(($26+200)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($27);
 var $28=HEAP32[(($4)>>2)];
 var $29=(($28+212)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($29);
 var $30=HEAP32[(($4)>>2)];
 var $31=$30;
 _free($31);
 var $32=(($decoder)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33;
 _free($34);
 var $35=$decoder;
 _free($35);
 return;
}
function _FLAC__stream_decoder_finish($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if ($5) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $7=(($decoder+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+3724)|0);
 var $10=(($8+3628)|0);
 _FLAC__MD5Final($9,$10);
 var $11=HEAP32[(($7)>>2)];
 var $12=(($11+252)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 do {
  if ($14) {
   var $28=$11;
  } else {
   var $16=(($11+452)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=($18|0)==0;
   if ($19) {
    var $28=$11;
    break;
   }
   var $21=$18;
   _free($21);
   var $22=HEAP32[(($7)>>2)];
   var $23=(($22+452)|0);
   var $24=$23;
   HEAP32[(($24)>>2)]=0;
   var $25=HEAP32[(($7)>>2)];
   var $26=(($25+252)|0);
   HEAP32[(($26)>>2)]=0;
   var $_pre=HEAP32[(($7)>>2)];
   var $28=$_pre;
  }
 } while(0);
 var $28;
 var $29=(($28+60)|0);
 var $30=HEAP32[(($29)>>2)];
 _FLAC__bitreader_free($30);
 var $31=HEAP32[(($7)>>2)];
 var $i_037=0;var $33=$31;
 while(1) {
  var $33;
  var $i_037;
  var $34=(($33+64+($i_037<<2))|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=($35|0)==0;
  if ($36) {
   var $43=$33;
  } else {
   var $38=((($35)-(16))|0);
   var $39=$38;
   _free($39);
   var $40=HEAP32[(($7)>>2)];
   var $41=(($40+64+($i_037<<2))|0);
   HEAP32[(($41)>>2)]=0;
   var $_pre38=HEAP32[(($7)>>2)];
   var $43=$_pre38;
  }
  var $43;
  var $44=(($43+3584+($i_037<<2))|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=($45|0)==0;
  if ($46) {
   var $54=$43;
  } else {
   var $48=$45;
   _free($48);
   var $49=HEAP32[(($7)>>2)];
   var $50=(($49+96+($i_037<<2))|0);
   HEAP32[(($50)>>2)]=0;
   var $51=HEAP32[(($7)>>2)];
   var $52=(($51+3584+($i_037<<2))|0);
   HEAP32[(($52)>>2)]=0;
   var $_pre39=HEAP32[(($7)>>2)];
   var $54=$_pre39;
  }
  var $54;
  var $55=((($i_037)+(1))|0);
  var $56=($55>>>0)<8;
  if ($56) {
   var $i_037=$55;var $33=$54;
  } else {
   break;
  }
 }
 var $58=(($54+224)|0);
 HEAP32[(($58)>>2)]=0;
 var $59=HEAP32[(($7)>>2)];
 var $60=(($59+228)|0);
 HEAP32[(($60)>>2)]=0;
 var $61=HEAP32[(($7)>>2)];
 var $62=(($61+56)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($63|0)==0;
 if ($64) {
  var $74=$61;
 } else {
  var $66=HEAP32[((_stdin)>>2)];
  var $67=($63|0)==($66|0);
  if ($67) {
   var $71=$61;
  } else {
   var $69=_fclose($63);
   var $_pre41=HEAP32[(($7)>>2)];
   var $71=$_pre41;
  }
  var $71;
  var $72=(($71+56)|0);
  HEAP32[(($72)>>2)]=0;
  var $_pre40=HEAP32[(($7)>>2)];
  var $74=$_pre40;
 }
 var $74;
 var $75=(($74+3616)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($76|0)==0;
 if ($77) {
  var $md5_failed_0=1;
 } else {
  var $79=(($74+312)|0);
  var $80=(($74+3724)|0);
  var $81=_memcmp($79,$80,16);
  var $82=($81|0)==0;
  var $_=($82&1);
  var $md5_failed_0=$_;
 }
 var $md5_failed_0;
 var $84=(($74+3624)|0);
 HEAP32[(($84)>>2)]=0;
 var $85=HEAP32[(($7)>>2)];
 var $86=(($85)|0);
 HEAP32[(($86)>>2)]=0;
 var $87=HEAP32[(($7)>>2)];
 var $88=(($87+4)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=HEAP32[(($7)>>2)];
 var $90=(($89+8)|0);
 HEAP32[(($90)>>2)]=0;
 var $91=HEAP32[(($7)>>2)];
 var $92=(($91+12)|0);
 HEAP32[(($92)>>2)]=0;
 var $93=HEAP32[(($7)>>2)];
 var $94=(($93+16)|0);
 HEAP32[(($94)>>2)]=0;
 var $95=HEAP32[(($7)>>2)];
 var $96=(($95+20)|0);
 HEAP32[(($96)>>2)]=0;
 var $97=HEAP32[(($7)>>2)];
 var $98=(($97+24)|0);
 HEAP32[(($98)>>2)]=0;
 var $99=HEAP32[(($7)>>2)];
 var $100=(($99+28)|0);
 HEAP32[(($100)>>2)]=0;
 var $101=HEAP32[(($7)>>2)];
 var $102=(($101+52)|0);
 HEAP32[(($102)>>2)]=0;
 var $103=HEAP32[(($7)>>2)];
 var $104=(($103+608)|0);
 var $105=$104;
 _memset($105, 0, 512);
 var $106=HEAP32[(($7)>>2)];
 var $107=(($106+608)|0);
 HEAP32[(($107)>>2)]=1;
 var $108=HEAP32[(($7)>>2)];
 var $109=(($108+1124)|0);
 HEAP32[(($109)>>2)]=0;
 var $110=HEAP32[(($1)>>2)];
 var $111=(($110+24)|0);
 HEAP32[(($111)>>2)]=0;
 var $112=HEAP32[(($1)>>2)];
 var $113=(($112)|0);
 HEAP32[(($113)>>2)]=9;
 var $_0=$md5_failed_0;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_init_stream($decoder,$read_callback,$seek_callback,$tell_callback,$length_callback,$eof_callback,$write_callback,$metadata_callback,$error_callback,$client_data){
 var label=0;
 var $1=_init_stream_internal_($decoder,$read_callback,$seek_callback,$tell_callback,$length_callback,$eof_callback,$write_callback,$metadata_callback,$error_callback,$client_data,0);
 return $1;
}
function _init_stream_internal_($decoder,$read_callback,$seek_callback,$tell_callback,$length_callback,$eof_callback,$write_callback,$metadata_callback,$error_callback,$client_data,$is_ogg){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  var $_0=5;
  var $_0;
  return $_0;
 }
 var $7=($is_ogg|0)==0;
 if (!($7)) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $9=($read_callback|0)==0;
 var $10=($write_callback|0)==0;
 var $or_cond=$9|$10;
 var $11=($error_callback|0)==0;
 var $or_cond48=$or_cond|$11;
 if ($or_cond48) {
  var $_0=2;
  var $_0;
  return $_0;
 }
 var $13=($seek_callback|0)==0;
 do {
  if (!($13)) {
   var $15=($tell_callback|0)==0;
   var $16=($length_callback|0)==0;
   var $or_cond49=$15|$16;
   var $17=($eof_callback|0)==0;
   var $or_cond50=$or_cond49|$17;
   if ($or_cond50) {
    var $_0=2;
   } else {
    break;
   }
   var $_0;
   return $_0;
  }
 } while(0);
 var $19=(($decoder+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+3524)|0);
 _FLAC__cpu_info($21);
 var $22=HEAP32[(($19)>>2)];
 var $23=(($22+32)|0);
 HEAP32[(($23)>>2)]=46;
 var $24=HEAP32[(($19)>>2)];
 var $25=(($24+36)|0);
 HEAP32[(($25)>>2)]=20;
 var $26=HEAP32[(($19)>>2)];
 var $27=(($26+40)|0);
 HEAP32[(($27)>>2)]=46;
 var $28=HEAP32[(($19)>>2)];
 var $29=(($28+44)|0);
 HEAP32[(($29)>>2)]=46;
 var $30=HEAP32[(($19)>>2)];
 var $31=(($30+48)|0);
 HEAP32[(($31)>>2)]=98;
 var $32=HEAP32[(($19)>>2)];
 var $33=(($32+60)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($32+3524)|0);
 var $36=$decoder;
 var $37=_FLAC__bitreader_init($34,$35,34,$36);
 var $38=($37|0)==0;
 if ($38) {
  var $40=HEAP32[(($1)>>2)];
  var $41=(($40)|0);
  HEAP32[(($41)>>2)]=8;
  var $_0=3;
  var $_0;
  return $_0;
 } else {
  var $43=HEAP32[(($19)>>2)];
  var $44=(($43)|0);
  HEAP32[(($44)>>2)]=$read_callback;
  var $45=HEAP32[(($19)>>2)];
  var $46=(($45+4)|0);
  HEAP32[(($46)>>2)]=$seek_callback;
  var $47=HEAP32[(($19)>>2)];
  var $48=(($47+8)|0);
  HEAP32[(($48)>>2)]=$tell_callback;
  var $49=HEAP32[(($19)>>2)];
  var $50=(($49+12)|0);
  HEAP32[(($50)>>2)]=$length_callback;
  var $51=HEAP32[(($19)>>2)];
  var $52=(($51+16)|0);
  HEAP32[(($52)>>2)]=$eof_callback;
  var $53=HEAP32[(($19)>>2)];
  var $54=(($53+20)|0);
  HEAP32[(($54)>>2)]=$write_callback;
  var $55=HEAP32[(($19)>>2)];
  var $56=(($55+24)|0);
  HEAP32[(($56)>>2)]=$metadata_callback;
  var $57=HEAP32[(($19)>>2)];
  var $58=(($57+28)|0);
  HEAP32[(($58)>>2)]=$error_callback;
  var $59=HEAP32[(($19)>>2)];
  var $60=(($59+52)|0);
  HEAP32[(($60)>>2)]=$client_data;
  var $61=HEAP32[(($19)>>2)];
  var $62=(($61+236)|0);
  HEAP32[(($62)>>2)]=0;
  var $63=HEAP32[(($19)>>2)];
  var $64=(($63+232)|0);
  HEAP32[(($64)>>2)]=0;
  var $65=HEAP32[(($19)>>2)];
  var $66=(($65+240)|0);
  var $$etemp$0$0=0;
  var $$etemp$0$1=0;
  var $st$1$0=(($66)|0);
  HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
  var $st$2$1=(($66+4)|0);
  HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
  var $67=HEAP32[(($19)>>2)];
  var $68=(($67+248)|0);
  HEAP32[(($68)>>2)]=0;
  var $69=HEAP32[(($19)>>2)];
  var $70=(($69+3520)|0);
  HEAP32[(($70)>>2)]=0;
  var $71=HEAP32[(($1)>>2)];
  var $72=(($71+24)|0);
  var $73=HEAP32[(($72)>>2)];
  var $74=HEAP32[(($19)>>2)];
  var $75=(($74+3616)|0);
  HEAP32[(($75)>>2)]=$73;
  var $76=HEAP32[(($19)>>2)];
  var $77=(($76+3624)|0);
  HEAP32[(($77)>>2)]=0;
  var $78=HEAP32[(($19)>>2)];
  var $79=(($78+3620)|0);
  HEAP32[(($79)>>2)]=1;
  var $80=_FLAC__stream_decoder_reset($decoder);
  var $81=($80|0)==0;
  var $_=$81?3:0;
  var $_0=$_;
  var $_0;
  return $_0;
 }
}
function _FLAC__stream_decoder_init_ogg_stream($decoder,$read_callback,$seek_callback,$tell_callback,$length_callback,$eof_callback,$write_callback,$metadata_callback,$error_callback,$client_data){
 var label=0;
 var $0=(($decoder)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($1)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==9;
 var $_=$4?1:5;
 return $_;
}
function _FLAC__stream_decoder_init_FILE($decoder,$file,$write_callback,$metadata_callback,$error_callback,$client_data){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  HEAP32[(($3)>>2)]=5;
  var $_0_i=5;
  var $_0_i;
  return $_0_i;
 }
 var $8=($write_callback|0)==0;
 var $9=($error_callback|0)==0;
 var $or_cond_i=$8|$9;
 if ($or_cond_i) {
  HEAP32[(($3)>>2)]=2;
  var $_0_i=2;
  var $_0_i;
  return $_0_i;
 } else {
  var $12=(($decoder+4)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13+56)|0);
  HEAP32[(($14)>>2)]=$file;
  var $15=HEAP32[(($12)>>2)];
  var $16=(($15+56)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=HEAP32[((_stdin)>>2)];
  var $19=($17|0)==($18|0);
  var $20=$19?0:(52);
  var $21=$19?0:(86);
  var $22=$19?0:(60);
  var $23=_init_stream_internal_($decoder,6,$20,$21,$22,58,$write_callback,$metadata_callback,$error_callback,$client_data,0);
  var $_0_i=$23;
  var $_0_i;
  return $_0_i;
 }
}
function _FLAC__stream_decoder_init_ogg_FILE($decoder,$file,$write_callback,$metadata_callback,$error_callback,$client_data){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  var $storemerge=5;
  var $storemerge;
  HEAP32[(($3)>>2)]=$storemerge;
  return $storemerge;
 }
 var $7=($write_callback|0)==0;
 var $8=($error_callback|0)==0;
 var $or_cond_i=$7|$8;
 if ($or_cond_i) {
  var $storemerge=2;
  var $storemerge;
  HEAP32[(($3)>>2)]=$storemerge;
  return $storemerge;
 } else {
  var $10=(($decoder+4)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($11+56)|0);
  HEAP32[(($12)>>2)]=$file;
  var $13=HEAP32[(($1)>>2)];
  var $14=(($13)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=($15|0)==9;
  var $_=$16?1:5;
  return $_;
 }
}
function _FLAC__stream_decoder_init_file($decoder,$filename,$write_callback,$metadata_callback,$error_callback,$client_data){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  HEAP32[(($3)>>2)]=5;
  var $_0_i=5;
  var $_0_i;
  return $_0_i;
 }
 var $8=($write_callback|0)==0;
 var $9=($error_callback|0)==0;
 var $or_cond_i=$8|$9;
 if ($or_cond_i) {
  HEAP32[(($3)>>2)]=2;
  var $_0_i=2;
  var $_0_i;
  return $_0_i;
 }
 var $12=($filename|0)==0;
 if ($12) {
  var $16=HEAP32[((_stdin)>>2)];
  var $18=$16;
 } else {
  var $14=_fopen($filename,3016);
  var $18=$14;
 }
 var $18;
 var $19=($18|0)==0;
 if ($19) {
  var $_0_i=4;
  var $_0_i;
  return $_0_i;
 }
 var $21=HEAP32[(($1)>>2)];
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==9;
 if ($24) {
  var $27=(($decoder+4)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=(($28+56)|0);
  HEAP32[(($29)>>2)]=$18;
  var $30=HEAP32[(($27)>>2)];
  var $31=(($30+56)|0);
  var $32=HEAP32[(($31)>>2)];
  var $33=HEAP32[((_stdin)>>2)];
  var $34=($32|0)==($33|0);
  var $35=$34?0:(52);
  var $36=$34?0:(86);
  var $37=$34?0:(60);
  var $38=_init_stream_internal_($decoder,6,$35,$36,$37,58,$write_callback,$metadata_callback,$error_callback,$client_data,0);
  var $_0_i=$38;
  var $_0_i;
  return $_0_i;
 } else {
  HEAP32[(($22)>>2)]=5;
  var $_0_i=5;
  var $_0_i;
  return $_0_i;
 }
}
function _FLAC__stream_decoder_init_ogg_file($decoder,$filename,$write_callback,$metadata_callback,$error_callback,$client_data){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  HEAP32[(($3)>>2)]=5;
  var $_0_i=5;
  var $_0_i;
  return $_0_i;
 }
 var $8=($write_callback|0)==0;
 var $9=($error_callback|0)==0;
 var $or_cond_i=$8|$9;
 if ($or_cond_i) {
  HEAP32[(($3)>>2)]=2;
  var $_0_i=2;
  var $_0_i;
  return $_0_i;
 }
 var $12=($filename|0)==0;
 if ($12) {
  var $16=HEAP32[((_stdin)>>2)];
  var $18=$16;
 } else {
  var $14=_fopen($filename,3016);
  var $18=$14;
 }
 var $18;
 var $19=($18|0)==0;
 if ($19) {
  var $_0_i=4;
  var $_0_i;
  return $_0_i;
 }
 var $21=HEAP32[(($1)>>2)];
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==9;
 if ($24) {
  var $27=(($decoder+4)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=(($28+56)|0);
  HEAP32[(($29)>>2)]=$18;
  var $30=HEAP32[(($1)>>2)];
  var $31=(($30)|0);
  var $32=HEAP32[(($31)>>2)];
  var $33=($32|0)==9;
  var $_=$33?1:5;
  return $_;
 }
 HEAP32[(($22)>>2)]=5;
 var $_0_i=5;
 var $_0_i;
 return $_0_i;
}
function _FLAC__stream_decoder_set_ogg_serial_number($decoder,$value){
 var label=0;
 return 0;
}
function _FLAC__stream_decoder_set_md5_checking($decoder,$value){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+24)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_set_metadata_respond($decoder,$type){
 var label=0;
 var $1=($type>>>0)>126;
 if ($1) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $3=(($decoder)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==9;
 if (!($7)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9=(($decoder+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+608+($type<<2))|0);
 HEAP32[(($11)>>2)]=1;
 var $12=($type|0)==2;
 if (!($12)) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $14=HEAP32[(($9)>>2)];
 var $15=(($14+1124)|0);
 HEAP32[(($15)>>2)]=0;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_set_metadata_respond_application($decoder,$id){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($decoder+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+616)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if (!($11)) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $13=(($8+1124)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($8+1128)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($14|0)==($16|0);
 L5096: do {
  if ($17) {
   var $19=(($8+1120)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=($14|0)==0;
   do {
    if ($21) {
     var $23=_realloc($20,0);
     var $_0_i=$23;
     label = 3798;
    } else {
     var $25=($14|0)<0;
     if ($25) {
      HEAP32[(($19)>>2)]=0;
      break;
     } else {
      var $27=$14<<1;
      var $28=_realloc($20,$27);
      var $_0_i=$28;
      label = 3798;
      break;
     }
    }
   } while(0);
   do {
    if (label == 3798) {
     var $_0_i;
     var $29=HEAP32[(($7)>>2)];
     var $30=(($29+1120)|0);
     HEAP32[(($30)>>2)]=$_0_i;
     var $31=($_0_i|0)==0;
     if ($31) {
      break;
     }
     var $36=HEAP32[(($7)>>2)];
     var $37=(($36+1128)|0);
     var $38=HEAP32[(($37)>>2)];
     var $39=$38<<1;
     HEAP32[(($37)>>2)]=$39;
     var $_pre=HEAP32[(($7)>>2)];
     var $_phi_trans_insert=(($_pre+1124)|0);
     var $_pre13=HEAP32[(($_phi_trans_insert)>>2)];
     var $42=$_pre;var $41=$_pre13;
     break L5096;
    }
   } while(0);
   var $33=HEAP32[(($1)>>2)];
   var $34=(($33)|0);
   HEAP32[(($34)>>2)]=8;
   var $_0=0;
   var $_0;
   return $_0;
  } else {
   var $42=$8;var $41=$14;
  }
 } while(0);
 var $41;
 var $42;
 var $43=(($42+1120)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=HEAP32[((10224)>>2)];
 var $46=$45>>>3;
 var $47=(Math_imul($46,$41)|0);
 var $48=(($44+$47)|0);
 (_memcpy($48, $id, $46)|0);
 var $49=HEAP32[(($7)>>2)];
 var $50=(($49+1124)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=((($51)+(1))|0);
 HEAP32[(($50)>>2)]=$52;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_set_metadata_respond_all($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $6=(($decoder+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $i_06=0;var $9=$7;
 while(1) {
  var $9;
  var $i_06;
  var $10=(($9+608+($i_06<<2))|0);
  HEAP32[(($10)>>2)]=1;
  var $11=((($i_06)+(1))|0);
  var $12=($11>>>0)<128;
  var $13=HEAP32[(($6)>>2)];
  if ($12) {
   var $i_06=$11;var $9=$13;
  } else {
   break;
  }
 }
 var $15=(($13+1124)|0);
 HEAP32[(($15)>>2)]=0;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_set_metadata_ignore($decoder,$type){
 var label=0;
 var $1=($type>>>0)>126;
 if ($1) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $3=(($decoder)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==9;
 if (!($7)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9=(($decoder+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+608+($type<<2))|0);
 HEAP32[(($11)>>2)]=0;
 var $12=($type|0)==2;
 if (!($12)) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $14=HEAP32[(($9)>>2)];
 var $15=(($14+1124)|0);
 HEAP32[(($15)>>2)]=0;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_set_metadata_ignore_application($decoder,$id){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($decoder+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+616)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if ($11) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $13=(($8+1124)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($8+1128)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($14|0)==($16|0);
 L5137: do {
  if ($17) {
   var $19=(($8+1120)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=($14|0)==0;
   do {
    if ($21) {
     var $23=_realloc($20,0);
     var $_0_i=$23;
     label = 3831;
    } else {
     var $25=($14|0)<0;
     if ($25) {
      HEAP32[(($19)>>2)]=0;
      break;
     } else {
      var $27=$14<<1;
      var $28=_realloc($20,$27);
      var $_0_i=$28;
      label = 3831;
      break;
     }
    }
   } while(0);
   do {
    if (label == 3831) {
     var $_0_i;
     var $29=HEAP32[(($7)>>2)];
     var $30=(($29+1120)|0);
     HEAP32[(($30)>>2)]=$_0_i;
     var $31=($_0_i|0)==0;
     if ($31) {
      break;
     }
     var $36=HEAP32[(($7)>>2)];
     var $37=(($36+1128)|0);
     var $38=HEAP32[(($37)>>2)];
     var $39=$38<<1;
     HEAP32[(($37)>>2)]=$39;
     var $_pre=HEAP32[(($7)>>2)];
     var $_phi_trans_insert=(($_pre+1124)|0);
     var $_pre13=HEAP32[(($_phi_trans_insert)>>2)];
     var $42=$_pre;var $41=$_pre13;
     break L5137;
    }
   } while(0);
   var $33=HEAP32[(($1)>>2)];
   var $34=(($33)|0);
   HEAP32[(($34)>>2)]=8;
   var $_0=0;
   var $_0;
   return $_0;
  } else {
   var $42=$8;var $41=$14;
  }
 } while(0);
 var $41;
 var $42;
 var $43=(($42+1120)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=HEAP32[((10224)>>2)];
 var $46=$45>>>3;
 var $47=(Math_imul($46,$41)|0);
 var $48=(($44+$47)|0);
 (_memcpy($48, $id, $46)|0);
 var $49=HEAP32[(($7)>>2)];
 var $50=(($49+1124)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=((($51)+(1))|0);
 HEAP32[(($50)>>2)]=$52;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_set_metadata_ignore_all($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==9;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($decoder+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+608)|0);
 var $10=$9;
 _memset($10, 0, 512);
 var $11=HEAP32[(($7)>>2)];
 var $12=(($11+1124)|0);
 HEAP32[(($12)>>2)]=0;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_get_state($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_decoder_get_resolved_state_string($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((9680+($4<<2))|0);
 var $6=HEAP32[(($5)>>2)];
 return $6;
}
function _FLAC__stream_decoder_get_md5_checking($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_decoder_get_total_samples($decoder){
 var label=0;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+248)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if ($5) {
  var $11$1=0;var $11$0=0;
  var $11$0;
  var $11$1;
  return (tempRet0=$11$1,$11$0);
 }
 var $7=(($2+304)|0);
 var $8=$7;
 var $ld$0$0=(($8)|0);
 var $9$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $9$1=HEAP32[(($ld$1$1)>>2)];
 var $11$1=$9$1;var $11$0=$9$0;
 var $11$0;
 var $11$1;
 return (tempRet0=$11$1,$11$0);
}
function _FLAC__stream_decoder_get_channels($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_decoder_get_channel_assignment($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_decoder_get_bits_per_sample($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_decoder_get_sample_rate($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+16)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_decoder_get_blocksize($decoder){
 var label=0;
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_decoder_get_decode_position($decoder,$position){
 var label=0;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if ($5) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+52)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=FUNCTION_TABLE[$4]($decoder,$position,$8);
 var $10=($9|0)==0;
 if (!($10)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $12=HEAP32[(($1)>>2)];
 var $13=(($12+60)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=_FLAC__bitreader_is_consumed_byte_aligned($14);
 var $16=($15|0)==0;
 if ($16) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $18=HEAP32[(($1)>>2)];
 var $19=(($18+60)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=_FLAC__bitreader_get_input_bits_unconsumed($20);
 var $22=$21>>>3;
 var $23$0=$22;
 var $23$1=0;
 var $ld$0$0=(($position)|0);
 var $24$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($position+4)|0);
 var $24$1=HEAP32[(($ld$1$1)>>2)];
 var $25$0=_i64Subtract($24$0,$24$1,$23$0,$23$1);var $25$1=tempRet0;
 var $st$2$0=(($position)|0);
 HEAP32[(($st$2$0)>>2)]=$25$0;
 var $st$3$1=(($position+4)|0);
 HEAP32[(($st$3$1)>>2)]=$25$1;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_get_input_bytes_unconsumed($decoder){
 var label=0;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+60)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_FLAC__bitreader_get_input_bits_unconsumed($4);
 var $6=$5>>>3;
 return $6;
}
function _FLAC__stream_decoder_flush($decoder){
 var label=0;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+240)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=HEAP32[(($1)>>2)];
 var $5=(($4+3616)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=HEAP32[(($1)>>2)];
 var $7=(($6+60)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_FLAC__bitreader_clear($8);
 var $10=($9|0)==0;
 var $11=(($decoder)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12)|0);
 var $_=$10?8:2;
 var $14=($10&1);
 var $_5=$14^1;
 HEAP32[(($13)>>2)]=$_;
 return $_5;
}
function _FLAC__stream_decoder_reset($decoder){
 var label=0;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+240)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=HEAP32[(($1)>>2)];
 var $5=(($4+3616)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=HEAP32[(($1)>>2)];
 var $7=(($6+60)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_FLAC__bitreader_clear($8);
 var $10=($9|0)==0;
 var $11=(($decoder)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12)|0);
 var $__i=$10?8:2;
 HEAP32[(($13)>>2)]=$__i;
 if ($10) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $15=HEAP32[(($1)>>2)];
 var $16=(($15+3620)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==0;
 do {
  if ($18) {
   var $20=(($15+56)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=HEAP32[((_stdin)>>2)];
   var $23=($21|0)==($22|0);
   if ($23) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $25=(($15+4)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=($26|0)==0;
   if ($27) {
    break;
   }
   var $29=(($15+52)|0);
   var $30=HEAP32[(($29)>>2)];
   var $$etemp$3$0=0;
   var $$etemp$3$1=0;
   var $31=FUNCTION_TABLE[$26]($decoder,$$etemp$3$0,$$etemp$3$1,$30);
   var $32=($31|0)==1;
   if ($32) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   return $_0;
  } else {
   HEAP32[(($16)>>2)]=0;
  }
 } while(0);
 var $35=HEAP32[(($11)>>2)];
 var $36=(($35)|0);
 HEAP32[(($36)>>2)]=0;
 var $37=HEAP32[(($1)>>2)];
 var $38=(($37+248)|0);
 HEAP32[(($38)>>2)]=0;
 var $39=HEAP32[(($1)>>2)];
 var $40=(($39+252)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 do {
  if ($42) {
   var $56=$39;
  } else {
   var $44=(($39+452)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=($46|0)==0;
   if ($47) {
    var $56=$39;
    break;
   }
   var $49=$46;
   _free($49);
   var $50=HEAP32[(($1)>>2)];
   var $51=(($50+452)|0);
   var $52=$51;
   HEAP32[(($52)>>2)]=0;
   var $53=HEAP32[(($1)>>2)];
   var $54=(($53+252)|0);
   HEAP32[(($54)>>2)]=0;
   var $_pre=HEAP32[(($1)>>2)];
   var $56=$_pre;
  }
 } while(0);
 var $56;
 var $57=HEAP32[(($11)>>2)];
 var $58=(($57+24)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($56+3616)|0);
 HEAP32[(($60)>>2)]=$59;
 var $61=HEAP32[(($1)>>2)];
 var $62=(($61+236)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=HEAP32[(($1)>>2)];
 var $64=(($63+232)|0);
 HEAP32[(($64)>>2)]=0;
 var $65=HEAP32[(($1)>>2)];
 var $66=(($65+3628)|0);
 _FLAC__MD5Init($66);
 var $67=HEAP32[(($1)>>2)];
 var $68=(($67+6128)|0);
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $st$5$0=(($68)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=(($68+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 var $69=HEAP32[(($1)>>2)];
 var $70=(($69+6144)|0);
 HEAP32[(($70)>>2)]=0;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_process_single($decoder){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $got_a_frame=sp;
 var $1=(($decoder)|0);
 L5202: while(1) {
  var $2=HEAP32[(($1)>>2)];
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  switch (($4|0)) {
  case 2: {
   var $11=_frame_sync_($decoder);
   var $12=($11|0)==0;
   if ($12) {
    var $_0_ph=1;
    label = 3891;
    break L5202;
   } else {
    continue L5202;
   }
   break;
  }
  case 3: {
   var $14=_read_frame_($decoder,$got_a_frame,1);
   var $15=($14|0)==0;
   if ($15) {
    var $_0_ph=0;
    label = 3891;
    break L5202;
   }
   var $17=HEAP32[(($got_a_frame)>>2)];
   var $18=($17|0)==0;
   if ($18) {
    continue L5202;
   } else {
    var $_0_ph=1;
    label = 3891;
    break L5202;
   }
   break;
  }
  case 1: {
   label = 3887;
   break L5202;
   break;
  }
  case 0: {
   var $6=_find_metadata_($decoder);
   var $7=($6|0)==0;
   if ($7) {
    var $_0_ph=0;
    label = 3891;
    break L5202;
   } else {
    continue L5202;
   }
   break;
  }
  case 4:case 7: {
   var $_0_ph=1;
   label = 3891;
   break L5202;
   break;
  }
  default: {
   var $_0=0;
   label = 3893;
   break L5202;
  }
  }
 }
 if (label == 3887) {
  var $9=_read_metadata_($decoder);
  var $not_=($9|0)!=0;
  var $_=($not_&1);
  var $_0=$_;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3893) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3891) {
  var $_0_ph;
  var $_0=$_0_ph;
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _find_metadata_($decoder){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $x_i=sp;
 var $x=(sp)+(8);
 var $1=(($decoder+4)|0);
 var $2=$x_i;
 var $i_0_ph26=0;var $first_0_ph27=1;
 L5216: while(1) {
  var $first_0_ph27;
  var $i_0_ph26;
  var $i_022=$i_0_ph26;var $id_023=0;
  while(1) {
   var $id_023;
   var $i_022;
   var $3=HEAP32[(($1)>>2)];
   var $4=(($3+3520)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=($5|0)==0;
   if ($6) {
    var $12=(($3+60)|0);
    var $13=HEAP32[(($12)>>2)];
    var $14=_FLAC__bitreader_read_raw_uint32($13,$x,8);
    var $15=($14|0)==0;
    if ($15) {
     var $_0=0;
     label = 3931;
     break L5216;
    }
   } else {
    var $8=(($3+3582)|0);
    var $9=HEAP8[($8)];
    var $10=($9&255);
    HEAP32[(($x)>>2)]=$10;
    HEAP32[(($4)>>2)]=0;
   }
   var $17=HEAP32[(($x)>>2)];
   var $18=((9872+$i_022)|0);
   var $19=HEAP8[($18)];
   var $20=($19&255);
   var $21=($17|0)==($20|0);
   if ($21) {
    label = 3902;
    break;
   }
   var $25=((8096+$id_023)|0);
   var $26=HEAP8[($25)];
   var $27=($26&255);
   var $28=($17|0)==($27|0);
   if (!($28)) {
    break;
   }
   var $30=((($id_023)+(1))|0);
   var $31=($30|0)==3;
   if (!($31)) {
    var $i_022=0;var $id_023=$30;
    continue;
   }
   var $33=HEAP32[(($1)>>2)];
   var $34=(($33+60)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=_FLAC__bitreader_read_raw_uint32($35,$x_i,24);
   var $37=($36|0)==0;
   if ($37) {
    var $_0=0;
    label = 3927;
    break L5216;
   }
   var $38=HEAP32[(($1)>>2)];
   var $39=(($38+60)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=_FLAC__bitreader_read_raw_uint32($40,$x_i,8);
   var $42=($41|0)==0;
   if ($42) {
    var $_0=0;
    label = 3926;
    break L5216;
   }
   var $44=HEAP32[(($x_i)>>2)];
   var $45=HEAP32[(($1)>>2)];
   var $46=(($45+60)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=_FLAC__bitreader_read_raw_uint32($47,$x_i,8);
   var $49=($48|0)==0;
   if ($49) {
    var $_0=0;
    label = 3930;
    break L5216;
   }
   var $51=HEAP32[(($x_i)>>2)];
   var $52=HEAP32[(($1)>>2)];
   var $53=(($52+60)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=_FLAC__bitreader_read_raw_uint32($54,$x_i,8);
   var $56=($55|0)==0;
   if ($56) {
    var $_0=0;
    label = 3924;
    break L5216;
   }
   var $58=HEAP32[(($x_i)>>2)];
   var $59=HEAP32[(($1)>>2)];
   var $60=(($59+60)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=_FLAC__bitreader_read_raw_uint32($61,$x_i,8);
   var $63=($62|0)==0;
   if ($63) {
    var $_0=0;
    label = 3928;
    break L5216;
   }
   var $64=$44<<7;
   var $65=$64&16256;
   var $66=$51&127;
   var $67=$66|$65;
   var $68=$58&127;
   var $69=$67<<7;
   var $70=$68|$69;
   var $71=$70<<7;
   var $72=HEAP32[(($x_i)>>2)];
   var $73=$72&127;
   var $74=$73|$71;
   var $75=HEAP32[(($1)>>2)];
   var $76=(($75+60)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=_FLAC__bitreader_skip_byte_block_aligned_no_crc($77,$74);
   var $not__i=($78|0)==0;
   if ($not__i) {
    var $_0=0;
    label = 3929;
    break L5216;
   } else {
    var $i_022=0;var $id_023=$30;
   }
  }
  if (label == 3902) {
   label = 0;
   var $22=((($i_022)+(1))|0);
   var $23=($22>>>0)<4;
   if ($23) {
    var $i_0_ph26=$22;var $first_0_ph27=1;
    continue;
   } else {
    label = 3920;
    break;
   }
  }
  var $80=($17|0)==255;
  do {
   if ($80) {
    var $82=HEAP32[(($1)>>2)];
    var $83=(($82+3580)|0);
    HEAP8[($83)]=-1;
    var $84=HEAP32[(($1)>>2)];
    var $85=(($84+60)|0);
    var $86=HEAP32[(($85)>>2)];
    var $87=_FLAC__bitreader_read_raw_uint32($86,$x,8);
    var $88=($87|0)==0;
    if ($88) {
     var $_0=0;
     label = 3925;
     break L5216;
    }
    var $90=HEAP32[(($x)>>2)];
    var $91=($90|0)==255;
    if ($91) {
     var $93=HEAP32[(($1)>>2)];
     var $94=(($93+3582)|0);
     HEAP8[($94)]=-1;
     var $95=HEAP32[(($1)>>2)];
     var $96=(($95+3520)|0);
     HEAP32[(($96)>>2)]=1;
     break;
    } else {
     var $_mask=$90&-2;
     var $98=($_mask|0)==248;
     if ($98) {
      label = 3916;
      break L5216;
     } else {
      break;
     }
    }
   }
  } while(0);
  var $107=($first_0_ph27|0)==0;
  if ($107) {
   var $i_0_ph26=0;var $first_0_ph27=0;
   continue;
  }
  var $109=HEAP32[(($1)>>2)];
  var $110=(($109+3624)|0);
  var $111=HEAP32[(($110)>>2)];
  var $112=($111|0)==0;
  if (!($112)) {
   var $i_0_ph26=0;var $first_0_ph27=0;
   continue;
  }
  var $114=(($109+28)|0);
  var $115=HEAP32[(($114)>>2)];
  var $116=(($109+52)|0);
  var $117=HEAP32[(($116)>>2)];
  FUNCTION_TABLE[$115]($decoder,0,$117);
  var $i_0_ph26=0;var $first_0_ph27=0;
 }
 if (label == 3920) {
  var $118=(($decoder)|0);
  var $119=HEAP32[(($118)>>2)];
  var $120=(($119)|0);
  HEAP32[(($120)>>2)]=1;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3916) {
  var $100=(($90)&255);
  var $101=HEAP32[(($1)>>2)];
  var $102=(($101+3581)|0);
  HEAP8[($102)]=$100;
  var $103=(($decoder)|0);
  var $104=HEAP32[(($103)>>2)];
  var $105=(($104)|0);
  HEAP32[(($105)>>2)]=3;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3929) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3931) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3927) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3925) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3930) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3928) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3926) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 3924) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _read_metadata_($decoder){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0;
 var $x_i78=sp;
 var $x_i72=(sp)+(8);
 var $x_i65=(sp)+(16);
 var $xx_i=(sp)+(24);
 var $x_i=(sp)+(32);
 var $x=(sp)+(40);
 var $type=(sp)+(48);
 var $length=(sp)+(56);
 var $block=(sp)+(64);
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+60)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=HEAP32[((10096)>>2)];
 var $6=_FLAC__bitreader_read_raw_uint32($4,$x,$5);
 var $7=($6|0)==0;
 if ($7) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $9=HEAP32[(($x)>>2)];
 var $10=($9|0)!=0;
 var $11=($10&1);
 var $12=HEAP32[(($1)>>2)];
 var $13=(($12+60)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=HEAP32[((9912)>>2)];
 var $16=_FLAC__bitreader_read_raw_uint32($14,$type,$15);
 var $17=($16|0)==0;
 if ($17) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $19=HEAP32[(($1)>>2)];
 var $20=(($19+60)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=HEAP32[((10088)>>2)];
 var $23=_FLAC__bitreader_read_raw_uint32($21,$length,$22);
 var $24=($23|0)==0;
 if ($24) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $26=HEAP32[(($type)>>2)];
 L5267: do {
  if (($26|0)==0) {
   var $28=HEAP32[(($length)>>2)];
   var $29=$x_i;
   var $30=HEAP32[(($1)>>2)];
   var $31=(($30+256)|0);
   HEAP32[(($31)>>2)]=0;
   var $32=HEAP32[(($1)>>2)];
   var $33=(($32+260)|0);
   HEAP32[(($33)>>2)]=$11;
   var $34=HEAP32[(($1)>>2)];
   var $35=(($34+264)|0);
   HEAP32[(($35)>>2)]=$28;
   var $36=HEAP32[((9944)>>2)];
   var $37=HEAP32[(($1)>>2)];
   var $38=(($37+60)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=_FLAC__bitreader_read_raw_uint32($39,$x_i,$36);
   var $41=($40|0)==0;
   if ($41) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $43=HEAP32[(($x_i)>>2)];
   var $44=HEAP32[(($1)>>2)];
   var $45=(($44+272)|0);
   var $46=$45;
   HEAP32[(($46)>>2)]=$43;
   var $47=HEAP32[((9968)>>2)];
   var $48=HEAP32[(($1)>>2)];
   var $49=(($48+60)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=_FLAC__bitreader_read_raw_uint32($50,$x_i,$47);
   var $52=($51|0)==0;
   if ($52) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $54=HEAP32[(($x_i)>>2)];
   var $55=HEAP32[(($1)>>2)];
   var $56=(($55+276)|0);
   var $57=$56;
   HEAP32[(($57)>>2)]=$54;
   var $58=HEAP32[((9936)>>2)];
   var $59=HEAP32[(($1)>>2)];
   var $60=(($59+60)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=_FLAC__bitreader_read_raw_uint32($61,$x_i,$58);
   var $63=($62|0)==0;
   if ($63) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $65=HEAP32[(($x_i)>>2)];
   var $66=HEAP32[(($1)>>2)];
   var $67=(($66+280)|0);
   var $68=$67;
   HEAP32[(($68)>>2)]=$65;
   var $69=HEAP32[((9960)>>2)];
   var $70=HEAP32[(($1)>>2)];
   var $71=(($70+60)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=_FLAC__bitreader_read_raw_uint32($72,$x_i,$69);
   var $74=($73|0)==0;
   if ($74) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $76=HEAP32[(($x_i)>>2)];
   var $77=HEAP32[(($1)>>2)];
   var $78=(($77+284)|0);
   var $79=$78;
   HEAP32[(($79)>>2)]=$76;
   var $80=HEAP32[((9928)>>2)];
   var $81=HEAP32[(($1)>>2)];
   var $82=(($81+60)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=_FLAC__bitreader_read_raw_uint32($83,$x_i,$80);
   var $85=($84|0)==0;
   if ($85) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $87=HEAP32[(($x_i)>>2)];
   var $88=HEAP32[(($1)>>2)];
   var $89=(($88+288)|0);
   var $90=$89;
   HEAP32[(($90)>>2)]=$87;
   var $91=HEAP32[((9976)>>2)];
   var $92=HEAP32[(($1)>>2)];
   var $93=(($92+60)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=_FLAC__bitreader_read_raw_uint32($94,$x_i,$91);
   var $96=($95|0)==0;
   if ($96) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $98=HEAP32[(($x_i)>>2)];
   var $99=((($98)+(1))|0);
   var $100=HEAP32[(($1)>>2)];
   var $101=(($100+292)|0);
   var $102=$101;
   HEAP32[(($102)>>2)]=$99;
   var $103=HEAP32[((9984)>>2)];
   var $104=HEAP32[(($1)>>2)];
   var $105=(($104+60)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=_FLAC__bitreader_read_raw_uint32($106,$x_i,$103);
   var $108=($107|0)==0;
   if ($108) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $110=HEAP32[(($x_i)>>2)];
   var $111=((($110)+(1))|0);
   var $112=HEAP32[(($1)>>2)];
   var $113=(($112+296)|0);
   var $114=$113;
   HEAP32[(($114)>>2)]=$111;
   var $115=HEAP32[((9920)>>2)];
   var $116=HEAP32[(($1)>>2)];
   var $117=(($116+60)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(($116+304)|0);
   var $120=$119;
   var $121=_FLAC__bitreader_read_raw_uint64($118,$120,$115);
   var $122=($121|0)==0;
   if ($122) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $124=HEAP32[(($1)>>2)];
   var $125=(($124+60)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($124+312)|0);
   var $128=_FLAC__bitreader_read_byte_block_aligned_no_crc($126,$127,16);
   var $129=($128|0)==0;
   if ($129) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $130=((($36)+(128))|0);
   var $131=((($130)+($47))|0);
   var $132=((($131)+($58))|0);
   var $133=((($132)+($69))|0);
   var $134=((($133)+($80))|0);
   var $135=((($134)+($91))|0);
   var $136=((($135)+($103))|0);
   var $137=((($136)+($115))|0);
   var $138=$137>>>3;
   var $139=((($28)-($138))|0);
   var $140=HEAP32[(($1)>>2)];
   var $141=(($140+60)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=_FLAC__bitreader_skip_byte_block_aligned_no_crc($142,$139);
   var $not__i=($143|0)==0;
   if ($not__i) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $145=HEAP32[(($1)>>2)];
   var $146=(($145+248)|0);
   HEAP32[(($146)>>2)]=1;
   var $147=HEAP32[(($1)>>2)];
   var $148=(($147+312)|0);
   var $149=_memcmp($148,10608,16);
   var $150=($149|0)==0;
   if ($150) {
    var $152=(($147+3616)|0);
    HEAP32[(($152)>>2)]=0;
    var $_pre122=HEAP32[(($1)>>2)];
    var $154=$_pre122;
   } else {
    var $154=$147;
   }
   var $154;
   var $155=(($154+3624)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=($156|0)==0;
   if (!($157)) {
    label = 4101;
    break;
   }
   var $159=(($154+608)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=($160|0)==0;
   if ($161) {
    label = 4101;
    break;
   }
   var $163=(($154+24)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=($164|0)==0;
   if ($165) {
    label = 4101;
    break;
   }
   var $167=(($154+256)|0);
   var $168=(($154+52)|0);
   var $169=HEAP32[(($168)>>2)];
   FUNCTION_TABLE[$164]($decoder,$167,$169);
   label = 4101;
  } else if (($26|0)==3) {
   var $171=HEAP32[(($length)>>2)];
   var $172=$x_i65;
   var $173=$xx_i;
   var $174=HEAP32[(($1)>>2)];
   var $175=(($174+432)|0);
   HEAP32[(($175)>>2)]=3;
   var $176=HEAP32[(($1)>>2)];
   var $177=(($176+436)|0);
   HEAP32[(($177)>>2)]=$11;
   var $178=HEAP32[(($1)>>2)];
   var $179=(($178+440)|0);
   HEAP32[(($179)>>2)]=$171;
   var $180=(((($171>>>0))/(18))&-1);
   var $181=HEAP32[(($1)>>2)];
   var $182=(($181+448)|0);
   var $183=$182;
   HEAP32[(($183)>>2)]=$180;
   var $184=HEAP32[(($1)>>2)];
   var $185=(($184+448)|0);
   var $186=(($184+452)|0);
   var $187=$186;
   var $188=HEAP32[(($187)>>2)];
   var $189=$188;
   var $190=$185;
   var $191=HEAP32[(($190)>>2)];
   var $192=($191|0)==0;
   do {
    if ($192) {
     var $194=_realloc($189,0);
     var $_0_i_i=$194;
     label = 3957;
    } else {
     var $196=($191>>>0)>178956970;
     if ($196) {
      HEAP32[(($187)>>2)]=0;
      break;
     } else {
      var $198=((($191)*(24))&-1);
      var $199=_realloc($189,$198);
      var $_0_i_i=$199;
      label = 3957;
      break;
     }
    }
   } while(0);
   do {
    if (label == 3957) {
     var $_0_i_i;
     var $200=$_0_i_i;
     var $201=HEAP32[(($1)>>2)];
     var $202=(($201+452)|0);
     var $203=$202;
     HEAP32[(($203)>>2)]=$200;
     var $204=($_0_i_i|0)==0;
     if ($204) {
      break;
     }
     var $205=HEAP32[(($1)>>2)];
     var $206=(($205+448)|0);
     var $207=$206;
     var $208=HEAP32[(($207)>>2)];
     var $209=($208|0)==0;
     do {
      if ($209) {
       var $_lcssa_i=$205;var $_lcssa28_i=0;
      } else {
       var $210=HEAP32[((10000)>>2)];
       var $211=HEAP32[((9992)>>2)];
       var $212=HEAP32[((10016)>>2)];
       var $i_030_i=0;var $218=$205;
       while(1) {
        var $218;
        var $i_030_i;
        var $219=(($218+60)|0);
        var $220=HEAP32[(($219)>>2)];
        var $221=_FLAC__bitreader_read_raw_uint64($220,$xx_i,$210);
        var $222=($221|0)==0;
        if ($222) {
         var $_0=0;
         label = 4119;
         break;
        }
        var $ld$0$0=(($xx_i)|0);
        var $224$0=HEAP32[(($ld$0$0)>>2)];
        var $ld$1$1=(($xx_i+4)|0);
        var $224$1=HEAP32[(($ld$1$1)>>2)];
        var $225=HEAP32[(($1)>>2)];
        var $226=(($225+452)|0);
        var $227=$226;
        var $228=HEAP32[(($227)>>2)];
        var $229=(($228+((($i_030_i)*(24))&-1))|0);
        var $st$2$0=(($229)|0);
        HEAP32[(($st$2$0)>>2)]=$224$0;
        var $st$3$1=(($229+4)|0);
        HEAP32[(($st$3$1)>>2)]=$224$1;
        var $230=HEAP32[(($1)>>2)];
        var $231=(($230+60)|0);
        var $232=HEAP32[(($231)>>2)];
        var $233=_FLAC__bitreader_read_raw_uint64($232,$xx_i,$211);
        var $234=($233|0)==0;
        if ($234) {
         var $_0=0;
         label = 4116;
         break;
        }
        var $ld$4$0=(($xx_i)|0);
        var $236$0=HEAP32[(($ld$4$0)>>2)];
        var $ld$5$1=(($xx_i+4)|0);
        var $236$1=HEAP32[(($ld$5$1)>>2)];
        var $237=HEAP32[(($1)>>2)];
        var $238=(($237+452)|0);
        var $239=$238;
        var $240=HEAP32[(($239)>>2)];
        var $241=(($240+((($i_030_i)*(24))&-1)+8)|0);
        var $st$6$0=(($241)|0);
        HEAP32[(($st$6$0)>>2)]=$236$0;
        var $st$7$1=(($241+4)|0);
        HEAP32[(($st$7$1)>>2)]=$236$1;
        var $242=HEAP32[(($1)>>2)];
        var $243=(($242+60)|0);
        var $244=HEAP32[(($243)>>2)];
        var $245=_FLAC__bitreader_read_raw_uint32($244,$x_i65,$212);
        var $246=($245|0)==0;
        if ($246) {
         var $_0=0;
         label = 4117;
         break;
        }
        var $248=HEAP32[(($x_i65)>>2)];
        var $249=HEAP32[(($1)>>2)];
        var $250=(($249+452)|0);
        var $251=$250;
        var $252=HEAP32[(($251)>>2)];
        var $253=(($252+((($i_030_i)*(24))&-1)+16)|0);
        HEAP32[(($253)>>2)]=$248;
        var $254=((($i_030_i)+(1))|0);
        var $255=HEAP32[(($1)>>2)];
        var $256=(($255+448)|0);
        var $257=$256;
        var $258=HEAP32[(($257)>>2)];
        var $259=($254>>>0)<($258>>>0);
        if ($259) {
         var $i_030_i=$254;var $218=$255;
        } else {
         label = 3965;
         break;
        }
       }
       if (label == 3965) {
        var $phitmp_i=((($258)*(-18))&-1);
        var $_lcssa_i=$255;var $_lcssa28_i=$phitmp_i;
        break;
       }
       else if (label == 4116) {
        var $_0;
        STACKTOP=sp;return $_0;
       }
       else if (label == 4117) {
        var $_0;
        STACKTOP=sp;return $_0;
       }
       else if (label == 4119) {
        var $_0;
        STACKTOP=sp;return $_0;
       }
      }
     } while(0);
     var $_lcssa28_i;
     var $_lcssa_i;
     var $261=((($_lcssa28_i)+($171))|0);
     var $262=($261|0)==0;
     do {
      if ($262) {
       var $269=$_lcssa_i;
      } else {
       var $264=(($_lcssa_i+60)|0);
       var $265=HEAP32[(($264)>>2)];
       var $266=_FLAC__bitreader_skip_byte_block_aligned_no_crc($265,$261);
       var $267=($266|0)==0;
       if ($267) {
        var $_0=0;
        var $_0;
        STACKTOP=sp;return $_0;
       } else {
        var $_pre140=HEAP32[(($1)>>2)];
        var $269=$_pre140;
        break;
       }
      }
     } while(0);
     var $269;
     var $270=(($269+252)|0);
     HEAP32[(($270)>>2)]=1;
     var $271=HEAP32[(($1)>>2)];
     var $272=(($271+3624)|0);
     var $273=HEAP32[(($272)>>2)];
     var $274=($273|0)==0;
     if (!($274)) {
      label = 4101;
      break L5267;
     }
     var $276=(($271+620)|0);
     var $277=HEAP32[(($276)>>2)];
     var $278=($277|0)==0;
     if ($278) {
      label = 4101;
      break L5267;
     }
     var $280=(($271+24)|0);
     var $281=HEAP32[(($280)>>2)];
     var $282=($281|0)==0;
     if ($282) {
      label = 4101;
      break L5267;
     }
     var $284=(($271+432)|0);
     var $285=(($271+52)|0);
     var $286=HEAP32[(($285)>>2)];
     FUNCTION_TABLE[$281]($decoder,$284,$286);
     label = 4101;
     break L5267;
    }
   } while(0);
   var $214=(($decoder)|0);
   var $215=HEAP32[(($214)>>2)];
   var $216=(($215)|0);
   HEAP32[(($216)>>2)]=8;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $288=HEAP32[(($1)>>2)];
   var $289=(($288+608+($26<<2))|0);
   var $290=HEAP32[(($289)>>2)];
   var $291=($290|0)!=0;
   var $292=($291&1);
   var $293=$292^1;
   var $294=HEAP32[(($length)>>2)];
   var $295=(($block+4)|0);
   HEAP32[(($295)>>2)]=$11;
   var $296=(($block)|0);
   HEAP32[(($296)>>2)]=$26;
   var $297=(($block+8)|0);
   HEAP32[(($297)>>2)]=$294;
   var $298=($26|0)==2;
   L5306: do {
    if ($298) {
     var $300=(($288+60)|0);
     var $301=HEAP32[(($300)>>2)];
     var $302=(($block+16)|0);
     var $303=HEAP32[((10224)>>2)];
     var $304=$303>>>3;
     var $305=_FLAC__bitreader_read_byte_block_aligned_no_crc($301,$302,$304);
     var $306=($305|0)==0;
     if ($306) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $308=($294>>>0)<($304>>>0);
     if ($308) {
      var $310=(($decoder)|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=(($311)|0);
      HEAP32[(($312)>>2)]=8;
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $314=((($294)-($304))|0);
     var $315=HEAP32[(($1)>>2)];
     var $316=(($315+1124)|0);
     var $317=HEAP32[(($316)>>2)];
     var $318=($317|0)==0;
     if ($318) {
      var $real_length_0=$314;var $skip_it_0=$293;var $330=$315;
      break;
     }
     var $320=(($315+1120)|0);
     var $i_0_i=0;
     while(1) {
      var $i_0_i;
      var $322=($i_0_i>>>0)<($317>>>0);
      if (!($322)) {
       var $real_length_0=$314;var $skip_it_0=$293;var $330=$315;
       break L5306;
      }
      var $324=HEAP32[(($320)>>2)];
      var $325=(Math_imul($i_0_i,$304)|0);
      var $326=(($324+$325)|0);
      var $327=_memcmp($326,$302,$304);
      var $328=($327|0)==0;
      var $329=((($i_0_i)+(1))|0);
      if ($328) {
       var $real_length_0=$314;var $skip_it_0=$292;var $330=$315;
       break;
      } else {
       var $i_0_i=$329;
      }
     }
    } else {
     var $real_length_0=$294;var $skip_it_0=$293;var $330=$288;
    }
   } while(0);
   var $330;
   var $skip_it_0;
   var $real_length_0;
   var $331=($skip_it_0|0)==0;
   if (!($331)) {
    var $333=(($330+60)|0);
    var $334=HEAP32[(($333)>>2)];
    var $335=_FLAC__bitreader_skip_byte_block_aligned_no_crc($334,$real_length_0);
    var $336=($335|0)==0;
    var $_not=$10^1;
    var $brmerge=$336|$_not;
    var $337=($336&1);
    var $_mux=$337^1;
    if ($brmerge) {
     var $_0=$_mux;
    } else {
     break;
    }
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $339=HEAP32[(($type)>>2)];
   L5324: do {
    switch (($339|0)) {
    case 1: {
     var $341=(($330+60)|0);
     var $342=HEAP32[(($341)>>2)];
     var $343=_FLAC__bitreader_skip_byte_block_aligned_no_crc($342,$real_length_0);
     var $344=($343|0)==0;
     if ($344) {
      var $_0=0;
     } else {
      break L5324;
     }
     var $_0;
     STACKTOP=sp;return $_0;
     break;
    }
    case 5: {
     var $481=$x_i72;
     var $482=(($block+16)|0);
     _memset($482, 0, 160);
     var $483=(($330+60)|0);
     var $484=HEAP32[(($483)>>2)];
     var $485=HEAP32[((10176)>>2)];
     var $486=$485>>>3;
     var $487=_FLAC__bitreader_read_byte_block_aligned_no_crc($484,$482,$486);
     var $488=($487|0)==0;
     if ($488) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $490=HEAP32[(($1)>>2)];
     var $491=(($490+60)|0);
     var $492=HEAP32[(($491)>>2)];
     var $493=(($block+152)|0);
     var $494=HEAP32[((10184)>>2)];
     var $495=_FLAC__bitreader_read_raw_uint64($492,$493,$494);
     var $496=($495|0)==0;
     if ($496) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $498=HEAP32[(($1)>>2)];
     var $499=(($498+60)|0);
     var $500=HEAP32[(($499)>>2)];
     var $501=HEAP32[((10192)>>2)];
     var $502=_FLAC__bitreader_read_raw_uint32($500,$x_i72,$501);
     var $503=($502|0)==0;
     if ($503) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $505=HEAP32[(($x_i72)>>2)];
     var $506=($505|0)!=0;
     var $507=($506&1);
     var $508=(($block+160)|0);
     HEAP32[(($508)>>2)]=$507;
     var $509=HEAP32[(($1)>>2)];
     var $510=(($509+60)|0);
     var $511=HEAP32[(($510)>>2)];
     var $512=HEAP32[((10160)>>2)];
     var $513=_FLAC__bitreader_skip_bits_no_crc($511,$512);
     var $514=($513|0)==0;
     if ($514) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $516=HEAP32[(($1)>>2)];
     var $517=(($516+60)|0);
     var $518=HEAP32[(($517)>>2)];
     var $519=HEAP32[((10168)>>2)];
     var $520=_FLAC__bitreader_read_raw_uint32($518,$x_i72,$519);
     var $521=($520|0)==0;
     if ($521) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $523=HEAP32[(($x_i72)>>2)];
     var $524=(($block+164)|0);
     HEAP32[(($524)>>2)]=$523;
     var $525=($523|0)==0;
     if ($525) {
      break L5324;
     }
     var $526=_calloc($523,32);
     var $527=$526;
     var $528=(($block+168)|0);
     HEAP32[(($528)>>2)]=$527;
     var $529=($526|0)==0;
     if ($529) {
      var $548=(($decoder)|0);
      var $549=HEAP32[(($548)>>2)];
      var $550=(($549)|0);
      HEAP32[(($550)>>2)]=8;
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $530=HEAP32[((10128)>>2)];
     var $531=HEAP32[((10144)>>2)];
     var $532=HEAP32[((10152)>>2)];
     var $533=$532>>>3;
     var $534=HEAP32[((10104)>>2)];
     var $535=HEAP32[((10120)>>2)];
     var $536=HEAP32[((10112)>>2)];
     var $537=HEAP32[((10136)>>2)];
     var $538=HEAP32[((10208)>>2)];
     var $539=HEAP32[((10216)>>2)];
     var $540=HEAP32[((10200)>>2)];
     var $541=HEAP32[(($1)>>2)];
     var $542=(($541+60)|0);
     var $543=HEAP32[(($542)>>2)];
     var $544=$526;
     var $545=_FLAC__bitreader_read_raw_uint64($543,$544,$530);
     var $546=($545|0)==0;
     if ($546) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     } else {
      var $551=$527;var $i_048_i106=0;
     }
     L5350: while(1) {
      var $i_048_i106;
      var $551;
      var $552=HEAP32[(($1)>>2)];
      var $553=(($552+60)|0);
      var $554=HEAP32[(($553)>>2)];
      var $555=_FLAC__bitreader_read_raw_uint32($554,$x_i72,$531);
      var $556=($555|0)==0;
      if ($556) {
       var $_0=0;
       label = 4133;
       break;
      }
      var $558=HEAP32[(($x_i72)>>2)];
      var $559=(($558)&255);
      var $560=(($551+($i_048_i106<<5)+8)|0);
      HEAP8[($560)]=$559;
      var $561=HEAP32[(($1)>>2)];
      var $562=(($561+60)|0);
      var $563=HEAP32[(($562)>>2)];
      var $564=(($551+($i_048_i106<<5)+9)|0);
      var $565=_FLAC__bitreader_read_byte_block_aligned_no_crc($563,$564,$533);
      var $566=($565|0)==0;
      if ($566) {
       var $_0=0;
       label = 4134;
       break;
      }
      var $568=HEAP32[(($1)>>2)];
      var $569=(($568+60)|0);
      var $570=HEAP32[(($569)>>2)];
      var $571=_FLAC__bitreader_read_raw_uint32($570,$x_i72,$534);
      var $572=($571|0)==0;
      if ($572) {
       var $_0=0;
       label = 4135;
       break;
      }
      var $574=HEAP32[(($x_i72)>>2)];
      var $575=(($551+($i_048_i106<<5)+20)|0);
      var $576=$575;
      var $577=$574<<16;
      var $578=$577&65536;
      var $579=HEAP32[(($576)>>2)];
      var $580=$579&-65537;
      var $581=$580|$578;
      HEAP32[(($576)>>2)]=$581;
      var $582=HEAP32[(($1)>>2)];
      var $583=(($582+60)|0);
      var $584=HEAP32[(($583)>>2)];
      var $585=_FLAC__bitreader_read_raw_uint32($584,$x_i72,$535);
      var $586=($585|0)==0;
      if ($586) {
       var $_0=0;
       label = 4136;
       break;
      }
      var $588=HEAP32[(($x_i72)>>2)];
      var $589=$588<<17;
      var $590=$589&131072;
      var $591=HEAP32[(($576)>>2)];
      var $592=$591&-131073;
      var $593=$592|$590;
      HEAP32[(($576)>>2)]=$593;
      var $594=HEAP32[(($1)>>2)];
      var $595=(($594+60)|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=_FLAC__bitreader_skip_bits_no_crc($596,$536);
      var $598=($597|0)==0;
      if ($598) {
       var $_0=0;
       label = 4137;
       break;
      }
      var $600=HEAP32[(($1)>>2)];
      var $601=(($600+60)|0);
      var $602=HEAP32[(($601)>>2)];
      var $603=_FLAC__bitreader_read_raw_uint32($602,$x_i72,$537);
      var $604=($603|0)==0;
      if ($604) {
       var $_0=0;
       label = 4138;
       break;
      }
      var $606=HEAP32[(($x_i72)>>2)];
      var $607=(($606)&255);
      var $608=(($551+($i_048_i106<<5)+23)|0);
      HEAP8[($608)]=$607;
      var $609=$606&255;
      var $610=($609|0)==0;
      L5358: do {
       if (!($610)) {
        var $611=_calloc($609,16);
        var $612=$611;
        var $613=(($551+($i_048_i106<<5)+24)|0);
        HEAP32[(($613)>>2)]=$612;
        var $614=($611|0)==0;
        if ($614) {
         label = 4033;
         break L5350;
        } else {
         var $j_0_i=0;
        }
        while(1) {
         var $j_0_i;
         var $619=HEAP8[($608)];
         var $620=($619&255);
         var $621=($j_0_i>>>0)<($620>>>0);
         if (!($621)) {
          break L5358;
         }
         var $623=HEAP32[(($613)>>2)];
         var $624=HEAP32[(($1)>>2)];
         var $625=(($624+60)|0);
         var $626=HEAP32[(($625)>>2)];
         var $627=(($623+($j_0_i<<4))|0);
         var $628=_FLAC__bitreader_read_raw_uint64($626,$627,$538);
         var $629=($628|0)==0;
         if ($629) {
          var $_0=0;
          label = 4150;
          break L5350;
         }
         var $631=HEAP32[(($1)>>2)];
         var $632=(($631+60)|0);
         var $633=HEAP32[(($632)>>2)];
         var $634=_FLAC__bitreader_read_raw_uint32($633,$x_i72,$539);
         var $635=($634|0)==0;
         if ($635) {
          var $_0=0;
          label = 4151;
          break L5350;
         }
         var $637=HEAP32[(($x_i72)>>2)];
         var $638=(($637)&255);
         var $639=(($623+($j_0_i<<4)+8)|0);
         HEAP8[($639)]=$638;
         var $640=HEAP32[(($1)>>2)];
         var $641=(($640+60)|0);
         var $642=HEAP32[(($641)>>2)];
         var $643=_FLAC__bitreader_skip_bits_no_crc($642,$540);
         var $644=($643|0)==0;
         var $645=((($j_0_i)+(1))|0);
         if ($644) {
          var $_0=0;
          label = 4152;
          break L5350;
         } else {
          var $j_0_i=$645;
         }
        }
       }
      } while(0);
      var $646=((($i_048_i106)+(1))|0);
      var $647=HEAP32[(($524)>>2)];
      var $648=($646>>>0)<($647>>>0);
      if (!($648)) {
       break L5324;
      }
      var $_pre_i75=HEAP32[(($528)>>2)];
      var $649=HEAP32[(($1)>>2)];
      var $650=(($649+60)|0);
      var $651=HEAP32[(($650)>>2)];
      var $652=(($_pre_i75+($646<<5))|0);
      var $653=_FLAC__bitreader_read_raw_uint64($651,$652,$530);
      var $654=($653|0)==0;
      if ($654) {
       var $_0=0;
       label = 4153;
       break;
      } else {
       var $551=$_pre_i75;var $i_048_i106=$646;
      }
     }
     if (label == 4033) {
      var $616=(($decoder)|0);
      var $617=HEAP32[(($616)>>2)];
      var $618=(($617)|0);
      HEAP32[(($618)>>2)]=8;
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4133) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4134) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4135) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4136) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4137) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4138) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4150) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4151) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4152) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4153) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     break;
    }
    case 2: {
     var $346=($real_length_0|0)==0;
     if ($346) {
      var $362=(($block+20)|0);
      var $363=$362;
      HEAP32[(($363)>>2)]=0;
      break L5324;
     }
     var $348=_malloc($real_length_0);
     var $349=(($block+20)|0);
     var $350=$349;
     HEAP32[(($350)>>2)]=$348;
     var $351=($348|0)==0;
     if ($351) {
      var $353=(($decoder)|0);
      var $354=HEAP32[(($353)>>2)];
      var $355=(($354)|0);
      HEAP32[(($355)>>2)]=8;
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     } else {
      var $357=(($330+60)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=_FLAC__bitreader_read_byte_block_aligned_no_crc($358,$348,$real_length_0);
      var $360=($359|0)==0;
      if ($360) {
       var $_0=0;
      } else {
       break L5324;
      }
      var $_0;
      STACKTOP=sp;return $_0;
     }
     break;
    }
    case 4: {
     var $365=(($block+16)|0);
     var $366=(($330+60)|0);
     var $367=HEAP32[(($366)>>2)];
     var $368=$365;
     var $369=_FLAC__bitreader_read_uint32_little_endian($367,$368);
     var $370=($369|0)==0;
     if ($370) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $372=HEAP32[(($368)>>2)];
     var $373=($372|0)==0;
     L5393: do {
      if ($373) {
       var $400=(($block+20)|0);
       var $401=$400;
       HEAP32[(($401)>>2)]=0;
      } else {
       var $uadd_i_i$0=_llvm_uadd_with_overflow_i32($372,1);
       var $uadd_i_i$1=tempRet0;
       var $375=$uadd_i_i$1;
       do {
        if ($375) {
         var $376=(($block+20)|0);
         var $377=$376;
         HEAP32[(($377)>>2)]=0;
        } else {
         var $378=$uadd_i_i$0;
         var $379=($378|0)==0;
         var $380=($379&1);
         var $_size_i_i_i=((($380)+($378))|0);
         var $381=_malloc($_size_i_i_i);
         var $382=(($block+20)|0);
         var $383=$382;
         HEAP32[(($383)>>2)]=$381;
         var $384=($381|0)==0;
         if ($384) {
          break;
         }
         var $390=HEAP32[(($1)>>2)];
         var $391=(($390+60)|0);
         var $392=HEAP32[(($391)>>2)];
         var $393=_FLAC__bitreader_read_byte_block_aligned_no_crc($392,$381,$372);
         var $394=($393|0)==0;
         if ($394) {
          var $_0=0;
          var $_0;
          STACKTOP=sp;return $_0;
         } else {
          var $396=HEAP32[(($368)>>2)];
          var $397=HEAP32[(($383)>>2)];
          var $398=(($397+$396)|0);
          HEAP8[($398)]=0;
          break L5393;
         }
        }
       } while(0);
       var $386=(($decoder)|0);
       var $387=HEAP32[(($386)>>2)];
       var $388=(($387)|0);
       HEAP32[(($388)>>2)]=8;
       var $_0=0;
       var $_0;
       STACKTOP=sp;return $_0;
      }
     } while(0);
     var $403=HEAP32[(($1)>>2)];
     var $404=(($403+60)|0);
     var $405=HEAP32[(($404)>>2)];
     var $406=(($block+24)|0);
     var $407=$406;
     var $408=_FLAC__bitreader_read_uint32_little_endian($405,$407);
     var $409=($408|0)==0;
     if ($409) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $411=HEAP32[(($407)>>2)];
     var $412=($411|0)==0;
     if ($412) {
      var $478=(($block+28)|0);
      var $479=$478;
      HEAP32[(($479)>>2)]=0;
      break L5324;
     }
     var $414=_safe_malloc_mul_2op_p($411,8);
     var $415=$414;
     var $416=(($block+28)|0);
     var $417=$416;
     HEAP32[(($417)>>2)]=$415;
     var $418=($414|0)==0;
     if ($418) {
      var $428=(($decoder)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=(($429)|0);
      HEAP32[(($430)>>2)]=8;
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $419=HEAP32[(($407)>>2)];
     var $420=($419|0)==0;
     if ($420) {
      break L5324;
     }
     var $421=HEAP32[(($1)>>2)];
     var $422=(($421+60)|0);
     var $423=HEAP32[(($422)>>2)];
     var $424=$414;
     var $425=_FLAC__bitreader_read_uint32_little_endian($423,$424);
     var $426=($425|0)==0;
     if ($426) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     } else {
      var $i_044_i101=0;
     }
     while(1) {
      var $i_044_i101;
      var $431=HEAP32[(($417)>>2)];
      var $432=(($431+($i_044_i101<<3))|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=($433|0)==0;
      if ($434) {
       var $466=(($431+($i_044_i101<<3)+4)|0);
       HEAP32[(($466)>>2)]=0;
      } else {
       var $uadd_i37_i$0=_llvm_uadd_with_overflow_i32($433,1);
       var $uadd_i37_i$1=tempRet0;
       var $436=$uadd_i37_i$1;
       if ($436) {
        label = 4007;
        break;
       }
       var $438=$uadd_i37_i$0;
       var $439=($438|0)==0;
       var $440=($439&1);
       var $_size_i_i38_i=((($440)+($438))|0);
       var $441=_malloc($_size_i_i38_i);
       var $442=(($431+($i_044_i101<<3)+4)|0);
       HEAP32[(($442)>>2)]=$441;
       var $443=($441|0)==0;
       if ($443) {
        break;
       }
       var $448=HEAP32[(($1)>>2)];
       var $449=(($448+60)|0);
       var $450=HEAP32[(($449)>>2)];
       var $451=HEAP32[(($417)>>2)];
       var $452=(($451+($i_044_i101<<3)+4)|0);
       var $453=HEAP32[(($452)>>2)];
       var $454=(($451+($i_044_i101<<3))|0);
       var $455=HEAP32[(($454)>>2)];
       var $456=_FLAC__bitreader_read_byte_block_aligned_no_crc($450,$453,$455);
       var $457=($456|0)==0;
       if ($457) {
        var $_0=0;
        label = 4128;
        break;
       }
       var $459=HEAP32[(($417)>>2)];
       var $460=(($459+($i_044_i101<<3))|0);
       var $461=HEAP32[(($460)>>2)];
       var $462=(($459+($i_044_i101<<3)+4)|0);
       var $463=HEAP32[(($462)>>2)];
       var $464=(($463+$461)|0);
       HEAP8[($464)]=0;
      }
      var $468=((($i_044_i101)+(1))|0);
      var $469=HEAP32[(($407)>>2)];
      var $470=($468>>>0)<($469>>>0);
      if (!($470)) {
       break L5324;
      }
      var $_pre_i=HEAP32[(($417)>>2)];
      var $471=HEAP32[(($1)>>2)];
      var $472=(($471+60)|0);
      var $473=HEAP32[(($472)>>2)];
      var $474=(($_pre_i+($468<<3))|0);
      var $475=_FLAC__bitreader_read_uint32_little_endian($473,$474);
      var $476=($475|0)==0;
      if ($476) {
       var $_0=0;
       label = 4129;
       break;
      } else {
       var $i_044_i101=$468;
      }
     }
     if (label == 4007) {
      var $437=(($431+($i_044_i101<<3)+4)|0);
      HEAP32[(($437)>>2)]=0;
     }
     else if (label == 4128) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     else if (label == 4129) {
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $444=(($decoder)|0);
     var $445=HEAP32[(($444)>>2)];
     var $446=(($445)|0);
     HEAP32[(($446)>>2)]=8;
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
     break;
    }
    case 6: {
     var $656=$x_i78;
     var $657=(($330+60)|0);
     var $658=HEAP32[(($657)>>2)];
     var $659=HEAP32[((10032)>>2)];
     var $660=_FLAC__bitreader_read_raw_uint32($658,$x_i78,$659);
     var $661=($660|0)==0;
     if ($661) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $663=(($block+16)|0);
     var $664=HEAP32[(($x_i78)>>2)];
     var $665=$663;
     HEAP32[(($665)>>2)]=$664;
     var $666=HEAP32[(($1)>>2)];
     var $667=(($666+60)|0);
     var $668=HEAP32[(($667)>>2)];
     var $669=HEAP32[((10040)>>2)];
     var $670=_FLAC__bitreader_read_raw_uint32($668,$x_i78,$669);
     var $671=($670|0)==0;
     if ($671) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $673=HEAP32[(($x_i78)>>2)];
     var $uadd_i_i79$0=_llvm_uadd_with_overflow_i32($673,1);
     var $uadd_i_i79$1=tempRet0;
     var $674=$uadd_i_i79$1;
     do {
      if ($674) {
       var $675=(($block+20)|0);
       var $676=$675;
       HEAP32[(($676)>>2)]=0;
      } else {
       var $677=$uadd_i_i79$0;
       var $678=($677|0)==0;
       var $679=($678&1);
       var $_size_i_i_i81=((($679)+($677))|0);
       var $680=_malloc($_size_i_i_i81);
       var $681=(($block+20)|0);
       var $682=$681;
       HEAP32[(($682)>>2)]=$680;
       var $683=($680|0)==0;
       if ($683) {
        break;
       }
       var $689=($673|0)==0;
       do {
        if ($689) {
         var $698=0;var $697=$680;
        } else {
         var $691=HEAP32[(($1)>>2)];
         var $692=(($691+60)|0);
         var $693=HEAP32[(($692)>>2)];
         var $694=_FLAC__bitreader_read_byte_block_aligned_no_crc($693,$680,$673);
         var $695=($694|0)==0;
         if ($695) {
          var $_0=0;
          var $_0;
          STACKTOP=sp;return $_0;
         } else {
          var $_pre_i83=HEAP32[(($x_i78)>>2)];
          var $_pre37_i=HEAP32[(($682)>>2)];
          var $698=$_pre_i83;var $697=$_pre37_i;
          break;
         }
        }
       } while(0);
       var $697;
       var $698;
       var $699=(($697+$698)|0);
       HEAP8[($699)]=0;
       var $700=HEAP32[(($1)>>2)];
       var $701=(($700+60)|0);
       var $702=HEAP32[(($701)>>2)];
       var $703=HEAP32[((10056)>>2)];
       var $704=_FLAC__bitreader_read_raw_uint32($702,$x_i78,$703);
       var $705=($704|0)==0;
       if ($705) {
        var $_0=0;
        var $_0;
        STACKTOP=sp;return $_0;
       }
       var $707=HEAP32[(($x_i78)>>2)];
       var $uadd_i32_i$0=_llvm_uadd_with_overflow_i32($707,1);
       var $uadd_i32_i$1=tempRet0;
       var $708=$uadd_i32_i$1;
       do {
        if ($708) {
         var $709=(($block+24)|0);
         var $710=$709;
         HEAP32[(($710)>>2)]=0;
        } else {
         var $711=$uadd_i32_i$0;
         var $712=($711|0)==0;
         var $713=($712&1);
         var $_size_i_i33_i=((($713)+($711))|0);
         var $714=_malloc($_size_i_i33_i);
         var $715=(($block+24)|0);
         var $716=$715;
         HEAP32[(($716)>>2)]=$714;
         var $717=($714|0)==0;
         if ($717) {
          break;
         }
         var $723=($707|0)==0;
         do {
          if ($723) {
           var $732=0;var $731=$714;
          } else {
           var $725=HEAP32[(($1)>>2)];
           var $726=(($725+60)|0);
           var $727=HEAP32[(($726)>>2)];
           var $728=_FLAC__bitreader_read_byte_block_aligned_no_crc($727,$714,$707);
           var $729=($728|0)==0;
           if ($729) {
            var $_0=0;
            var $_0;
            STACKTOP=sp;return $_0;
           } else {
            var $_pre38_i=HEAP32[(($x_i78)>>2)];
            var $_pre39_i=HEAP32[(($716)>>2)];
            var $732=$_pre38_i;var $731=$_pre39_i;
            break;
           }
          }
         } while(0);
         var $731;
         var $732;
         var $733=(($731+$732)|0);
         HEAP8[($733)]=0;
         var $734=HEAP32[(($1)>>2)];
         var $735=(($734+60)|0);
         var $736=HEAP32[(($735)>>2)];
         var $737=(($block+28)|0);
         var $738=$737;
         var $739=HEAP32[((10024)>>2)];
         var $740=_FLAC__bitreader_read_raw_uint32($736,$738,$739);
         var $741=($740|0)==0;
         if ($741) {
          var $_0=0;
          var $_0;
          STACKTOP=sp;return $_0;
         }
         var $743=HEAP32[(($1)>>2)];
         var $744=(($743+60)|0);
         var $745=HEAP32[(($744)>>2)];
         var $746=(($block+32)|0);
         var $747=$746;
         var $748=HEAP32[((10048)>>2)];
         var $749=_FLAC__bitreader_read_raw_uint32($745,$747,$748);
         var $750=($749|0)==0;
         if ($750) {
          var $_0=0;
          var $_0;
          STACKTOP=sp;return $_0;
         }
         var $752=HEAP32[(($1)>>2)];
         var $753=(($752+60)|0);
         var $754=HEAP32[(($753)>>2)];
         var $755=(($block+36)|0);
         var $756=$755;
         var $757=HEAP32[((10064)>>2)];
         var $758=_FLAC__bitreader_read_raw_uint32($754,$756,$757);
         var $759=($758|0)==0;
         if ($759) {
          var $_0=0;
          var $_0;
          STACKTOP=sp;return $_0;
         }
         var $761=HEAP32[(($1)>>2)];
         var $762=(($761+60)|0);
         var $763=HEAP32[(($762)>>2)];
         var $764=(($block+40)|0);
         var $765=$764;
         var $766=HEAP32[((10080)>>2)];
         var $767=_FLAC__bitreader_read_raw_uint32($763,$765,$766);
         var $768=($767|0)==0;
         if ($768) {
          var $_0=0;
          var $_0;
          STACKTOP=sp;return $_0;
         }
         var $770=HEAP32[(($1)>>2)];
         var $771=(($770+60)|0);
         var $772=HEAP32[(($771)>>2)];
         var $773=(($block+44)|0);
         var $774=$773;
         var $775=HEAP32[((10072)>>2)];
         var $776=_FLAC__bitreader_read_raw_uint32($772,$774,$775);
         var $777=($776|0)==0;
         if ($777) {
          var $_0=0;
          var $_0;
          STACKTOP=sp;return $_0;
         }
         var $779=HEAP32[(($774)>>2)];
         var $780=($779|0)==0;
         var $781=($780&1);
         var $_size_i_i=((($781)+($779))|0);
         var $782=_malloc($_size_i_i);
         var $783=(($block+48)|0);
         var $784=$783;
         HEAP32[(($784)>>2)]=$782;
         var $785=($782|0)==0;
         if ($785) {
          var $787=(($decoder)|0);
          var $788=HEAP32[(($787)>>2)];
          var $789=(($788)|0);
          HEAP32[(($789)>>2)]=8;
          var $_0=0;
          var $_0;
          STACKTOP=sp;return $_0;
         }
         if ($780) {
          break L5324;
         }
         var $792=HEAP32[(($1)>>2)];
         var $793=(($792+60)|0);
         var $794=HEAP32[(($793)>>2)];
         var $795=_FLAC__bitreader_read_byte_block_aligned_no_crc($794,$782,$779);
         var $796=($795|0)==0;
         if ($796) {
          var $_0=0;
         } else {
          break L5324;
         }
         var $_0;
         STACKTOP=sp;return $_0;
        }
       } while(0);
       var $719=(($decoder)|0);
       var $720=HEAP32[(($719)>>2)];
       var $721=(($720)|0);
       HEAP32[(($721)>>2)]=8;
       var $_0=0;
       var $_0;
       STACKTOP=sp;return $_0;
      }
     } while(0);
     var $685=(($decoder)|0);
     var $686=HEAP32[(($685)>>2)];
     var $687=(($686)|0);
     HEAP32[(($687)>>2)]=8;
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
     break;
    }
    case 0:case 3: {
     break;
    }
    default: {
     var $798=($real_length_0|0)==0;
     if ($798) {
      var $814=(($block+16)|0);
      var $815=$814;
      HEAP32[(($815)>>2)]=0;
      break L5324;
     }
     var $800=_malloc($real_length_0);
     var $801=(($block+16)|0);
     var $802=$801;
     HEAP32[(($802)>>2)]=$800;
     var $803=($800|0)==0;
     if ($803) {
      var $805=(($decoder)|0);
      var $806=HEAP32[(($805)>>2)];
      var $807=(($806)|0);
      HEAP32[(($807)>>2)]=8;
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     } else {
      var $809=(($330+60)|0);
      var $810=HEAP32[(($809)>>2)];
      var $811=_FLAC__bitreader_read_byte_block_aligned_no_crc($810,$800,$real_length_0);
      var $812=($811|0)==0;
      if ($812) {
       var $_0=0;
      } else {
       break L5324;
      }
      var $_0;
      STACKTOP=sp;return $_0;
     }
    }
    }
   } while(0);
   var $816=HEAP32[(($1)>>2)];
   var $817=(($816+3624)|0);
   var $818=HEAP32[(($817)>>2)];
   var $819=($818|0)==0;
   do {
    if ($819) {
     var $821=(($816+24)|0);
     var $822=HEAP32[(($821)>>2)];
     var $823=($822|0)==0;
     if ($823) {
      break;
     }
     var $825=(($816+52)|0);
     var $826=HEAP32[(($825)>>2)];
     FUNCTION_TABLE[$822]($decoder,$block,$826);
    }
   } while(0);
   var $827=HEAP32[(($type)>>2)];
   switch (($827|0)) {
   case 2: {
    var $829=(($block+20)|0);
    var $830=$829;
    var $831=HEAP32[(($830)>>2)];
    var $832=($831|0)==0;
    if ($832) {
     label = 4101;
     break L5267;
    }
    _free($831);
    label = 4101;
    break L5267;
    break;
   }
   case 4: {
    var $835=(($block+20)|0);
    var $836=$835;
    var $837=HEAP32[(($836)>>2)];
    var $838=($837|0)==0;
    if (!($838)) {
     _free($837);
    }
    var $840=(($block+24)|0);
    var $841=$840;
    var $842=HEAP32[(($841)>>2)];
    var $843=($842|0)==0;
    if (!($843)) {
     var $844=(($block+28)|0);
     var $845=$844;
     var $i_091=0;var $846=$842;
     while(1) {
      var $846;
      var $i_091;
      var $847=HEAP32[(($845)>>2)];
      var $848=(($847+($i_091<<3)+4)|0);
      var $849=HEAP32[(($848)>>2)];
      var $850=($849|0)==0;
      if ($850) {
       var $853=$846;
      } else {
       _free($849);
       var $_pre=HEAP32[(($841)>>2)];
       var $853=$_pre;
      }
      var $853;
      var $854=((($i_091)+(1))|0);
      var $855=($854>>>0)<($853>>>0);
      if ($855) {
       var $i_091=$854;var $846=$853;
      } else {
       break;
      }
     }
    }
    var $856=(($block+28)|0);
    var $857=$856;
    var $858=HEAP32[(($857)>>2)];
    var $859=($858|0)==0;
    if ($859) {
     label = 4101;
     break L5267;
    }
    var $861=$858;
    _free($861);
    label = 4101;
    break L5267;
    break;
   }
   case 5: {
    var $863=(($block+164)|0);
    var $864=HEAP32[(($863)>>2)];
    var $865=($864|0)==0;
    if (!($865)) {
     var $866=(($block+168)|0);
     var $i_194=0;var $867=$864;
     while(1) {
      var $867;
      var $i_194;
      var $868=HEAP32[(($866)>>2)];
      var $869=(($868+($i_194<<5)+24)|0);
      var $870=HEAP32[(($869)>>2)];
      var $871=($870|0)==0;
      if ($871) {
       var $875=$867;
      } else {
       var $873=$870;
       _free($873);
       var $_pre121=HEAP32[(($863)>>2)];
       var $875=$_pre121;
      }
      var $875;
      var $876=((($i_194)+(1))|0);
      var $877=($876>>>0)<($875>>>0);
      if ($877) {
       var $i_194=$876;var $867=$875;
      } else {
       break;
      }
     }
    }
    var $878=(($block+168)|0);
    var $879=HEAP32[(($878)>>2)];
    var $880=($879|0)==0;
    if ($880) {
     label = 4101;
     break L5267;
    }
    var $882=$879;
    _free($882);
    label = 4101;
    break L5267;
    break;
   }
   case 6: {
    var $884=(($block+20)|0);
    var $885=$884;
    var $886=HEAP32[(($885)>>2)];
    var $887=($886|0)==0;
    if (!($887)) {
     _free($886);
    }
    var $889=(($block+24)|0);
    var $890=$889;
    var $891=HEAP32[(($890)>>2)];
    var $892=($891|0)==0;
    if (!($892)) {
     _free($891);
    }
    var $894=(($block+48)|0);
    var $895=$894;
    var $896=HEAP32[(($895)>>2)];
    var $897=($896|0)==0;
    if ($897) {
     label = 4101;
     break L5267;
    }
    _free($896);
    label = 4101;
    break L5267;
    break;
   }
   case 1: {
    label = 4101;
    break L5267;
    break;
   }
   default: {
    var $900=(($block+16)|0);
    var $901=$900;
    var $902=HEAP32[(($901)>>2)];
    var $903=($902|0)==0;
    if ($903) {
     label = 4101;
     break L5267;
    }
    _free($902);
    label = 4101;
    break L5267;
   }
   }
  }
 } while(0);
 do {
  if (label == 4101) {
   if ($10) {
    break;
   } else {
    var $_0=1;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $906=HEAP32[(($1)>>2)];
 var $907=(($906+6128)|0);
 var $908=(($906+8)|0);
 var $909=HEAP32[(($908)>>2)];
 var $910=($909|0)==0;
 do {
  if ($910) {
   label = 4106;
  } else {
   var $912=(($906+52)|0);
   var $913=HEAP32[(($912)>>2)];
   var $914=FUNCTION_TABLE[$909]($decoder,$907,$913);
   var $915=($914|0)==0;
   if (!($915)) {
    label = 4106;
    break;
   }
   var $917=HEAP32[(($1)>>2)];
   var $918=(($917+60)|0);
   var $919=HEAP32[(($918)>>2)];
   var $920=_FLAC__bitreader_is_consumed_byte_aligned($919);
   var $921=($920|0)==0;
   if ($921) {
    label = 4106;
    break;
   }
   var $922=HEAP32[(($1)>>2)];
   var $923=(($922+60)|0);
   var $924=HEAP32[(($923)>>2)];
   var $925=_FLAC__bitreader_get_input_bits_unconsumed($924);
   var $926=$925>>>3;
   var $927$0=$926;
   var $927$1=0;
   var $ld$8$0=(($907)|0);
   var $928$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($907+4)|0);
   var $928$1=HEAP32[(($ld$9$1)>>2)];
   var $929$0=_i64Subtract($928$0,$928$1,$927$0,$927$1);var $929$1=tempRet0;
   var $st$10$0=(($907)|0);
   HEAP32[(($st$10$0)>>2)]=$929$0;
   var $st$11$1=(($907+4)|0);
   HEAP32[(($st$11$1)>>2)]=$929$1;
  }
 } while(0);
 if (label == 4106) {
  var $930=HEAP32[(($1)>>2)];
  var $931=(($930+6128)|0);
  var $$etemp$12$0=0;
  var $$etemp$12$1=0;
  var $st$13$0=(($931)|0);
  HEAP32[(($st$13$0)>>2)]=$$etemp$12$0;
  var $st$14$1=(($931+4)|0);
  HEAP32[(($st$14$1)>>2)]=$$etemp$12$1;
 }
 var $933=(($decoder)|0);
 var $934=HEAP32[(($933)>>2)];
 var $935=(($934)|0);
 HEAP32[(($935)>>2)]=2;
 var $_0=1;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _frame_sync_($decoder){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $x=sp;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+248)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 do {
  if (!($5)) {
   var $6=(($2+304)|0);
   var $7=$6;
   var $ld$0$0=(($7)|0);
   var $8$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($7+4)|0);
   var $8$1=HEAP32[(($ld$1$1)>>2)];
   var $$etemp$2$0=0;
   var $$etemp$2$1=0;
   var $9=(($8$0|0) == ($$etemp$2$0|0)) & (($8$1|0) == ($$etemp$2$1|0));
   if ($9) {
    break;
   }
   var $10=(($2+240)|0);
   var $ld$3$0=(($10)|0);
   var $11$0=HEAP32[(($ld$3$0)>>2)];
   var $ld$4$1=(($10+4)|0);
   var $11$1=HEAP32[(($ld$4$1)>>2)];
   var $12=(($11$1>>>0) < ($8$1>>>0)) | (((($11$1>>>0) == ($8$1>>>0) & ($11$0>>>0) <  ($8$0>>>0))));
   if ($12) {
    break;
   }
   var $14=(($decoder)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|0);
   HEAP32[(($16)>>2)]=4;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $17=(($2+60)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=_FLAC__bitreader_is_consumed_byte_aligned($18);
 var $20=($19|0)==0;
 do {
  if ($20) {
   var $22=HEAP32[(($1)>>2)];
   var $23=(($22+60)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=_FLAC__bitreader_bits_left_for_byte_alignment($24);
   var $26=_FLAC__bitreader_read_raw_uint32($24,$x,$25);
   var $27=($26|0)==0;
   if ($27) {
    var $_0=0;
   } else {
    var $first_0=1;
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $first_0=1;
  }
 } while(0);
 L5596: while(1) {
  var $first_0;
  var $28=HEAP32[(($1)>>2)];
  var $29=(($28+3520)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=($30|0)==0;
  if ($31) {
   var $37=(($28+60)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=_FLAC__bitreader_read_raw_uint32($38,$x,8);
   var $40=($39|0)==0;
   if ($40) {
    var $_0=0;
    label = 4200;
    break;
   }
  } else {
   var $33=(($28+3582)|0);
   var $34=HEAP8[($33)];
   var $35=($34&255);
   HEAP32[(($x)>>2)]=$35;
   HEAP32[(($29)>>2)]=0;
  }
  var $42=HEAP32[(($x)>>2)];
  var $43=($42|0)==255;
  do {
   if ($43) {
    var $45=HEAP32[(($1)>>2)];
    var $46=(($45+3580)|0);
    HEAP8[($46)]=-1;
    var $47=HEAP32[(($1)>>2)];
    var $48=(($47+60)|0);
    var $49=HEAP32[(($48)>>2)];
    var $50=_FLAC__bitreader_read_raw_uint32($49,$x,8);
    var $51=($50|0)==0;
    if ($51) {
     var $_0=0;
     label = 4198;
     break L5596;
    }
    var $53=HEAP32[(($x)>>2)];
    var $54=($53|0)==255;
    if ($54) {
     var $56=HEAP32[(($1)>>2)];
     var $57=(($56+3582)|0);
     HEAP8[($57)]=-1;
     var $58=HEAP32[(($1)>>2)];
     var $59=(($58+3520)|0);
     HEAP32[(($59)>>2)]=1;
     break;
    } else {
     var $_mask=$53&-2;
     var $61=($_mask|0)==248;
     if ($61) {
      label = 4192;
      break L5596;
     } else {
      break;
     }
    }
   }
  } while(0);
  var $70=($first_0|0)==0;
  if ($70) {
   var $first_0=0;
   continue;
  }
  var $72=HEAP32[(($1)>>2)];
  var $73=(($72+3624)|0);
  var $74=HEAP32[(($73)>>2)];
  var $75=($74|0)==0;
  if (!($75)) {
   var $first_0=0;
   continue;
  }
  var $77=(($72+28)|0);
  var $78=HEAP32[(($77)>>2)];
  var $79=(($72+52)|0);
  var $80=HEAP32[(($79)>>2)];
  FUNCTION_TABLE[$78]($decoder,0,$80);
  var $first_0=0;
 }
 if (label == 4192) {
  var $63=(($53)&255);
  var $64=HEAP32[(($1)>>2)];
  var $65=(($64+3581)|0);
  HEAP8[($65)]=$63;
  var $66=(($decoder)|0);
  var $67=HEAP32[(($66)>>2)];
  var $68=(($67)|0);
  HEAP32[(($68)>>2)]=3;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4200) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4198) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _read_frame_($decoder,$got_a_frame,$do_full_decode){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+168)|0;
 var $newbuffer_i=sp;
 var $zero_i=(sp)+(32);
 var $i32_i53_i=(sp)+(40);
 var $u32_i54_i=(sp)+(48);
 var $i32_i_i=(sp)+(56);
 var $u32_i_i=(sp)+(64);
 var $x_i43_i=(sp)+(72);
 var $x_i_i=(sp)+(80);
 var $x_i100=(sp)+(88);
 var $u_i=(sp)+(96);
 var $x_i=(sp)+(104);
 var $xx_i=(sp)+(112);
 var $raw_header_i=(sp)+(120);
 var $raw_header_len_i=(sp)+(136);
 var $_x_i=(sp)+(144);
 var $_x1_i=(sp)+(152);
 var $x=(sp)+(160);
 HEAP32[(($got_a_frame)>>2)]=0;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+3580)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 var $6=((8360+($5<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7<<8;
 var $9=$7>>>8;
 var $10=(($2+3581)|0);
 var $11=HEAP8[($10)];
 var $12=($11&255);
 var $13=$12^$9;
 var $14=((8360+($13<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15^$8;
 var $17=(($2+60)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($16)&65535);
 _FLAC__bitreader_reset_read_crc16($18,$19);
 var $20=$x_i;
 var $21=$xx_i;
 var $22=(($raw_header_i)|0);
 var $23=$raw_header_len_i;
 var $24=$_x_i;
 var $25=$_x1_i;
 var $26=HEAP32[(($1)>>2)];
 var $27=(($26+3580)|0);
 var $28=HEAP8[($27)];
 HEAP8[($22)]=$28;
 var $29=(($26+3581)|0);
 var $30=HEAP8[($29)];
 var $31=(($raw_header_i+1)|0);
 HEAP8[($31)]=$30;
 HEAP32[(($raw_header_len_i)>>2)]=2;
 var $32=($30&255)>>>1;
 var $_lobit_i=$32&1;
 var $__i=($_lobit_i&255);
 var $33=(($26+60)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=_FLAC__bitreader_read_raw_uint32($34,$x_i,8);
 var $36=($35|0)==0;
 if ($36) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $38=HEAP32[(($x_i)>>2)];
 var $39=($38|0)==255;
 var $40=(($38)&255);
 L5620: do {
  if ($39) {
   var $_lcssa_i=$40;
   label = 4204;
  } else {
   HEAP32[(($raw_header_len_i)>>2)]=3;
   var $59=(($raw_header_i+2)|0);
   HEAP8[($59)]=$40;
   var $60=HEAP32[(($1)>>2)];
   var $61=(($60+60)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=_FLAC__bitreader_read_raw_uint32($62,$x_i,8);
   var $64=($63|0)==0;
   if ($64) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $466=HEAP32[(($x_i)>>2)];
   var $467=($466|0)==255;
   var $468=(($466)&255);
   if ($467) {
    var $_lcssa_i=$468;
    label = 4204;
    break;
   }
   HEAP32[(($raw_header_len_i)>>2)]=4;
   var $470=(($raw_header_i+3)|0);
   HEAP8[($470)]=$468;
   var $471=$38>>>4;
   var $472=$471&15;
   HEAP32[(($x_i)>>2)]=$472;
   switch (($472|0)) {
   case 0: {
    var $is_unparseable_1_i=1;var $blocksize_hint_0_i=0;
    break;
   }
   case 2:case 3:case 4:case 5: {
    var $70=((($472)-(2))|0);
    var $71=576<<$70;
    var $72=HEAP32[(($1)>>2)];
    var $73=(($72+1136)|0);
    HEAP32[(($73)>>2)]=$71;
    var $is_unparseable_1_i=$__i;var $blocksize_hint_0_i=0;
    break;
   }
   case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15: {
    var $76=((($472)-(8))|0);
    var $77=256<<$76;
    var $78=HEAP32[(($1)>>2)];
    var $79=(($78+1136)|0);
    HEAP32[(($79)>>2)]=$77;
    var $is_unparseable_1_i=$__i;var $blocksize_hint_0_i=0;
    break;
   }
   case 6:case 7: {
    var $is_unparseable_1_i=$__i;var $blocksize_hint_0_i=$472;
    break;
   }
   case 1: {
    var $67=HEAP32[(($1)>>2)];
    var $68=(($67+1136)|0);
    HEAP32[(($68)>>2)]=192;
    var $is_unparseable_1_i=$__i;var $blocksize_hint_0_i=0;
    break;
   }
   default: {
    var $is_unparseable_1_i=$__i;var $blocksize_hint_0_i=0;
   }
   }
   var $blocksize_hint_0_i;
   var $is_unparseable_1_i;
   var $81=HEAP8[($59)];
   var $82=($81&255);
   var $83=$82&15;
   HEAP32[(($x_i)>>2)]=$83;
   L5633: do {
    switch (($83|0)) {
    case 3: {
     var $101=HEAP32[(($1)>>2)];
     var $102=(($101+1140)|0);
     HEAP32[(($102)>>2)]=192000;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 5: {
     var $107=HEAP32[(($1)>>2)];
     var $108=(($107+1140)|0);
     HEAP32[(($108)>>2)]=16000;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 6: {
     var $110=HEAP32[(($1)>>2)];
     var $111=(($110+1140)|0);
     HEAP32[(($111)>>2)]=22050;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 12:case 13:case 14: {
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=$83;
     break;
    }
    case 1: {
     var $95=HEAP32[(($1)>>2)];
     var $96=(($95+1140)|0);
     HEAP32[(($96)>>2)]=88200;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 2: {
     var $98=HEAP32[(($1)>>2)];
     var $99=(($98+1140)|0);
     HEAP32[(($99)>>2)]=176400;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 0: {
     var $85=HEAP32[(($1)>>2)];
     var $86=(($85+248)|0);
     var $87=HEAP32[(($86)>>2)];
     var $88=($87|0)==0;
     if ($88) {
      var $is_unparseable_2_i=1;var $sample_rate_hint_0_i=0;
      break L5633;
     }
     var $90=(($85+288)|0);
     var $91=$90;
     var $92=HEAP32[(($91)>>2)];
     var $93=(($85+1140)|0);
     HEAP32[(($93)>>2)]=$92;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 4: {
     var $104=HEAP32[(($1)>>2)];
     var $105=(($104+1140)|0);
     HEAP32[(($105)>>2)]=8000;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 8: {
     var $116=HEAP32[(($1)>>2)];
     var $117=(($116+1140)|0);
     HEAP32[(($117)>>2)]=32000;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 11: {
     var $125=HEAP32[(($1)>>2)];
     var $126=(($125+1140)|0);
     HEAP32[(($126)>>2)]=96000;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 15: {
     var $129=HEAP32[(($1)>>2)];
     var $130=(($129+3624)|0);
     var $131=HEAP32[(($130)>>2)];
     var $132=($131|0)==0;
     if ($132) {
      var $134=(($129+28)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($129+52)|0);
      var $137=HEAP32[(($136)>>2)];
      FUNCTION_TABLE[$135]($decoder,1,$137);
     }
     var $138=(($decoder)|0);
     var $139=HEAP32[(($138)>>2)];
     var $140=(($139)|0);
     HEAP32[(($140)>>2)]=2;
     var $_pre_phi=$138;
     break L5620;
     break;
    }
    case 7: {
     var $113=HEAP32[(($1)>>2)];
     var $114=(($113+1140)|0);
     HEAP32[(($114)>>2)]=24000;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 10: {
     var $122=HEAP32[(($1)>>2)];
     var $123=(($122+1140)|0);
     HEAP32[(($123)>>2)]=48000;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    case 9: {
     var $119=HEAP32[(($1)>>2)];
     var $120=(($119+1140)|0);
     HEAP32[(($120)>>2)]=44100;
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
     break;
    }
    default: {
     var $is_unparseable_2_i=$is_unparseable_1_i;var $sample_rate_hint_0_i=0;
    }
    }
   } while(0);
   var $sample_rate_hint_0_i;
   var $is_unparseable_2_i;
   var $141=HEAP8[($470)];
   var $142=($141&255);
   var $143=$142>>>4;
   HEAP32[(($x_i)>>2)]=$143;
   var $144=$143&8;
   var $145=($144|0)==0;
   do {
    if ($145) {
     var $161=((($143)+(1))|0);
     var $162=HEAP32[(($1)>>2)];
     var $163=(($162+1144)|0);
     HEAP32[(($163)>>2)]=$161;
     var $164=HEAP32[(($1)>>2)];
     var $165=(($164+1148)|0);
     HEAP32[(($165)>>2)]=0;
     var $is_unparseable_3_i=$is_unparseable_2_i;
    } else {
     var $147=HEAP32[(($1)>>2)];
     var $148=(($147+1144)|0);
     HEAP32[(($148)>>2)]=2;
     var $149=HEAP32[(($x_i)>>2)];
     var $150=$149&7;
     if (($150|0)==1) {
      var $155=HEAP32[(($1)>>2)];
      var $156=(($155+1148)|0);
      HEAP32[(($156)>>2)]=2;
      var $is_unparseable_3_i=$is_unparseable_2_i;
      break;
     } else if (($150|0)==2) {
      var $158=HEAP32[(($1)>>2)];
      var $159=(($158+1148)|0);
      HEAP32[(($159)>>2)]=3;
      var $is_unparseable_3_i=$is_unparseable_2_i;
      break;
     } else if (($150|0)==0) {
      var $152=HEAP32[(($1)>>2)];
      var $153=(($152+1148)|0);
      HEAP32[(($153)>>2)]=1;
      var $is_unparseable_3_i=$is_unparseable_2_i;
      break;
     } else {
      var $is_unparseable_3_i=1;
      break;
     }
    }
   } while(0);
   var $is_unparseable_3_i;
   var $167=HEAP8[($470)];
   var $168=($167&255);
   var $169=$168>>>1;
   var $170=$169&7;
   HEAP32[(($x_i)>>2)]=$170;
   L5661: do {
    switch (($170|0)) {
    case 4: {
     var $188=HEAP32[(($1)>>2)];
     var $189=(($188+1152)|0);
     HEAP32[(($189)>>2)]=16;
     var $is_unparseable_4_i=$is_unparseable_3_i;
     break;
    }
    case 5: {
     var $191=HEAP32[(($1)>>2)];
     var $192=(($191+1152)|0);
     HEAP32[(($192)>>2)]=20;
     var $is_unparseable_4_i=$is_unparseable_3_i;
     break;
    }
    case 1: {
     var $182=HEAP32[(($1)>>2)];
     var $183=(($182+1152)|0);
     HEAP32[(($183)>>2)]=8;
     var $is_unparseable_4_i=$is_unparseable_3_i;
     break;
    }
    case 0: {
     var $172=HEAP32[(($1)>>2)];
     var $173=(($172+248)|0);
     var $174=HEAP32[(($173)>>2)];
     var $175=($174|0)==0;
     if ($175) {
      var $is_unparseable_4_i=1;
      break L5661;
     }
     var $177=(($172+296)|0);
     var $178=$177;
     var $179=HEAP32[(($178)>>2)];
     var $180=(($172+1152)|0);
     HEAP32[(($180)>>2)]=$179;
     var $is_unparseable_4_i=$is_unparseable_3_i;
     break;
    }
    case 3:case 7: {
     var $is_unparseable_4_i=1;
     break;
    }
    case 6: {
     var $194=HEAP32[(($1)>>2)];
     var $195=(($194+1152)|0);
     HEAP32[(($195)>>2)]=24;
     var $is_unparseable_4_i=$is_unparseable_3_i;
     break;
    }
    case 2: {
     var $185=HEAP32[(($1)>>2)];
     var $186=(($185+1152)|0);
     HEAP32[(($186)>>2)]=12;
     var $is_unparseable_4_i=$is_unparseable_3_i;
     break;
    }
    default: {
     var $is_unparseable_4_i=$is_unparseable_3_i;
    }
    }
   } while(0);
   var $is_unparseable_4_i;
   var $197=HEAP8[($470)];
   var $198=$197&1;
   var $199=(($198<<24)>>24)==0;
   var $200=HEAP8[($31)];
   var $201=$200&1;
   var $202=(($201<<24)>>24)==0;
   var $203=HEAP32[(($1)>>2)];
   do {
    if ($202) {
     var $205=(($203+248)|0);
     var $206=HEAP32[(($205)>>2)];
     var $207=($206|0)==0;
     if (!($207)) {
      var $209=(($203+272)|0);
      var $210=$209;
      var $211=HEAP32[(($210)>>2)];
      var $212=(($203+276)|0);
      var $213=$212;
      var $214=HEAP32[(($213)>>2)];
      var $215=($211|0)==($214|0);
      if (!($215)) {
       label = 4249;
       break;
      }
     }
     var $251=(($203+60)|0);
     var $252=HEAP32[(($251)>>2)];
     var $253=_FLAC__bitreader_read_utf8_uint32($252,$x_i,$22,$raw_header_len_i);
     var $254=($253|0)==0;
     if ($254) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $256=HEAP32[(($x_i)>>2)];
     var $257=($256|0)==-1;
     if (!($257)) {
      var $280=HEAP32[(($1)>>2)];
      var $281=(($280+1156)|0);
      HEAP32[(($281)>>2)]=0;
      var $282=HEAP32[(($x_i)>>2)];
      var $283=HEAP32[(($1)>>2)];
      var $284=(($283+1160)|0);
      var $285=$284;
      HEAP32[(($285)>>2)]=$282;
      break;
     }
     var $259=HEAP32[(($raw_header_len_i)>>2)];
     var $260=((($259)-(1))|0);
     var $261=(($raw_header_i+$260)|0);
     var $262=HEAP8[($261)];
     var $263=HEAP32[(($1)>>2)];
     var $264=(($263+3582)|0);
     HEAP8[($264)]=$262;
     var $265=HEAP32[(($1)>>2)];
     var $266=(($265+3520)|0);
     HEAP32[(($266)>>2)]=1;
     var $267=HEAP32[(($1)>>2)];
     var $268=(($267+3624)|0);
     var $269=HEAP32[(($268)>>2)];
     var $270=($269|0)==0;
     if ($270) {
      var $272=(($267+28)|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=(($267+52)|0);
      var $275=HEAP32[(($274)>>2)];
      FUNCTION_TABLE[$273]($decoder,1,$275);
     }
     var $276=(($decoder)|0);
     var $277=HEAP32[(($276)>>2)];
     var $278=(($277)|0);
     HEAP32[(($278)>>2)]=2;
     var $_pre_phi=$276;
     break L5620;
    } else {
     label = 4249;
    }
   } while(0);
   do {
    if (label == 4249) {
     var $216=(($203+60)|0);
     var $217=HEAP32[(($216)>>2)];
     var $218=_FLAC__bitreader_read_utf8_uint64($217,$xx_i,$22,$raw_header_len_i);
     var $219=($218|0)==0;
     if ($219) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $ld$0$0=(($xx_i)|0);
     var $221$0=HEAP32[(($ld$0$0)>>2)];
     var $ld$1$1=(($xx_i+4)|0);
     var $221$1=HEAP32[(($ld$1$1)>>2)];
     var $$etemp$2$0=-1;
     var $$etemp$2$1=-1;
     var $222=(($221$0|0) == ($$etemp$2$0|0)) & (($221$1|0) == ($$etemp$2$1|0));
     if (!($222)) {
      var $245=HEAP32[(($1)>>2)];
      var $246=(($245+1156)|0);
      HEAP32[(($246)>>2)]=1;
      var $ld$3$0=(($xx_i)|0);
      var $247$0=HEAP32[(($ld$3$0)>>2)];
      var $ld$4$1=(($xx_i+4)|0);
      var $247$1=HEAP32[(($ld$4$1)>>2)];
      var $248=HEAP32[(($1)>>2)];
      var $249=(($248+1160)|0);
      var $st$5$0=(($249)|0);
      HEAP32[(($st$5$0)>>2)]=$247$0;
      var $st$6$1=(($249+4)|0);
      HEAP32[(($st$6$1)>>2)]=$247$1;
      break;
     }
     var $224=HEAP32[(($raw_header_len_i)>>2)];
     var $225=((($224)-(1))|0);
     var $226=(($raw_header_i+$225)|0);
     var $227=HEAP8[($226)];
     var $228=HEAP32[(($1)>>2)];
     var $229=(($228+3582)|0);
     HEAP8[($229)]=$227;
     var $230=HEAP32[(($1)>>2)];
     var $231=(($230+3520)|0);
     HEAP32[(($231)>>2)]=1;
     var $232=HEAP32[(($1)>>2)];
     var $233=(($232+3624)|0);
     var $234=HEAP32[(($233)>>2)];
     var $235=($234|0)==0;
     if ($235) {
      var $237=(($232+28)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=(($232+52)|0);
      var $240=HEAP32[(($239)>>2)];
      FUNCTION_TABLE[$238]($decoder,1,$240);
     }
     var $241=(($decoder)|0);
     var $242=HEAP32[(($241)>>2)];
     var $243=(($242)|0);
     HEAP32[(($243)>>2)]=2;
     var $_pre_phi=$241;
     break L5620;
    }
   } while(0);
   var $287=($blocksize_hint_0_i|0)==0;
   if (!($287)) {
    var $289=HEAP32[(($1)>>2)];
    var $290=(($289+60)|0);
    var $291=HEAP32[(($290)>>2)];
    var $292=_FLAC__bitreader_read_raw_uint32($291,$x_i,8);
    var $293=($292|0)==0;
    if ($293) {
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
    }
    var $295=HEAP32[(($x_i)>>2)];
    var $296=(($295)&255);
    var $297=HEAP32[(($raw_header_len_i)>>2)];
    var $298=((($297)+(1))|0);
    HEAP32[(($raw_header_len_i)>>2)]=$298;
    var $299=(($raw_header_i+$297)|0);
    HEAP8[($299)]=$296;
    var $300=($blocksize_hint_0_i|0)==7;
    do {
     if ($300) {
      var $302=HEAP32[(($1)>>2)];
      var $303=(($302+60)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=_FLAC__bitreader_read_raw_uint32($304,$_x_i,8);
      var $306=($305|0)==0;
      if ($306) {
       var $_0=0;
       var $_0;
       STACKTOP=sp;return $_0;
      } else {
       var $308=HEAP32[(($_x_i)>>2)];
       var $309=(($308)&255);
       var $310=HEAP32[(($raw_header_len_i)>>2)];
       var $311=((($310)+(1))|0);
       HEAP32[(($raw_header_len_i)>>2)]=$311;
       var $312=(($raw_header_i+$310)|0);
       HEAP8[($312)]=$309;
       var $313=HEAP32[(($x_i)>>2)];
       var $314=$313<<8;
       var $315=$314|$308;
       HEAP32[(($x_i)>>2)]=$315;
       var $317=$315;
       break;
      }
     } else {
      var $317=$295;
     }
    } while(0);
    var $317;
    var $318=((($317)+(1))|0);
    var $319=HEAP32[(($1)>>2)];
    var $320=(($319+1136)|0);
    HEAP32[(($320)>>2)]=$318;
   }
   var $322=($sample_rate_hint_0_i|0)==0;
   do {
    if (!($322)) {
     var $324=HEAP32[(($1)>>2)];
     var $325=(($324+60)|0);
     var $326=HEAP32[(($325)>>2)];
     var $327=_FLAC__bitreader_read_raw_uint32($326,$x_i,8);
     var $328=($327|0)==0;
     if ($328) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $330=HEAP32[(($x_i)>>2)];
     var $331=(($330)&255);
     var $332=HEAP32[(($raw_header_len_i)>>2)];
     var $333=((($332)+(1))|0);
     HEAP32[(($raw_header_len_i)>>2)]=$333;
     var $334=(($raw_header_i+$332)|0);
     HEAP8[($334)]=$331;
     var $cond_i=($sample_rate_hint_0_i|0)==12;
     if ($cond_i) {
      var $342=((($330)*(1000))&-1);
      var $343=HEAP32[(($1)>>2)];
      var $344=(($343+1140)|0);
      HEAP32[(($344)>>2)]=$342;
      break;
     }
     var $336=HEAP32[(($1)>>2)];
     var $337=(($336+60)|0);
     var $338=HEAP32[(($337)>>2)];
     var $339=_FLAC__bitreader_read_raw_uint32($338,$_x1_i,8);
     var $340=($339|0)==0;
     if ($340) {
      var $_0=0;
      var $_0;
      STACKTOP=sp;return $_0;
     }
     var $346=HEAP32[(($_x1_i)>>2)];
     var $347=(($346)&255);
     var $348=HEAP32[(($raw_header_len_i)>>2)];
     var $349=((($348)+(1))|0);
     HEAP32[(($raw_header_len_i)>>2)]=$349;
     var $350=(($raw_header_i+$348)|0);
     HEAP8[($350)]=$347;
     var $351=HEAP32[(($x_i)>>2)];
     var $352=$351<<8;
     var $353=$352|$346;
     HEAP32[(($x_i)>>2)]=$353;
     var $354=($sample_rate_hint_0_i|0)==13;
     if ($354) {
      var $356=HEAP32[(($1)>>2)];
      var $357=(($356+1140)|0);
      HEAP32[(($357)>>2)]=$353;
      break;
     } else {
      var $359=((($353)*(10))&-1);
      var $360=HEAP32[(($1)>>2)];
      var $361=(($360+1140)|0);
      HEAP32[(($361)>>2)]=$359;
      break;
     }
    }
   } while(0);
   var $363=HEAP32[(($1)>>2)];
   var $364=(($363+60)|0);
   var $365=HEAP32[(($364)>>2)];
   var $366=_FLAC__bitreader_read_raw_uint32($365,$x_i,8);
   var $367=($366|0)==0;
   if ($367) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $369=HEAP32[(($x_i)>>2)];
   var $370=HEAP32[(($raw_header_len_i)>>2)];
   var $371=_FLAC__crc8($22,$370);
   var $372=(($369)&255);
   var $373=(($371<<24)>>24)==(($372<<24)>>24);
   var $374=HEAP32[(($1)>>2)];
   if (!($373)) {
    var $376=(($374+3624)|0);
    var $377=HEAP32[(($376)>>2)];
    var $378=($377|0)==0;
    if ($378) {
     var $380=(($374+28)|0);
     var $381=HEAP32[(($380)>>2)];
     var $382=(($374+52)|0);
     var $383=HEAP32[(($382)>>2)];
     FUNCTION_TABLE[$381]($decoder,1,$383);
    }
    var $384=(($decoder)|0);
    var $385=HEAP32[(($384)>>2)];
    var $386=(($385)|0);
    HEAP32[(($386)>>2)]=2;
    var $_pre_phi=$384;
    break;
   }
   var $388=(($374+236)|0);
   HEAP32[(($388)>>2)]=0;
   var $389=HEAP32[(($1)>>2)];
   var $390=(($389+1156)|0);
   var $391=HEAP32[(($390)>>2)];
   var $392=($391|0)==0;
   do {
    if ($392) {
     var $394=(($389+1160)|0);
     var $395=$394;
     var $396=HEAP32[(($395)>>2)];
     HEAP32[(($x_i)>>2)]=$396;
     HEAP32[(($390)>>2)]=1;
     var $397=HEAP32[(($1)>>2)];
     var $398=(($397+232)|0);
     var $399=HEAP32[(($398)>>2)];
     var $400=($399|0)==0;
     if (!($400)) {
      var $402$0=$399;
      var $402$1=0;
      var $403=HEAP32[(($x_i)>>2)];
      var $404$0=$403;
      var $404$1=0;
      var $405$0=___muldi3($404$0,$404$1,$402$0,$402$1);var $405$1=tempRet0;
      var $406=(($397+1160)|0);
      var $st$7$0=(($406)|0);
      HEAP32[(($st$7$0)>>2)]=$405$0;
      var $st$8$1=(($406+4)|0);
      HEAP32[(($st$8$1)>>2)]=$405$1;
      label = 4289;
      break;
     }
     var $408=(($397+248)|0);
     var $409=HEAP32[(($408)>>2)];
     var $410=($409|0)==0;
     if (!($410)) {
      var $412=(($397+272)|0);
      var $413=$412;
      var $414=HEAP32[(($413)>>2)];
      var $415=(($397+276)|0);
      var $416=$415;
      var $417=HEAP32[(($416)>>2)];
      var $418=($414|0)==($417|0);
      if (!($418)) {
       var $449=$397;
       break;
      }
      var $420$0=$414;
      var $420$1=0;
      var $421=HEAP32[(($x_i)>>2)];
      var $422$0=$421;
      var $422$1=0;
      var $423$0=___muldi3($422$0,$422$1,$420$0,$420$1);var $423$1=tempRet0;
      var $424=(($397+1160)|0);
      var $st$9$0=(($424)|0);
      HEAP32[(($st$9$0)>>2)]=$423$0;
      var $st$10$1=(($424+4)|0);
      HEAP32[(($st$10$1)>>2)]=$423$1;
      var $425=HEAP32[(($1)>>2)];
      var $426=(($425+276)|0);
      var $427=$426;
      var $428=HEAP32[(($427)>>2)];
      var $429=(($425+236)|0);
      HEAP32[(($429)>>2)]=$428;
      label = 4289;
      break;
     }
     var $431=HEAP32[(($x_i)>>2)];
     var $432=($431|0)==0;
     if ($432) {
      var $434=(($397+1160)|0);
      var $$etemp$11$0=0;
      var $$etemp$11$1=0;
      var $st$12$0=(($434)|0);
      HEAP32[(($st$12$0)>>2)]=$$etemp$11$0;
      var $st$13$1=(($434+4)|0);
      HEAP32[(($st$13$1)>>2)]=$$etemp$11$1;
      var $435=HEAP32[(($1)>>2)];
      var $436=(($435+1136)|0);
      var $437=HEAP32[(($436)>>2)];
      var $438=(($435+236)|0);
      HEAP32[(($438)>>2)]=$437;
      label = 4289;
      break;
     } else {
      var $440=(($397+1136)|0);
      var $441=HEAP32[(($440)>>2)];
      var $442$0=$441;
      var $442$1=0;
      var $443$0=$431;
      var $443$1=0;
      var $444$0=___muldi3($442$0,$442$1,$443$0,$443$1);var $444$1=tempRet0;
      var $445=(($397+1160)|0);
      var $st$14$0=(($445)|0);
      HEAP32[(($st$14$0)>>2)]=$444$0;
      var $st$15$1=(($445+4)|0);
      HEAP32[(($st$15$1)>>2)]=$444$1;
      label = 4289;
      break;
     }
    } else {
     label = 4289;
    }
   } while(0);
   do {
    if (label == 4289) {
     var $447=($is_unparseable_4_i|0)==0;
     var $448=$199&$447;
     if ($448) {
      var $_pre160=(($decoder)|0);
      var $_pre_phi=$_pre160;
      break L5620;
     } else {
      var $_pre_i=HEAP32[(($1)>>2)];
      var $449=$_pre_i;
      break;
     }
    }
   } while(0);
   var $449;
   var $450=(($449+3624)|0);
   var $451=HEAP32[(($450)>>2)];
   var $452=($451|0)==0;
   if ($452) {
    var $454=(($449+28)|0);
    var $455=HEAP32[(($454)>>2)];
    var $456=(($449+52)|0);
    var $457=HEAP32[(($456)>>2)];
    FUNCTION_TABLE[$455]($decoder,3,$457);
   } else {
    var $459=(($449+6144)|0);
    var $460=HEAP32[(($459)>>2)];
    var $461=((($460)+(1))|0);
    HEAP32[(($459)>>2)]=$461;
   }
   var $462=(($decoder)|0);
   var $463=HEAP32[(($462)>>2)];
   var $464=(($463)|0);
   HEAP32[(($464)>>2)]=2;
   var $_pre_phi=$462;
  }
 } while(0);
 if (label == 4204) {
  var $_lcssa_i;
  var $42=HEAP32[(($1)>>2)];
  var $43=(($42+3582)|0);
  HEAP8[($43)]=$_lcssa_i;
  var $44=HEAP32[(($1)>>2)];
  var $45=(($44+3520)|0);
  HEAP32[(($45)>>2)]=1;
  var $46=HEAP32[(($1)>>2)];
  var $47=(($46+3624)|0);
  var $48=HEAP32[(($47)>>2)];
  var $49=($48|0)==0;
  if ($49) {
   var $51=(($46+28)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($46+52)|0);
   var $54=HEAP32[(($53)>>2)];
   FUNCTION_TABLE[$52]($decoder,1,$54);
  }
  var $55=(($decoder)|0);
  var $56=HEAP32[(($55)>>2)];
  var $57=(($56)|0);
  HEAP32[(($57)>>2)]=2;
  var $_pre_phi=$55;
 }
 var $_pre_phi;
 var $473=HEAP32[(($_pre_phi)>>2)];
 var $474=(($473)|0);
 var $475=HEAP32[(($474)>>2)];
 var $476=($475|0)==2;
 if ($476) {
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $478=HEAP32[(($1)>>2)];
 var $479=(($478+1136)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=(($478+1144)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=(($478+224)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=($484>>>0)<($480>>>0);
 if ($485) {
  var $i_040_i=0;var $494=$478;
  label = 4303;
 } else {
  var $487=(($478+228)|0);
  var $488=HEAP32[(($487)>>2)];
  var $489=($488>>>0)<($482>>>0);
  if ($489) {
   var $i_040_i=0;var $494=$478;
   label = 4303;
  }
 }
 do {
  if (label == 4303) {
   while(1) {
    label = 0;
    var $494;
    var $i_040_i;
    var $495=(($494+64+($i_040_i<<2))|0);
    var $496=HEAP32[(($495)>>2)];
    var $497=($496|0)==0;
    if ($497) {
     var $504=$494;
    } else {
     var $499=((($496)-(16))|0);
     var $500=$499;
     _free($500);
     var $501=HEAP32[(($1)>>2)];
     var $502=(($501+64+($i_040_i<<2))|0);
     HEAP32[(($502)>>2)]=0;
     var $_pre_i97=HEAP32[(($1)>>2)];
     var $504=$_pre_i97;
    }
    var $504;
    var $505=(($504+3584+($i_040_i<<2))|0);
    var $506=HEAP32[(($505)>>2)];
    var $507=($506|0)==0;
    if (!($507)) {
     var $509=$506;
     _free($509);
     var $510=HEAP32[(($1)>>2)];
     var $511=(($510+96+($i_040_i<<2))|0);
     HEAP32[(($511)>>2)]=0;
     var $512=HEAP32[(($1)>>2)];
     var $513=(($512+3584+($i_040_i<<2))|0);
     HEAP32[(($513)>>2)]=0;
    }
    var $515=((($i_040_i)+(1))|0);
    var $516=($515>>>0)<8;
    if (!($516)) {
     break;
    }
    var $_pre41_i=HEAP32[(($1)>>2)];
    var $i_040_i=$515;var $494=$_pre41_i;
    label = 4303;
   }
   var $490=((($480)+(4))|0);
   var $491=($480>>>0)>4294967291;
   var $492=$490<<2;
   L5777: do {
    if ($491) {
     var $493=($482|0)==0;
     if ($493) {
      label = 4315;
     }
    } else {
     var $i_1_i=0;
     while(1) {
      var $i_1_i;
      var $517=($i_1_i>>>0)<($482>>>0);
      if (!($517)) {
       label = 4315;
       break L5777;
      }
      var $519=(((4294967295)/(($490>>>0)))&-1);
      var $520=($519>>>0)<4;
      if ($520) {
       break L5777;
      }
      var $521=_malloc($492);
      var $522=($521|0)==0;
      if ($522) {
       break L5777;
      }
      HEAP32[(($521)>>2)]=0; HEAP32[((($521)+(4))>>2)]=0; HEAP32[((($521)+(8))>>2)]=0; HEAP32[((($521)+(12))>>2)]=0;
      var $526=(($521+16)|0);
      var $527=$526;
      var $528=HEAP32[(($1)>>2)];
      var $529=(($528+64+($i_1_i<<2))|0);
      HEAP32[(($529)>>2)]=$527;
      var $530=HEAP32[(($1)>>2)];
      var $531=(($530+3584+($i_1_i<<2))|0);
      var $532=(($530+96+($i_1_i<<2))|0);
      var $533=_FLAC__memory_alloc_aligned_int32_array($480,$531,$532);
      var $534=($533|0)==0;
      var $535=((($i_1_i)+(1))|0);
      if ($534) {
       break;
      } else {
       var $i_1_i=$535;
      }
     }
     var $536=HEAP32[(($_pre_phi)>>2)];
     var $537=(($536)|0);
     HEAP32[(($537)>>2)]=8;
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
    }
   } while(0);
   if (label == 4315) {
    var $538=HEAP32[(($1)>>2)];
    var $539=(($538+224)|0);
    HEAP32[(($539)>>2)]=$480;
    var $540=HEAP32[(($1)>>2)];
    var $541=(($540+228)|0);
    HEAP32[(($541)>>2)]=$482;
    break;
   }
   var $523=HEAP32[(($_pre_phi)>>2)];
   var $524=(($523)|0);
   HEAP32[(($524)>>2)]=8;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $542=$x_i100;
 var $543=$u_i;
 var $544=$i32_i_i;
 var $545=$u32_i_i;
 var $546=HEAP32[((10488)>>2)];
 var $547=HEAP32[((10512)>>2)];
 var $548=($do_full_decode|0)==0;
 var $549=$i32_i53_i;
 var $550=$u32_i54_i;
 var $551=HEAP32[((9864)>>2)];
 var $552=1<<$551;
 var $553=((($552)-(1))|0);
 var $554=HEAP32[((9856)>>2)];
 var $555=$x_i_i;
 var $556=$x_i43_i;
 var $channel_0=0;
 L5791: while(1) {
  var $channel_0;
  var $557=HEAP32[(($1)>>2)];
  var $558=(($557+1144)|0);
  var $559=HEAP32[(($558)>>2)];
  var $560=($channel_0>>>0)<($559>>>0);
  if (!($560)) {
   label = 4405;
   break;
  }
  var $562=(($557+1152)|0);
  var $563=HEAP32[(($562)>>2)];
  var $564=(($557+1148)|0);
  var $565=HEAP32[(($564)>>2)];
  if (($565|0)==1) {
   var $567=($channel_0|0)==1;
   var $568=($567&1);
   var $_=((($563)+($568))|0);
   var $bps_0=$_;
  } else if (($565|0)==2) {
   var $570=($channel_0|0)==0;
   var $571=($570&1);
   var $_95=((($563)+($571))|0);
   var $bps_0=$_95;
  } else if (($565|0)==3) {
   var $573=($channel_0|0)==1;
   var $574=($573&1);
   var $_96=((($563)+($574))|0);
   var $bps_0=$_96;
  } else {
   var $bps_0=$563;
  }
  var $bps_0;
  var $576=(($557+60)|0);
  var $577=HEAP32[(($576)>>2)];
  var $578=_FLAC__bitreader_read_raw_uint32($577,$x_i100,8);
  var $579=($578|0)==0;
  if ($579) {
   var $_0=0;
   label = 4472;
   break;
  }
  var $581=HEAP32[(($x_i100)>>2)];
  var $582=$581&1;
  var $583=$581&254;
  HEAP32[(($x_i100)>>2)]=$583;
  var $584=($582|0)!=0;
  var $585=HEAP32[(($1)>>2)];
  if ($584) {
   var $587=(($585+60)|0);
   var $588=HEAP32[(($587)>>2)];
   var $589=_FLAC__bitreader_read_unary_unsigned($588,$u_i);
   var $590=($589|0)==0;
   if ($590) {
    var $_0=0;
    label = 4456;
    break;
   }
   var $592=HEAP32[(($u_i)>>2)];
   var $593=((($592)+(1))|0);
   var $594=HEAP32[(($1)>>2)];
   var $595=(($594+1176+((($channel_0)*(292))&-1)+288)|0);
   HEAP32[(($595)>>2)]=$593;
   var $596=HEAP32[(($1)>>2)];
   var $597=(($596+1176+((($channel_0)*(292))&-1)+288)|0);
   var $598=HEAP32[(($597)>>2)];
   var $599=((($bps_0)-($598))|0);
   var $_042_i=$599;
  } else {
   var $601=(($585+1176+((($channel_0)*(292))&-1)+288)|0);
   HEAP32[(($601)>>2)]=0;
   var $_042_i=$bps_0;
  }
  var $_042_i;
  var $603=HEAP32[(($x_i100)>>2)];
  var $604=$603&128;
  var $605=($604|0)==0;
  L5805: do {
   if ($605) {
    do {
     if (($603|0)==2) {
      var $644=HEAP32[(($1)>>2)];
      var $645=(($644+1176+((($channel_0)*(292))&-1)+4)|0);
      var $646=(($644+96+($channel_0<<2))|0);
      var $647=HEAP32[(($646)>>2)];
      var $648=(($644+1176+((($channel_0)*(292))&-1))|0);
      HEAP32[(($648)>>2)]=1;
      var $649=$645;
      var $650=(($645)|0);
      var $_c_i_i=$647;
      HEAP32[(($650)>>2)]=$_c_i_i;
      var $651=HEAP32[(($1)>>2)];
      var $652=(($651+1136)|0);
      var $653=HEAP32[(($652)>>2)];
      var $654=($653|0)==0;
      if ($654) {
       var $_lcssa_i_i=$651;var $_lcssa19_i_i=0;
      } else {
       var $i_021_i_i=0;var $655=$651;
       while(1) {
        var $655;
        var $i_021_i_i;
        var $656=(($655+60)|0);
        var $657=HEAP32[(($656)>>2)];
        var $658=_FLAC__bitreader_read_raw_int32($657,$x_i43_i,$_042_i);
        var $659=($658|0)==0;
        if ($659) {
         var $_0=0;
         label = 4448;
         break L5791;
        }
        var $661=HEAP32[(($x_i43_i)>>2)];
        var $662=(($647+($i_021_i_i<<2))|0);
        HEAP32[(($662)>>2)]=$661;
        var $663=((($i_021_i_i)+(1))|0);
        var $664=HEAP32[(($1)>>2)];
        var $665=(($664+1136)|0);
        var $666=HEAP32[(($665)>>2)];
        var $667=($663>>>0)<($666>>>0);
        if ($667) {
         var $i_021_i_i=$663;var $655=$664;
        } else {
         break;
        }
       }
       var $phitmp_i_i=$666<<2;
       var $_lcssa_i_i=$664;var $_lcssa19_i_i=$phitmp_i_i;
      }
      var $_lcssa19_i_i;
      var $_lcssa_i_i;
      if ($548) {
       break L5805;
      }
      var $670=(($_lcssa_i_i+64+($channel_0<<2))|0);
      var $671=HEAP32[(($670)>>2)];
      var $672=$671;
      var $673=HEAP32[(($649)>>2)];
      var $674=$673;
      (_memcpy($672, $674, $_lcssa19_i_i)|0);
     } else if (($603|0)==0) {
      var $620=HEAP32[(($1)>>2)];
      var $621=(($620+64+($channel_0<<2))|0);
      var $622=HEAP32[(($621)>>2)];
      var $623=(($620+1176+((($channel_0)*(292))&-1))|0);
      HEAP32[(($623)>>2)]=0;
      var $624=HEAP32[(($1)>>2)];
      var $625=(($624+60)|0);
      var $626=HEAP32[(($625)>>2)];
      var $627=_FLAC__bitreader_read_raw_int32($626,$x_i_i,$_042_i);
      var $628=($627|0)==0;
      if ($628) {
       var $_0=0;
       label = 4451;
       break L5791;
      }
      var $630=HEAP32[(($x_i_i)>>2)];
      var $631=(($620+1176+((($channel_0)*(292))&-1)+4)|0);
      HEAP32[(($631)>>2)]=$630;
      if ($548) {
       break L5805;
      }
      var $632=HEAP32[(($1)>>2)];
      var $633=(($632+1136)|0);
      var $634=HEAP32[(($633)>>2)];
      var $635=($634|0)==0;
      if ($635) {
       break;
      } else {
       var $i_013_i_i=0;
      }
      while(1) {
       var $i_013_i_i;
       var $636=HEAP32[(($x_i_i)>>2)];
       var $637=(($622+($i_013_i_i<<2))|0);
       HEAP32[(($637)>>2)]=$636;
       var $638=((($i_013_i_i)+(1))|0);
       var $639=HEAP32[(($1)>>2)];
       var $640=(($639+1136)|0);
       var $641=HEAP32[(($640)>>2)];
       var $642=($638>>>0)<($641>>>0);
       if ($642) {
        var $i_013_i_i=$638;
       } else {
        break;
       }
      }
     } else {
      var $676=($603>>>0)<16;
      if ($676) {
       var $678=HEAP32[(($1)>>2)];
       var $679=(($678+3624)|0);
       var $680=HEAP32[(($679)>>2)];
       var $681=($680|0)==0;
       if ($681) {
        var $683=(($678+28)|0);
        var $684=HEAP32[(($683)>>2)];
        var $685=(($678+52)|0);
        var $686=HEAP32[(($685)>>2)];
        FUNCTION_TABLE[$684]($decoder,3,$686);
       } else {
        var $688=(($678+6144)|0);
        var $689=HEAP32[(($688)>>2)];
        var $690=((($689)+(1))|0);
        HEAP32[(($688)>>2)]=$690;
       }
       var $691=HEAP32[(($_pre_phi)>>2)];
       var $692=(($691)|0);
       HEAP32[(($692)>>2)]=2;
       break L5805;
      }
      var $694=($603>>>0)<25;
      if ($694) {
       var $696=$603>>>1;
       var $697=$696&7;
       var $698=HEAP32[(($1)>>2)];
       var $699=(($698+1176+((($channel_0)*(292))&-1))|0);
       HEAP32[(($699)>>2)]=2;
       var $700=HEAP32[(($1)>>2)];
       var $701=(($700+96+($channel_0<<2))|0);
       var $702=HEAP32[(($701)>>2)];
       var $703=(($698+1176+((($channel_0)*(292))&-1)+36)|0);
       var $_c_i47_i=$702;
       HEAP32[(($703)>>2)]=$_c_i47_i;
       var $704=(($698+1176+((($channel_0)*(292))&-1)+16)|0);
       HEAP32[(($704)>>2)]=$697;
       var $705=($697|0)==0;
       var $706=HEAP32[(($1)>>2)];
       var $707=(($706+60)|0);
       var $708=HEAP32[(($707)>>2)];
       if ($705) {
        var $_lcssa_i49_i=$708;
       } else {
        var $709=(($698+1176+((($channel_0)*(292))&-1)+20)|0);
        var $u_047_i_i=0;var $711=$708;
        while(1) {
         var $711;
         var $u_047_i_i;
         var $712=_FLAC__bitreader_read_raw_int32($711,$i32_i_i,$_042_i);
         var $713=($712|0)==0;
         if ($713) {
          var $_0=0;
          label = 4471;
          break L5791;
         }
         var $715=HEAP32[(($i32_i_i)>>2)];
         var $716=(($709+($u_047_i_i<<2))|0);
         HEAP32[(($716)>>2)]=$715;
         var $717=((($u_047_i_i)+(1))|0);
         var $718=($717>>>0)<($697>>>0);
         var $719=HEAP32[(($1)>>2)];
         var $720=(($719+60)|0);
         var $721=HEAP32[(($720)>>2)];
         if ($718) {
          var $u_047_i_i=$717;var $711=$721;
         } else {
          var $_lcssa_i49_i=$721;
          break;
         }
        }
       }
       var $_lcssa_i49_i;
       var $722=_FLAC__bitreader_read_raw_uint32($_lcssa_i49_i,$u32_i_i,$546);
       var $723=($722|0)==0;
       if ($723) {
        var $_0=0;
        label = 4464;
        break L5791;
       }
       var $725=HEAP32[(($u32_i_i)>>2)];
       var $726=(($698+1176+((($channel_0)*(292))&-1)+4)|0);
       HEAP32[(($726)>>2)]=$725;
       var $switch_i_i=($725>>>0)<2;
       var $727=HEAP32[(($1)>>2)];
       do {
        if ($switch_i_i) {
         var $729=(($727+60)|0);
         var $730=HEAP32[(($729)>>2)];
         var $731=_FLAC__bitreader_read_raw_uint32($730,$u32_i_i,$547);
         var $732=($731|0)==0;
         if ($732) {
          var $_0=0;
          label = 4452;
          break L5791;
         }
         var $734=HEAP32[(($u32_i_i)>>2)];
         var $735=(($698+1176+((($channel_0)*(292))&-1)+8)|0);
         HEAP32[(($735)>>2)]=$734;
         var $736=HEAP32[(($1)>>2)];
         var $737=(($736+128+((($channel_0)*(12))&-1))|0);
         var $738=(($698+1176+((($channel_0)*(292))&-1)+12)|0);
         HEAP32[(($738)>>2)]=$737;
         var $739=HEAP32[(($726)>>2)];
         var $switch1_i_i=($739>>>0)<2;
         if ($switch1_i_i) {
          var $756=HEAP32[(($1)>>2)];
          var $757=(($756+128+((($channel_0)*(12))&-1))|0);
          var $758=(($756+96+($channel_0<<2))|0);
          var $759=HEAP32[(($758)>>2)];
          var $760=($739|0)==1;
          var $761=($760&1);
          var $762=_read_residual_partitioned_rice_($decoder,$697,$734,$757,$759,$761);
          var $763=($762|0)==0;
          if ($763) {
           var $_0=0;
           label = 4453;
           break L5791;
          }
         }
         if ($548) {
          break;
         }
         var $766=HEAP32[(($1)>>2)];
         var $767=(($766+64+($channel_0<<2))|0);
         var $768=HEAP32[(($767)>>2)];
         var $769=$768;
         var $770=(($698+1176+((($channel_0)*(292))&-1)+20)|0);
         var $771=$770;
         var $772=$697<<2;
         (_memcpy($769, $771, $772)|0);
         var $773=HEAP32[(($1)>>2)];
         var $774=(($773+96+($channel_0<<2))|0);
         var $775=HEAP32[(($774)>>2)];
         var $776=(($773+1136)|0);
         var $777=HEAP32[(($776)>>2)];
         var $778=((($777)-($697))|0);
         var $779=(($773+64+($channel_0<<2))|0);
         var $780=HEAP32[(($779)>>2)];
         var $781=(($780+($697<<2))|0);
         _FLAC__fixed_restore_signal($775,$778,$697,$781);
        } else {
         var $741=(($727+3624)|0);
         var $742=HEAP32[(($741)>>2)];
         var $743=($742|0)==0;
         if ($743) {
          var $745=(($727+28)|0);
          var $746=HEAP32[(($745)>>2)];
          var $747=(($727+52)|0);
          var $748=HEAP32[(($747)>>2)];
          FUNCTION_TABLE[$746]($decoder,3,$748);
         } else {
          var $750=(($727+6144)|0);
          var $751=HEAP32[(($750)>>2)];
          var $752=((($751)+(1))|0);
          HEAP32[(($750)>>2)]=$752;
         }
         var $753=HEAP32[(($_pre_phi)>>2)];
         var $754=(($753)|0);
         HEAP32[(($754)>>2)]=2;
        }
       } while(0);
       var $783=HEAP32[(($_pre_phi)>>2)];
       var $784=(($783)|0);
       var $785=HEAP32[(($784)>>2)];
       var $786=($785|0)==2;
       if ($786) {
        break L5805;
       } else {
        break;
       }
      }
      var $788=($603>>>0)<64;
      if ($788) {
       var $790=HEAP32[(($1)>>2)];
       var $791=(($790+3624)|0);
       var $792=HEAP32[(($791)>>2)];
       var $793=($792|0)==0;
       if ($793) {
        var $795=(($790+28)|0);
        var $796=HEAP32[(($795)>>2)];
        var $797=(($790+52)|0);
        var $798=HEAP32[(($797)>>2)];
        FUNCTION_TABLE[$796]($decoder,3,$798);
       } else {
        var $800=(($790+6144)|0);
        var $801=HEAP32[(($800)>>2)];
        var $802=((($801)+(1))|0);
        HEAP32[(($800)>>2)]=$802;
       }
       var $803=HEAP32[(($_pre_phi)>>2)];
       var $804=(($803)|0);
       HEAP32[(($804)>>2)]=2;
       break L5805;
      }
      var $806=$603>>>1;
      var $807=$806&31;
      var $808=((($807)+(1))|0);
      var $809=HEAP32[(($1)>>2)];
      var $810=(($809+1176+((($channel_0)*(292))&-1))|0);
      HEAP32[(($810)>>2)]=3;
      var $811=HEAP32[(($1)>>2)];
      var $812=(($811+96+($channel_0<<2))|0);
      var $813=HEAP32[(($812)>>2)];
      var $814=(($809+1176+((($channel_0)*(292))&-1)+284)|0);
      HEAP32[(($814)>>2)]=$813;
      var $815=(($809+1176+((($channel_0)*(292))&-1)+16)|0);
      HEAP32[(($815)>>2)]=$808;
      var $816=HEAP32[(($1)>>2)];
      var $817=(($816+60)|0);
      var $818=HEAP32[(($817)>>2)];
      var $u_0105_i_i=0;var $819=$818;
      while(1) {
       var $819;
       var $u_0105_i_i;
       var $820=_FLAC__bitreader_read_raw_int32($819,$i32_i53_i,$_042_i);
       var $821=($820|0)==0;
       if ($821) {
        var $_0=0;
        label = 4475;
        break L5791;
       }
       var $823=HEAP32[(($i32_i53_i)>>2)];
       var $824=(($809+1176+((($channel_0)*(292))&-1)+156+($u_0105_i_i<<2))|0);
       HEAP32[(($824)>>2)]=$823;
       var $825=((($u_0105_i_i)+(1))|0);
       var $826=($825>>>0)<($808>>>0);
       var $827=HEAP32[(($1)>>2)];
       var $828=(($827+60)|0);
       var $829=HEAP32[(($828)>>2)];
       if ($826) {
        var $u_0105_i_i=$825;var $819=$829;
       } else {
        break;
       }
      }
      var $830=_FLAC__bitreader_read_raw_uint32($829,$u32_i54_i,$551);
      var $831=($830|0)==0;
      if ($831) {
       var $_0=0;
       label = 4476;
       break L5791;
      }
      var $833=HEAP32[(($u32_i54_i)>>2)];
      var $834=($833|0)==($553|0);
      do {
       if ($834) {
        var $836=HEAP32[(($1)>>2)];
        var $837=(($836+3624)|0);
        var $838=HEAP32[(($837)>>2)];
        var $839=($838|0)==0;
        if ($839) {
         var $841=(($836+28)|0);
         var $842=HEAP32[(($841)>>2)];
         var $843=(($836+52)|0);
         var $844=HEAP32[(($843)>>2)];
         FUNCTION_TABLE[$842]($decoder,0,$844);
        }
        var $845=HEAP32[(($_pre_phi)>>2)];
        var $846=(($845)|0);
        HEAP32[(($846)>>2)]=2;
       } else {
        var $848=((($833)+(1))|0);
        var $849=(($809+1176+((($channel_0)*(292))&-1)+20)|0);
        HEAP32[(($849)>>2)]=$848;
        var $850=HEAP32[(($1)>>2)];
        var $851=(($850+60)|0);
        var $852=HEAP32[(($851)>>2)];
        var $853=_FLAC__bitreader_read_raw_int32($852,$i32_i53_i,$554);
        var $854=($853|0)==0;
        if ($854) {
         var $_0=0;
         label = 4477;
         break L5791;
        }
        var $856=HEAP32[(($i32_i53_i)>>2)];
        var $857=(($809+1176+((($channel_0)*(292))&-1)+24)|0);
        HEAP32[(($857)>>2)]=$856;
        var $858=HEAP32[(($1)>>2)];
        var $859=(($858+60)|0);
        var $860=HEAP32[(($859)>>2)];
        var $u_1101_i_i=0;var $861=$860;
        while(1) {
         var $861;
         var $u_1101_i_i;
         var $862=HEAP32[(($849)>>2)];
         var $863=_FLAC__bitreader_read_raw_int32($861,$i32_i53_i,$862);
         var $864=($863|0)==0;
         if ($864) {
          var $_0=0;
          label = 4457;
          break L5791;
         }
         var $866=HEAP32[(($i32_i53_i)>>2)];
         var $867=(($809+1176+((($channel_0)*(292))&-1)+28+($u_1101_i_i<<2))|0);
         HEAP32[(($867)>>2)]=$866;
         var $868=((($u_1101_i_i)+(1))|0);
         var $869=($868>>>0)<($808>>>0);
         var $870=HEAP32[(($1)>>2)];
         var $871=(($870+60)|0);
         var $872=HEAP32[(($871)>>2)];
         if ($869) {
          var $u_1101_i_i=$868;var $861=$872;
         } else {
          break;
         }
        }
        var $873=_FLAC__bitreader_read_raw_uint32($872,$u32_i54_i,$546);
        var $874=($873|0)==0;
        if ($874) {
         var $_0=0;
         label = 4458;
         break L5791;
        }
        var $876=HEAP32[(($u32_i54_i)>>2)];
        var $877=(($809+1176+((($channel_0)*(292))&-1)+4)|0);
        HEAP32[(($877)>>2)]=$876;
        var $switch_i59_i=($876>>>0)<2;
        var $878=HEAP32[(($1)>>2)];
        if (!($switch_i59_i)) {
         var $892=(($878+3624)|0);
         var $893=HEAP32[(($892)>>2)];
         var $894=($893|0)==0;
         if ($894) {
          var $896=(($878+28)|0);
          var $897=HEAP32[(($896)>>2)];
          var $898=(($878+52)|0);
          var $899=HEAP32[(($898)>>2)];
          FUNCTION_TABLE[$897]($decoder,3,$899);
         } else {
          var $901=(($878+6144)|0);
          var $902=HEAP32[(($901)>>2)];
          var $903=((($902)+(1))|0);
          HEAP32[(($901)>>2)]=$903;
         }
         var $904=HEAP32[(($_pre_phi)>>2)];
         var $905=(($904)|0);
         HEAP32[(($905)>>2)]=2;
         break;
        }
        var $880=(($878+60)|0);
        var $881=HEAP32[(($880)>>2)];
        var $882=_FLAC__bitreader_read_raw_uint32($881,$u32_i54_i,$547);
        var $883=($882|0)==0;
        if ($883) {
         var $_0=0;
         label = 4459;
         break L5791;
        }
        var $885=HEAP32[(($u32_i54_i)>>2)];
        var $886=(($809+1176+((($channel_0)*(292))&-1)+8)|0);
        HEAP32[(($886)>>2)]=$885;
        var $887=HEAP32[(($1)>>2)];
        var $888=(($887+128+((($channel_0)*(12))&-1))|0);
        var $889=(($809+1176+((($channel_0)*(292))&-1)+12)|0);
        HEAP32[(($889)>>2)]=$888;
        var $890=HEAP32[(($877)>>2)];
        var $switch1_i60_i=($890>>>0)<2;
        if ($switch1_i60_i) {
         var $907=HEAP32[(($1)>>2)];
         var $908=(($907+128+((($channel_0)*(12))&-1))|0);
         var $909=(($907+96+($channel_0<<2))|0);
         var $910=HEAP32[(($909)>>2)];
         var $911=($890|0)==1;
         var $912=($911&1);
         var $913=_read_residual_partitioned_rice_($decoder,$808,$885,$908,$910,$912);
         var $914=($913|0)==0;
         if ($914) {
          var $_0=0;
          label = 4460;
          break L5791;
         }
        }
        if ($548) {
         break;
        }
        var $917=HEAP32[(($1)>>2)];
        var $918=(($917+64+($channel_0<<2))|0);
        var $919=HEAP32[(($918)>>2)];
        var $920=$919;
        var $921=(($809+1176+((($channel_0)*(292))&-1)+156)|0);
        var $922=$921;
        var $923=$808<<2;
        (_memcpy($920, $922, $923)|0);
        var $924=HEAP32[(($849)>>2)];
        var $925=((($924)+($_042_i))|0);
        var $926=_llvm_ctlz_i32($808,1);
        var $927=$926^31;
        var $928=((($925)+($927))|0);
        var $929=($928>>>0)<33;
        if (!($929)) {
         var $977=HEAP32[(($1)>>2)];
         var $978=(($977+36)|0);
         var $979=HEAP32[(($978)>>2)];
         var $980=(($977+96+($channel_0<<2))|0);
         var $981=HEAP32[(($980)>>2)];
         var $982=(($977+1136)|0);
         var $983=HEAP32[(($982)>>2)];
         var $984=((($983)-($808))|0);
         var $985=(($809+1176+((($channel_0)*(292))&-1)+28)|0);
         var $986=HEAP32[(($857)>>2)];
         var $987=(($977+64+($channel_0<<2))|0);
         var $988=HEAP32[(($987)>>2)];
         var $989=(($988+($808<<2))|0);
         FUNCTION_TABLE[$979]($981,$984,$985,$808,$986,$989);
         break;
        }
        var $931=($_042_i>>>0)<17;
        var $932=($924>>>0)<17;
        var $or_cond_i_i=$931&$932;
        if (!($or_cond_i_i)) {
         var $963=HEAP32[(($1)>>2)];
         var $964=(($963+32)|0);
         var $965=HEAP32[(($964)>>2)];
         var $966=(($963+96+($channel_0<<2))|0);
         var $967=HEAP32[(($966)>>2)];
         var $968=(($963+1136)|0);
         var $969=HEAP32[(($968)>>2)];
         var $970=((($969)-($808))|0);
         var $971=(($809+1176+((($channel_0)*(292))&-1)+28)|0);
         var $972=HEAP32[(($857)>>2)];
         var $973=(($963+64+($channel_0<<2))|0);
         var $974=HEAP32[(($973)>>2)];
         var $975=(($974+($808<<2))|0);
         FUNCTION_TABLE[$965]($967,$970,$971,$808,$972,$975);
         break;
        }
        var $934=($808>>>0)<9;
        var $935=HEAP32[(($1)>>2)];
        if ($934) {
         var $937=(($935+44)|0);
         var $938=HEAP32[(($937)>>2)];
         var $939=(($935+96+($channel_0<<2))|0);
         var $940=HEAP32[(($939)>>2)];
         var $941=(($935+1136)|0);
         var $942=HEAP32[(($941)>>2)];
         var $943=((($942)-($808))|0);
         var $944=(($809+1176+((($channel_0)*(292))&-1)+28)|0);
         var $945=HEAP32[(($857)>>2)];
         var $946=(($935+64+($channel_0<<2))|0);
         var $947=HEAP32[(($946)>>2)];
         var $948=(($947+($808<<2))|0);
         FUNCTION_TABLE[$938]($940,$943,$944,$808,$945,$948);
         break;
        } else {
         var $950=(($935+40)|0);
         var $951=HEAP32[(($950)>>2)];
         var $952=(($935+96+($channel_0<<2))|0);
         var $953=HEAP32[(($952)>>2)];
         var $954=(($935+1136)|0);
         var $955=HEAP32[(($954)>>2)];
         var $956=((($955)-($808))|0);
         var $957=(($809+1176+((($channel_0)*(292))&-1)+28)|0);
         var $958=HEAP32[(($857)>>2)];
         var $959=(($935+64+($channel_0<<2))|0);
         var $960=HEAP32[(($959)>>2)];
         var $961=(($960+($808<<2))|0);
         FUNCTION_TABLE[$951]($953,$956,$957,$808,$958,$961);
         break;
        }
       }
      } while(0);
      var $991=HEAP32[(($_pre_phi)>>2)];
      var $992=(($991)|0);
      var $993=HEAP32[(($992)>>2)];
      var $994=($993|0)==2;
      if ($994) {
       break L5805;
      }
     }
    } while(0);
    var $_not_i=$584^1;
    var $or_cond_i=$548|$_not_i;
    if ($or_cond_i) {
     break;
    }
    var $996=HEAP32[(($1)>>2)];
    var $997=(($996+1176+((($channel_0)*(292))&-1)+288)|0);
    var $998=HEAP32[(($997)>>2)];
    HEAP32[(($x_i100)>>2)]=$998;
    var $999=(($996+1136)|0);
    var $1000=HEAP32[(($999)>>2)];
    var $1001=($1000|0)==0;
    if ($1001) {
     break;
    }
    var $1002=(($996+64+($channel_0<<2))|0);
    var $1003=HEAP32[(($1002)>>2)];
    var $1004=HEAP32[(($1003)>>2)];
    var $1005=$1004<<$998;
    HEAP32[(($1003)>>2)]=$1005;
    var $1006=HEAP32[(($1)>>2)];
    var $1007=(($1006+1136)|0);
    var $1008=HEAP32[(($1007)>>2)];
    var $1009=($1008>>>0)>1;
    if ($1009) {
     var $1011=1;var $1010=$1006;
    } else {
     break;
    }
    while(1) {
     var $1010;
     var $1011;
     var $_pre_i102=HEAP32[(($x_i100)>>2)];
     var $1012=(($1010+64+($channel_0<<2))|0);
     var $1013=HEAP32[(($1012)>>2)];
     var $1014=(($1013+($1011<<2))|0);
     var $1015=HEAP32[(($1014)>>2)];
     var $1016=$1015<<$_pre_i102;
     HEAP32[(($1014)>>2)]=$1016;
     var $1017=((($1011)+(1))|0);
     var $1018=HEAP32[(($1)>>2)];
     var $1019=(($1018+1136)|0);
     var $1020=HEAP32[(($1019)>>2)];
     var $1021=($1017>>>0)<($1020>>>0);
     if ($1021) {
      var $1011=$1017;var $1010=$1018;
     } else {
      break;
     }
    }
   } else {
    var $607=HEAP32[(($1)>>2)];
    var $608=(($607+3624)|0);
    var $609=HEAP32[(($608)>>2)];
    var $610=($609|0)==0;
    if ($610) {
     var $612=(($607+28)|0);
     var $613=HEAP32[(($612)>>2)];
     var $614=(($607+52)|0);
     var $615=HEAP32[(($614)>>2)];
     FUNCTION_TABLE[$613]($decoder,0,$615);
    }
    var $616=HEAP32[(($_pre_phi)>>2)];
    var $617=(($616)|0);
    HEAP32[(($617)>>2)]=2;
   }
  } while(0);
  var $1022=HEAP32[(($_pre_phi)>>2)];
  var $1023=(($1022)|0);
  var $1024=HEAP32[(($1023)>>2)];
  var $1025=($1024|0)==2;
  if ($1025) {
   var $_0=1;
   label = 4465;
   break;
  }
  var $1026=((($channel_0)+(1))|0);
  var $channel_0=$1026;
 }
 if (label == 4405) {
  var $1028=$zero_i;
  var $1029=(($557+60)|0);
  var $1030=HEAP32[(($1029)>>2)];
  var $1031=_FLAC__bitreader_is_consumed_byte_aligned($1030);
  var $1032=($1031|0)==0;
  do {
   if ($1032) {
    HEAP32[(($zero_i)>>2)]=0;
    var $1034=HEAP32[(($1)>>2)];
    var $1035=(($1034+60)|0);
    var $1036=HEAP32[(($1035)>>2)];
    var $1037=_FLAC__bitreader_bits_left_for_byte_alignment($1036);
    var $1038=_FLAC__bitreader_read_raw_uint32($1036,$zero_i,$1037);
    var $1039=($1038|0)==0;
    if ($1039) {
     var $_0=0;
     var $_0;
     STACKTOP=sp;return $_0;
    }
    var $1041=HEAP32[(($zero_i)>>2)];
    var $1042=($1041|0)==0;
    if ($1042) {
     break;
    }
    var $1044=HEAP32[(($1)>>2)];
    var $1045=(($1044+3624)|0);
    var $1046=HEAP32[(($1045)>>2)];
    var $1047=($1046|0)==0;
    if ($1047) {
     var $1049=(($1044+28)|0);
     var $1050=HEAP32[(($1049)>>2)];
     var $1051=(($1044+52)|0);
     var $1052=HEAP32[(($1051)>>2)];
     FUNCTION_TABLE[$1050]($decoder,0,$1052);
    }
    var $1053=HEAP32[(($_pre_phi)>>2)];
    var $1054=(($1053)|0);
    HEAP32[(($1054)>>2)]=2;
   }
  } while(0);
  var $1056=HEAP32[(($_pre_phi)>>2)];
  var $1057=(($1056)|0);
  var $1058=HEAP32[(($1057)>>2)];
  var $1059=($1058|0)==2;
  if ($1059) {
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $1061=HEAP32[(($1)>>2)];
  var $1062=(($1061+60)|0);
  var $1063=HEAP32[(($1062)>>2)];
  var $1064=_FLAC__bitreader_get_read_crc16($1063);
  var $1065=HEAP32[(($1)>>2)];
  var $1066=(($1065+60)|0);
  var $1067=HEAP32[(($1066)>>2)];
  var $1068=HEAP32[((10472)>>2)];
  var $1069=_FLAC__bitreader_read_raw_uint32($1067,$x,$1068);
  var $1070=($1069|0)==0;
  if ($1070) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $1072=($1064&65535);
  var $1073=HEAP32[(($x)>>2)];
  var $1074=($1072|0)==($1073|0);
  do {
   if ($1074) {
    if ($548) {
     break;
    }
    var $1077=HEAP32[(($1)>>2)];
    var $1078=(($1077+1148)|0);
    var $1079=HEAP32[(($1078)>>2)];
    if (($1079|0)==2) {
     var $1080=(($1077+1136)|0);
     var $1081=HEAP32[(($1080)>>2)];
     var $1082=($1081|0)==0;
     if ($1082) {
      break;
     } else {
      var $i_1137=0;var $1104=$1077;
     }
     while(1) {
      var $1104;
      var $i_1137;
      var $1105=(($1104+68)|0);
      var $1106=HEAP32[(($1105)>>2)];
      var $1107=(($1106+($i_1137<<2))|0);
      var $1108=HEAP32[(($1107)>>2)];
      var $1109=(($1104+64)|0);
      var $1110=HEAP32[(($1109)>>2)];
      var $1111=(($1110+($i_1137<<2))|0);
      var $1112=HEAP32[(($1111)>>2)];
      var $1113=((($1112)+($1108))|0);
      HEAP32[(($1111)>>2)]=$1113;
      var $1114=((($i_1137)+(1))|0);
      var $1115=HEAP32[(($1)>>2)];
      var $1116=(($1115+1136)|0);
      var $1117=HEAP32[(($1116)>>2)];
      var $1118=($1114>>>0)<($1117>>>0);
      if ($1118) {
       var $i_1137=$1114;var $1104=$1115;
      } else {
       break;
      }
     }
    } else if (($1079|0)==1) {
     var $1083=(($1077+1136)|0);
     var $1084=HEAP32[(($1083)>>2)];
     var $1085=($1084|0)==0;
     if ($1085) {
      break;
     } else {
      var $i_0133=0;var $1089=$1077;
     }
     while(1) {
      var $1089;
      var $i_0133;
      var $1090=(($1089+64)|0);
      var $1091=HEAP32[(($1090)>>2)];
      var $1092=(($1091+($i_0133<<2))|0);
      var $1093=HEAP32[(($1092)>>2)];
      var $1094=(($1089+68)|0);
      var $1095=HEAP32[(($1094)>>2)];
      var $1096=(($1095+($i_0133<<2))|0);
      var $1097=HEAP32[(($1096)>>2)];
      var $1098=((($1093)-($1097))|0);
      HEAP32[(($1096)>>2)]=$1098;
      var $1099=((($i_0133)+(1))|0);
      var $1100=HEAP32[(($1)>>2)];
      var $1101=(($1100+1136)|0);
      var $1102=HEAP32[(($1101)>>2)];
      var $1103=($1099>>>0)<($1102>>>0);
      if ($1103) {
       var $i_0133=$1099;var $1089=$1100;
      } else {
       break;
      }
     }
    } else if (($1079|0)==3) {
     var $1086=(($1077+1136)|0);
     var $1087=HEAP32[(($1086)>>2)];
     var $1088=($1087|0)==0;
     if ($1088) {
      break;
     } else {
      var $i_2130=0;var $1119=$1077;
     }
     while(1) {
      var $1119;
      var $i_2130;
      var $1120=(($1119+64)|0);
      var $1121=HEAP32[(($1120)>>2)];
      var $1122=(($1121+($i_2130<<2))|0);
      var $1123=HEAP32[(($1122)>>2)];
      var $1124=(($1119+68)|0);
      var $1125=HEAP32[(($1124)>>2)];
      var $1126=(($1125+($i_2130<<2))|0);
      var $1127=HEAP32[(($1126)>>2)];
      var $1128=$1123<<1;
      var $1129=$1127&1;
      var $1130=$1129|$1128;
      var $1131=((($1130)+($1127))|0);
      var $1132=$1131>>1;
      HEAP32[(($1122)>>2)]=$1132;
      var $1133=((($1130)-($1127))|0);
      var $1134=$1133>>1;
      var $1135=HEAP32[(($1)>>2)];
      var $1136=(($1135+68)|0);
      var $1137=HEAP32[(($1136)>>2)];
      var $1138=(($1137+($i_2130<<2))|0);
      HEAP32[(($1138)>>2)]=$1134;
      var $1139=((($i_2130)+(1))|0);
      var $1140=HEAP32[(($1)>>2)];
      var $1141=(($1140+1136)|0);
      var $1142=HEAP32[(($1141)>>2)];
      var $1143=($1139>>>0)<($1142>>>0);
      if ($1143) {
       var $i_2130=$1139;var $1119=$1140;
      } else {
       break;
      }
     }
    } else {
     break;
    }
   } else {
    var $1145=HEAP32[(($1)>>2)];
    var $1146=(($1145+3624)|0);
    var $1147=HEAP32[(($1146)>>2)];
    var $1148=($1147|0)==0;
    if ($1148) {
     var $1150=(($1145+28)|0);
     var $1151=HEAP32[(($1150)>>2)];
     var $1152=(($1145+52)|0);
     var $1153=HEAP32[(($1152)>>2)];
     FUNCTION_TABLE[$1151]($decoder,2,$1153);
    }
    if ($548) {
     break;
    }
    var $1154=HEAP32[(($1)>>2)];
    var $1155=(($1154+1144)|0);
    var $1156=HEAP32[(($1155)>>2)];
    var $1157=($1156|0)==0;
    if ($1157) {
     break;
    } else {
     var $channel_1141=0;var $1158=$1154;
    }
    while(1) {
     var $1158;
     var $channel_1141;
     var $1159=(($1158+64+($channel_1141<<2))|0);
     var $1160=HEAP32[(($1159)>>2)];
     var $1161=$1160;
     var $1162=(($1158+1136)|0);
     var $1163=HEAP32[(($1162)>>2)];
     var $1164=$1163<<2;
     _memset($1161, 0, $1164);
     var $1165=((($channel_1141)+(1))|0);
     var $1166=HEAP32[(($1)>>2)];
     var $1167=(($1166+1144)|0);
     var $1168=HEAP32[(($1167)>>2)];
     var $1169=($1165>>>0)<($1168>>>0);
     if ($1169) {
      var $channel_1141=$1165;var $1158=$1166;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP32[(($got_a_frame)>>2)]=1;
  var $1170=HEAP32[(($1)>>2)];
  var $1171=(($1170+236)|0);
  var $1172=HEAP32[(($1171)>>2)];
  var $1173=($1172|0)==0;
  if ($1173) {
   var $1177=$1170;
  } else {
   var $1175=(($1170+232)|0);
   HEAP32[(($1175)>>2)]=$1172;
   var $_pre=HEAP32[(($1)>>2)];
   var $1177=$_pre;
  }
  var $1177;
  var $1178=(($1177+1144)|0);
  var $1179=HEAP32[(($1178)>>2)];
  var $1180=HEAP32[(($_pre_phi)>>2)];
  var $1181=(($1180+4)|0);
  HEAP32[(($1181)>>2)]=$1179;
  var $1182=HEAP32[(($1)>>2)];
  var $1183=(($1182+1148)|0);
  var $1184=HEAP32[(($1183)>>2)];
  var $1185=HEAP32[(($_pre_phi)>>2)];
  var $1186=(($1185+8)|0);
  HEAP32[(($1186)>>2)]=$1184;
  var $1187=HEAP32[(($1)>>2)];
  var $1188=(($1187+1152)|0);
  var $1189=HEAP32[(($1188)>>2)];
  var $1190=HEAP32[(($_pre_phi)>>2)];
  var $1191=(($1190+12)|0);
  HEAP32[(($1191)>>2)]=$1189;
  var $1192=HEAP32[(($1)>>2)];
  var $1193=(($1192+1140)|0);
  var $1194=HEAP32[(($1193)>>2)];
  var $1195=HEAP32[(($_pre_phi)>>2)];
  var $1196=(($1195+16)|0);
  HEAP32[(($1196)>>2)]=$1194;
  var $1197=HEAP32[(($1)>>2)];
  var $1198=(($1197+1136)|0);
  var $1199=HEAP32[(($1198)>>2)];
  var $1200=HEAP32[(($_pre_phi)>>2)];
  var $1201=(($1200+20)|0);
  HEAP32[(($1201)>>2)]=$1199;
  var $1202=HEAP32[(($1)>>2)];
  var $1203=(($1202+1160)|0);
  var $ld$16$0=(($1203)|0);
  var $1204$0=HEAP32[(($ld$16$0)>>2)];
  var $ld$17$1=(($1203+4)|0);
  var $1204$1=HEAP32[(($ld$17$1)>>2)];
  var $1205=(($1202+1136)|0);
  var $1206=HEAP32[(($1205)>>2)];
  var $1207$0=$1206;
  var $1207$1=0;
  var $1208$0=_i64Add($1207$0,$1207$1,$1204$0,$1204$1);var $1208$1=tempRet0;
  var $1209=(($1202+240)|0);
  var $st$18$0=(($1209)|0);
  HEAP32[(($st$18$0)>>2)]=$1208$0;
  var $st$19$1=(($1209+4)|0);
  HEAP32[(($st$19$1)>>2)]=$1208$1;
  L5951: do {
   if (!($548)) {
    var $1211=HEAP32[(($1)>>2)];
    var $1212=(($1211+1136)|0);
    var $1213=(($1211+64)|0);
    var $1214=$newbuffer_i;
    var $1215=(($1211+3624)|0);
    var $1216=HEAP32[(($1215)>>2)];
    var $1217=($1216|0)==0;
    do {
     if ($1217) {
      var $1273=(($1211+248)|0);
      var $1274=HEAP32[(($1273)>>2)];
      var $1275=($1274|0)==0;
      if ($1275) {
       var $1277=(($1211+3616)|0);
       HEAP32[(($1277)>>2)]=0;
       var $_pre_i110=HEAP32[(($1)>>2)];
       var $1279=$_pre_i110;
      } else {
       var $1279=$1211;
      }
      var $1279;
      var $1280=(($1279+3616)|0);
      var $1281=HEAP32[(($1280)>>2)];
      var $1282=($1281|0)==0;
      do {
       if ($1282) {
        var $1296=$1279;
       } else {
        var $1284=(($1279+3628)|0);
        var $1285=(($1211+1144)|0);
        var $1286=HEAP32[(($1285)>>2)];
        var $1287=(($1212)|0);
        var $1288=HEAP32[(($1287)>>2)];
        var $1289=(($1211+1152)|0);
        var $1290=HEAP32[(($1289)>>2)];
        var $1291=((($1290)+(7))|0);
        var $1292=$1291>>>3;
        var $1293=_FLAC__MD5Accumulate($1284,$1213,$1286,$1288,$1292);
        var $1294=($1293|0)==0;
        if ($1294) {
         var $_0=0;
         var $_0;
         STACKTOP=sp;return $_0;
        } else {
         var $_pre46_i=HEAP32[(($1)>>2)];
         var $1296=$_pre46_i;
         break;
        }
       }
      } while(0);
      var $1296;
      var $1297=(($1296+20)|0);
      var $1298=HEAP32[(($1297)>>2)];
      var $1299=(($1296+52)|0);
      var $1300=HEAP32[(($1299)>>2)];
      var $1301=FUNCTION_TABLE[$1298]($decoder,$1212,$1213,$1300);
      var $_0_i111=$1301;
     } else {
      var $1219=(($1211+1160)|0);
      var $ld$20$0=(($1219)|0);
      var $1220$0=HEAP32[(($ld$20$0)>>2)];
      var $ld$21$1=(($1219+4)|0);
      var $1220$1=HEAP32[(($ld$21$1)>>2)];
      var $1221=(($1212)|0);
      var $1222=HEAP32[(($1221)>>2)];
      var $1223=(($1211+6136)|0);
      var $ld$22$0=(($1223)|0);
      var $1224$0=HEAP32[(($ld$22$0)>>2)];
      var $ld$23$1=(($1223+4)|0);
      var $1224$1=HEAP32[(($ld$23$1)>>2)];
      var $1225=(($1211+3744)|0);
      var $1226=$1225;
      var $1227=$1212;
      (_memcpy($1226, $1227, 2384)|0);
      var $1228=(($1220$1>>>0) > ($1224$1>>>0)) | (((($1220$1>>>0) == ($1224$1>>>0) & ($1220$0>>>0) >  ($1224$0>>>0))));
      if ($1228) {
       break L5951;
      }
      var $1230$0=$1222;
      var $1230$1=0;
      var $1231$0=_i64Add($1230$0,$1230$1,$1220$0,$1220$1);var $1231$1=tempRet0;
      var $1232=(($1224$1>>>0) < ($1231$1>>>0)) | (((($1224$1>>>0) == ($1231$1>>>0) & ($1224$0>>>0) <  ($1231$0>>>0))));
      if (!($1232)) {
       break L5951;
      }
      var $1234$0=_i64Subtract($1224$0,$1224$1,$1220$0,$1220$1);var $1234$1=tempRet0;
      var $1235$0=$1234$0;
      var $1235=$1235$0;
      var $1236=HEAP32[(($1)>>2)];
      var $1237=(($1236+3624)|0);
      HEAP32[(($1237)>>2)]=0;
      var $1238=($1235|0)==0;
      if ($1238) {
       var $1266=HEAP32[(($1)>>2)];
       var $1267=(($1266+20)|0);
       var $1268=HEAP32[(($1267)>>2)];
       var $1269=(($1266+52)|0);
       var $1270=HEAP32[(($1269)>>2)];
       var $1271=FUNCTION_TABLE[$1268]($decoder,$1212,$1213,$1270);
       var $_0_i111=$1271;
       break;
      }
      var $1239=(($1211+1144)|0);
      var $1240=HEAP32[(($1239)>>2)];
      var $1241=($1240|0)==0;
      if (!($1241)) {
       var $channel_044_i=0;
       while(1) {
        var $channel_044_i;
        var $1242=(($1211+64+($channel_044_i<<2))|0);
        var $1243=HEAP32[(($1242)>>2)];
        var $1244=(($1243+($1235<<2))|0);
        var $1245=(($newbuffer_i+($channel_044_i<<2))|0);
        HEAP32[(($1245)>>2)]=$1244;
        var $1246=((($channel_044_i)+(1))|0);
        var $1247=($1246>>>0)<($1240>>>0);
        if ($1247) {
         var $channel_044_i=$1246;
        } else {
         break;
        }
       }
      }
      var $1248=HEAP32[(($1)>>2)];
      var $1249=(($1248+3744)|0);
      var $1250=HEAP32[(($1249)>>2)];
      var $1251=((($1250)-($1235))|0);
      HEAP32[(($1249)>>2)]=$1251;
      var $$etemp$24$0=-1;
      var $$etemp$24$1=0;
      var $1252$0=$1234$0&$$etemp$24$0;
      var $1252$1=$1234$1&$$etemp$24$1;
      var $1253=HEAP32[(($1)>>2)];
      var $1254=(($1253+3768)|0);
      var $ld$25$0=(($1254)|0);
      var $1255$0=HEAP32[(($ld$25$0)>>2)];
      var $ld$26$1=(($1254+4)|0);
      var $1255$1=HEAP32[(($ld$26$1)>>2)];
      var $1256$0=_i64Add($1255$0,$1255$1,$1252$0,$1252$1);var $1256$1=tempRet0;
      var $st$27$0=(($1254)|0);
      HEAP32[(($st$27$0)>>2)]=$1256$0;
      var $st$28$1=(($1254+4)|0);
      HEAP32[(($st$28$1)>>2)]=$1256$1;
      var $1257=HEAP32[(($1)>>2)];
      var $1258=(($1257+20)|0);
      var $1259=HEAP32[(($1258)>>2)];
      var $1260=(($1257+3744)|0);
      var $1261=(($newbuffer_i)|0);
      var $1262=(($1257+52)|0);
      var $1263=HEAP32[(($1262)>>2)];
      var $1264=FUNCTION_TABLE[$1259]($decoder,$1260,$1261,$1263);
      var $_0_i111=$1264;
     }
    } while(0);
    var $_0_i111;
    var $1302=($_0_i111|0)==0;
    if ($1302) {
     break;
    } else {
     var $_0=0;
    }
    var $_0;
    STACKTOP=sp;return $_0;
   }
  } while(0);
  var $1303=HEAP32[(($_pre_phi)>>2)];
  var $1304=(($1303)|0);
  HEAP32[(($1304)>>2)]=2;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4448) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4451) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4452) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4453) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4456) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4457) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4458) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4459) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4460) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4464) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4465) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4471) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4472) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4475) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4476) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 4477) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _FLAC__stream_decoder_process_until_end_of_metadata($decoder){
 var label=0;
 var $1=(($decoder)|0);
 L5995: while(1) {
  var $2=HEAP32[(($1)>>2)];
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  switch (($4|0)) {
  case 2:case 3:case 4:case 7: {
   var $_0_ph=1;
   break L5995;
   break;
  }
  case 1: {
   var $9=_read_metadata_($decoder);
   var $10=($9|0)==0;
   if ($10) {
    var $_0_ph=0;
    break L5995;
   } else {
    continue L5995;
   }
   break;
  }
  case 0: {
   var $6=_find_metadata_($decoder);
   var $7=($6|0)==0;
   if ($7) {
    var $_0_ph=0;
    break L5995;
   } else {
    continue L5995;
   }
   break;
  }
  default: {
   var $_0=0;
   label = 4487;
   break L5995;
  }
  }
 }
 if (label == 4487) {
  var $_0;
  return $_0;
 }
 var $_0_ph;
 var $_0=$_0_ph;
 var $_0;
 return $_0;
}
function _FLAC__stream_decoder_process_until_end_of_stream($decoder){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $dummy=sp;
 var $1=(($decoder)|0);
 L6005: while(1) {
  var $2=HEAP32[(($1)>>2)];
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  switch (($4|0)) {
  case 4:case 7: {
   var $_0_ph=1;
   break L6005;
   break;
  }
  case 2: {
   var $12=_frame_sync_($decoder);
   var $13=($12|0)==0;
   if ($13) {
    var $_0_ph=1;
    break L6005;
   } else {
    continue L6005;
   }
   break;
  }
  case 3: {
   var $15=_read_frame_($decoder,$dummy,1);
   var $16=($15|0)==0;
   if ($16) {
    var $_0_ph=0;
    break L6005;
   } else {
    continue L6005;
   }
   break;
  }
  case 1: {
   var $9=_read_metadata_($decoder);
   var $10=($9|0)==0;
   if ($10) {
    var $_0_ph=0;
    break L6005;
   } else {
    continue L6005;
   }
   break;
  }
  case 0: {
   var $6=_find_metadata_($decoder);
   var $7=($6|0)==0;
   if ($7) {
    var $_0_ph=0;
    break L6005;
   } else {
    continue L6005;
   }
   break;
  }
  default: {
   var $_0=0;
   label = 4497;
   break L6005;
  }
  }
 }
 if (label == 4497) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $_0_ph;
 var $_0=$_0_ph;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__stream_decoder_skip_single_frame($decoder){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $got_a_frame=sp;
 var $1=(($decoder)|0);
 while(1) {
  var $2=HEAP32[(($1)>>2)];
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  if (($4|0)==2) {
   var $6=_frame_sync_($decoder);
   var $7=($6|0)==0;
   if ($7) {
    var $_0_ph=1;
    break;
   } else {
    continue;
   }
  } else if (($4|0)==7|($4|0)==4) {
   var $_0=1;
   label = 4506;
   break;
  } else if (!(($4|0)==3)) {
   var $_0_ph=0;
   break;
  }
  var $9=_read_frame_($decoder,$got_a_frame,0);
  var $10=($9|0)==0;
  if ($10) {
   var $_0_ph=0;
   break;
  }
  var $12=HEAP32[(($got_a_frame)>>2)];
  var $13=($12|0)==0;
  if (!($13)) {
   var $_0_ph=1;
   break;
  }
 }
 if (label == 4506) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $_0_ph;
 var $_0=$_0_ph;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__stream_decoder_seek_absolute($decoder,$sample$0,$sample$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 var $got_a_frame_i_i=sp;
 var $lower_bound_i=(sp)+(8);
 var $upper_bound_i=(sp)+(16);
 var $length=(sp)+(24);
 var $1=(($decoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $switch=($4>>>0)<5;
 if (!($switch)) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $6=(($decoder+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if ($10) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $12=(($7+248)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 do {
  if (!($14)) {
   var $15=(($7+304)|0);
   var $16=$15;
   var $ld$0$0=(($16)|0);
   var $17$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($16+4)|0);
   var $17$1=HEAP32[(($ld$1$1)>>2)];
   var $$etemp$2$0=0;
   var $$etemp$2$1=0;
   var $18=(($17$0|0) == ($$etemp$2$0|0)) & (($17$1|0) == ($$etemp$2$1|0));
   var $19=(($17$1>>>0) > ($sample$1>>>0)) | (((($17$1>>>0) == ($sample$1>>>0) & ($17$0>>>0) >  ($sample$0>>>0))));
   var $or_cond=$18|$19;
   if ($or_cond) {
    break;
   } else {
    var $_0=0;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $20=(($7+3624)|0);
 HEAP32[(($20)>>2)]=1;
 var $21=HEAP32[(($6)>>2)];
 var $22=(($21+3616)|0);
 HEAP32[(($22)>>2)]=0;
 var $23=HEAP32[(($6)>>2)];
 var $24=(($23+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($23+52)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$25]($decoder,$length,$27);
 var $29=($28|0)==0;
 if (!($29)) {
  var $31=HEAP32[(($6)>>2)];
  var $32=(($31+3624)|0);
  HEAP32[(($32)>>2)]=0;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $34=HEAP32[(($1)>>2)];
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 var $switch25=($36>>>0)<2;
 do {
  if ($switch25) {
   var $38=$34;var $37=$36;
   L6044: while(1) {
    var $37;
    var $38;
    switch (($37|0)) {
    case 0: {
     var $40=_find_metadata_($decoder);
     var $41=($40|0)==0;
     if ($41) {
      label = 4520;
      break L6044;
     }
     break;
    }
    case 1: {
     var $43=_read_metadata_($decoder);
     var $44=($43|0)==0;
     if ($44) {
      label = 4520;
      break L6044;
     }
     break;
    }
    case 2:case 3:case 4:case 7: {
     break L6044;
     break;
    }
    default: {
     label = 4520;
     break L6044;
    }
    }
    var $_pre115=HEAP32[(($1)>>2)];
    var $_phi_trans_insert=(($_pre115)|0);
    var $_pre116=HEAP32[(($_phi_trans_insert)>>2)];
    var $38=$_pre115;var $37=$_pre116;
   }
   if (label == 4520) {
    var $45=HEAP32[(($6)>>2)];
    var $46=(($45+3624)|0);
    HEAP32[(($46)>>2)]=0;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $48=HEAP32[(($6)>>2)];
   var $49=(($48+248)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=($50|0)==0;
   if ($51) {
    var $60=$38;var $59=$48;var $58=0;
    break;
   }
   var $52=(($48+304)|0);
   var $53=$52;
   var $ld$3$0=(($53)|0);
   var $54$0=HEAP32[(($ld$3$0)>>2)];
   var $ld$4$1=(($53+4)|0);
   var $54$1=HEAP32[(($ld$4$1)>>2)];
   var $$etemp$5$0=0;
   var $$etemp$5$1=0;
   var $55=(($54$0|0) == ($$etemp$5$0|0)) & (($54$1|0) == ($$etemp$5$1|0));
   var $56=(($54$1>>>0) > ($sample$1>>>0)) | (((($54$1>>>0) == ($sample$1>>>0) & ($54$0>>>0) >  ($sample$0>>>0))));
   var $or_cond124=$55|$56;
   if ($or_cond124) {
    var $60=$38;var $59=$48;var $58=$50;
    break;
   }
   var $57=(($48+3624)|0);
   HEAP32[(($57)>>2)]=0;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $_pre121=HEAP32[(($6)>>2)];
   var $_phi_trans_insert122=(($_pre121+248)|0);
   var $_pre123=HEAP32[(($_phi_trans_insert122)>>2)];
   var $60=$34;var $59=$_pre121;var $58=$_pre123;
  }
 } while(0);
 var $58;
 var $59;
 var $60;
 var $ld$6$0=(($length)|0);
 var $61$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($length+4)|0);
 var $61$1=HEAP32[(($ld$7$1)>>2)];
 var $62=$lower_bound_i;
 var $63=$upper_bound_i;
 var $64=(($59+6128)|0);
 var $ld$8$0=(($64)|0);
 var $65$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($64+4)|0);
 var $65$1=HEAP32[(($ld$9$1)>>2)];
 var $66=($58|0)==0;
 if ($66) {
  var $71$1=0;var $71$0=0;
 } else {
  var $68=(($59+304)|0);
  var $69=$68;
  var $ld$10$0=(($69)|0);
  var $70$0=HEAP32[(($ld$10$0)>>2)];
  var $ld$11$1=(($69+4)|0);
  var $70$1=HEAP32[(($ld$11$1)>>2)];
  var $71$1=$70$1;var $71$0=$70$0;
 }
 var $71$0;
 var $71$1;
 var $72=(($59+272)|0);
 var $73=$72;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($59+276)|0);
 var $76=$75;
 var $77=HEAP32[(($76)>>2)];
 var $78=(($59+284)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($59+280)|0);
 var $82=$81;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($60+4)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($60+12)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($59+252)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==0;
 if ($90) {
  var $95=0;
 } else {
  var $92=(($59+448)|0);
  var $93=$92;
  var $95=$93;
 }
 var $95;
 var $96=($85|0)==0;
 if ($96) {
  var $98=(($59+292)|0);
  var $99=$98;
  var $100=HEAP32[(($99)>>2)];
  var $channels_0_i=$100;
 } else {
  var $channels_0_i=$85;
 }
 var $channels_0_i;
 var $102=($87|0)==0;
 if ($102) {
  var $104=(($59+296)|0);
  var $105=$104;
  var $106=HEAP32[(($105)>>2)];
  var $bps_0_i=$106;
 } else {
  var $bps_0_i=$87;
 }
 var $bps_0_i;
 var $108=($80|0)==0;
 do {
  if ($108) {
   var $114=($74|0)==($77|0);
   var $115=($74|0)!=0;
   var $or_cond_i=$114&$115;
   if ($or_cond_i) {
    var $117=(Math_imul($channels_0_i,$74)|0);
    var $118=(Math_imul($117,$bps_0_i)|0);
    var $119=$118>>>3;
    var $120=((($119)+(64))|0);
    var $approx_bytes_per_frame_0_i=$120;
    break;
   } else {
    var $122=$channels_0_i<<12;
    var $123=(Math_imul($122,$bps_0_i)|0);
    var $124=$123>>>3;
    var $125=$124|64;
    var $approx_bytes_per_frame_0_i=$125;
    break;
   }
  } else {
   var $110=((($83)+($80))|0);
   var $111=$110>>>1;
   var $112=((($111)+(1))|0);
   var $approx_bytes_per_frame_0_i=$112;
  }
 } while(0);
 var $approx_bytes_per_frame_0_i;
 var $st$12$0=(($lower_bound_i)|0);
 HEAP32[(($st$12$0)>>2)]=$65$0;
 var $st$13$1=(($lower_bound_i+4)|0);
 HEAP32[(($st$13$1)>>2)]=$65$1;
 var $st$14$0=(($upper_bound_i)|0);
 HEAP32[(($st$14$0)>>2)]=$61$0;
 var $st$15$1=(($upper_bound_i+4)|0);
 HEAP32[(($st$15$1)>>2)]=$61$1;
 var $$etemp$16$0=0;
 var $$etemp$16$1=0;
 var $127=(($71$0|0) != ($$etemp$16$0|0)) | (($71$1|0) != ($$etemp$16$1|0));
 var $128$0=$127?$71$0:$sample$0;
 var $128$1=$127?$71$1:$sample$1;
 var $129=($95|0)==0;
 do {
  if ($129) {
   var $lower_bound_sample_0_i$1=0;var $lower_bound_sample_0_i$0=0;var $upper_bound_sample_0_i$1=$128$1;var $upper_bound_sample_0_i$0=$128$0;
  } else {
   var $131=(($95)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=($132|0)>0;
   L6079: do {
    if ($133) {
     var $134=(($95+4)|0);
     var $135=HEAP32[(($134)>>2)];
     var $ld$17$0=10008;
     var $136$0=HEAP32[(($ld$17$0)>>2)];
     var $ld$18$1=10012;
     var $136$1=HEAP32[(($ld$18$1)>>2)];
     var $i_0143_in_i=$132;
     L6081: while(1) {
      var $i_0143_in_i;
      var $i_0143_i=((($i_0143_in_i)-(1))|0);
      var $138=(($135+((($i_0143_i)*(24))&-1))|0);
      var $ld$19$0=(($138)|0);
      var $139$0=HEAP32[(($ld$19$0)>>2)];
      var $ld$20$1=(($138+4)|0);
      var $139$1=HEAP32[(($ld$20$1)>>2)];
      var $140=(($139$0|0) == ($136$0|0)) & (($139$1|0) == ($136$1|0));
      do {
       if (!($140)) {
        var $142=(($135+((($i_0143_i)*(24))&-1)+16)|0);
        var $143=HEAP32[(($142)>>2)];
        var $144=($143|0)==0;
        if ($144) {
         break;
        }
        var $notrhs_i=(($139$1>>>0) >= ($71$1>>>0)) & (((($139$1>>>0) >  ($71$1>>>0)) | ($139$0>>>0) >= ($71$0>>>0)));
        var $or_cond108_not_i=$notrhs_i&$127;
        var $147=(($139$1>>>0) > ($sample$1>>>0)) | (((($139$1>>>0) == ($sample$1>>>0) & ($139$0>>>0) >  ($sample$0>>>0))));
        var $or_cond119_i=$or_cond108_not_i|$147;
        if (!($or_cond119_i)) {
         label = 4544;
         break L6081;
        }
       }
      } while(0);
      var $145=($i_0143_i|0)>0;
      if ($145) {
       var $i_0143_in_i=$i_0143_i;
      } else {
       var $new_lower_bound_sample_0_i$1=0;var $new_lower_bound_sample_0_i$0=0;var $new_lower_bound_0_i$1=$65$1;var $new_lower_bound_0_i$0=$65$0;
       break;
      }
     }
     if (label == 4544) {
      var $149=(($135+((($i_0143_i)*(24))&-1)+8)|0);
      var $ld$21$0=(($149)|0);
      var $150$0=HEAP32[(($ld$21$0)>>2)];
      var $ld$22$1=(($149+4)|0);
      var $150$1=HEAP32[(($ld$22$1)>>2)];
      var $151$0=_i64Add($150$0,$150$1,$65$0,$65$1);var $151$1=tempRet0;
      var $new_lower_bound_sample_0_i$1=$139$1;var $new_lower_bound_sample_0_i$0=$139$0;var $new_lower_bound_0_i$1=$151$1;var $new_lower_bound_0_i$0=$151$0;
     }
     var $new_lower_bound_0_i$0;
     var $new_lower_bound_0_i$1;
     var $new_lower_bound_sample_0_i$0;
     var $new_lower_bound_sample_0_i$1;
     var $$etemp$23$0=0;
     var $$etemp$23$1=0;
     var $152=(($71$0|0) == ($$etemp$23$0|0)) & (($71$1|0) == ($$etemp$23$1|0));
     var $i_1132_i=0;
     while(1) {
      var $i_1132_i;
      var $154=(($135+((($i_1132_i)*(24))&-1))|0);
      var $ld$24$0=(($154)|0);
      var $155$0=HEAP32[(($ld$24$0)>>2)];
      var $ld$25$1=(($154+4)|0);
      var $155$1=HEAP32[(($ld$25$1)>>2)];
      var $156=(($155$0|0) == ($136$0|0)) & (($155$1|0) == ($136$1|0));
      do {
       if (!($156)) {
        var $158=(($135+((($i_1132_i)*(24))&-1)+16)|0);
        var $159=HEAP32[(($158)>>2)];
        var $160=($159|0)==0;
        if ($160) {
         break;
        }
        var $162=(($155$1>>>0) < ($71$1>>>0)) | (((($155$1>>>0) == ($71$1>>>0) & ($155$0>>>0) <  ($71$0>>>0))));
        var $or_cond109_i=$152|$162;
        var $163=(($155$1>>>0) > ($sample$1>>>0)) | (((($155$1>>>0) == ($sample$1>>>0) & ($155$0>>>0) >  ($sample$0>>>0))));
        var $or_cond120_i=$or_cond109_i&$163;
        if ($or_cond120_i) {
         var $i_1_lcssa_i=$i_1132_i;var $new_lower_bound_0226_i$1=$new_lower_bound_0_i$1;var $new_lower_bound_0226_i$0=$new_lower_bound_0_i$0;var $new_lower_bound_sample_0227_i$1=$new_lower_bound_sample_0_i$1;var $new_lower_bound_sample_0227_i$0=$new_lower_bound_sample_0_i$0;
         break L6079;
        }
       }
      } while(0);
      var $165=((($i_1132_i)+(1))|0);
      var $166=($165|0)<($132|0);
      if ($166) {
       var $i_1132_i=$165;
      } else {
       var $i_1_lcssa_i=$165;var $new_lower_bound_0226_i$1=$new_lower_bound_0_i$1;var $new_lower_bound_0226_i$0=$new_lower_bound_0_i$0;var $new_lower_bound_sample_0227_i$1=$new_lower_bound_sample_0_i$1;var $new_lower_bound_sample_0227_i$0=$new_lower_bound_sample_0_i$0;
       break;
      }
     }
    } else {
     var $i_1_lcssa_i=0;var $new_lower_bound_0226_i$1=$65$1;var $new_lower_bound_0226_i$0=$65$0;var $new_lower_bound_sample_0227_i$1=0;var $new_lower_bound_sample_0227_i$0=0;
    }
   } while(0);
   var $new_lower_bound_sample_0227_i$0;
   var $new_lower_bound_sample_0227_i$1;
   var $new_lower_bound_0226_i$0;
   var $new_lower_bound_0226_i$1;
   var $i_1_lcssa_i;
   var $167=($i_1_lcssa_i|0)<($132|0);
   if ($167) {
    var $169=(($95+4)|0);
    var $170=HEAP32[(($169)>>2)];
    var $171=(($170+((($i_1_lcssa_i)*(24))&-1)+8)|0);
    var $ld$26$0=(($171)|0);
    var $172$0=HEAP32[(($ld$26$0)>>2)];
    var $ld$27$1=(($171+4)|0);
    var $172$1=HEAP32[(($ld$27$1)>>2)];
    var $173$0=_i64Add($172$0,$172$1,$65$0,$65$1);var $173$1=tempRet0;
    var $174=(($170+((($i_1_lcssa_i)*(24))&-1))|0);
    var $ld$28$0=(($174)|0);
    var $175$0=HEAP32[(($ld$28$0)>>2)];
    var $ld$29$1=(($174+4)|0);
    var $175$1=HEAP32[(($ld$29$1)>>2)];
    var $new_upper_bound_sample_0_i$1=$175$1;var $new_upper_bound_sample_0_i$0=$175$0;var $new_upper_bound_0_i$1=$173$1;var $new_upper_bound_0_i$0=$173$0;
   } else {
    var $new_upper_bound_sample_0_i$1=$128$1;var $new_upper_bound_sample_0_i$0=$128$0;var $new_upper_bound_0_i$1=$61$1;var $new_upper_bound_0_i$0=$61$0;
   }
   var $new_upper_bound_0_i$0;
   var $new_upper_bound_0_i$1;
   var $new_upper_bound_sample_0_i$0;
   var $new_upper_bound_sample_0_i$1;
   var $177=(($new_upper_bound_0_i$1>>>0) < ($new_lower_bound_0226_i$1>>>0)) | (((($new_upper_bound_0_i$1>>>0) == ($new_lower_bound_0226_i$1>>>0) & ($new_upper_bound_0_i$0>>>0) <  ($new_lower_bound_0226_i$0>>>0))));
   if ($177) {
    var $lower_bound_sample_0_i$1=0;var $lower_bound_sample_0_i$0=0;var $upper_bound_sample_0_i$1=$128$1;var $upper_bound_sample_0_i$0=$128$0;
    break;
   }
   var $st$30$0=(($lower_bound_i)|0);
   HEAP32[(($st$30$0)>>2)]=$new_lower_bound_0226_i$0;
   var $st$31$1=(($lower_bound_i+4)|0);
   HEAP32[(($st$31$1)>>2)]=$new_lower_bound_0226_i$1;
   var $st$32$0=(($upper_bound_i)|0);
   HEAP32[(($st$32$0)>>2)]=$new_upper_bound_0_i$0;
   var $st$33$1=(($upper_bound_i+4)|0);
   HEAP32[(($st$33$1)>>2)]=$new_upper_bound_0_i$1;
   var $lower_bound_sample_0_i$1=$new_lower_bound_sample_0227_i$1;var $lower_bound_sample_0_i$0=$new_lower_bound_sample_0227_i$0;var $upper_bound_sample_0_i$1=$new_upper_bound_sample_0_i$1;var $upper_bound_sample_0_i$0=$new_upper_bound_sample_0_i$0;
  }
 } while(0);
 var $upper_bound_sample_0_i$0;
 var $upper_bound_sample_0_i$1;
 var $lower_bound_sample_0_i$0;
 var $lower_bound_sample_0_i$1;
 var $180=(($upper_bound_sample_0_i$0|0) == ($lower_bound_sample_0_i$0|0)) & (($upper_bound_sample_0_i$1|0) == ($lower_bound_sample_0_i$1|0));
 var $181$0=($180&1);
 var $181$1=0;
 var $_upper_bound_sample_0_i$0=_i64Add($181$0,$181$1,$upper_bound_sample_0_i$0,$upper_bound_sample_0_i$1);var $_upper_bound_sample_0_i$1=tempRet0;
 var $182=(($59+6136)|0);
 var $st$34$0=(($182)|0);
 HEAP32[(($st$34$0)>>2)]=$sample$0;
 var $st$35$1=(($182+4)|0);
 HEAP32[(($st$35$1)>>2)]=$sample$1;
 var $183=(($lower_bound_sample_0_i$1>>>0) < ($_upper_bound_sample_0_i$1>>>0)) | (((($lower_bound_sample_0_i$1>>>0) == ($_upper_bound_sample_0_i$1>>>0) & ($lower_bound_sample_0_i$0>>>0) <  ($_upper_bound_sample_0_i$0>>>0))));
 L6102: do {
  if ($183) {
   var $184=$got_a_frame_i_i;
   var $first_seek_0_ph_ph170_i=1;var $approx_bytes_per_frame_1_ph_ph171_i=$approx_bytes_per_frame_0_i;var $upper_bound_sample_2_ph_ph172_i$1=$_upper_bound_sample_0_i$1;var $upper_bound_sample_2_ph_ph172_i$0=$_upper_bound_sample_0_i$0;var $lower_bound_sample_1_ph_ph173_i$1=$lower_bound_sample_0_i$1;var $lower_bound_sample_1_ph_ph173_i$0=$lower_bound_sample_0_i$0;
   L6104: while(1) {
    var $lower_bound_sample_1_ph_ph173_i$0;
    var $lower_bound_sample_1_ph_ph173_i$1;
    var $upper_bound_sample_2_ph_ph172_i$0;
    var $upper_bound_sample_2_ph_ph172_i$1;
    var $approx_bytes_per_frame_1_ph_ph171_i;
    var $first_seek_0_ph_ph170_i;
    var $ld$36$0=(($lower_bound_i)|0);
    var $_pre_pre_i$0=HEAP32[(($ld$36$0)>>2)];
    var $ld$37$1=(($lower_bound_i+4)|0);
    var $_pre_pre_i$1=HEAP32[(($ld$37$1)>>2)];
    var $first_seek_0_ph167_i=$first_seek_0_ph_ph170_i;var $approx_bytes_per_frame_1_ph168_i=$approx_bytes_per_frame_1_ph_ph171_i;var $lower_bound_sample_1_ph169_i$1=$lower_bound_sample_1_ph_ph173_i$1;var $lower_bound_sample_1_ph169_i$0=$lower_bound_sample_1_ph_ph173_i$0;var $_pre_i$1=$_pre_pre_i$1;var $_pre_i$0=$_pre_pre_i$0;
    while(1) {
     var $_pre_i$0;
     var $_pre_i$1;
     var $lower_bound_sample_1_ph169_i$0;
     var $lower_bound_sample_1_ph169_i$1;
     var $approx_bytes_per_frame_1_ph168_i;
     var $first_seek_0_ph167_i;
     var $185$0=_i64Subtract($sample$0,$sample$1,$lower_bound_sample_1_ph169_i$0,$lower_bound_sample_1_ph169_i$1);var $185$1=tempRet0;
     var $186=(($185$0>>>0)+(($185$1>>>0)*4294967296));
     var $187$0=_i64Subtract($upper_bound_sample_2_ph_ph172_i$0,$upper_bound_sample_2_ph_ph172_i$1,$lower_bound_sample_1_ph169_i$0,$lower_bound_sample_1_ph169_i$1);var $187$1=tempRet0;
     var $188=(($187$0>>>0)+(($187$1>>>0)*4294967296));
     var $189=($186)/($188);
     var $190=($first_seek_0_ph167_i|0)==0;
     var $ld$38$0=(($upper_bound_i)|0);
     var $191$0=HEAP32[(($ld$38$0)>>2)];
     var $ld$39$1=(($upper_bound_i+4)|0);
     var $191$1=HEAP32[(($ld$39$1)>>2)];
     var $192=(($_pre_i$1>>>0) > ($191$1>>>0)) | (((($_pre_i$1>>>0) == ($191$1>>>0) & ($_pre_i$0>>>0) >  ($191$0>>>0))));
     if ($192) {
      label = 4559;
      break L6102;
     }
     var $_pre=HEAP32[(($6)>>2)];
     var $198$1=$_pre_i$1;var $198$0=$_pre_i$0;var $approx_bytes_per_frame_1131_i44=$approx_bytes_per_frame_1_ph168_i;var $197$1=$191$1;var $197$0=$191$0;var $196=$_pre;
     while(1) {
      var $196;
      var $197$0;
      var $197$1;
      var $approx_bytes_per_frame_1131_i44;
      var $198$0;
      var $198$1;
      var $199$0=_i64Subtract($197$0,$197$1,$198$0,$198$1);var $199$1=tempRet0;
      var $200=(($199$0>>>0)+(($199$1>>>0)*4294967296));
      var $201=($189)*($200);
      var $202$0=$201>>>0;var $202$1=(Math_abs($201) >= 1 ? ($201 > 0 ? Math_min(Math_floor(($201)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($201 - +(((~~($201)))>>>0))/4294967296)))>>>0) : 0);
      var $203$0=$approx_bytes_per_frame_1131_i44;
      var $203$1=0;
      var $204$0=_i64Subtract($198$0,$198$1,$203$0,$203$1);var $204$1=tempRet0;
      var $205$0=_i64Add($202$0,$202$1,$204$0,$204$1);var $205$1=tempRet0;
      var $206=(($205$1|0) < ($197$1|0)) | (((($205$1|0) == ($197$1|0) & ($205$0>>>0) <  ($197$0>>>0))));
      var $$etemp$40$0=-1;
      var $$etemp$40$1=-1;
      var $207$0=_i64Add($197$0,$197$1,$$etemp$40$0,$$etemp$40$1);var $207$1=tempRet0;
      var $__i$0=$206?$205$0:$207$0;
      var $__i$1=$206?$205$1:$207$1;
      var $208=(($__i$1|0) < ($198$1|0)) | (((($__i$1|0) == ($198$1|0) & ($__i$0>>>0) <  ($198$0>>>0))));
      var $pos_1_i$0=$208?$198$0:$__i$0;
      var $pos_1_i$1=$208?$198$1:$__i$1;
      var $209=(($196+4)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=(($196+52)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=FUNCTION_TABLE[$210]($decoder,$pos_1_i$0,$pos_1_i$1,$212);
      var $214=($213|0)==0;
      if (!($214)) {
       label = 4561;
       break L6104;
      }
      var $219=HEAP32[(($6)>>2)];
      var $220=(($219+240)|0);
      var $$etemp$41$0=0;
      var $$etemp$41$1=0;
      var $st$42$0=(($220)|0);
      HEAP32[(($st$42$0)>>2)]=$$etemp$41$0;
      var $st$43$1=(($220+4)|0);
      HEAP32[(($st$43$1)>>2)]=$$etemp$41$1;
      var $221=HEAP32[(($6)>>2)];
      var $222=(($221+3616)|0);
      HEAP32[(($222)>>2)]=0;
      var $223=HEAP32[(($6)>>2)];
      var $224=(($223+60)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=_FLAC__bitreader_clear($225);
      var $227=($226|0)==0;
      var $228=HEAP32[(($1)>>2)];
      var $229=(($228)|0);
      var $__i_i=$227?8:2;
      HEAP32[(($229)>>2)]=$__i_i;
      if ($227) {
       var $_0_i=0;
       break L6102;
      }
      var $231=HEAP32[(($6)>>2)];
      var $232=(($231+6144)|0);
      HEAP32[(($232)>>2)]=0;
      L6113: while(1) {
       var $233=HEAP32[(($1)>>2)];
       var $234=(($233)|0);
       var $235=HEAP32[(($234)>>2)];
       switch (($235|0)) {
       case 3: {
        var $243=_read_frame_($decoder,$got_a_frame_i_i,1);
        var $244=($243|0)==0;
        if ($244) {
         label = 4570;
         break L6104;
        }
        var $246=HEAP32[(($got_a_frame_i_i)>>2)];
        var $247=($246|0)==0;
        if ($247) {
         continue L6113;
        } else {
         break L6113;
        }
        break;
       }
       case 1: {
        label = 4569;
        break L6113;
        break;
       }
       case 2: {
        var $240=_frame_sync_($decoder);
        var $241=($240|0)==0;
        if ($241) {
         break L6113;
        } else {
         continue L6113;
        }
        break;
       }
       case 0: {
        var $237=_find_metadata_($decoder);
        var $238=($237|0)==0;
        if ($238) {
         label = 4570;
         break L6104;
        } else {
         continue L6113;
        }
        break;
       }
       case 4:case 7: {
        break L6113;
        break;
       }
       default: {
        label = 4570;
        break L6104;
       }
       }
      }
      if (label == 4569) {
       label = 0;
       var $248=_read_metadata_($decoder);
       var $not__i_i=($248|0)==0;
       if ($not__i_i) {
        label = 4570;
        break L6104;
       }
      }
      var $251=HEAP32[(($6)>>2)];
      var $252=(($251+3624)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=($253|0)==0;
      if ($254) {
       var $_0_i=1;
       break L6102;
      }
      var $256=(($251+3768)|0);
      var $ld$44$0=(($256)|0);
      var $257$0=HEAP32[(($ld$44$0)>>2)];
      var $ld$45$1=(($256+4)|0);
      var $257$1=HEAP32[(($ld$45$1)>>2)];
      var $258=(($251+240)|0);
      var $ld$46$0=(($258)|0);
      var $259$0=HEAP32[(($ld$46$0)>>2)];
      var $ld$47$1=(($258+4)|0);
      var $259$1=HEAP32[(($ld$47$1)>>2)];
      var $$etemp$48$0=0;
      var $$etemp$48$1=0;
      var $260=(($259$0|0) == ($$etemp$48$0|0)) & (($259$1|0) == ($$etemp$48$1|0));
      if (!($260)) {
       var $262=(($251+3744)|0);
       var $263=HEAP32[(($262)>>2)];
       var $264$0=$263;
       var $264$1=0;
       var $265$0=_i64Add($264$0,$264$1,$257$0,$257$1);var $265$1=tempRet0;
       var $266=(($265$1>>>0) >= ($upper_bound_sample_2_ph_ph172_i$1>>>0)) & (((($265$1>>>0) >  ($upper_bound_sample_2_ph_ph172_i$1>>>0)) | ($265$0>>>0) >= ($upper_bound_sample_2_ph_ph172_i$0>>>0)));
       var $or_cond110_i=$266&$190;
       if (!($or_cond110_i)) {
        break;
       }
      }
      var $ld$49$0=(($lower_bound_i)|0);
      var $268$0=HEAP32[(($ld$49$0)>>2)];
      var $ld$50$1=(($lower_bound_i+4)|0);
      var $268$1=HEAP32[(($ld$50$1)>>2)];
      var $269=(($pos_1_i$0|0) == ($268$0|0)) & (($pos_1_i$1|0) == ($268$1|0));
      if ($269) {
       label = 4575;
       break L6104;
      }
      var $273=$approx_bytes_per_frame_1131_i44<<1;
      var $274=($approx_bytes_per_frame_1131_i44|0)==0;
      var $_111_i=$274?16:$273;
      var $ld$51$0=(($upper_bound_i)|0);
      var $275$0=HEAP32[(($ld$51$0)>>2)];
      var $ld$52$1=(($upper_bound_i+4)|0);
      var $275$1=HEAP32[(($ld$52$1)>>2)];
      var $276=(($268$1>>>0) > ($275$1>>>0)) | (((($268$1>>>0) == ($275$1>>>0) & ($268$0>>>0) >  ($275$0>>>0))));
      if ($276) {
       label = 4559;
       break L6102;
      } else {
       var $198$1=$268$1;var $198$0=$268$0;var $approx_bytes_per_frame_1131_i44=$_111_i;var $197$1=$275$1;var $197$0=$275$0;var $196=$251;
      }
     }
     var $278=(($257$1>>>0) < ($lower_bound_sample_1_ph169_i$1>>>0)) | (((($257$1>>>0) == ($lower_bound_sample_1_ph169_i$1>>>0) & ($257$0>>>0) <  ($lower_bound_sample_1_ph169_i$0>>>0))));
     if ($278) {
      label = 4578;
      break L6104;
     }
     var $283=(($257$1>>>0) > ($sample$1>>>0)) | (((($257$1>>>0) == ($sample$1>>>0) & ($257$0>>>0) >  ($sample$0>>>0))));
     var $284=(($251+8)|0);
     var $285=HEAP32[(($284)>>2)];
     var $286=($285|0)==0;
     if ($283) {
      break;
     }
     if ($286) {
      label = 4588;
      break L6104;
     }
     var $317=(($251+52)|0);
     var $318=HEAP32[(($317)>>2)];
     var $319=FUNCTION_TABLE[$285]($decoder,$lower_bound_i,$318);
     var $320=($319|0)==0;
     if (!($320)) {
      label = 4588;
      break L6104;
     }
     var $322=HEAP32[(($6)>>2)];
     var $323=(($322+60)|0);
     var $324=HEAP32[(($323)>>2)];
     var $325=_FLAC__bitreader_is_consumed_byte_aligned($324);
     var $326=($325|0)==0;
     if ($326) {
      label = 4588;
      break L6104;
     }
     var $329=HEAP32[(($6)>>2)];
     var $330=(($329+60)|0);
     var $331=HEAP32[(($330)>>2)];
     var $332=_FLAC__bitreader_get_input_bits_unconsumed($331);
     var $333=$332>>>3;
     var $334$0=$333;
     var $334$1=0;
     var $ld$59$0=(($lower_bound_i)|0);
     var $335$0=HEAP32[(($ld$59$0)>>2)];
     var $ld$60$1=(($lower_bound_i+4)|0);
     var $335$1=HEAP32[(($ld$60$1)>>2)];
     var $336$0=_i64Subtract($335$0,$335$1,$334$0,$334$1);var $336$1=tempRet0;
     var $st$61$0=(($lower_bound_i)|0);
     HEAP32[(($st$61$0)>>2)]=$336$0;
     var $st$62$1=(($lower_bound_i+4)|0);
     HEAP32[(($st$62$1)>>2)]=$336$1;
     var $337=(($265$1>>>0) < ($upper_bound_sample_2_ph_ph172_i$1>>>0)) | (((($265$1>>>0) == ($upper_bound_sample_2_ph_ph172_i$1>>>0) & ($265$0>>>0) <  ($upper_bound_sample_2_ph_ph172_i$0>>>0))));
     if (!($337)) {
      label = 4559;
      break L6102;
     }
     var $338$0=_i64Subtract($336$0,$336$1,$pos_1_i$0,$pos_1_i$1);var $338$1=tempRet0;
     var $339$0=($338$0<<1)|(0>>>31);
     var $339$1=($338$1<<1)|($338$0>>>31);
     var $$etemp$63$0=3;
     var $$etemp$63$1=0;
     var $340$0=___udivdi3($339$0,$339$1,$$etemp$63$0,$$etemp$63$1);var $340$1=tempRet0;
     var $$etemp$64$0=16;
     var $$etemp$64$1=0;
     var $341$0=_i64Add($340$0,$340$1,$$etemp$64$0,$$etemp$64$1);var $341$1=tempRet0;
     var $342$0=$341$0;
     var $342=$342$0;
     var $first_seek_0_ph167_i=0;var $approx_bytes_per_frame_1_ph168_i=$342;var $lower_bound_sample_1_ph169_i$1=$265$1;var $lower_bound_sample_1_ph169_i$0=$265$0;var $_pre_i$1=$336$1;var $_pre_i$0=$336$0;
    }
    if ($286) {
     label = 4583;
     break;
    }
    var $289=(($251+52)|0);
    var $290=HEAP32[(($289)>>2)];
    var $291=FUNCTION_TABLE[$285]($decoder,$upper_bound_i,$290);
    var $292=($291|0)==0;
    if (!($292)) {
     label = 4583;
     break;
    }
    var $294=HEAP32[(($6)>>2)];
    var $295=(($294+60)|0);
    var $296=HEAP32[(($295)>>2)];
    var $297=_FLAC__bitreader_is_consumed_byte_aligned($296);
    var $298=($297|0)==0;
    if ($298) {
     label = 4583;
     break;
    }
    var $301=HEAP32[(($6)>>2)];
    var $302=(($301+60)|0);
    var $303=HEAP32[(($302)>>2)];
    var $304=_FLAC__bitreader_get_input_bits_unconsumed($303);
    var $305=$304>>>3;
    var $306$0=$305;
    var $306$1=0;
    var $ld$53$0=(($upper_bound_i)|0);
    var $307$0=HEAP32[(($ld$53$0)>>2)];
    var $ld$54$1=(($upper_bound_i+4)|0);
    var $307$1=HEAP32[(($ld$54$1)>>2)];
    var $308$0=_i64Subtract($307$0,$307$1,$306$0,$306$1);var $308$1=tempRet0;
    var $st$55$0=(($upper_bound_i)|0);
    HEAP32[(($st$55$0)>>2)]=$308$0;
    var $st$56$1=(($upper_bound_i+4)|0);
    HEAP32[(($st$56$1)>>2)]=$308$1;
    var $309$0=_i64Subtract($308$0,$308$1,$pos_1_i$0,$pos_1_i$1);var $309$1=tempRet0;
    var $310$0=($309$0<<1)|(0>>>31);
    var $310$1=($309$1<<1)|($309$0>>>31);
    var $$etemp$57$0=3;
    var $$etemp$57$1=0;
    var $311$0=___udivdi3($310$0,$310$1,$$etemp$57$0,$$etemp$57$1);var $311$1=tempRet0;
    var $$etemp$58$0=16;
    var $$etemp$58$1=0;
    var $312$0=_i64Add($311$0,$311$1,$$etemp$58$0,$$etemp$58$1);var $312$1=tempRet0;
    var $313$0=$312$0;
    var $313=$313$0;
    var $314=(($lower_bound_sample_1_ph169_i$1>>>0) < ($265$1>>>0)) | (((($lower_bound_sample_1_ph169_i$1>>>0) == ($265$1>>>0) & ($lower_bound_sample_1_ph169_i$0>>>0) <  ($265$0>>>0))));
    if ($314) {
     var $first_seek_0_ph_ph170_i=0;var $approx_bytes_per_frame_1_ph_ph171_i=$313;var $upper_bound_sample_2_ph_ph172_i$1=$265$1;var $upper_bound_sample_2_ph_ph172_i$0=$265$0;var $lower_bound_sample_1_ph_ph173_i$1=$lower_bound_sample_1_ph169_i$1;var $lower_bound_sample_1_ph_ph173_i$0=$lower_bound_sample_1_ph169_i$0;
    } else {
     label = 4559;
     break L6102;
    }
   }
   if (label == 4570) {
    var $249=HEAP32[(($1)>>2)];
    var $250=(($249)|0);
    HEAP32[(($250)>>2)]=6;
    var $_0_i=0;
    break;
   }
   else if (label == 4561) {
    var $216=HEAP32[(($1)>>2)];
    var $217=(($216)|0);
    HEAP32[(($217)>>2)]=6;
    var $_0_i=0;
    break;
   }
   else if (label == 4575) {
    var $271=HEAP32[(($1)>>2)];
    var $272=(($271)|0);
    HEAP32[(($272)>>2)]=6;
    var $_0_i=0;
    break;
   }
   else if (label == 4578) {
    var $280=HEAP32[(($1)>>2)];
    var $281=(($280)|0);
    HEAP32[(($281)>>2)]=6;
    var $_0_i=0;
    break;
   }
   else if (label == 4583) {
    var $299=HEAP32[(($1)>>2)];
    var $300=(($299)|0);
    HEAP32[(($300)>>2)]=6;
    var $_0_i=0;
    break;
   }
   else if (label == 4588) {
    var $327=HEAP32[(($1)>>2)];
    var $328=(($327)|0);
    HEAP32[(($328)>>2)]=6;
    var $_0_i=0;
    break;
   }
  } else {
   label = 4559;
  }
 } while(0);
 if (label == 4559) {
  var $193=HEAP32[(($1)>>2)];
  var $194=(($193)|0);
  HEAP32[(($194)>>2)]=6;
  var $_0_i=0;
 }
 var $_0_i;
 var $343=HEAP32[(($6)>>2)];
 var $344=(($343+3624)|0);
 HEAP32[(($344)>>2)]=0;
 var $_0=$_0_i;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _read_residual_partitioned_rice_($decoder,$predictor_order,$partition_order,$partitioned_rice_contents,$residual,$is_extended){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $rice_parameter=sp;
 var $i=(sp)+(8);
 var $1=1<<$partition_order;
 var $2=($partition_order|0)==0;
 var $3=(($decoder+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+1136)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6>>>($partition_order>>>0);
 var $8=((($6)-($predictor_order))|0);
 var $9=$2?$8:$7;
 var $10=($is_extended|0)!=0;
 var $11=HEAP32[((10528)>>2)];
 var $12=HEAP32[((10504)>>2)];
 var $13=$10?$11:$12;
 var $14=HEAP32[((10536)>>2)];
 var $15=HEAP32[((10520)>>2)];
 var $16=$10?$14:$15;
 do {
  if ($2) {
   var $18=($6>>>0)<($predictor_order>>>0);
   if (!($18)) {
    break;
   }
   var $20=(($4+3624)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=($21|0)==0;
   if ($22) {
    var $24=(($4+28)|0);
    var $25=HEAP32[(($24)>>2)];
    var $26=(($4+52)|0);
    var $27=HEAP32[(($26)>>2)];
    FUNCTION_TABLE[$25]($decoder,0,$27);
   }
   var $28=(($decoder)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|0);
   HEAP32[(($30)>>2)]=2;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $32=($9>>>0)<($predictor_order>>>0);
   if (!($32)) {
    break;
   }
   var $34=(($4+3624)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=($35|0)==0;
   if ($36) {
    var $38=(($4+28)|0);
    var $39=HEAP32[(($38)>>2)];
    var $40=(($4+52)|0);
    var $41=HEAP32[(($40)>>2)];
    FUNCTION_TABLE[$39]($decoder,0,$41);
   }
   var $42=(($decoder)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|0);
   HEAP32[(($44)>>2)]=2;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $46=($partition_order>>>0)<6;
 var $47=$46?6:$partition_order;
 var $48=_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($partitioned_rice_contents,$47);
 var $49=($48|0)==0;
 if ($49) {
  var $106=(($decoder)|0);
  var $107=HEAP32[(($106)>>2)];
  var $108=(($107)|0);
  HEAP32[(($108)>>2)]=8;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $50=(($partitioned_rice_contents)|0);
 var $51=(($partitioned_rice_contents+4)|0);
 var $_not=$2^1;
 var $52=HEAP32[((10496)>>2)];
 if ($2) {
  var $sample_056_us=0;var $partition_057_us=0;
  L6188: while(1) {
   var $partition_057_us;
   var $sample_056_us;
   var $53=HEAP32[(($3)>>2)];
   var $54=(($53+60)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=_FLAC__bitreader_read_raw_uint32($55,$rice_parameter,$13);
   var $57=($56|0)==0;
   if ($57) {
    var $_0=0;
    label = 4642;
    break;
   }
   var $59=HEAP32[(($rice_parameter)>>2)];
   var $60=HEAP32[(($50)>>2)];
   var $61=(($60+($partition_057_us<<2))|0);
   HEAP32[(($61)>>2)]=$59;
   var $62=HEAP32[(($rice_parameter)>>2)];
   var $63=($62>>>0)<($16>>>0);
   do {
    if ($63) {
     var $83=HEAP32[(($51)>>2)];
     var $84=(($83+($partition_057_us<<2))|0);
     HEAP32[(($84)>>2)]=0;
     var $85=($partition_057_us|0)==0;
     var $or_cond_us=$85&$_not;
     var $86=$or_cond_us?$predictor_order:0;
     var $87=((($9)-($86))|0);
     var $88=HEAP32[(($3)>>2)];
     var $89=(($88+48)|0);
     var $90=HEAP32[(($89)>>2)];
     var $91=(($88+60)|0);
     var $92=HEAP32[(($91)>>2)];
     var $93=(($residual+($sample_056_us<<2))|0);
     var $94=HEAP32[(($rice_parameter)>>2)];
     var $95=FUNCTION_TABLE[$90]($92,$93,$87,$94);
     var $96=($95|0)==0;
     if ($96) {
      var $_0=0;
      label = 4639;
      break L6188;
     }
     var $98=((($87)+($sample_056_us))|0);
     var $sample_2_us=$98;
    } else {
     var $65=HEAP32[(($3)>>2)];
     var $66=(($65+60)|0);
     var $67=HEAP32[(($66)>>2)];
     var $68=_FLAC__bitreader_read_raw_uint32($67,$rice_parameter,$52);
     var $69=($68|0)==0;
     if ($69) {
      var $_0=0;
      label = 4641;
      break L6188;
     }
     var $101=HEAP32[(($rice_parameter)>>2)];
     var $102=HEAP32[(($51)>>2)];
     var $103=(($102+($partition_057_us<<2))|0);
     HEAP32[(($103)>>2)]=$101;
     var $104=($9|0)==0;
     if ($104) {
      var $sample_2_us=$sample_056_us;
      break;
     } else {
      var $u_052_us=0;var $sample_153_us=$sample_056_us;
     }
     while(1) {
      var $sample_153_us;
      var $u_052_us;
      var $70=HEAP32[(($3)>>2)];
      var $71=(($70+60)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=HEAP32[(($rice_parameter)>>2)];
      var $74=_FLAC__bitreader_read_raw_int32($72,$i,$73);
      var $75=($74|0)==0;
      if ($75) {
       var $_0=0;
       label = 4640;
       break L6188;
      }
      var $77=HEAP32[(($i)>>2)];
      var $78=(($residual+($sample_153_us<<2))|0);
      HEAP32[(($78)>>2)]=$77;
      var $79=((($u_052_us)+(1))|0);
      var $80=((($sample_153_us)+(1))|0);
      var $81=($79>>>0)<($9>>>0);
      if ($81) {
       var $u_052_us=$79;var $sample_153_us=$80;
      } else {
       var $sample_2_us=$80;
       break;
      }
     }
    }
   } while(0);
   var $sample_2_us;
   var $99=((($partition_057_us)+(1))|0);
   var $100=($99>>>0)<($1>>>0);
   if ($100) {
    var $sample_056_us=$sample_2_us;var $partition_057_us=$99;
   } else {
    var $_0=1;
    label = 4633;
    break;
   }
  }
  if (label == 4640) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 4641) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 4642) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 4633) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 4639) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } else {
  var $sample_056=0;var $partition_057=0;
  L6170: while(1) {
   var $partition_057;
   var $sample_056;
   var $109=HEAP32[(($3)>>2)];
   var $110=(($109+60)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=_FLAC__bitreader_read_raw_uint32($111,$rice_parameter,$13);
   var $113=($112|0)==0;
   if ($113) {
    var $_0=0;
    label = 4634;
    break;
   }
   var $115=HEAP32[(($rice_parameter)>>2)];
   var $116=HEAP32[(($50)>>2)];
   var $117=(($116+($partition_057<<2))|0);
   HEAP32[(($117)>>2)]=$115;
   var $118=HEAP32[(($rice_parameter)>>2)];
   var $119=($118>>>0)<($16>>>0);
   do {
    if ($119) {
     var $121=HEAP32[(($51)>>2)];
     var $122=(($121+($partition_057<<2))|0);
     HEAP32[(($122)>>2)]=0;
     var $123=($partition_057|0)==0;
     var $or_cond=$123&$_not;
     var $124=$or_cond?$predictor_order:0;
     var $125=((($9)-($124))|0);
     var $126=HEAP32[(($3)>>2)];
     var $127=(($126+48)|0);
     var $128=HEAP32[(($127)>>2)];
     var $129=(($126+60)|0);
     var $130=HEAP32[(($129)>>2)];
     var $131=(($residual+($sample_056<<2))|0);
     var $132=HEAP32[(($rice_parameter)>>2)];
     var $133=FUNCTION_TABLE[$128]($130,$131,$125,$132);
     var $134=($133|0)==0;
     if ($134) {
      var $_0=0;
      label = 4635;
      break L6170;
     }
     var $136=((($125)+($sample_056))|0);
     var $sample_2=$136;
    } else {
     var $138=HEAP32[(($3)>>2)];
     var $139=(($138+60)|0);
     var $140=HEAP32[(($139)>>2)];
     var $141=_FLAC__bitreader_read_raw_uint32($140,$rice_parameter,$52);
     var $142=($141|0)==0;
     if ($142) {
      var $_0=0;
      label = 4636;
      break L6170;
     }
     var $143=HEAP32[(($rice_parameter)>>2)];
     var $144=HEAP32[(($51)>>2)];
     var $145=(($144+($partition_057<<2))|0);
     HEAP32[(($145)>>2)]=$143;
     var $146=($partition_057|0)!=0;
     var $_=$146?0:$predictor_order;
     var $147=($_>>>0)<($9>>>0);
     if ($147) {
      var $u_052=$_;var $sample_153=$sample_056;
     } else {
      var $sample_2=$sample_056;
      break;
     }
     while(1) {
      var $sample_153;
      var $u_052;
      var $148=HEAP32[(($3)>>2)];
      var $149=(($148+60)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=HEAP32[(($rice_parameter)>>2)];
      var $152=_FLAC__bitreader_read_raw_int32($150,$i,$151);
      var $153=($152|0)==0;
      if ($153) {
       var $_0=0;
       label = 4637;
       break L6170;
      }
      var $155=HEAP32[(($i)>>2)];
      var $156=(($residual+($sample_153<<2))|0);
      HEAP32[(($156)>>2)]=$155;
      var $157=((($u_052)+(1))|0);
      var $158=((($sample_153)+(1))|0);
      var $159=($157>>>0)<($9>>>0);
      if ($159) {
       var $u_052=$157;var $sample_153=$158;
      } else {
       var $sample_2=$158;
       break;
      }
     }
    }
   } while(0);
   var $sample_2;
   var $160=((($partition_057)+(1))|0);
   var $161=($160>>>0)<($1>>>0);
   if ($161) {
    var $sample_056=$sample_2;var $partition_057=$160;
   } else {
    var $_0=1;
    label = 4638;
    break;
   }
  }
  if (label == 4636) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 4634) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 4635) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 4637) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
  else if (label == 4638) {
   var $_0;
   STACKTOP=sp;return $_0;
  }
 }
}
function _file_read_callback_($decoder,$buffer,$bytes,$client_data){
 var label=0;
 var $1=HEAP32[(($bytes)>>2)];
 var $2=($1|0)==0;
 if ($2) {
  var $_0=2;
  var $_0;
  return $_0;
 }
 var $4=(($decoder+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+56)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=_fread($buffer,1,$1,$7);
 HEAP32[(($bytes)>>2)]=$8;
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+56)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_ferror($11);
 var $13=($12|0)==0;
 if (!($13)) {
  var $_0=2;
  var $_0;
  return $_0;
 }
 var $15=($8|0)==0;
 var $_=($15&1);
 var $_0=$_;
 var $_0;
 return $_0;
}
function _file_seek_callback_($decoder,$absolute_byte_offset$0,$absolute_byte_offset$1,$client_data){
 var label=0;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+56)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=HEAP32[((_stdin)>>2)];
 var $6=($4|0)==($5|0);
 if ($6) {
  var $_0=2;
  var $_0;
  return $_0;
 }
 var $8$0=$absolute_byte_offset$0;
 var $8=$8$0;
 var $9=_fseek($4,$8,0);
 var $_lobit=$9>>>31;
 var $_0=$_lobit;
 var $_0;
 return $_0;
}
function _file_tell_callback_($decoder,$absolute_byte_offset,$client_data){
 var label=0;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+56)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=HEAP32[((_stdin)>>2)];
 var $6=($4|0)==($5|0);
 if ($6) {
  var $_0=2;
  var $_0;
  return $_0;
 }
 var $8=_ftell($4);
 var $9=($8|0)<0;
 if ($9) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $11$0=$8;
 var $11$1=(((($8|0)<0))|0)?-1:0;
 var $st$0$0=(($absolute_byte_offset)|0);
 HEAP32[(($st$0$0)>>2)]=$11$0;
 var $st$1$1=(($absolute_byte_offset+4)|0);
 HEAP32[(($st$1$1)>>2)]=$11$1;
 var $_0=0;
 var $_0;
 return $_0;
}
function _file_length_callback_($decoder,$stream_length,$client_data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0;
 var $filestats=sp;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+56)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=HEAP32[((_stdin)>>2)];
 var $6=($4|0)==($5|0);
 if ($6) {
  var $_0=2;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $8=_fileno($4);
 var $9=_fstat($8,$filestats);
 var $10=($9|0)==0;
 if (!($10)) {
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $12=(($filestats+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14$0=$13;
 var $14$1=(((($13|0)<0))|0)?-1:0;
 var $st$0$0=(($stream_length)|0);
 HEAP32[(($st$0$0)>>2)]=$14$0;
 var $st$1$1=(($stream_length+4)|0);
 HEAP32[(($st$1$1)>>2)]=$14$1;
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _file_eof_callback_($decoder,$client_data){
 var label=0;
 var $1=(($decoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+56)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_feof($4);
 var $6=($5|0)!=0;
 var $7=($6&1);
 return $7;
}
function _read_callback_($buffer,$bytes,$client_data){
 var label=0;
 var $1=$client_data;
 var $2=(($client_data+4)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 do {
  if (!($7)) {
   var $9=(($4+52)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=FUNCTION_TABLE[$6]($1,$10);
   var $12=($11|0)==0;
   if ($12) {
    break;
   }
   HEAP32[(($bytes)>>2)]=0;
   var $14=$client_data;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|0);
   HEAP32[(($16)>>2)]=4;
   var $_0=0;
   var $_0;
   return $_0;
  }
 } while(0);
 var $18=HEAP32[(($bytes)>>2)];
 var $19=($18|0)==0;
 if ($19) {
  var $64=$client_data;
  var $65=HEAP32[(($64)>>2)];
  var $66=(($65)|0);
  HEAP32[(($66)>>2)]=7;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $21=HEAP32[(($3)>>2)];
 var $22=(($21+3624)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 do {
  if (!($24)) {
   var $26=(($21+6144)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=($27>>>0)>20;
   if (!($28)) {
    break;
   }
   var $30=$client_data;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|0);
   HEAP32[(($32)>>2)]=7;
   var $_0=0;
   var $_0;
   return $_0;
  }
 } while(0);
 var $34=(($21)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($21+52)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=FUNCTION_TABLE[$35]($1,$buffer,$bytes,$37);
 var $39=($38|0)==2;
 if ($39) {
  var $41=$client_data;
  var $42=HEAP32[(($41)>>2)];
  var $43=(($42)|0);
  HEAP32[(($43)>>2)]=7;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $45=HEAP32[(($bytes)>>2)];
 var $46=($45|0)==0;
 if (!($46)) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $48=($38|0)==1;
 do {
  if (!($48)) {
   var $50=HEAP32[(($3)>>2)];
   var $51=(($50+16)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=($52|0)==0;
   if ($53) {
    var $_0=1;
    var $_0;
    return $_0;
   }
   var $55=(($50+52)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=FUNCTION_TABLE[$52]($1,$56);
   var $58=($57|0)==0;
   if ($58) {
    var $_0=1;
   } else {
    break;
   }
   var $_0;
   return $_0;
  }
 } while(0);
 var $60=$client_data;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61)|0);
 HEAP32[(($62)>>2)]=4;
 var $_0=0;
 var $_0;
 return $_0;
}
function _FLAC__add_metadata_block($metadata,$bw){
 var label=0;
 var $1=HEAP32[((9392)>>2)];
 var $2=_strlen($1);
 var $3=(($metadata+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=HEAP32[((10096)>>2)];
 var $6=_FLAC__bitwriter_write_raw_uint32($bw,$4,$5);
 var $7=($6|0)==0;
 if ($7) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9=(($metadata)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[((9912)>>2)];
 var $12=_FLAC__bitwriter_write_raw_uint32($bw,$10,$11);
 var $13=($12|0)==0;
 if ($13) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $15=(($metadata+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=HEAP32[(($9)>>2)];
 var $18=($17|0)==4;
 if ($18) {
  var $20=(($metadata+16)|0);
  var $21=$20;
  var $22=HEAP32[(($21)>>2)];
  var $23=((($16)+($2))|0);
  var $24=((($23)-($22))|0);
  var $i_0=$24;
 } else {
  var $i_0=$16;
 }
 var $i_0;
 var $26=HEAP32[((10088)>>2)];
 var $27=_FLAC__bitwriter_write_raw_uint32($bw,$i_0,$26);
 var $28=($27|0)==0;
 if ($28) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $30=HEAP32[(($9)>>2)];
 L6279: do {
  switch (($30|0)) {
  case 4: {
   var $142=_FLAC__bitwriter_write_raw_uint32_little_endian($bw,$2);
   var $143=($142|0)==0;
   if ($143) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $145=HEAP32[((9392)>>2)];
   var $146=_FLAC__bitwriter_write_byte_block($bw,$145,$2);
   var $147=($146|0)==0;
   if ($147) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $149=(($metadata+24)|0);
   var $150=$149;
   var $151=HEAP32[(($150)>>2)];
   var $152=_FLAC__bitwriter_write_raw_uint32_little_endian($bw,$151);
   var $153=($152|0)==0;
   if ($153) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $154=(($metadata+28)|0);
   var $155=$154;
   var $i_2=0;
   while(1) {
    var $i_2;
    var $157=HEAP32[(($150)>>2)];
    var $158=($i_2>>>0)<($157>>>0);
    if (!($158)) {
     break L6279;
    }
    var $160=HEAP32[(($155)>>2)];
    var $161=(($160+($i_2<<3))|0);
    var $162=HEAP32[(($161)>>2)];
    var $163=_FLAC__bitwriter_write_raw_uint32_little_endian($bw,$162);
    var $164=($163|0)==0;
    if ($164) {
     var $_0=0;
     label = 4790;
     break;
    }
    var $166=HEAP32[(($155)>>2)];
    var $167=(($166+($i_2<<3)+4)|0);
    var $168=HEAP32[(($167)>>2)];
    var $169=(($166+($i_2<<3))|0);
    var $170=HEAP32[(($169)>>2)];
    var $171=_FLAC__bitwriter_write_byte_block($bw,$168,$170);
    var $172=($171|0)==0;
    var $173=((($i_2)+(1))|0);
    if ($172) {
     var $_0=0;
     label = 4791;
     break;
    } else {
     var $i_2=$173;
    }
   }
   if (label == 4790) {
    var $_0;
    return $_0;
   }
   else if (label == 4791) {
    var $_0;
    return $_0;
   }
   break;
  }
  case 2: {
   var $106=(($metadata+16)|0);
   var $107=HEAP32[((10224)>>2)];
   var $108=$107>>>3;
   var $109=_FLAC__bitwriter_write_byte_block($bw,$106,$108);
   var $110=($109|0)==0;
   if ($110) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $112=(($metadata+20)|0);
   var $113=$112;
   var $114=HEAP32[(($113)>>2)];
   var $115=HEAP32[(($15)>>2)];
   var $116=((($115)-($108))|0);
   var $117=_FLAC__bitwriter_write_byte_block($bw,$114,$116);
   var $118=($117|0)==0;
   if ($118) {
    var $_0=0;
   } else {
    break L6279;
   }
   var $_0;
   return $_0;
   break;
  }
  case 3: {
   var $31=(($metadata+16)|0);
   var $32=$31;
   var $33=(($metadata+20)|0);
   var $34=$33;
   var $35=HEAP32[((10000)>>2)];
   var $36=HEAP32[((9992)>>2)];
   var $37=HEAP32[((10016)>>2)];
   var $i_1=0;
   while(1) {
    var $i_1;
    var $120=HEAP32[(($32)>>2)];
    var $121=($i_1>>>0)<($120>>>0);
    if (!($121)) {
     break L6279;
    }
    var $123=HEAP32[(($34)>>2)];
    var $124=(($123+((($i_1)*(24))&-1))|0);
    var $ld$2$0=(($124)|0);
    var $125$0=HEAP32[(($ld$2$0)>>2)];
    var $ld$3$1=(($124+4)|0);
    var $125$1=HEAP32[(($ld$3$1)>>2)];
    var $126=_FLAC__bitwriter_write_raw_uint64($bw,$125$0,$125$1,$35);
    var $127=($126|0)==0;
    if ($127) {
     var $_0=0;
     label = 4767;
     break;
    }
    var $129=HEAP32[(($34)>>2)];
    var $130=(($129+((($i_1)*(24))&-1)+8)|0);
    var $ld$4$0=(($130)|0);
    var $131$0=HEAP32[(($ld$4$0)>>2)];
    var $ld$5$1=(($130+4)|0);
    var $131$1=HEAP32[(($ld$5$1)>>2)];
    var $132=_FLAC__bitwriter_write_raw_uint64($bw,$131$0,$131$1,$36);
    var $133=($132|0)==0;
    if ($133) {
     var $_0=0;
     label = 4768;
     break;
    }
    var $135=HEAP32[(($34)>>2)];
    var $136=(($135+((($i_1)*(24))&-1)+16)|0);
    var $137=HEAP32[(($136)>>2)];
    var $138=_FLAC__bitwriter_write_raw_uint32($bw,$137,$37);
    var $139=($138|0)==0;
    var $140=((($i_1)+(1))|0);
    if ($139) {
     var $_0=0;
     label = 4795;
     break;
    } else {
     var $i_1=$140;
    }
   }
   if (label == 4795) {
    var $_0;
    return $_0;
   }
   else if (label == 4767) {
    var $_0;
    return $_0;
   }
   else if (label == 4768) {
    var $_0;
    return $_0;
   }
   break;
  }
  case 5: {
   var $175=(($metadata+16)|0);
   var $176=HEAP32[((10176)>>2)];
   var $177=$176>>>3;
   var $178=_FLAC__bitwriter_write_byte_block($bw,$175,$177);
   var $179=($178|0)==0;
   if ($179) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $181=(($metadata+152)|0);
   var $ld$6$0=(($181)|0);
   var $182$0=HEAP32[(($ld$6$0)>>2)];
   var $ld$7$1=(($181+4)|0);
   var $182$1=HEAP32[(($ld$7$1)>>2)];
   var $183=HEAP32[((10184)>>2)];
   var $184=_FLAC__bitwriter_write_raw_uint64($bw,$182$0,$182$1,$183);
   var $185=($184|0)==0;
   if ($185) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $187=(($metadata+160)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=($188|0)!=0;
   var $190=($189&1);
   var $191=HEAP32[((10192)>>2)];
   var $192=_FLAC__bitwriter_write_raw_uint32($bw,$190,$191);
   var $193=($192|0)==0;
   if ($193) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $195=HEAP32[((10160)>>2)];
   var $196=_FLAC__bitwriter_write_zeroes($bw,$195);
   var $197=($196|0)==0;
   if ($197) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $199=(($metadata+164)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=HEAP32[((10168)>>2)];
   var $202=_FLAC__bitwriter_write_raw_uint32($bw,$200,$201);
   var $203=($202|0)==0;
   if ($203) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $204=HEAP32[(($199)>>2)];
   var $205=($204|0)==0;
   if ($205) {
    break L6279;
   }
   var $206=(($metadata+168)|0);
   var $207=HEAP32[((10128)>>2)];
   var $208=HEAP32[((10144)>>2)];
   var $209=HEAP32[((10152)>>2)];
   var $210=$209>>>3;
   var $211=HEAP32[((10104)>>2)];
   var $212=HEAP32[((10120)>>2)];
   var $213=HEAP32[((10112)>>2)];
   var $214=HEAP32[((10136)>>2)];
   var $215=HEAP32[((10208)>>2)];
   var $216=HEAP32[((10216)>>2)];
   var $217=HEAP32[((10200)>>2)];
   var $i_3138=0;
   L6329: while(1) {
    var $i_3138;
    var $219=HEAP32[(($206)>>2)];
    var $220=(($219+($i_3138<<5))|0);
    var $ld$8$0=(($220)|0);
    var $221$0=HEAP32[(($ld$8$0)>>2)];
    var $ld$9$1=(($220+4)|0);
    var $221$1=HEAP32[(($ld$9$1)>>2)];
    var $222=_FLAC__bitwriter_write_raw_uint64($bw,$221$0,$221$1,$207);
    var $223=($222|0)==0;
    if ($223) {
     var $_0=0;
     label = 4762;
     break;
    }
    var $225=(($219+($i_3138<<5)+8)|0);
    var $226=HEAP8[($225)];
    var $227=($226&255);
    var $228=_FLAC__bitwriter_write_raw_uint32($bw,$227,$208);
    var $229=($228|0)==0;
    if ($229) {
     var $_0=0;
     label = 4792;
     break;
    }
    var $231=(($219+($i_3138<<5)+9)|0);
    var $232=_FLAC__bitwriter_write_byte_block($bw,$231,$210);
    var $233=($232|0)==0;
    if ($233) {
     var $_0=0;
     label = 4793;
     break;
    }
    var $235=(($219+($i_3138<<5)+20)|0);
    var $236=$235;
    var $237=HEAP32[(($236)>>2)];
    var $238=$237>>>16;
    var $239=$238&1;
    var $240=_FLAC__bitwriter_write_raw_uint32($bw,$239,$211);
    var $241=($240|0)==0;
    if ($241) {
     var $_0=0;
     label = 4760;
     break;
    }
    var $243=HEAP32[(($236)>>2)];
    var $244=$243>>>17;
    var $245=$244&1;
    var $246=_FLAC__bitwriter_write_raw_uint32($bw,$245,$212);
    var $247=($246|0)==0;
    if ($247) {
     var $_0=0;
     label = 4761;
     break;
    }
    var $249=_FLAC__bitwriter_write_zeroes($bw,$213);
    var $250=($249|0)==0;
    if ($250) {
     var $_0=0;
     label = 4763;
     break;
    }
    var $252=(($219+($i_3138<<5)+23)|0);
    var $253=HEAP8[($252)];
    var $254=($253&255);
    var $255=_FLAC__bitwriter_write_raw_uint32($bw,$254,$214);
    var $256=($255|0)==0;
    if ($256) {
     var $_0=0;
     label = 4764;
     break;
    }
    var $257=(($219+($i_3138<<5)+24)|0);
    var $j_0=0;
    while(1) {
     var $j_0;
     var $259=HEAP8[($252)];
     var $260=($259&255);
     var $261=($j_0>>>0)<($260>>>0);
     if (!($261)) {
      break;
     }
     var $263=HEAP32[(($257)>>2)];
     var $264=(($263+($j_0<<4))|0);
     var $ld$10$0=(($264)|0);
     var $265$0=HEAP32[(($ld$10$0)>>2)];
     var $ld$11$1=(($264+4)|0);
     var $265$1=HEAP32[(($ld$11$1)>>2)];
     var $266=_FLAC__bitwriter_write_raw_uint64($bw,$265$0,$265$1,$215);
     var $267=($266|0)==0;
     if ($267) {
      var $_0=0;
      label = 4780;
      break L6329;
     }
     var $269=(($263+($j_0<<4)+8)|0);
     var $270=HEAP8[($269)];
     var $271=($270&255);
     var $272=_FLAC__bitwriter_write_raw_uint32($bw,$271,$216);
     var $273=($272|0)==0;
     if ($273) {
      var $_0=0;
      label = 4781;
      break L6329;
     }
     var $275=_FLAC__bitwriter_write_zeroes($bw,$217);
     var $276=($275|0)==0;
     var $277=((($j_0)+(1))|0);
     if ($276) {
      var $_0=0;
      label = 4775;
      break L6329;
     } else {
      var $j_0=$277;
     }
    }
    var $279=((($i_3138)+(1))|0);
    var $280=HEAP32[(($199)>>2)];
    var $281=($279>>>0)<($280>>>0);
    if ($281) {
     var $i_3138=$279;
    } else {
     break L6279;
    }
   }
   if (label == 4781) {
    var $_0;
    return $_0;
   }
   else if (label == 4760) {
    var $_0;
    return $_0;
   }
   else if (label == 4763) {
    var $_0;
    return $_0;
   }
   else if (label == 4764) {
    var $_0;
    return $_0;
   }
   else if (label == 4792) {
    var $_0;
    return $_0;
   }
   else if (label == 4793) {
    var $_0;
    return $_0;
   }
   else if (label == 4775) {
    var $_0;
    return $_0;
   }
   else if (label == 4780) {
    var $_0;
    return $_0;
   }
   else if (label == 4761) {
    var $_0;
    return $_0;
   }
   else if (label == 4762) {
    var $_0;
    return $_0;
   }
   break;
  }
  case 1: {
   var $101=HEAP32[(($15)>>2)];
   var $102=$101<<3;
   var $103=_FLAC__bitwriter_write_zeroes($bw,$102);
   var $104=($103|0)==0;
   if ($104) {
    var $_0=0;
   } else {
    break L6279;
   }
   var $_0;
   return $_0;
   break;
  }
  case 0: {
   var $39=(($metadata+16)|0);
   var $40=$39;
   var $41=HEAP32[(($40)>>2)];
   var $42=HEAP32[((9944)>>2)];
   var $43=_FLAC__bitwriter_write_raw_uint32($bw,$41,$42);
   var $44=($43|0)==0;
   if ($44) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $46=(($metadata+20)|0);
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=HEAP32[((9968)>>2)];
   var $50=_FLAC__bitwriter_write_raw_uint32($bw,$48,$49);
   var $51=($50|0)==0;
   if ($51) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $53=(($metadata+24)|0);
   var $54=$53;
   var $55=HEAP32[(($54)>>2)];
   var $56=HEAP32[((9936)>>2)];
   var $57=_FLAC__bitwriter_write_raw_uint32($bw,$55,$56);
   var $58=($57|0)==0;
   if ($58) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $60=(($metadata+28)|0);
   var $61=$60;
   var $62=HEAP32[(($61)>>2)];
   var $63=HEAP32[((9960)>>2)];
   var $64=_FLAC__bitwriter_write_raw_uint32($bw,$62,$63);
   var $65=($64|0)==0;
   if ($65) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $67=(($metadata+32)|0);
   var $68=$67;
   var $69=HEAP32[(($68)>>2)];
   var $70=HEAP32[((9928)>>2)];
   var $71=_FLAC__bitwriter_write_raw_uint32($bw,$69,$70);
   var $72=($71|0)==0;
   if ($72) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $74=(($metadata+36)|0);
   var $75=$74;
   var $76=HEAP32[(($75)>>2)];
   var $77=((($76)-(1))|0);
   var $78=HEAP32[((9976)>>2)];
   var $79=_FLAC__bitwriter_write_raw_uint32($bw,$77,$78);
   var $80=($79|0)==0;
   if ($80) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $82=(($metadata+40)|0);
   var $83=$82;
   var $84=HEAP32[(($83)>>2)];
   var $85=((($84)-(1))|0);
   var $86=HEAP32[((9984)>>2)];
   var $87=_FLAC__bitwriter_write_raw_uint32($bw,$85,$86);
   var $88=($87|0)==0;
   if ($88) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $90=(($metadata+48)|0);
   var $91=$90;
   var $ld$0$0=(($91)|0);
   var $92$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($91+4)|0);
   var $92$1=HEAP32[(($ld$1$1)>>2)];
   var $93=HEAP32[((9920)>>2)];
   var $94=_FLAC__bitwriter_write_raw_uint64($bw,$92$0,$92$1,$93);
   var $95=($94|0)==0;
   if ($95) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $97=(($metadata+56)|0);
   var $98=_FLAC__bitwriter_write_byte_block($bw,$97,16);
   var $99=($98|0)==0;
   if ($99) {
    var $_0=0;
   } else {
    break L6279;
   }
   var $_0;
   return $_0;
   break;
  }
  case 6: {
   var $283=(($metadata+16)|0);
   var $284=$283;
   var $285=HEAP32[(($284)>>2)];
   var $286=HEAP32[((10032)>>2)];
   var $287=_FLAC__bitwriter_write_raw_uint32($bw,$285,$286);
   var $288=($287|0)==0;
   if ($288) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $290=(($metadata+20)|0);
   var $291=$290;
   var $292=HEAP32[(($291)>>2)];
   var $293=_strlen($292);
   var $294=HEAP32[((10040)>>2)];
   var $295=_FLAC__bitwriter_write_raw_uint32($bw,$293,$294);
   var $296=($295|0)==0;
   if ($296) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $298=HEAP32[(($291)>>2)];
   var $299=_FLAC__bitwriter_write_byte_block($bw,$298,$293);
   var $300=($299|0)==0;
   if ($300) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $302=(($metadata+24)|0);
   var $303=$302;
   var $304=HEAP32[(($303)>>2)];
   var $305=_strlen($304);
   var $306=HEAP32[((10056)>>2)];
   var $307=_FLAC__bitwriter_write_raw_uint32($bw,$305,$306);
   var $308=($307|0)==0;
   if ($308) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $310=HEAP32[(($303)>>2)];
   var $311=_FLAC__bitwriter_write_byte_block($bw,$310,$305);
   var $312=($311|0)==0;
   if ($312) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $314=(($metadata+28)|0);
   var $315=$314;
   var $316=HEAP32[(($315)>>2)];
   var $317=HEAP32[((10024)>>2)];
   var $318=_FLAC__bitwriter_write_raw_uint32($bw,$316,$317);
   var $319=($318|0)==0;
   if ($319) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $321=(($metadata+32)|0);
   var $322=$321;
   var $323=HEAP32[(($322)>>2)];
   var $324=HEAP32[((10048)>>2)];
   var $325=_FLAC__bitwriter_write_raw_uint32($bw,$323,$324);
   var $326=($325|0)==0;
   if ($326) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $328=(($metadata+36)|0);
   var $329=$328;
   var $330=HEAP32[(($329)>>2)];
   var $331=HEAP32[((10064)>>2)];
   var $332=_FLAC__bitwriter_write_raw_uint32($bw,$330,$331);
   var $333=($332|0)==0;
   if ($333) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $335=(($metadata+40)|0);
   var $336=$335;
   var $337=HEAP32[(($336)>>2)];
   var $338=HEAP32[((10080)>>2)];
   var $339=_FLAC__bitwriter_write_raw_uint32($bw,$337,$338);
   var $340=($339|0)==0;
   if ($340) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $342=(($metadata+44)|0);
   var $343=$342;
   var $344=HEAP32[(($343)>>2)];
   var $345=HEAP32[((10072)>>2)];
   var $346=_FLAC__bitwriter_write_raw_uint32($bw,$344,$345);
   var $347=($346|0)==0;
   if ($347) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $349=(($metadata+48)|0);
   var $350=$349;
   var $351=HEAP32[(($350)>>2)];
   var $352=HEAP32[(($343)>>2)];
   var $353=_FLAC__bitwriter_write_byte_block($bw,$351,$352);
   var $354=($353|0)==0;
   if ($354) {
    var $_0=0;
   } else {
    break L6279;
   }
   var $_0;
   return $_0;
   break;
  }
  default: {
   var $356=(($metadata+16)|0);
   var $357=$356;
   var $358=HEAP32[(($357)>>2)];
   var $359=HEAP32[(($15)>>2)];
   var $360=_FLAC__bitwriter_write_byte_block($bw,$358,$359);
   var $361=($360|0)==0;
   if ($361) {
    var $_0=0;
   } else {
    break L6279;
   }
   var $_0;
   return $_0;
  }
  }
 } while(0);
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__frame_add_header($header,$bw){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $crc=sp;
 var $1=HEAP32[((10408)>>2)];
 var $2=HEAP32[((10400)>>2)];
 var $3=_FLAC__bitwriter_write_raw_uint32($bw,$1,$2);
 var $4=($3|0)==0;
 if ($4) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $6=HEAP32[((10424)>>2)];
 var $7=_FLAC__bitwriter_write_raw_uint32($bw,0,$6);
 var $8=($7|0)==0;
 if ($8) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $10=(($header+20)|0);
 var $11=HEAP32[(($10)>>2)];
 var $not_=($11|0)!=0;
 var $12=($not_&1);
 var $13=HEAP32[((10456)>>2)];
 var $14=_FLAC__bitwriter_write_raw_uint32($bw,$12,$13);
 var $15=($14|0)==0;
 if ($15) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $17=(($header)|0);
 var $18=HEAP32[(($17)>>2)];
 if (($18|0)==2304) {
  var $blocksize_hint_0=0;var $u_0=4;
 } else if (($18|0)==2048) {
  var $blocksize_hint_0=0;var $u_0=11;
 } else if (($18|0)==256) {
  var $blocksize_hint_0=0;var $u_0=8;
 } else if (($18|0)==576) {
  var $blocksize_hint_0=0;var $u_0=2;
 } else if (($18|0)==4608) {
  var $blocksize_hint_0=0;var $u_0=5;
 } else if (($18|0)==32768) {
  var $blocksize_hint_0=0;var $u_0=15;
 } else if (($18|0)==1152) {
  var $blocksize_hint_0=0;var $u_0=3;
 } else if (($18|0)==4096) {
  var $blocksize_hint_0=0;var $u_0=12;
 } else if (($18|0)==512) {
  var $blocksize_hint_0=0;var $u_0=9;
 } else if (($18|0)==192) {
  var $blocksize_hint_0=0;var $u_0=1;
 } else if (($18|0)==8192) {
  var $blocksize_hint_0=0;var $u_0=13;
 } else if (($18|0)==16384) {
  var $blocksize_hint_0=0;var $u_0=14;
 } else if (($18|0)==1024) {
  var $blocksize_hint_0=0;var $u_0=10;
 } else {
  var $32=($18>>>0)<257;
  var $_=$32?6:7;
  var $blocksize_hint_0=$_;var $u_0=$_;
 }
 var $u_0;
 var $blocksize_hint_0;
 var $34=HEAP32[((10448)>>2)];
 var $35=_FLAC__bitwriter_write_raw_uint32($bw,$u_0,$34);
 var $36=($35|0)==0;
 if ($36) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $38=(($header+4)|0);
 var $39=HEAP32[(($38)>>2)];
 do {
  if (($39|0)==16000) {
   var $sample_rate_hint_0=0;var $u_1=5;
  } else if (($39|0)==88200) {
   var $sample_rate_hint_0=0;var $u_1=1;
  } else if (($39|0)==192000) {
   var $sample_rate_hint_0=0;var $u_1=3;
  } else if (($39|0)==96000) {
   var $sample_rate_hint_0=0;var $u_1=11;
  } else if (($39|0)==24000) {
   var $sample_rate_hint_0=0;var $u_1=7;
  } else if (($39|0)==176400) {
   var $sample_rate_hint_0=0;var $u_1=2;
  } else if (($39|0)==8000) {
   var $sample_rate_hint_0=0;var $u_1=4;
  } else if (($39|0)==48000) {
   var $sample_rate_hint_0=0;var $u_1=10;
  } else if (($39|0)==22050) {
   var $sample_rate_hint_0=0;var $u_1=6;
  } else if (($39|0)==32000) {
   var $sample_rate_hint_0=0;var $u_1=8;
  } else if (($39|0)==44100) {
   var $sample_rate_hint_0=0;var $u_1=9;
  } else {
   var $51=($39>>>0)<255001;
   var $52=(((($39>>>0))%(1000))&-1);
   var $53=($52|0)==0;
   var $or_cond=$51&$53;
   if ($or_cond) {
    var $sample_rate_hint_0=12;var $u_1=12;
    break;
   }
   var $55=(((($39>>>0))%(10))&-1);
   var $56=($55|0)==0;
   if ($56) {
    var $sample_rate_hint_0=14;var $u_1=14;
    break;
   }
   var $58=($39>>>0)<65536;
   var $_38=$58?13:0;
   var $sample_rate_hint_0=$_38;var $u_1=$_38;
  }
 } while(0);
 var $u_1;
 var $sample_rate_hint_0;
 var $60=HEAP32[((10416)>>2)];
 var $61=_FLAC__bitwriter_write_raw_uint32($bw,$u_1,$60);
 var $62=($61|0)==0;
 if ($62) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $64=(($header+12)|0);
 var $65=HEAP32[(($64)>>2)];
 if (($65|0)==0) {
  var $67=(($header+8)|0);
  var $68=HEAP32[(($67)>>2)];
  var $69=((($68)-(1))|0);
  var $u_2=$69;
 } else if (($65|0)==3) {
  var $u_2=10;
 } else if (($65|0)==2) {
  var $u_2=9;
 } else if (($65|0)==1) {
  var $u_2=8;
 } else {
  var $u_2=$u_1;
 }
 var $u_2;
 var $74=HEAP32[((10440)>>2)];
 var $75=_FLAC__bitwriter_write_raw_uint32($bw,$u_2,$74);
 var $76=($75|0)==0;
 if ($76) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $78=(($header+16)|0);
 var $79=HEAP32[(($78)>>2)];
 switch (($79|0)) {
 case 24: {
  var $u_3=6;
  break;
 }
 case 16: {
  var $u_3=4;
  break;
 }
 case 20: {
  var $u_3=5;
  break;
 }
 case 12: {
  var $u_3=2;
  break;
 }
 case 8: {
  var $u_3=1;
  break;
 }
 default: {
  var $u_3=0;
 }
 }
 var $u_3;
 var $86=HEAP32[((10464)>>2)];
 var $87=_FLAC__bitwriter_write_raw_uint32($bw,$u_3,$86);
 var $88=($87|0)==0;
 if ($88) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $90=HEAP32[((10392)>>2)];
 var $91=_FLAC__bitwriter_write_raw_uint32($bw,0,$90);
 var $92=($91|0)==0;
 if ($92) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $94=HEAP32[(($10)>>2)];
 var $95=($94|0)==0;
 var $96=(($header+24)|0);
 do {
  if ($95) {
   var $98=$96;
   var $99=HEAP32[(($98)>>2)];
   var $100=_FLAC__bitwriter_write_utf8_uint32($bw,$99);
   var $101=($100|0)==0;
   if ($101) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  } else {
   var $103=(($96)|0);
   var $ld$0$0=(($103)|0);
   var $104$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($103+4)|0);
   var $104$1=HEAP32[(($ld$1$1)>>2)];
   var $105=_FLAC__bitwriter_write_utf8_uint64($bw,$104$0,$104$1);
   var $106=($105|0)==0;
   if ($106) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $108=($blocksize_hint_0|0)==0;
 do {
  if (!($108)) {
   var $110=HEAP32[(($17)>>2)];
   var $111=((($110)-(1))|0);
   var $112=($blocksize_hint_0|0)==6;
   var $113=$112?8:16;
   var $114=_FLAC__bitwriter_write_raw_uint32($bw,$111,$113);
   var $115=($114|0)==0;
   if ($115) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 do {
  if (($sample_rate_hint_0|0)==13) {
   var $123=HEAP32[(($38)>>2)];
   var $124=_FLAC__bitwriter_write_raw_uint32($bw,$123,16);
   var $125=($124|0)==0;
   if ($125) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  } else if (($sample_rate_hint_0|0)==14) {
   var $127=HEAP32[(($38)>>2)];
   var $128=(((($127>>>0))/(10))&-1);
   var $129=_FLAC__bitwriter_write_raw_uint32($bw,$128,16);
   var $130=($129|0)==0;
   if ($130) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  } else if (($sample_rate_hint_0|0)==12) {
   var $118=HEAP32[(($38)>>2)];
   var $119=(((($118>>>0))/(1000))&-1);
   var $120=_FLAC__bitwriter_write_raw_uint32($bw,$119,8);
   var $121=($120|0)==0;
   if ($121) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $132=_FLAC__bitwriter_get_write_crc8($bw,$crc);
 var $133=($132|0)==0;
 if ($133) {
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $135=HEAP8[($crc)];
 var $136=($135&255);
 var $137=HEAP32[((10432)>>2)];
 var $138=_FLAC__bitwriter_write_raw_uint32($bw,$136,$137);
 var $not_40=($138|0)!=0;
 var $_39=($not_40&1);
 var $_0=$_39;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__subframe_add_constant($subframe,$subframe_bps,$wasted_bits,$bw){
 var label=0;
 var $1=HEAP32[((11128)>>2)];
 var $2=($wasted_bits|0)!=0;
 var $3=($2&1);
 var $4=$1|$3;
 var $5=HEAP32[((9808)>>2)];
 var $6=HEAP32[((9840)>>2)];
 var $7=((($6)+($5))|0);
 var $8=HEAP32[((9816)>>2)];
 var $9=((($7)+($8))|0);
 var $10=_FLAC__bitwriter_write_raw_uint32($bw,$4,$9);
 var $11=($10|0)==0;
 if ($11) {
  var $23=0;
  var $23;
  return $23;
 }
 do {
  if ($2) {
   var $14=((($wasted_bits)-(1))|0);
   var $15=_FLAC__bitwriter_write_unary_unsigned($bw,$14);
   var $16=($15|0)==0;
   if ($16) {
    var $23=0;
   } else {
    break;
   }
   var $23;
   return $23;
  }
 } while(0);
 var $18=(($subframe)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=_FLAC__bitwriter_write_raw_int32($bw,$19,$subframe_bps);
 var $21=($20|0)!=0;
 var $phitmp=($21&1);
 var $23=$phitmp;
 var $23;
 return $23;
}
function _FLAC__subframe_add_fixed($subframe,$residual_samples,$subframe_bps,$wasted_bits,$bw){
 var label=0;
 var $1=HEAP32[((9848)>>2)];
 var $2=(($subframe+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3<<1;
 var $5=($wasted_bits|0)!=0;
 var $6=($5&1);
 var $7=$1|$6;
 var $8=$7|$4;
 var $9=HEAP32[((9808)>>2)];
 var $10=HEAP32[((9840)>>2)];
 var $11=((($10)+($9))|0);
 var $12=HEAP32[((9816)>>2)];
 var $13=((($11)+($12))|0);
 var $14=_FLAC__bitwriter_write_raw_uint32($bw,$8,$13);
 var $15=($14|0)==0;
 if ($15) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 do {
  if ($5) {
   var $18=((($wasted_bits)-(1))|0);
   var $19=_FLAC__bitwriter_write_unary_unsigned($bw,$18);
   var $20=($19|0)==0;
   if ($20) {
    var $_0=0;
   } else {
    var $i_0=0;
    break;
   }
   var $_0;
   return $_0;
  } else {
   var $i_0=0;
  }
 } while(0);
 while(1) {
  var $i_0;
  var $21=HEAP32[(($2)>>2)];
  var $22=($i_0>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  var $24=(($subframe+16+($i_0<<2))|0);
  var $25=HEAP32[(($24)>>2)];
  var $26=_FLAC__bitwriter_write_raw_int32($bw,$25,$subframe_bps);
  var $27=($26|0)==0;
  var $28=((($i_0)+(1))|0);
  if ($27) {
   var $_0=0;
   label = 4908;
   break;
  } else {
   var $i_0=$28;
  }
 }
 if (label == 4908) {
  var $_0;
  return $_0;
 }
 var $30=(($subframe)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=HEAP32[((10488)>>2)];
 var $33=_FLAC__bitwriter_write_raw_uint32($bw,$31,$32);
 var $34=($33|0)==0;
 if ($34) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $36=HEAP32[(($30)>>2)];
 var $switch_i=($36>>>0)<2;
 do {
  if ($switch_i) {
   var $38=(($subframe+4)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=HEAP32[((10512)>>2)];
   var $41=_FLAC__bitwriter_write_raw_uint32($bw,$39,$40);
   var $42=($41|0)==0;
   if ($42) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $_pre=HEAP32[(($30)>>2)];
   var $switch=($_pre>>>0)<2;
   if (!($switch)) {
    break;
   }
   var $44=(($subframe+32)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=HEAP32[(($2)>>2)];
   var $47=(($subframe+8)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($48+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($subframe+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=($_pre|0)==1;
   var $56=($55&1);
   var $57=_add_residual_partitioned_rice_($bw,$45,$residual_samples,$46,$50,$52,$54,$56);
   var $58=($57|0)==0;
   if ($58) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   return $_0;
  }
 } while(0);
 var $_0=1;
 var $_0;
 return $_0;
}
function _add_residual_partitioned_rice_($bw,$residual,$residual_samples,$predictor_order,$rice_parameters,$raw_bits,$partition_order,$is_extended){
 var label=0;
 var $1=($is_extended|0)!=0;
 var $2=HEAP32[((10528)>>2)];
 var $3=HEAP32[((10504)>>2)];
 var $4=$1?$2:$3;
 var $5=HEAP32[((10536)>>2)];
 var $6=HEAP32[((10520)>>2)];
 var $7=$1?$5:$6;
 var $8=($partition_order|0)==0;
 if ($8) {
  var $10=HEAP32[(($raw_bits)>>2)];
  var $11=($10|0)==0;
  L6546: do {
   if ($11) {
    var $13=HEAP32[(($rice_parameters)>>2)];
    var $14=_FLAC__bitwriter_write_raw_uint32($bw,$13,$4);
    var $15=($14|0)==0;
    if ($15) {
     var $_0=0;
     var $_0;
     return $_0;
    }
    var $17=HEAP32[(($rice_parameters)>>2)];
    var $18=_FLAC__bitwriter_write_rice_signed_block($bw,$residual,$residual_samples,$17);
    var $19=($18|0)==0;
    if ($19) {
     var $_0=0;
    } else {
     break;
    }
    var $_0;
    return $_0;
   } else {
    var $21=_FLAC__bitwriter_write_raw_uint32($bw,$7,$4);
    var $22=($21|0)==0;
    if ($22) {
     var $_0=0;
     var $_0;
     return $_0;
    }
    var $24=HEAP32[(($raw_bits)>>2)];
    var $25=HEAP32[((10496)>>2)];
    var $26=_FLAC__bitwriter_write_raw_uint32($bw,$24,$25);
    var $27=($26|0)==0;
    if ($27) {
     var $_0=0;
     var $_0;
     return $_0;
    } else {
     var $i_0=0;
    }
    while(1) {
     var $i_0;
     var $28=($i_0>>>0)<($residual_samples>>>0);
     if (!($28)) {
      break L6546;
     }
     var $30=(($residual+($i_0<<2))|0);
     var $31=HEAP32[(($30)>>2)];
     var $32=HEAP32[(($raw_bits)>>2)];
     var $33=_FLAC__bitwriter_write_raw_int32($bw,$31,$32);
     var $34=($33|0)==0;
     var $35=((($i_0)+(1))|0);
     if ($34) {
      var $_0=0;
      break;
     } else {
      var $i_0=$35;
     }
    }
    var $_0;
    return $_0;
   }
  } while(0);
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $37=((($predictor_order)+($residual_samples))|0);
 var $38=$37>>>($partition_order>>>0);
 var $39=1<<$partition_order;
 var $40=HEAP32[((10496)>>2)];
 var $i1_059=0;var $k_060=0;
 L6565: while(1) {
  var $k_060;
  var $i1_059;
  var $42=($i1_059|0)==0;
  var $43=$42?$predictor_order:0;
  var $_=((($38)-($43))|0);
  var $44=((($_)+($k_060))|0);
  var $45=(($raw_bits+($i1_059<<2))|0);
  var $46=HEAP32[(($45)>>2)];
  var $47=($46|0)==0;
  L6567: do {
   if ($47) {
    var $49=(($rice_parameters+($i1_059<<2))|0);
    var $50=HEAP32[(($49)>>2)];
    var $51=_FLAC__bitwriter_write_raw_uint32($bw,$50,$4);
    var $52=($51|0)==0;
    if ($52) {
     var $_0=0;
     label = 4935;
     break L6565;
    }
    var $54=(($residual+($k_060<<2))|0);
    var $55=HEAP32[(($49)>>2)];
    var $56=_FLAC__bitwriter_write_rice_signed_block($bw,$54,$_,$55);
    var $57=($56|0)==0;
    if ($57) {
     var $_0=0;
     label = 4941;
     break L6565;
    }
   } else {
    var $59=_FLAC__bitwriter_write_raw_uint32($bw,$7,$4);
    var $60=($59|0)==0;
    if ($60) {
     var $_0=0;
     label = 4940;
     break L6565;
    }
    var $62=HEAP32[(($45)>>2)];
    var $63=_FLAC__bitwriter_write_raw_uint32($bw,$62,$40);
    var $64=($63|0)==0;
    if ($64) {
     var $_0=0;
     label = 4932;
     break L6565;
    } else {
     var $j_0=$k_060;
    }
    while(1) {
     var $j_0;
     var $65=($j_0>>>0)<($44>>>0);
     if (!($65)) {
      break L6567;
     }
     var $67=(($residual+($j_0<<2))|0);
     var $68=HEAP32[(($67)>>2)];
     var $69=HEAP32[(($45)>>2)];
     var $70=_FLAC__bitwriter_write_raw_int32($bw,$68,$69);
     var $71=($70|0)==0;
     var $72=((($j_0)+(1))|0);
     if ($71) {
      var $_0=0;
      label = 4942;
      break L6565;
     } else {
      var $j_0=$72;
     }
    }
   }
  } while(0);
  var $73=((($i1_059)+(1))|0);
  var $74=($73>>>0)<($39>>>0);
  if ($74) {
   var $i1_059=$73;var $k_060=$44;
  } else {
   var $_0=1;
   label = 4931;
   break;
  }
 }
 if (label == 4941) {
  var $_0;
  return $_0;
 }
 else if (label == 4931) {
  var $_0;
  return $_0;
 }
 else if (label == 4932) {
  var $_0;
  return $_0;
 }
 else if (label == 4942) {
  var $_0;
  return $_0;
 }
 else if (label == 4940) {
  var $_0;
  return $_0;
 }
 else if (label == 4935) {
  var $_0;
  return $_0;
 }
}
function _FLAC__subframe_add_lpc($subframe,$residual_samples,$subframe_bps,$wasted_bits,$bw){
 var label=0;
 var $1=HEAP32[((9832)>>2)];
 var $2=(($subframe+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3<<1;
 var $5=((($4)-(2))|0);
 var $6=($wasted_bits|0)!=0;
 var $7=($6&1);
 var $8=$1|$7;
 var $9=$8|$5;
 var $10=HEAP32[((9808)>>2)];
 var $11=HEAP32[((9840)>>2)];
 var $12=((($11)+($10))|0);
 var $13=HEAP32[((9816)>>2)];
 var $14=((($12)+($13))|0);
 var $15=_FLAC__bitwriter_write_raw_uint32($bw,$9,$14);
 var $16=($15|0)==0;
 if ($16) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 do {
  if ($6) {
   var $19=((($wasted_bits)-(1))|0);
   var $20=_FLAC__bitwriter_write_unary_unsigned($bw,$19);
   var $21=($20|0)==0;
   if ($21) {
    var $_0=0;
   } else {
    var $i_0=0;
    break;
   }
   var $_0;
   return $_0;
  } else {
   var $i_0=0;
  }
 } while(0);
 while(1) {
  var $i_0;
  var $22=HEAP32[(($2)>>2)];
  var $23=($i_0>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  var $25=(($subframe+152+($i_0<<2))|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=_FLAC__bitwriter_write_raw_int32($bw,$26,$subframe_bps);
  var $28=($27|0)==0;
  var $29=((($i_0)+(1))|0);
  if ($28) {
   var $_0=0;
   label = 4968;
   break;
  } else {
   var $i_0=$29;
  }
 }
 if (label == 4968) {
  var $_0;
  return $_0;
 }
 var $31=(($subframe+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)-(1))|0);
 var $34=HEAP32[((9864)>>2)];
 var $35=_FLAC__bitwriter_write_raw_uint32($bw,$33,$34);
 var $36=($35|0)==0;
 if ($36) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $38=(($subframe+20)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=HEAP32[((9856)>>2)];
 var $41=_FLAC__bitwriter_write_raw_int32($bw,$39,$40);
 var $42=($41|0)==0;
 if ($42) {
  var $_0=0;
  var $_0;
  return $_0;
 } else {
  var $i_1=0;
 }
 while(1) {
  var $i_1;
  var $43=HEAP32[(($2)>>2)];
  var $44=($i_1>>>0)<($43>>>0);
  if (!($44)) {
   break;
  }
  var $46=(($subframe+24+($i_1<<2))|0);
  var $47=HEAP32[(($46)>>2)];
  var $48=HEAP32[(($31)>>2)];
  var $49=_FLAC__bitwriter_write_raw_int32($bw,$47,$48);
  var $50=($49|0)==0;
  var $51=((($i_1)+(1))|0);
  if ($50) {
   var $_0=0;
   label = 4960;
   break;
  } else {
   var $i_1=$51;
  }
 }
 if (label == 4960) {
  var $_0;
  return $_0;
 }
 var $53=(($subframe)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=HEAP32[((10488)>>2)];
 var $56=_FLAC__bitwriter_write_raw_uint32($bw,$54,$55);
 var $57=($56|0)==0;
 if ($57) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $59=HEAP32[(($53)>>2)];
 var $switch_i=($59>>>0)<2;
 do {
  if ($switch_i) {
   var $61=(($subframe+4)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=HEAP32[((10512)>>2)];
   var $64=_FLAC__bitwriter_write_raw_uint32($bw,$62,$63);
   var $65=($64|0)==0;
   if ($65) {
    var $_0=0;
    var $_0;
    return $_0;
   }
   var $_pre=HEAP32[(($53)>>2)];
   var $switch=($_pre>>>0)<2;
   if (!($switch)) {
    break;
   }
   var $67=(($subframe+280)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=HEAP32[(($2)>>2)];
   var $70=(($subframe+8)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($71+4)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($subframe+4)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=($_pre|0)==1;
   var $79=($78&1);
   var $80=_add_residual_partitioned_rice_($bw,$68,$residual_samples,$69,$73,$75,$77,$79);
   var $81=($80|0)==0;
   if ($81) {
    var $_0=0;
   } else {
    break;
   }
   var $_0;
   return $_0;
  }
 } while(0);
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__subframe_add_verbatim($subframe,$samples,$subframe_bps,$wasted_bits,$bw){
 var label=0;
 var $1=(($subframe)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP32[((9824)>>2)];
 var $4=($wasted_bits|0)!=0;
 var $5=($4&1);
 var $6=$3|$5;
 var $7=HEAP32[((9808)>>2)];
 var $8=HEAP32[((9840)>>2)];
 var $9=((($8)+($7))|0);
 var $10=HEAP32[((9816)>>2)];
 var $11=((($9)+($10))|0);
 var $12=_FLAC__bitwriter_write_raw_uint32($bw,$6,$11);
 var $13=($12|0)==0;
 if ($13) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 do {
  if ($4) {
   var $16=((($wasted_bits)-(1))|0);
   var $17=_FLAC__bitwriter_write_unary_unsigned($bw,$16);
   var $18=($17|0)==0;
   if ($18) {
    var $_0=0;
   } else {
    var $i_0=0;
    break;
   }
   var $_0;
   return $_0;
  } else {
   var $i_0=0;
  }
 } while(0);
 while(1) {
  var $i_0;
  var $19=($i_0>>>0)<($samples>>>0);
  if (!($19)) {
   var $_0=1;
   label = 4977;
   break;
  }
  var $21=(($2+($i_0<<2))|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=_FLAC__bitwriter_write_raw_int32($bw,$22,$subframe_bps);
  var $24=($23|0)==0;
  var $25=((($i_0)+(1))|0);
  if ($24) {
   var $_0=0;
   label = 4975;
   break;
  } else {
   var $i_0=$25;
  }
 }
 if (label == 4975) {
  var $_0;
  return $_0;
 }
 else if (label == 4977) {
  var $_0;
  return $_0;
 }
}
function _FLAC__stream_encoder_new(){
 var label=0;
 var $1=_calloc(1,8);
 var $2=$1;
 var $3=($1|0)==0;
 if ($3) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $5=_calloc(1,376);
 var $6=$5;
 var $7=$1;
 HEAP32[(($7)>>2)]=$6;
 var $8=($5|0)==0;
 if ($8) {
  _free($1);
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $11=_calloc(1,11848);
 var $12=$11;
 var $13=(($1+4)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=$12;
 var $15=($11|0)==0;
 if ($15) {
  _free($5);
  _free($1);
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $18=_FLAC__bitwriter_new();
 var $19=(($11+6856)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=$18;
 var $21=($18|0)==0;
 if ($21) {
  _free($11);
  _free($5);
  _free($1);
  var $_0=0;
  var $_0;
  return $_0;
 } else {
  var $23=(($11+7288)|0);
  var $24=$23;
  HEAP32[(($24)>>2)]=0;
  var $25=(($5+4)|0);
  var $26=$25;
  HEAP32[(($26)>>2)]=0;
  var $27=(($5+8)|0);
  var $28=$27;
  HEAP32[(($28)>>2)]=1;
  var $29=(($5+12)|0);
  var $30=$29;
  HEAP32[(($30)>>2)]=1;
  var $31=(($5+16)|0);
  var $32=$31;
  HEAP32[(($32)>>2)]=0;
  var $33=(($5+20)|0);
  var $34=$33;
  HEAP32[(($34)>>2)]=0;
  var $35=(($5+24)|0);
  var $36=$35;
  HEAP32[(($36)>>2)]=2;
  var $37=(($5+28)|0);
  var $38=$37;
  HEAP32[(($38)>>2)]=16;
  var $39=(($5+32)|0);
  var $40=$39;
  HEAP32[(($40)>>2)]=44100;
  var $41=(($5+36)|0);
  var $42=$41;
  HEAP32[(($42)>>2)]=0;
  var $43=(($5+40)|0);
  var $44=$43;
  HEAP32[(($44)>>2)]=1;
  var $45=(($5+44)|0);
  var $46=$45;
  HEAP32[(($46)>>2)]=13;
  var $47=(($5+48)|0);
  var $48=$47;
  HEAPF32[(($48)>>2)]=0.5;
  var $49=(($5+300)|0);
  var $50=(($5+336)|0);
  var $51=(($11+7048)|0);
  var $52=$51;
  _memset($49, 0, 32);
  HEAP32[(($50)>>2)]=0; HEAP32[((($50)+(4))>>2)]=0; HEAP32[((($50)+(8))>>2)]=0; HEAP32[((($50)+(12))>>2)]=0;
  HEAP32[(($52)>>2)]=0;
  var $53=(($11+7244)|0);
  _memset($53, 0, 40);
  var $54=_FLAC__stream_encoder_set_compression_level($2,5);
  var $55=HEAP32[(($14)>>2)];
  var $56=(($55+11840)|0);
  HEAP32[(($56)>>2)]=0;
  var $57=(($55+336)|0);
  var $58=(($55+6176)|0);
  HEAP32[(($58)>>2)]=$57;
  var $59=(($55+628)|0);
  var $60=(($55+6180)|0);
  HEAP32[(($60)>>2)]=$59;
  var $61=(($55+920)|0);
  var $62=(($55+6184)|0);
  HEAP32[(($62)>>2)]=$61;
  var $63=(($55+1212)|0);
  var $64=(($55+6188)|0);
  HEAP32[(($64)>>2)]=$63;
  var $65=(($55+1504)|0);
  var $66=(($55+6192)|0);
  HEAP32[(($66)>>2)]=$65;
  var $67=(($55+1796)|0);
  var $68=(($55+6196)|0);
  HEAP32[(($68)>>2)]=$67;
  var $69=(($55+2088)|0);
  var $70=(($55+6200)|0);
  HEAP32[(($70)>>2)]=$69;
  var $71=(($55+2380)|0);
  var $72=(($55+6204)|0);
  HEAP32[(($72)>>2)]=$71;
  var $73=(($55+2672)|0);
  var $74=(($55+6208)|0);
  HEAP32[(($74)>>2)]=$73;
  var $75=(($55+2964)|0);
  var $76=(($55+6212)|0);
  HEAP32[(($76)>>2)]=$75;
  var $77=(($55+3256)|0);
  var $78=(($55+6216)|0);
  HEAP32[(($78)>>2)]=$77;
  var $79=(($55+3548)|0);
  var $80=(($55+6220)|0);
  HEAP32[(($80)>>2)]=$79;
  var $81=(($55+3840)|0);
  var $82=(($55+6224)|0);
  HEAP32[(($82)>>2)]=$81;
  var $83=(($55+4132)|0);
  var $84=(($55+6228)|0);
  HEAP32[(($84)>>2)]=$83;
  var $85=(($55+4424)|0);
  var $86=(($55+6232)|0);
  HEAP32[(($86)>>2)]=$85;
  var $87=(($55+4716)|0);
  var $88=(($55+6236)|0);
  HEAP32[(($88)>>2)]=$87;
  var $89=(($55+5008)|0);
  var $90=(($55+6240)|0);
  HEAP32[(($90)>>2)]=$89;
  var $91=(($55+5300)|0);
  var $92=(($55+6244)|0);
  HEAP32[(($92)>>2)]=$91;
  var $93=(($55+5592)|0);
  var $94=(($55+6248)|0);
  HEAP32[(($94)>>2)]=$93;
  var $95=(($55+5884)|0);
  var $96=(($55+6252)|0);
  HEAP32[(($96)>>2)]=$95;
  var $97=(($55+6256)|0);
  var $98=(($55+6640)|0);
  HEAP32[(($98)>>2)]=$97;
  var $99=(($55+6268)|0);
  var $100=(($55+6644)|0);
  HEAP32[(($100)>>2)]=$99;
  var $101=(($55+6280)|0);
  var $102=(($55+6648)|0);
  HEAP32[(($102)>>2)]=$101;
  var $103=(($55+6292)|0);
  var $104=(($55+6652)|0);
  HEAP32[(($104)>>2)]=$103;
  var $105=(($55+6304)|0);
  var $106=(($55+6656)|0);
  HEAP32[(($106)>>2)]=$105;
  var $107=(($55+6316)|0);
  var $108=(($55+6660)|0);
  HEAP32[(($108)>>2)]=$107;
  var $109=(($55+6328)|0);
  var $110=(($55+6664)|0);
  HEAP32[(($110)>>2)]=$109;
  var $111=(($55+6340)|0);
  var $112=(($55+6668)|0);
  HEAP32[(($112)>>2)]=$111;
  var $113=(($55+6352)|0);
  var $114=(($55+6672)|0);
  HEAP32[(($114)>>2)]=$113;
  var $115=(($55+6364)|0);
  var $116=(($55+6676)|0);
  HEAP32[(($116)>>2)]=$115;
  var $117=(($55+6376)|0);
  var $118=(($55+6680)|0);
  HEAP32[(($118)>>2)]=$117;
  var $119=(($55+6388)|0);
  var $120=(($55+6684)|0);
  HEAP32[(($120)>>2)]=$119;
  var $121=(($55+6400)|0);
  var $122=(($55+6688)|0);
  HEAP32[(($122)>>2)]=$121;
  var $123=(($55+6412)|0);
  var $124=(($55+6692)|0);
  HEAP32[(($124)>>2)]=$123;
  var $125=(($55+6424)|0);
  var $126=(($55+6696)|0);
  HEAP32[(($126)>>2)]=$125;
  var $127=(($55+6436)|0);
  var $128=(($55+6700)|0);
  HEAP32[(($128)>>2)]=$127;
  var $129=(($55+6448)|0);
  var $130=(($55+6704)|0);
  HEAP32[(($130)>>2)]=$129;
  var $131=(($55+6460)|0);
  var $132=(($55+6708)|0);
  HEAP32[(($132)>>2)]=$131;
  var $133=(($55+6472)|0);
  var $134=(($55+6712)|0);
  HEAP32[(($134)>>2)]=$133;
  var $135=(($55+6484)|0);
  var $136=(($55+6716)|0);
  HEAP32[(($136)>>2)]=$135;
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($97);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($99);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($101);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($103);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($105);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($107);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($109);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($111);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($113);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($115);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($117);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($119);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($121);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($123);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($125);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($127);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($129);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($131);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($133);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($135);
  var $137=(($55+11716)|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($137);
  var $138=(($55+11728)|0);
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($138);
  var $139=HEAP32[(($7)>>2)];
  var $140=(($139)|0);
  HEAP32[(($140)>>2)]=1;
  var $_0=$2;
  var $_0;
  return $_0;
 }
}
function _FLAC__stream_encoder_delete($encoder){
 var label=0;
 var $1=($encoder|0)==0;
 if ($1) {
  return;
 }
 var $3=(($encoder+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+11840)|0);
 HEAP32[(($5)>>2)]=1;
 var $6=_FLAC__stream_encoder_finish($encoder);
 var $7=HEAP32[(($3)>>2)];
 var $8=(($7+11744)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if ($10) {
  var $12=$7;
 } else {
  _FLAC__stream_decoder_delete($9);
  var $_pre=HEAP32[(($3)>>2)];
  var $12=$_pre;
 }
 var $12;
 var $13=(($12+6256)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($13);
 var $14=HEAP32[(($3)>>2)];
 var $15=(($14+6268)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($15);
 var $16=HEAP32[(($3)>>2)];
 var $17=(($16+6280)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($17);
 var $18=HEAP32[(($3)>>2)];
 var $19=(($18+6292)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($19);
 var $20=HEAP32[(($3)>>2)];
 var $21=(($20+6304)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($21);
 var $22=HEAP32[(($3)>>2)];
 var $23=(($22+6316)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($23);
 var $24=HEAP32[(($3)>>2)];
 var $25=(($24+6328)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($25);
 var $26=HEAP32[(($3)>>2)];
 var $27=(($26+6340)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($27);
 var $28=HEAP32[(($3)>>2)];
 var $29=(($28+6352)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($29);
 var $30=HEAP32[(($3)>>2)];
 var $31=(($30+6364)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($31);
 var $32=HEAP32[(($3)>>2)];
 var $33=(($32+6376)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($33);
 var $34=HEAP32[(($3)>>2)];
 var $35=(($34+6388)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($35);
 var $36=HEAP32[(($3)>>2)];
 var $37=(($36+6400)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($37);
 var $38=HEAP32[(($3)>>2)];
 var $39=(($38+6412)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($39);
 var $40=HEAP32[(($3)>>2)];
 var $41=(($40+6424)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($41);
 var $42=HEAP32[(($3)>>2)];
 var $43=(($42+6436)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($43);
 var $44=HEAP32[(($3)>>2)];
 var $45=(($44+6448)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($45);
 var $46=HEAP32[(($3)>>2)];
 var $47=(($46+6460)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($47);
 var $48=HEAP32[(($3)>>2)];
 var $49=(($48+6472)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($49);
 var $50=HEAP32[(($3)>>2)];
 var $51=(($50+6484)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($51);
 var $52=HEAP32[(($3)>>2)];
 var $53=(($52+11716)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($53);
 var $54=HEAP32[(($3)>>2)];
 var $55=(($54+11728)|0);
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($55);
 var $56=HEAP32[(($3)>>2)];
 var $57=(($56+6856)|0);
 var $58=HEAP32[(($57)>>2)];
 _FLAC__bitwriter_delete($58);
 var $59=HEAP32[(($3)>>2)];
 var $60=$59;
 _free($60);
 var $61=(($encoder)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$62;
 _free($63);
 var $64=$encoder;
 _free($64);
 return;
}
function _FLAC__stream_encoder_finish($encoder){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 var $b_i=sp;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 if (($4|0)==0) {
  label = 5001;
 } else if (($4|0)==1) {
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 } else {
  var $error_0=0;var $23=$2;
 }
 do {
  if (label == 5001) {
   var $6=(($encoder+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+11840)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=($9|0)==0;
   if (!($10)) {
    var $error_0=0;var $23=$2;
    break;
   }
   var $12=(($7+7052)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=($13|0)==0;
   if ($14) {
    var $error_0=0;var $23=$2;
    break;
   }
   var $16=(($2+36)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=($17|0)!=($13|0);
   var $19=($18&1);
   HEAP32[(($16)>>2)]=$13;
   var $20=_process_frame_($encoder,$19);
   var $21=($20|0)==0;
   var $_=($21&1);
   var $_pre=HEAP32[(($1)>>2)];
   var $error_0=$_;var $23=$_pre;
  }
 } while(0);
 var $23;
 var $error_0;
 var $24=(($23+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 var $_pre51=(($encoder+4)|0);
 if (!($26)) {
  var $28=HEAP32[(($_pre51)>>2)];
  var $29=(($28+6928)|0);
  var $30=(($28+7060)|0);
  _FLAC__MD5Final($29,$30);
 }
 var $31=HEAP32[(($_pre51)>>2)];
 var $32=(($31+11840)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 do {
  if ($34) {
   var $36=HEAP32[(($1)>>2)];
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=($38|0)==0;
   do {
    if ($39) {
     var $41=(($31+7260)|0);
     var $42=HEAP32[(($41)>>2)];
     var $43=($42|0)==0;
     if ($43) {
      var $error_1=$error_0;var $301=$31;var $300=$36;
     } else {
      var $45=(($b_i)|0);
      var $46=(($31+6920)|0);
      var $47=$46;
      var $ld$0$0=(($47)|0);
      var $48$0=HEAP32[(($ld$0$0)>>2)];
      var $ld$1$1=(($47+4)|0);
      var $48$1=HEAP32[(($ld$1$1)>>2)];
      var $49=(($31+6896)|0);
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=(($31+6900)|0);
      var $53=$52;
      var $54=HEAP32[(($53)>>2)];
      var $55=(($31+6912)|0);
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      var $58=HEAP32[((9944)>>2)];
      var $59=HEAP32[((9968)>>2)];
      var $60=((($59)+($58))|0);
      var $61=HEAP32[((9936)>>2)];
      var $62=((($60)+($61))|0);
      var $63=HEAP32[((9960)>>2)];
      var $64=((($62)+($63))|0);
      var $65=HEAP32[((9928)>>2)];
      var $66=((($64)+($65))|0);
      var $67=HEAP32[((9976)>>2)];
      var $68=((($66)+($67))|0);
      var $69=HEAP32[((9984)>>2)];
      var $70=((($68)+($69))|0);
      var $71=HEAP32[((9920)>>2)];
      var $72=((($70)+($71))|0);
      var $73=$72>>>3;
      var $74=((($73)+(4))|0);
      var $75=(($36+352)|0);
      var $ld$2$0=(($75)|0);
      var $76$0=HEAP32[(($ld$2$0)>>2)];
      var $ld$3$1=(($75+4)|0);
      var $76$1=HEAP32[(($ld$3$1)>>2)];
      var $77$0=$74;
      var $77$1=0;
      var $78$0=_i64Add($77$0,$77$1,$76$0,$76$1);var $78$1=tempRet0;
      var $79=(($31+7280)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=FUNCTION_TABLE[$42]($encoder,$78$0,$78$1,$80);
      L6674: do {
       if (($81|0)==1) {
        var $83=HEAP32[(($1)>>2)];
        var $84=(($83)|0);
        HEAP32[(($84)>>2)]=5;
       } else if (($81|0)==0) {
        var $86=HEAP32[(($_pre51)>>2)];
        var $87=(($86+7268)|0);
        var $88=HEAP32[(($87)>>2)];
        var $89=(($31+6928)|0);
        var $90=(($86+7280)|0);
        var $91=HEAP32[(($90)>>2)];
        var $92=FUNCTION_TABLE[$88]($encoder,$89,16,0,0,$91);
        var $93=($92|0)==0;
        if (!($93)) {
         var $95=HEAP32[(($1)>>2)];
         var $96=(($95)|0);
         HEAP32[(($96)>>2)]=5;
         break;
        }
        var $98=((($58)-(4))|0);
        var $99=((($98)+($59))|0);
        var $100=((($99)+($61))|0);
        var $101=((($100)+($63))|0);
        var $102=((($101)+($65))|0);
        var $103=((($102)+($67))|0);
        var $104=((($103)+($69))|0);
        var $105=$104>>>3;
        var $106=((($105)+(4))|0);
        var $107=$57<<4;
        var $108=((($107)+(240))|0);
        var $109$0=$48$1;
        var $109$1=0;
        var $_tr_i$0=$109$0;
        var $_tr_i=$_tr_i$0&255;
        var $110=$_tr_i&15;
        var $111=($110&255);
        var $112=$108|$111;
        var $113=(($112)&255);
        HEAP8[($45)]=$113;
        var $114$0=($48$0>>>24)|($48$1<<8);
        var $114$1=($48$1>>>24)|(0<<8);
        var $115$0=$114$0;
        var $115=$115$0&255;
        var $116=(($b_i+1)|0);
        HEAP8[($116)]=$115;
        var $117$0=($48$0>>>16)|($48$1<<16);
        var $117$1=($48$1>>>16)|(0<<16);
        var $118$0=$117$0;
        var $118=$118$0&255;
        var $119=(($b_i+2)|0);
        HEAP8[($119)]=$118;
        var $120$0=($48$0>>>8)|($48$1<<24);
        var $120$1=($48$1>>>8)|(0<<24);
        var $121$0=$120$0;
        var $121=$121$0&255;
        var $122=(($b_i+3)|0);
        HEAP8[($122)]=$121;
        var $123$0=$48$0;
        var $123=$123$0&255;
        var $124=(($b_i+4)|0);
        HEAP8[($124)]=$123;
        var $125=HEAP32[(($_pre51)>>2)];
        var $126=(($125+7260)|0);
        var $127=HEAP32[(($126)>>2)];
        var $128=HEAP32[(($1)>>2)];
        var $129=(($128+352)|0);
        var $ld$4$0=(($129)|0);
        var $130$0=HEAP32[(($ld$4$0)>>2)];
        var $ld$5$1=(($129+4)|0);
        var $130$1=HEAP32[(($ld$5$1)>>2)];
        var $131$0=$106;
        var $131$1=0;
        var $132$0=_i64Add($130$0,$130$1,$131$0,$131$1);var $132$1=tempRet0;
        var $133=(($125+7280)|0);
        var $134=HEAP32[(($133)>>2)];
        var $135=FUNCTION_TABLE[$127]($encoder,$132$0,$132$1,$134);
        if (($135|0)==1) {
         var $137=HEAP32[(($1)>>2)];
         var $138=(($137)|0);
         HEAP32[(($138)>>2)]=5;
         break;
        } else if (!(($135|0)==0)) {
         break;
        }
        var $140=HEAP32[(($_pre51)>>2)];
        var $141=(($140+7268)|0);
        var $142=HEAP32[(($141)>>2)];
        var $143=(($140+7280)|0);
        var $144=HEAP32[(($143)>>2)];
        var $145=FUNCTION_TABLE[$142]($encoder,$45,5,0,0,$144);
        var $146=($145|0)==0;
        if (!($146)) {
         var $148=HEAP32[(($1)>>2)];
         var $149=(($148)|0);
         HEAP32[(($149)>>2)]=5;
         break;
        }
        var $151=$60>>>3;
        var $152=((($151)+(4))|0);
        var $153=$51>>>16;
        var $154=(($153)&255);
        HEAP8[($45)]=$154;
        var $155=$51>>>8;
        var $156=(($155)&255);
        HEAP8[($116)]=$156;
        var $157=(($51)&255);
        HEAP8[($119)]=$157;
        var $158=$54>>>16;
        var $159=(($158)&255);
        HEAP8[($122)]=$159;
        var $160=$54>>>8;
        var $161=(($160)&255);
        HEAP8[($124)]=$161;
        var $162=(($54)&255);
        var $163=(($b_i+5)|0);
        HEAP8[($163)]=$162;
        var $164=HEAP32[(($_pre51)>>2)];
        var $165=(($164+7260)|0);
        var $166=HEAP32[(($165)>>2)];
        var $167=HEAP32[(($1)>>2)];
        var $168=(($167+352)|0);
        var $ld$6$0=(($168)|0);
        var $169$0=HEAP32[(($ld$6$0)>>2)];
        var $ld$7$1=(($168+4)|0);
        var $169$1=HEAP32[(($ld$7$1)>>2)];
        var $170$0=$152;
        var $170$1=0;
        var $171$0=_i64Add($169$0,$169$1,$170$0,$170$1);var $171$1=tempRet0;
        var $172=(($164+7280)|0);
        var $173=HEAP32[(($172)>>2)];
        var $174=FUNCTION_TABLE[$166]($encoder,$171$0,$171$1,$173);
        if (($174|0)==1) {
         var $176=HEAP32[(($1)>>2)];
         var $177=(($176)|0);
         HEAP32[(($177)>>2)]=5;
         break;
        } else if (!(($174|0)==0)) {
         break;
        }
        var $179=HEAP32[(($_pre51)>>2)];
        var $180=(($179+7268)|0);
        var $181=HEAP32[(($180)>>2)];
        var $182=(($179+7280)|0);
        var $183=HEAP32[(($182)>>2)];
        var $184=FUNCTION_TABLE[$181]($encoder,$45,6,0,0,$183);
        var $185=($184|0)==0;
        if (!($185)) {
         var $187=HEAP32[(($1)>>2)];
         var $188=(($187)|0);
         HEAP32[(($188)>>2)]=5;
         break;
        }
        var $190=HEAP32[(($_pre51)>>2)];
        var $191=(($190+7048)|0);
        var $192=HEAP32[(($191)>>2)];
        var $193=($192|0)==0;
        if ($193) {
         break;
        }
        var $195=(($192)|0);
        var $196=HEAP32[(($195)>>2)];
        var $197=($196|0)==0;
        if ($197) {
         break;
        }
        var $199=HEAP32[(($1)>>2)];
        var $200=(($199+360)|0);
        var $ld$8$0=(($200)|0);
        var $201$0=HEAP32[(($ld$8$0)>>2)];
        var $ld$9$1=(($200+4)|0);
        var $201$1=HEAP32[(($ld$9$1)>>2)];
        var $$etemp$10$0=0;
        var $$etemp$10$1=0;
        var $202=(($201$0|0) == ($$etemp$10$0|0)) & (($201$1|0) == ($$etemp$10$1|0));
        if ($202) {
         break;
        }
        var $204=_FLAC__format_seektable_sort($192);
        var $205=HEAP32[(($_pre51)>>2)];
        var $206=(($205+7260)|0);
        var $207=HEAP32[(($206)>>2)];
        var $208=HEAP32[(($1)>>2)];
        var $209=(($208+360)|0);
        var $ld$11$0=(($209)|0);
        var $210$0=HEAP32[(($ld$11$0)>>2)];
        var $ld$12$1=(($209+4)|0);
        var $210$1=HEAP32[(($ld$12$1)>>2)];
        var $$etemp$13$0=4;
        var $$etemp$13$1=0;
        var $211$0=_i64Add($210$0,$210$1,$$etemp$13$0,$$etemp$13$1);var $211$1=tempRet0;
        var $212=(($205+7280)|0);
        var $213=HEAP32[(($212)>>2)];
        var $214=FUNCTION_TABLE[$207]($encoder,$211$0,$211$1,$213);
        if (($214|0)==1) {
         var $228=HEAP32[(($1)>>2)];
         var $229=(($228)|0);
         HEAP32[(($229)>>2)]=5;
         break;
        } else if (!(($214|0)==0)) {
         break;
        }
        var $215=(($b_i+7)|0);
        var $216=(($b_i+6)|0);
        var $217=(($b_i+15)|0);
        var $218=(($b_i+14)|0);
        var $219=(($b_i+13)|0);
        var $220=(($b_i+12)|0);
        var $221=(($b_i+11)|0);
        var $222=(($b_i+10)|0);
        var $223=(($b_i+9)|0);
        var $224=(($b_i+8)|0);
        var $225=(($b_i+17)|0);
        var $226=(($b_i+16)|0);
        var $i_0_i=0;
        while(1) {
         var $i_0_i;
         var $231=HEAP32[(($_pre51)>>2)];
         var $232=(($231+7048)|0);
         var $233=HEAP32[(($232)>>2)];
         var $234=(($233)|0);
         var $235=HEAP32[(($234)>>2)];
         var $236=($i_0_i>>>0)<($235>>>0);
         if (!($236)) {
          break L6674;
         }
         var $238=(($233+4)|0);
         var $239=HEAP32[(($238)>>2)];
         var $240=(($239+((($i_0_i)*(24))&-1))|0);
         var $ld$14$0=(($240)|0);
         var $241$0=HEAP32[(($ld$14$0)>>2)];
         var $ld$15$1=(($240+4)|0);
         var $241$1=HEAP32[(($ld$15$1)>>2)];
         var $242$0=$241$0;
         var $242=$242$0&255;
         HEAP8[($215)]=$242;
         var $243$0=($241$0>>>8)|($241$1<<24);
         var $243$1=($241$1>>>8)|(0<<24);
         var $244$0=$243$0;
         var $244=$244$0&255;
         HEAP8[($216)]=$244;
         var $245$0=($241$0>>>16)|($241$1<<16);
         var $245$1=($241$1>>>16)|(0<<16);
         var $246$0=$245$0;
         var $246=$246$0&255;
         HEAP8[($163)]=$246;
         var $247$0=($241$0>>>24)|($241$1<<8);
         var $247$1=($241$1>>>24)|(0<<8);
         var $248$0=$247$0;
         var $248=$248$0&255;
         HEAP8[($124)]=$248;
         var $249$0=$241$1;
         var $249$1=0;
         var $250$0=$249$0;
         var $250=$250$0&255;
         HEAP8[($122)]=$250;
         var $251$0=($241$1>>>8)|(0<<24);
         var $251$1=(0>>>8)|(0<<24);
         var $252$0=$251$0;
         var $252=$252$0&255;
         HEAP8[($119)]=$252;
         var $253$0=($241$1>>>16)|(0<<16);
         var $253$1=(0>>>16)|(0<<16);
         var $254$0=$253$0;
         var $254=$254$0&255;
         HEAP8[($116)]=$254;
         var $255$0=($241$1>>>24)|(0<<8);
         var $255$1=(0>>>24)|(0<<8);
         var $256$0=$255$0;
         var $256=$256$0&255;
         HEAP8[($45)]=$256;
         var $257=HEAP32[(($232)>>2)];
         var $258=(($257+4)|0);
         var $259=HEAP32[(($258)>>2)];
         var $260=(($259+((($i_0_i)*(24))&-1)+8)|0);
         var $ld$16$0=(($260)|0);
         var $261$0=HEAP32[(($ld$16$0)>>2)];
         var $ld$17$1=(($260+4)|0);
         var $261$1=HEAP32[(($ld$17$1)>>2)];
         var $262$0=$261$0;
         var $262=$262$0&255;
         HEAP8[($217)]=$262;
         var $263$0=($261$0>>>8)|($261$1<<24);
         var $263$1=($261$1>>>8)|(0<<24);
         var $264$0=$263$0;
         var $264=$264$0&255;
         HEAP8[($218)]=$264;
         var $265$0=($261$0>>>16)|($261$1<<16);
         var $265$1=($261$1>>>16)|(0<<16);
         var $266$0=$265$0;
         var $266=$266$0&255;
         HEAP8[($219)]=$266;
         var $267$0=($261$0>>>24)|($261$1<<8);
         var $267$1=($261$1>>>24)|(0<<8);
         var $268$0=$267$0;
         var $268=$268$0&255;
         HEAP8[($220)]=$268;
         var $269$0=$261$1;
         var $269$1=0;
         var $270$0=$269$0;
         var $270=$270$0&255;
         HEAP8[($221)]=$270;
         var $271$0=($261$1>>>8)|(0<<24);
         var $271$1=(0>>>8)|(0<<24);
         var $272$0=$271$0;
         var $272=$272$0&255;
         HEAP8[($222)]=$272;
         var $273$0=($261$1>>>16)|(0<<16);
         var $273$1=(0>>>16)|(0<<16);
         var $274$0=$273$0;
         var $274=$274$0&255;
         HEAP8[($223)]=$274;
         var $275$0=($261$1>>>24)|(0<<8);
         var $275$1=(0>>>24)|(0<<8);
         var $276$0=$275$0;
         var $276=$276$0&255;
         HEAP8[($224)]=$276;
         var $277=HEAP32[(($232)>>2)];
         var $278=(($277+4)|0);
         var $279=HEAP32[(($278)>>2)];
         var $280=(($279+((($i_0_i)*(24))&-1)+16)|0);
         var $281=HEAP32[(($280)>>2)];
         var $282=(($281)&255);
         HEAP8[($225)]=$282;
         var $283=$281>>>8;
         var $284=(($283)&255);
         HEAP8[($226)]=$284;
         var $285=(($231+7268)|0);
         var $286=HEAP32[(($285)>>2)];
         var $287=(($231+7280)|0);
         var $288=HEAP32[(($287)>>2)];
         var $289=FUNCTION_TABLE[$286]($encoder,$45,18,0,0,$288);
         var $290=($289|0)==0;
         var $291=((($i_0_i)+(1))|0);
         if ($290) {
          var $i_0_i=$291;
         } else {
          break;
         }
        }
        var $293=HEAP32[(($1)>>2)];
        var $294=(($293)|0);
        HEAP32[(($294)>>2)]=5;
       }
      } while(0);
      var $295=HEAP32[(($1)>>2)];
      var $296=(($295)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=($297|0)==0;
      var $error_0_=$298?$error_0:1;
      var $_pre39=HEAP32[(($_pre51)>>2)];
      var $error_1=$error_0_;var $301=$_pre39;var $300=$295;
     }
     var $300;
     var $301;
     var $error_1;
     var $302=(($301+7272)|0);
     var $303=HEAP32[(($302)>>2)];
     var $304=($303|0)==0;
     if ($304) {
      var $error_2=$error_1;var $310=$300;
      break;
     }
     var $306=(($301+6872)|0);
     var $307=(($301+7280)|0);
     var $308=HEAP32[(($307)>>2)];
     FUNCTION_TABLE[$303]($encoder,$306,$308);
     var $_pre40=HEAP32[(($1)>>2)];
     var $error_2=$error_1;var $310=$_pre40;
    } else {
     var $error_2=$error_0;var $310=$36;
    }
   } while(0);
   var $310;
   var $error_2;
   var $311=(($310+4)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=($312|0)==0;
   if ($313) {
    var $error_3=$error_2;
    break;
   }
   var $315=HEAP32[(($_pre51)>>2)];
   var $316=(($315+11744)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=($317|0)==0;
   if ($318) {
    var $error_3=$error_2;
    break;
   }
   var $320=_FLAC__stream_decoder_finish($317);
   var $321=($320|0)==0;
   if (!($321)) {
    var $error_3=$error_2;
    break;
   }
   var $323=($error_2|0)==0;
   if (!($323)) {
    var $error_3=1;
    break;
   }
   var $325=HEAP32[(($1)>>2)];
   var $326=(($325)|0);
   HEAP32[(($326)>>2)]=4;
   var $error_3=1;
  } else {
   var $error_3=$error_0;
  }
 } while(0);
 var $error_3;
 var $327=HEAP32[(($_pre51)>>2)];
 var $328=(($327+7288)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=($329|0)==0;
 if (!($330)) {
  var $332=HEAP32[((_stdout)>>2)];
  var $333=($329|0)==($332|0);
  if ($333) {
   var $337=$327;
  } else {
   var $335=_fclose($329);
   var $_pre41=HEAP32[(($_pre51)>>2)];
   var $337=$_pre41;
  }
  var $337;
  var $338=(($337+7288)|0);
  HEAP32[(($338)>>2)]=0;
 }
 var $339=HEAP32[(($1)>>2)];
 var $340=(($339+344)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=($341|0)==0;
 if ($342) {
  var $349=$339;
 } else {
  var $344=$341;
  _free($344);
  var $345=HEAP32[(($1)>>2)];
  var $346=(($345+344)|0);
  HEAP32[(($346)>>2)]=0;
  var $347=HEAP32[(($1)>>2)];
  var $348=(($347+348)|0);
  HEAP32[(($348)>>2)]=0;
  var $_pre_i=HEAP32[(($1)>>2)];
  var $349=$_pre_i;
 }
 var $349;
 var $350=(($349+24)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=($351|0)==0;
 if (!($352)) {
  var $i_0104_i=0;
  while(1) {
   var $i_0104_i;
   var $357=HEAP32[(($_pre51)>>2)];
   var $358=(($357+7320+($i_0104_i<<2))|0);
   var $359=HEAP32[(($358)>>2)];
   var $360=($359|0)==0;
   if ($360) {
    var $366=$357;
   } else {
    var $362=$359;
    _free($362);
    var $363=HEAP32[(($_pre51)>>2)];
    var $364=(($363+7320+($i_0104_i<<2))|0);
    HEAP32[(($364)>>2)]=0;
    var $_pre120_i=HEAP32[(($_pre51)>>2)];
    var $366=$_pre120_i;
   }
   var $366;
   var $367=(($366+7360+($i_0104_i<<2))|0);
   var $368=HEAP32[(($367)>>2)];
   var $369=($368|0)==0;
   if (!($369)) {
    var $371=$368;
    _free($371);
    var $372=HEAP32[(($_pre51)>>2)];
    var $373=(($372+7360+($i_0104_i<<2))|0);
    HEAP32[(($373)>>2)]=0;
   }
   var $374=((($i_0104_i)+(1))|0);
   var $375=HEAP32[(($1)>>2)];
   var $376=(($375+24)|0);
   var $377=HEAP32[(($376)>>2)];
   var $378=($374>>>0)<($377>>>0);
   if ($378) {
    var $i_0104_i=$374;
   } else {
    break;
   }
  }
 }
 var $353=HEAP32[(($_pre51)>>2)];
 var $354=(($353+7352)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=($355|0)==0;
 if ($356) {
  var $384=$353;
 } else {
  var $380=$355;
  _free($380);
  var $381=HEAP32[(($_pre51)>>2)];
  var $382=(($381+7352)|0);
  HEAP32[(($382)>>2)]=0;
  var $_pre106_i=HEAP32[(($_pre51)>>2)];
  var $384=$_pre106_i;
 }
 var $384;
 var $385=(($384+7392)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=($386|0)==0;
 if ($387) {
  var $393=$384;
 } else {
  var $389=$386;
  _free($389);
  var $390=HEAP32[(($_pre51)>>2)];
  var $391=(($390+7392)|0);
  HEAP32[(($391)>>2)]=0;
  var $_pre107_i=HEAP32[(($_pre51)>>2)];
  var $393=$_pre107_i;
 }
 var $393;
 var $394=(($393+7356)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=($395|0)==0;
 if ($396) {
  var $526=$393;
 } else {
  var $522=$395;
  _free($522);
  var $523=HEAP32[(($_pre51)>>2)];
  var $524=(($523+7356)|0);
  HEAP32[(($524)>>2)]=0;
  var $_pre108_i=HEAP32[(($_pre51)>>2)];
  var $526=$_pre108_i;
 }
 var $526;
 var $527=(($526+7396)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=($528|0)==0;
 if ($529) {
  var $534=$526;
 } else {
  var $531=$528;
  _free($531);
  var $532=HEAP32[(($_pre51)>>2)];
  var $533=(($532+7396)|0);
  HEAP32[(($533)>>2)]=0;
  var $_pre109_i=HEAP32[(($_pre51)>>2)];
  var $534=$_pre109_i;
 }
 var $534;
 var $535=HEAP32[(($1)>>2)];
 var $536=(($535+40)|0);
 var $537=HEAP32[(($536)>>2)];
 var $538=($537|0)==0;
 if ($538) {
  var $_lcssa97_i=$534;var $413=$535;
 } else {
  var $i_298_i=0;var $398=$534;var $397=$535;
  while(1) {
   var $397;
   var $398;
   var $i_298_i;
   var $399=(($398+7400+($i_298_i<<2))|0);
   var $400=HEAP32[(($399)>>2)];
   var $401=($400|0)==0;
   if ($401) {
    var $408=$397;var $407=$398;
   } else {
    var $403=$400;
    _free($403);
    var $404=HEAP32[(($_pre51)>>2)];
    var $405=(($404+7400+($i_298_i<<2))|0);
    HEAP32[(($405)>>2)]=0;
    var $_pre118_i=HEAP32[(($1)>>2)];
    var $_pre119_i=HEAP32[(($_pre51)>>2)];
    var $408=$_pre118_i;var $407=$_pre119_i;
   }
   var $407;
   var $408;
   var $409=((($i_298_i)+(1))|0);
   var $410=(($408+40)|0);
   var $411=HEAP32[(($410)>>2)];
   var $412=($409>>>0)<($411>>>0);
   if ($412) {
    var $i_298_i=$409;var $398=$407;var $397=$408;
   } else {
    var $_lcssa97_i=$407;var $413=$408;
    break;
   }
  }
 }
 var $413;
 var $_lcssa97_i;
 var $414=(($_lcssa97_i+7528)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=($415|0)==0;
 if ($416) {
  var $421=$413;
 } else {
  var $418=$415;
  _free($418);
  var $419=HEAP32[(($_pre51)>>2)];
  var $420=(($419+7528)|0);
  HEAP32[(($420)>>2)]=0;
  var $_pre110_i=HEAP32[(($1)>>2)];
  var $421=$_pre110_i;
 }
 var $421;
 var $422=(($421+24)|0);
 var $423=HEAP32[(($422)>>2)];
 var $424=($423|0)==0;
 if (!($424)) {
  var $channel_095_i=0;
  while(1) {
   var $channel_095_i;
   var $425=HEAP32[(($_pre51)>>2)];
   var $426=(($425+7532+($channel_095_i<<3))|0);
   var $427=HEAP32[(($426)>>2)];
   var $428=($427|0)==0;
   if ($428) {
    var $438=$425;
   } else {
    var $434=$427;
    _free($434);
    var $435=HEAP32[(($_pre51)>>2)];
    var $436=(($435+7532+($channel_095_i<<3))|0);
    HEAP32[(($436)>>2)]=0;
    var $_pre117_i=HEAP32[(($_pre51)>>2)];
    var $438=$_pre117_i;
   }
   var $438;
   var $439=(($438+7532+($channel_095_i<<3)+4)|0);
   var $440=HEAP32[(($439)>>2)];
   var $441=($440|0)==0;
   if (!($441)) {
    var $513=$440;
    _free($513);
    var $514=HEAP32[(($_pre51)>>2)];
    var $515=(($514+7532+($channel_095_i<<3)+4)|0);
    HEAP32[(($515)>>2)]=0;
   }
   var $516=((($channel_095_i)+(1))|0);
   var $517=HEAP32[(($1)>>2)];
   var $518=(($517+24)|0);
   var $519=HEAP32[(($518)>>2)];
   var $520=($516>>>0)<($519>>>0);
   if ($520) {
    var $channel_095_i=$516;
   } else {
    break;
   }
  }
 }
 var $429=HEAP32[(($_pre51)>>2)];
 var $430=(($429+7596)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=($431|0)==0;
 if ($432) {
  var $447=$429;
 } else {
  var $443=$431;
  _free($443);
  var $444=HEAP32[(($_pre51)>>2)];
  var $445=(($444+7596)|0);
  HEAP32[(($445)>>2)]=0;
  var $_pre111_i=HEAP32[(($_pre51)>>2)];
  var $447=$_pre111_i;
 }
 var $447;
 var $448=(($447+7600)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=($449|0)==0;
 if ($450) {
  var $490=$447;
 } else {
  var $487=$449;
  _free($487);
  var $488=HEAP32[(($_pre51)>>2)];
  var $489=(($488+7600)|0);
  HEAP32[(($489)>>2)]=0;
  var $_pre112_i=HEAP32[(($_pre51)>>2)];
  var $490=$_pre112_i;
 }
 var $490;
 var $491=(($490+7604)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=($492|0)==0;
 if ($493) {
  var $499=$490;
 } else {
  var $495=$492;
  _free($495);
  var $496=HEAP32[(($_pre51)>>2)];
  var $497=(($496+7604)|0);
  HEAP32[(($497)>>2)]=0;
  var $_pre113_i=HEAP32[(($_pre51)>>2)];
  var $499=$_pre113_i;
 }
 var $499;
 var $500=(($499+7608)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=($501|0)==0;
 if ($502) {
  var $508=$499;
 } else {
  var $504=$501;
  _free($504);
  var $505=HEAP32[(($_pre51)>>2)];
  var $506=(($505+7608)|0);
  HEAP32[(($506)>>2)]=0;
  var $_pre114_i=HEAP32[(($_pre51)>>2)];
  var $508=$_pre114_i;
 }
 var $508;
 var $509=(($508+7612)|0);
 var $510=HEAP32[(($509)>>2)];
 var $511=($510|0)==0;
 if ($511) {
  var $456=$508;
 } else {
  var $452=$510;
  _free($452);
  var $453=HEAP32[(($_pre51)>>2)];
  var $454=(($453+7612)|0);
  HEAP32[(($454)>>2)]=0;
  var $_pre115_i=HEAP32[(($_pre51)>>2)];
  var $456=$_pre115_i;
 }
 var $456;
 var $457=(($456+7616)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=($458|0)==0;
 if (!($459)) {
  var $461=$458;
  _free($461);
  var $462=HEAP32[(($_pre51)>>2)];
  var $463=(($462+7616)|0);
  HEAP32[(($463)>>2)]=0;
 }
 var $464=HEAP32[(($1)>>2)];
 var $465=(($464+4)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=($466|0)==0;
 do {
  if (!($467)) {
   var $468=(($464+24)|0);
   var $469=HEAP32[(($468)>>2)];
   var $470=($469|0)==0;
   if ($470) {
    break;
   } else {
    var $i_587_i=0;var $471=$464;
   }
   while(1) {
    var $471;
    var $i_587_i;
    var $472=HEAP32[(($_pre51)>>2)];
    var $473=(($472+11756+($i_587_i<<2))|0);
    var $474=HEAP32[(($473)>>2)];
    var $475=($474|0)==0;
    if ($475) {
     var $481=$471;
    } else {
     var $477=$474;
     _free($477);
     var $478=HEAP32[(($_pre51)>>2)];
     var $479=(($478+11756+($i_587_i<<2))|0);
     HEAP32[(($479)>>2)]=0;
     var $_pre116_i=HEAP32[(($1)>>2)];
     var $481=$_pre116_i;
    }
    var $481;
    var $482=((($i_587_i)+(1))|0);
    var $483=(($481+24)|0);
    var $484=HEAP32[(($483)>>2)];
    var $485=($482>>>0)<($484>>>0);
    if ($485) {
     var $i_587_i=$482;var $471=$481;
    } else {
     break;
    }
   }
  }
 } while(0);
 var $539=HEAP32[(($_pre51)>>2)];
 var $540=(($539+6856)|0);
 var $541=HEAP32[(($540)>>2)];
 _FLAC__bitwriter_free($541);
 var $542=HEAP32[(($1)>>2)];
 var $543=(($542+4)|0);
 HEAP32[(($543)>>2)]=0;
 var $544=HEAP32[(($1)>>2)];
 var $545=(($544+8)|0);
 HEAP32[(($545)>>2)]=1;
 var $546=HEAP32[(($1)>>2)];
 var $547=(($546+12)|0);
 HEAP32[(($547)>>2)]=1;
 var $548=HEAP32[(($1)>>2)];
 var $549=(($548+16)|0);
 HEAP32[(($549)>>2)]=0;
 var $550=HEAP32[(($1)>>2)];
 var $551=(($550+20)|0);
 HEAP32[(($551)>>2)]=0;
 var $552=HEAP32[(($1)>>2)];
 var $553=(($552+24)|0);
 HEAP32[(($553)>>2)]=2;
 var $554=HEAP32[(($1)>>2)];
 var $555=(($554+28)|0);
 HEAP32[(($555)>>2)]=16;
 var $556=HEAP32[(($1)>>2)];
 var $557=(($556+32)|0);
 HEAP32[(($557)>>2)]=44100;
 var $558=HEAP32[(($1)>>2)];
 var $559=(($558+36)|0);
 HEAP32[(($559)>>2)]=0;
 var $560=HEAP32[(($1)>>2)];
 var $561=(($560+40)|0);
 HEAP32[(($561)>>2)]=1;
 var $562=HEAP32[(($1)>>2)];
 var $563=(($562+44)|0);
 HEAP32[(($563)>>2)]=13;
 var $564=HEAP32[(($1)>>2)];
 var $565=(($564+48)|0);
 HEAPF32[(($565)>>2)]=0.5;
 var $566=HEAP32[(($1)>>2)];
 var $567=(($566+300)|0);
 HEAP32[(($567)>>2)]=0;
 var $568=HEAP32[(($1)>>2)];
 var $569=(($568+304)|0);
 HEAP32[(($569)>>2)]=0;
 var $570=HEAP32[(($1)>>2)];
 var $571=(($570+308)|0);
 HEAP32[(($571)>>2)]=0;
 var $572=HEAP32[(($1)>>2)];
 var $573=(($572+312)|0);
 HEAP32[(($573)>>2)]=0;
 var $574=HEAP32[(($1)>>2)];
 var $575=(($574+316)|0);
 HEAP32[(($575)>>2)]=0;
 var $576=HEAP32[(($1)>>2)];
 var $577=(($576+320)|0);
 HEAP32[(($577)>>2)]=0;
 var $578=HEAP32[(($1)>>2)];
 var $579=(($578+324)|0);
 HEAP32[(($579)>>2)]=0;
 var $580=HEAP32[(($1)>>2)];
 var $581=(($580+328)|0);
 HEAP32[(($581)>>2)]=0;
 var $582=HEAP32[(($1)>>2)];
 var $583=(($582+336)|0);
 var $$etemp$18$0=0;
 var $$etemp$18$1=0;
 var $st$19$0=(($583)|0);
 HEAP32[(($st$19$0)>>2)]=$$etemp$18$0;
 var $st$20$1=(($583+4)|0);
 HEAP32[(($st$20$1)>>2)]=$$etemp$18$1;
 var $584=HEAP32[(($1)>>2)];
 var $585=(($584+344)|0);
 HEAP32[(($585)>>2)]=0;
 var $586=HEAP32[(($1)>>2)];
 var $587=(($586+348)|0);
 HEAP32[(($587)>>2)]=0;
 var $588=HEAP32[(($_pre51)>>2)];
 var $589=(($588+7048)|0);
 HEAP32[(($589)>>2)]=0;
 var $590=HEAP32[(($_pre51)>>2)];
 var $591=(($590+7244)|0);
 HEAP32[(($591)>>2)]=0;
 var $592=HEAP32[(($_pre51)>>2)];
 var $593=(($592+7248)|0);
 HEAP32[(($593)>>2)]=0;
 var $594=HEAP32[(($_pre51)>>2)];
 var $595=(($594+7252)|0);
 HEAP32[(($595)>>2)]=0;
 var $596=HEAP32[(($_pre51)>>2)];
 var $597=(($596+7256)|0);
 HEAP32[(($597)>>2)]=0;
 var $598=HEAP32[(($_pre51)>>2)];
 var $599=(($598+7268)|0);
 HEAP32[(($599)>>2)]=0;
 var $600=HEAP32[(($_pre51)>>2)];
 var $601=(($600+7260)|0);
 HEAP32[(($601)>>2)]=0;
 var $602=HEAP32[(($_pre51)>>2)];
 var $603=(($602+7264)|0);
 HEAP32[(($603)>>2)]=0;
 var $604=HEAP32[(($_pre51)>>2)];
 var $605=(($604+7272)|0);
 HEAP32[(($605)>>2)]=0;
 var $606=HEAP32[(($_pre51)>>2)];
 var $607=(($606+7276)|0);
 HEAP32[(($607)>>2)]=0;
 var $608=HEAP32[(($_pre51)>>2)];
 var $609=(($608+7280)|0);
 HEAP32[(($609)>>2)]=0;
 var $610=_FLAC__stream_encoder_set_compression_level($encoder,5);
 var $611=($error_3|0)!=0;
 if (!($611)) {
  var $613=HEAP32[(($1)>>2)];
  var $614=(($613)|0);
  HEAP32[(($614)>>2)]=1;
 }
 var $616=($611&1);
 var $617=$616^1;
 var $_0=$617;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__stream_encoder_init_stream($encoder,$write_callback,$seek_callback,$tell_callback,$metadata_callback,$client_data){
 var label=0;
 var $1=_init_stream_internal_213($encoder,0,$write_callback,$seek_callback,$tell_callback,$metadata_callback,$client_data,0);
 return $1;
}
function _init_stream_internal_213($encoder,$read_callback,$write_callback,$seek_callback,$tell_callback,$metadata_callback,$client_data,$is_ogg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0;
 var $vorbis_comment=sp;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=13;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $7=($is_ogg|0)==0;
 if (!($7)) {
  var $_0=2;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $9=($write_callback|0)==0;
 if ($9) {
  var $_0=3;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $11=($seek_callback|0)!=0;
 var $12=($tell_callback|0)==0;
 var $or_cond=$11&$12;
 if ($or_cond) {
  var $_0=3;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $14=(($2+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 var $17=($15>>>0)>8;
 var $or_cond272=$16|$17;
 if ($or_cond272) {
  var $_0=4;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $19=($15|0)==2;
 var $20=(($2+16)|0);
 do {
  if ($19) {
   var $25=HEAP32[(($20)>>2)];
   var $26=($25|0)==0;
   if (!($26)) {
    break;
   }
   var $28=(($2+20)|0);
   HEAP32[(($28)>>2)]=0;
  } else {
   HEAP32[(($20)>>2)]=0;
   var $22=HEAP32[(($1)>>2)];
   var $23=(($22+20)|0);
   HEAP32[(($23)>>2)]=0;
  }
 } while(0);
 var $30=HEAP32[(($1)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32>>>0)>31;
 if ($33) {
  var $35=(($30+16)|0);
  HEAP32[(($35)>>2)]=0;
  var $_pre=HEAP32[(($1)>>2)];
  var $_phi_trans_insert=(($_pre+28)|0);
  var $_pre338=HEAP32[(($_phi_trans_insert)>>2)];
  var $38=$_pre;var $37=$_pre338;
 } else {
  var $38=$30;var $37=$32;
 }
 var $37;
 var $38;
 var $_off=((($37)-(4))|0);
 var $39=($_off>>>0)>20;
 if ($39) {
  var $_0=5;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $41=(($38+32)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=_FLAC__format_sample_rate_is_valid($42);
 var $44=($43|0)==0;
 if ($44) {
  var $_0=6;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $46=HEAP32[(($1)>>2)];
 var $47=(($46+36)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 do {
  if ($49) {
   var $51=(($46+300)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=($52|0)==0;
   if ($53) {
    HEAP32[(($47)>>2)]=1152;
    break;
   } else {
    HEAP32[(($47)>>2)]=4096;
    break;
   }
  }
 } while(0);
 var $57=HEAP32[(($1)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $_off277=((($59)-(16))|0);
 var $60=($_off277>>>0)>65519;
 if ($60) {
  var $_0=7;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $62=(($57+300)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($63>>>0)>32;
 if ($64) {
  var $_0=8;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $66=($59>>>0)<($63>>>0);
 if ($66) {
  var $_0=10;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $68=(($57+304)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==0;
 do {
  if ($70) {
   var $72=(($57+28)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=($73>>>0)<16;
   if ($74) {
    var $76=$73>>>1;
    var $77=((($76)+(2))|0);
    var $78=($77>>>0)<5;
    var $_=$78?5:$77;
    HEAP32[(($68)>>2)]=$_;
    break;
   }
   var $80=($73|0)==16;
   if (!($80)) {
    var $101=($59>>>0)<385;
    if ($101) {
     HEAP32[(($68)>>2)]=13;
     break;
    }
    var $104=($59>>>0)<1153;
    if ($104) {
     HEAP32[(($68)>>2)]=14;
     break;
    } else {
     HEAP32[(($68)>>2)]=15;
     break;
    }
   }
   var $82=($59>>>0)<193;
   if ($82) {
    HEAP32[(($68)>>2)]=7;
    break;
   }
   var $85=($59>>>0)<385;
   if ($85) {
    HEAP32[(($68)>>2)]=8;
    break;
   }
   var $88=($59>>>0)<577;
   if ($88) {
    HEAP32[(($68)>>2)]=9;
    break;
   }
   var $91=($59>>>0)<1153;
   if ($91) {
    HEAP32[(($68)>>2)]=10;
    break;
   }
   var $94=($59>>>0)<2305;
   if ($94) {
    HEAP32[(($68)>>2)]=11;
    break;
   }
   var $97=($59>>>0)<4609;
   if ($97) {
    HEAP32[(($68)>>2)]=12;
    break;
   } else {
    HEAP32[(($68)>>2)]=13;
    break;
   }
  } else {
   var $_off278=((($69)-(5))|0);
   var $108=($_off278>>>0)>10;
   if ($108) {
    var $_0=9;
   } else {
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $110=HEAP32[(($1)>>2)];
 var $111=(($110+8)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112|0)==0;
 do {
  if ($113) {
   var $_phi_trans_insert356=(($110+324)|0);
   var $_pre357=HEAP32[(($_phi_trans_insert356)>>2)];
   var $149=$110;var $148=$_pre357;
  } else {
   var $115=(($110+36)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($110+32)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=_FLAC__format_blocksize_is_subset($116,$118);
   var $120=($119|0)==0;
   if ($120) {
    var $_0=11;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $122=HEAP32[(($1)>>2)];
   var $123=(($122+32)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=_FLAC__format_sample_rate_is_subset($124);
   var $126=($125|0)==0;
   if ($126) {
    var $_0=11;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $128=HEAP32[(($1)>>2)];
   var $129=(($128+28)|0);
   var $130=HEAP32[(($129)>>2)];
   switch (($130|0)) {
   case 8:case 12:case 16:case 20:case 24: {
    break;
   }
   default: {
    var $_0=11;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   }
   var $132=(($128+324)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=($133>>>0)>8;
   if ($134) {
    var $_0=11;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $136=(($128+32)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=($137>>>0)<48001;
   if (!($138)) {
    var $149=$128;var $148=$133;
    break;
   }
   var $140=(($128+36)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=($141>>>0)>4608;
   if ($142) {
    var $_0=11;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $144=(($128+300)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=($145>>>0)>12;
   if ($146) {
    var $_0=11;
   } else {
    var $149=$128;var $148=$133;
    break;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $148;
 var $149;
 var $150=HEAP32[((10512)>>2)];
 var $151=1<<$150;
 var $152=($148>>>0)<($151>>>0);
 if ($152) {
  var $158=$149;var $157=$148;
 } else {
  var $154=(($149+324)|0);
  var $155=((($151)-(1))|0);
  HEAP32[(($154)>>2)]=$155;
  var $_pre339=HEAP32[(($1)>>2)];
  var $_phi_trans_insert340=(($_pre339+324)|0);
  var $_pre341=HEAP32[(($_phi_trans_insert340)>>2)];
  var $158=$_pre339;var $157=$_pre341;
 }
 var $157;
 var $158;
 var $159=(($158+320)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160>>>0)<($157>>>0);
 if ($161) {
  var $164=$158;
 } else {
  HEAP32[(($159)>>2)]=$157;
  var $_pre342=HEAP32[(($1)>>2)];
  var $164=$_pre342;
 }
 var $164;
 var $165=(($164+344)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=($166|0)==0;
 L6900: do {
  if ($167) {
   var $191=$164;
   label = 5157;
  } else {
   var $169=(($164+348)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=($170|0)==0;
   if ($171) {
    var $196=$166;var $195=$164;
   } else {
    var $i2_0323=0;
    while(1) {
     var $i2_0323;
     var $172=(($166+($i2_0323<<2))|0);
     var $173=HEAP32[(($172)>>2)];
     var $174=($173|0)==0;
     if (!($174)) {
      var $176=(($173)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=($177|0)==3;
      if ($178) {
       label = 5154;
       break;
      }
     }
     var $186=((($i2_0323)+(1))|0);
     var $187=($186>>>0)<($170>>>0);
     if ($187) {
      var $i2_0323=$186;
     } else {
      var $189=$164;var $188=$166;
      break;
     }
    }
    if (label == 5154) {
     var $180=(($173+16)|0);
     var $181=$180;
     var $182=(($encoder+4)|0);
     var $183=HEAP32[(($182)>>2)];
     var $184=(($183+7048)|0);
     HEAP32[(($184)>>2)]=$181;
     var $_pre343=HEAP32[(($1)>>2)];
     var $_phi_trans_insert365=(($_pre343+344)|0);
     var $_pre366=HEAP32[(($_phi_trans_insert365)>>2)];
     var $189=$_pre343;var $188=$_pre366;
    }
    var $188;
    var $189;
    var $190=($188|0)==0;
    if ($190) {
     var $191=$189;
     label = 5157;
     break;
    } else {
     var $196=$188;var $195=$189;
    }
   }
   var $195;
   var $196;
   var $_phi_trans_insert358=(($195+348)|0);
   var $_pre359=HEAP32[(($_phi_trans_insert358)>>2)];
   var $phitmp=($_pre359|0)==0;
   if ($phitmp) {
    var $metadata_has_vorbis_comment_0_lcssa=0;
    break;
   } else {
    var $i_0312=0;var $metadata_has_seektable_0313=0;var $metadata_has_vorbis_comment_0314=0;var $metadata_picture_has_type1_0315=0;var $metadata_picture_has_type2_0316=0;var $197=$196;
   }
   L6912: while(1) {
    var $197;
    var $metadata_picture_has_type2_0316;
    var $metadata_picture_has_type1_0315;
    var $metadata_has_vorbis_comment_0314;
    var $metadata_has_seektable_0313;
    var $i_0312;
    var $198=(($197+($i_0312<<2))|0);
    var $199=HEAP32[(($198)>>2)];
    var $200=(($199)|0);
    var $201=HEAP32[(($200)>>2)];
    L6914: do {
     switch (($201|0)) {
     case 4: {
      var $210=($metadata_has_vorbis_comment_0314|0)==0;
      if ($210) {
       var $metadata_picture_has_type2_1=$metadata_picture_has_type2_0316;var $metadata_picture_has_type1_1=$metadata_picture_has_type1_0315;var $metadata_has_vorbis_comment_1=1;var $metadata_has_seektable_1=$metadata_has_seektable_0313;
      } else {
       var $_0=12;
       label = 5280;
       break L6912;
      }
      break;
     }
     case 5: {
      var $212=(($199+16)|0);
      var $213=(($199+160)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=_FLAC__format_cuesheet_is_legal($212,$214,0);
      var $216=($215|0)==0;
      if ($216) {
       var $_0=12;
       label = 5285;
       break L6912;
      } else {
       var $metadata_picture_has_type2_1=$metadata_picture_has_type2_0316;var $metadata_picture_has_type1_1=$metadata_picture_has_type1_0315;var $metadata_has_vorbis_comment_1=$metadata_has_vorbis_comment_0314;var $metadata_has_seektable_1=$metadata_has_seektable_0313;
      }
      break;
     }
     case 6: {
      var $218=(($199+16)|0);
      var $219=$218;
      var $220=_FLAC__format_picture_is_legal($219,0);
      var $221=($220|0)==0;
      if ($221) {
       var $_0=12;
       label = 5286;
       break L6912;
      }
      var $223=$218;
      var $224=HEAP32[(($223)>>2)];
      if (($224|0)==2) {
       var $247=($metadata_picture_has_type2_0316|0)==0;
       if ($247) {
        var $metadata_picture_has_type2_1=1;var $metadata_picture_has_type1_1=$metadata_picture_has_type1_0315;var $metadata_has_vorbis_comment_1=$metadata_has_vorbis_comment_0314;var $metadata_has_seektable_1=$metadata_has_seektable_0313;
        break L6914;
       } else {
        var $_0=12;
        label = 5278;
        break L6912;
       }
      } else if (!(($224|0)==1)) {
       var $metadata_picture_has_type2_1=$metadata_picture_has_type2_0316;var $metadata_picture_has_type1_1=$metadata_picture_has_type1_0315;var $metadata_has_vorbis_comment_1=$metadata_has_vorbis_comment_0314;var $metadata_has_seektable_1=$metadata_has_seektable_0313;
       break L6914;
      }
      var $226=($metadata_picture_has_type1_0315|0)==0;
      if (!($226)) {
       var $_0=12;
       label = 5281;
       break L6912;
      }
      var $228=(($199+20)|0);
      var $229=$228;
      var $230=HEAP32[(($229)>>2)];
      var $231=_strcmp($230,1712);
      var $232=($231|0)==0;
      if (!($232)) {
       var $234=_strcmp($230,1584);
       var $235=($234|0)==0;
       if (!($235)) {
        var $_0=12;
        label = 5317;
        break L6912;
       }
      }
      var $237=(($199+28)|0);
      var $238=$237;
      var $239=HEAP32[(($238)>>2)];
      var $240=($239|0)==32;
      if (!($240)) {
       var $_0=12;
       label = 5318;
       break L6912;
      }
      var $242=(($199+32)|0);
      var $243=$242;
      var $244=HEAP32[(($243)>>2)];
      var $245=($244|0)==32;
      if ($245) {
       var $metadata_picture_has_type2_1=$metadata_picture_has_type2_0316;var $metadata_picture_has_type1_1=1;var $metadata_has_vorbis_comment_1=$metadata_has_vorbis_comment_0314;var $metadata_has_seektable_1=$metadata_has_seektable_0313;
      } else {
       var $_0=12;
       label = 5292;
       break L6912;
      }
      break;
     }
     case 3: {
      var $203=($metadata_has_seektable_0313|0)==0;
      if (!($203)) {
       var $_0=12;
       label = 5309;
       break L6912;
      }
      var $205=(($199+16)|0);
      var $206=$205;
      var $207=_FLAC__format_seektable_is_legal($206);
      var $208=($207|0)==0;
      if ($208) {
       var $_0=12;
       label = 5279;
       break L6912;
      } else {
       var $metadata_picture_has_type2_1=$metadata_picture_has_type2_0316;var $metadata_picture_has_type1_1=$metadata_picture_has_type1_0315;var $metadata_has_vorbis_comment_1=$metadata_has_vorbis_comment_0314;var $metadata_has_seektable_1=1;
      }
      break;
     }
     case 0: {
      var $_0=12;
      label = 5308;
      break L6912;
      break;
     }
     default: {
      var $metadata_picture_has_type2_1=$metadata_picture_has_type2_0316;var $metadata_picture_has_type1_1=$metadata_picture_has_type1_0315;var $metadata_has_vorbis_comment_1=$metadata_has_vorbis_comment_0314;var $metadata_has_seektable_1=$metadata_has_seektable_0313;
     }
     }
    } while(0);
    var $metadata_has_seektable_1;
    var $metadata_has_vorbis_comment_1;
    var $metadata_picture_has_type1_1;
    var $metadata_picture_has_type2_1;
    var $248=((($i_0312)+(1))|0);
    var $249=HEAP32[(($1)>>2)];
    var $250=(($249+348)|0);
    var $251=HEAP32[(($250)>>2)];
    var $252=($248>>>0)<($251>>>0);
    if (!($252)) {
     var $metadata_has_vorbis_comment_0_lcssa=$metadata_has_vorbis_comment_1;
     break L6900;
    }
    var $_phi_trans_insert363=(($249+344)|0);
    var $_pre364=HEAP32[(($_phi_trans_insert363)>>2)];
    var $i_0312=$248;var $metadata_has_seektable_0313=$metadata_has_seektable_1;var $metadata_has_vorbis_comment_0314=$metadata_has_vorbis_comment_1;var $metadata_picture_has_type1_0315=$metadata_picture_has_type1_1;var $metadata_picture_has_type2_0316=$metadata_picture_has_type2_1;var $197=$_pre364;
   }
   if (label == 5278) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5279) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5280) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5281) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5285) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5286) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5292) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5308) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5309) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5317) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
   else if (label == 5318) {
    var $_0;
    STACKTOP=sp;return $_0;
   }
  }
 } while(0);
 do {
  if (label == 5157) {
   var $191;
   var $192=(($191+348)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=($193|0)==0;
   if ($194) {
    var $metadata_has_vorbis_comment_0_lcssa=0;
    break;
   } else {
    var $_0=12;
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $metadata_has_vorbis_comment_0_lcssa;
 var $253=(($encoder+4)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254)|0);
 HEAP32[(($255)>>2)]=0;
 var $256=HEAP32[(($1)>>2)];
 var $257=(($256+24)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==0;
 if (!($259)) {
  var $i_1306=0;
  while(1) {
   var $i_1306;
   var $281=HEAP32[(($253)>>2)];
   var $282=(($281+4+($i_1306<<2))|0);
   HEAP32[(($282)>>2)]=0;
   var $283=HEAP32[(($253)>>2)];
   var $284=(($283+7320+($i_1306<<2))|0);
   HEAP32[(($284)>>2)]=0;
   var $285=HEAP32[(($253)>>2)];
   var $286=(($285+44+($i_1306<<2))|0);
   HEAP32[(($286)>>2)]=0;
   var $287=HEAP32[(($253)>>2)];
   var $288=(($287+7360+($i_1306<<2))|0);
   HEAP32[(($288)>>2)]=0;
   var $289=((($i_1306)+(1))|0);
   var $290=HEAP32[(($1)>>2)];
   var $291=(($290+24)|0);
   var $292=HEAP32[(($291)>>2)];
   var $293=($289>>>0)<($292>>>0);
   if ($293) {
    var $i_1306=$289;
   } else {
    break;
   }
  }
 }
 var $260=HEAP32[(($253)>>2)];
 var $261=(($260+36)|0);
 HEAP32[(($261)>>2)]=0;
 var $262=HEAP32[(($253)>>2)];
 var $263=(($262+7352)|0);
 HEAP32[(($263)>>2)]=0;
 var $264=HEAP32[(($253)>>2)];
 var $265=(($264+76)|0);
 HEAP32[(($265)>>2)]=0;
 var $266=HEAP32[(($253)>>2)];
 var $267=(($266+7392)|0);
 HEAP32[(($267)>>2)]=0;
 var $268=HEAP32[(($253)>>2)];
 var $269=(($268+40)|0);
 HEAP32[(($269)>>2)]=0;
 var $270=HEAP32[(($253)>>2)];
 var $271=(($270+7356)|0);
 HEAP32[(($271)>>2)]=0;
 var $272=HEAP32[(($253)>>2)];
 var $273=(($272+80)|0);
 HEAP32[(($273)>>2)]=0;
 var $274=HEAP32[(($253)>>2)];
 var $275=(($274+7396)|0);
 HEAP32[(($275)>>2)]=0;
 var $276=HEAP32[(($1)>>2)];
 var $277=(($276+40)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=($278|0)==0;
 var $280=HEAP32[(($253)>>2)];
 if ($279) {
  var $_lcssa300=$280;
 } else {
  var $i_3301=0;var $294=$280;
  while(1) {
   var $294;
   var $i_3301;
   var $295=(($294+84+($i_3301<<2))|0);
   HEAP32[(($295)>>2)]=0;
   var $296=HEAP32[(($253)>>2)];
   var $297=(($296+7400+($i_3301<<2))|0);
   HEAP32[(($297)>>2)]=0;
   var $298=((($i_3301)+(1))|0);
   var $299=HEAP32[(($1)>>2)];
   var $300=(($299+40)|0);
   var $301=HEAP32[(($300)>>2)];
   var $302=($298>>>0)<($301>>>0);
   var $303=HEAP32[(($253)>>2)];
   if ($302) {
    var $i_3301=$298;var $294=$303;
   } else {
    var $_lcssa300=$303;
    break;
   }
  }
 }
 var $_lcssa300;
 var $304=(($_lcssa300+212)|0);
 HEAP32[(($304)>>2)]=0;
 var $305=HEAP32[(($253)>>2)];
 var $306=(($305+7528)|0);
 HEAP32[(($306)>>2)]=0;
 var $307=HEAP32[(($1)>>2)];
 var $308=(($307+24)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=($309|0)==0;
 if (!($310)) {
  var $i_4297=0;
  while(1) {
   var $i_4297;
   var $356=HEAP32[(($253)>>2)];
   var $357=(($356+256+($i_4297<<3))|0);
   HEAP32[(($357)>>2)]=0;
   var $358=HEAP32[(($253)>>2)];
   var $359=(($358+7532+($i_4297<<3))|0);
   HEAP32[(($359)>>2)]=0;
   var $360=HEAP32[(($253)>>2)];
   var $361=(($360+256+($i_4297<<3)+4)|0);
   HEAP32[(($361)>>2)]=0;
   var $362=HEAP32[(($253)>>2)];
   var $363=(($362+7532+($i_4297<<3)+4)|0);
   HEAP32[(($363)>>2)]=0;
   var $364=HEAP32[(($253)>>2)];
   var $365=(($364+6768+($i_4297<<2))|0);
   HEAP32[(($365)>>2)]=0;
   var $366=((($i_4297)+(1))|0);
   var $367=HEAP32[(($1)>>2)];
   var $368=(($367+24)|0);
   var $369=HEAP32[(($368)>>2)];
   var $370=($366>>>0)<($369>>>0);
   if ($370) {
    var $i_4297=$366;
   } else {
    break;
   }
  }
 }
 var $311=HEAP32[(($253)>>2)];
 var $312=(($311+320)|0);
 HEAP32[(($312)>>2)]=0;
 var $313=HEAP32[(($253)>>2)];
 var $314=(($313+7596)|0);
 HEAP32[(($314)>>2)]=0;
 var $315=HEAP32[(($253)>>2)];
 var $316=(($315+324)|0);
 HEAP32[(($316)>>2)]=0;
 var $317=HEAP32[(($253)>>2)];
 var $318=(($317+7600)|0);
 HEAP32[(($318)>>2)]=0;
 var $319=HEAP32[(($253)>>2)];
 var $320=(($319+6800)|0);
 HEAP32[(($320)>>2)]=0;
 var $321=HEAP32[(($253)>>2)];
 var $322=(($321+328)|0);
 HEAP32[(($322)>>2)]=0;
 var $323=HEAP32[(($253)>>2)];
 var $324=(($323+7604)|0);
 HEAP32[(($324)>>2)]=0;
 var $325=HEAP32[(($253)>>2)];
 var $326=(($325+332)|0);
 HEAP32[(($326)>>2)]=0;
 var $327=HEAP32[(($253)>>2)];
 var $328=(($327+7608)|0);
 HEAP32[(($328)>>2)]=0;
 var $329=HEAP32[(($253)>>2)];
 var $330=(($329+6804)|0);
 HEAP32[(($330)>>2)]=0;
 var $331=HEAP32[(($253)>>2)];
 var $332=(($331+6848)|0);
 HEAP32[(($332)>>2)]=0;
 var $333=HEAP32[(($253)>>2)];
 var $334=(($333+7612)|0);
 HEAP32[(($334)>>2)]=0;
 var $335=HEAP32[(($253)>>2)];
 var $336=(($335+6852)|0);
 HEAP32[(($336)>>2)]=0;
 var $337=HEAP32[(($253)>>2)];
 var $338=(($337+7616)|0);
 HEAP32[(($338)>>2)]=0;
 var $339=HEAP32[(($1)>>2)];
 var $340=(($339+32)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=($341>>>0);
 var $343=($342)*((0.4));
 var $344=(($339+36)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=($345>>>0);
 var $347=($343)/($346);
 var $348=($347)+((0.5));
 var $349=($348>=0 ? Math_floor($348) : Math_ceil($348));
 var $350=HEAP32[(($253)>>2)];
 var $351=(($350+6860)|0);
 HEAP32[(($351)>>2)]=$349;
 var $352=HEAP32[(($253)>>2)];
 var $353=(($352+6860)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=($354|0)==0;
 if ($355) {
  HEAP32[(($353)>>2)]=1;
  var $_pre344=HEAP32[(($253)>>2)];
  var $373=$_pre344;
 } else {
  var $373=$352;
 }
 var $373;
 var $374=(($373+6864)|0);
 HEAP32[(($374)>>2)]=0;
 var $375=HEAP32[(($253)>>2)];
 var $376=(($375+7052)|0);
 HEAP32[(($376)>>2)]=0;
 var $377=HEAP32[(($253)>>2)];
 var $378=(($377+7056)|0);
 HEAP32[(($378)>>2)]=0;
 var $379=HEAP32[(($1)>>2)];
 var $380=(($379+28)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($379+36)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=_llvm_ctlz_i32($383,1);
 var $385=$384^31;
 var $386=((($381)+(1))|0);
 var $387=((($386)+($385))|0);
 var $388=($387>>>0)>30;
 var $389=($388&1);
 var $390=HEAP32[(($253)>>2)];
 var $391=(($390+7232)|0);
 HEAP32[(($391)>>2)]=$389;
 var $392=HEAP32[(($1)>>2)];
 var $393=(($392+28)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=(($392+300)|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=($396>>>0)>4;
 var $_276=$397?$396:4;
 var $398=_llvm_ctlz_i32($_276,1);
 var $399=$398^31;
 var $400=((($394)+(1))|0);
 var $401=((($400)+($399))|0);
 var $402=($401>>>0)>30;
 var $403=($402&1);
 var $404=HEAP32[(($253)>>2)];
 var $405=(($404+7240)|0);
 HEAP32[(($405)>>2)]=$403;
 var $406=HEAP32[(($253)>>2)];
 var $407=(($406+7236)|0);
 HEAP32[(($407)>>2)]=0;
 var $408=HEAP32[(($253)>>2)];
 var $409=(($408+7156)|0);
 _FLAC__cpu_info($409);
 var $410=HEAP32[(($253)>>2)];
 var $411=(($410+7216)|0);
 HEAP32[(($411)>>2)]=84;
 var $412=HEAP32[(($253)>>2)];
 var $413=(($412+7212)|0);
 HEAP32[(($413)>>2)]=70;
 var $414=HEAP32[(($253)>>2)];
 var $415=(($414+7220)|0);
 HEAP32[(($415)>>2)]=78;
 var $416=HEAP32[(($253)>>2)];
 var $417=(($416+7224)|0);
 HEAP32[(($417)>>2)]=88;
 var $418=HEAP32[(($253)>>2)];
 var $419=(($418+7228)|0);
 HEAP32[(($419)>>2)]=78;
 var $420=HEAP32[(($253)>>2)];
 var $421=(($420+7232)|0);
 var $422=HEAP32[(($421)>>2)];
 var $423=($422|0)==0;
 if (!($423)) {
  var $425=(($420+7212)|0);
  HEAP32[(($425)>>2)]=18;
 }
 var $427=HEAP32[(($1)>>2)];
 var $428=(($427)|0);
 HEAP32[(($428)>>2)]=0;
 var $429=HEAP32[(($253)>>2)];
 var $430=(($429+7256)|0);
 HEAP32[(($430)>>2)]=$read_callback;
 var $431=HEAP32[(($253)>>2)];
 var $432=(($431+7268)|0);
 HEAP32[(($432)>>2)]=$write_callback;
 var $433=HEAP32[(($253)>>2)];
 var $434=(($433+7260)|0);
 HEAP32[(($434)>>2)]=$seek_callback;
 var $435=HEAP32[(($253)>>2)];
 var $436=(($435+7264)|0);
 HEAP32[(($436)>>2)]=$tell_callback;
 var $437=HEAP32[(($253)>>2)];
 var $438=(($437+7272)|0);
 HEAP32[(($438)>>2)]=$metadata_callback;
 var $439=HEAP32[(($253)>>2)];
 var $440=(($439+7280)|0);
 HEAP32[(($440)>>2)]=$client_data;
 var $441=HEAP32[(($1)>>2)];
 var $442=(($441+36)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=HEAP32[(($253)>>2)];
 var $445=(($444)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=($446>>>0)<($443>>>0);
 do {
  if ($447) {
   var $448=((($443)+(5))|0);
   var $ok_0196_i=1;var $i_0197_i=0;var $451=$441;
   while(1) {
    var $451;
    var $i_0197_i;
    var $ok_0196_i;
    var $452=(($451+24)|0);
    var $453=HEAP32[(($452)>>2)];
    var $454=($i_0197_i>>>0)<($453>>>0);
    if (!($454)) {
     label = 5186;
     break;
    }
    var $456=HEAP32[(($253)>>2)];
    var $457=(($456+7320+($i_0197_i<<2))|0);
    var $458=(($456+4+($i_0197_i<<2))|0);
    var $459=_FLAC__memory_alloc_aligned_int32_array($448,$457,$458);
    var $460=($459|0)!=0;
    var $461=HEAP32[(($253)>>2)];
    var $462=(($461+4+($i_0197_i<<2))|0);
    var $463=HEAP32[(($462)>>2)];
    var $464=$463;
    HEAP32[(($464)>>2)]=0; HEAP32[((($464)+(4))>>2)]=0; HEAP32[((($464)+(8))>>2)]=0; HEAP32[((($464)+(12))>>2)]=0;
    var $465=HEAP32[(($253)>>2)];
    var $466=(($465+4+($i_0197_i<<2))|0);
    var $467=HEAP32[(($466)>>2)];
    var $468=(($467+16)|0);
    HEAP32[(($466)>>2)]=$468;
    if (!($460)) {
     var $538=0;
     break;
    }
    var $469=((($i_0197_i)+(1))|0);
    var $phitmp155_i=($460&1);
    var $_pre360=HEAP32[(($1)>>2)];
    var $ok_0196_i=$phitmp155_i;var $i_0197_i=$469;var $451=$_pre360;
   }
   L6971: do {
    if (label == 5186) {
     var $449=($ok_0196_i|0)==0;
     if ($449) {
      var $538=0;
      break;
     } else {
      var $i_1191_i=0;
     }
     while(1) {
      var $i_1191_i;
      var $470=HEAP32[(($253)>>2)];
      var $471=(($470+7352+($i_1191_i<<2))|0);
      var $472=(($470+36+($i_1191_i<<2))|0);
      var $473=_FLAC__memory_alloc_aligned_int32_array($448,$471,$472);
      var $474=($473|0)!=0;
      var $475=HEAP32[(($253)>>2)];
      var $476=(($475+36+($i_1191_i<<2))|0);
      var $477=HEAP32[(($476)>>2)];
      var $478=$477;
      HEAP32[(($478)>>2)]=0; HEAP32[((($478)+(4))>>2)]=0; HEAP32[((($478)+(8))>>2)]=0; HEAP32[((($478)+(12))>>2)]=0;
      var $479=HEAP32[(($253)>>2)];
      var $480=(($479+36+($i_1191_i<<2))|0);
      var $481=HEAP32[(($480)>>2)];
      var $482=(($481+16)|0);
      HEAP32[(($480)>>2)]=$482;
      var $483=((($i_1191_i)+(1))|0);
      var $484=($483>>>0)<2;
      var $485=$474&$484;
      if ($485) {
       var $i_1191_i=$483;
      } else {
       break;
      }
     }
     if (!($474)) {
      var $538=0;
      break;
     }
     var $487=HEAP32[(($1)>>2)];
     var $488=(($487+300)|0);
     var $489=HEAP32[(($488)>>2)];
     var $490=($489|0)==0;
     if ($490) {
      var $channel_0182_i=0;
     } else {
      var $491=(($487+40)|0);
      var $492=HEAP32[(($491)>>2)];
      var $493=($492|0)==0;
      var $494=HEAP32[(($253)>>2)];
      if ($493) {
       var $_lcssa288=$494;
      } else {
       var $i_2188_i290=0;var $495=$494;
       while(1) {
        var $495;
        var $i_2188_i290;
        var $496=(($495+7400+($i_2188_i290<<2))|0);
        var $497=(($495+84+($i_2188_i290<<2))|0);
        var $498=_FLAC__memory_alloc_aligned_real_array($443,$496,$497);
        var $499=($498|0)==0;
        if ($499) {
         var $538=0;
         break L6971;
        }
        var $500=((($i_2188_i290)+(1))|0);
        var $_pre209_i=HEAP32[(($1)>>2)];
        var $501=(($_pre209_i+40)|0);
        var $502=HEAP32[(($501)>>2)];
        var $503=($500>>>0)<($502>>>0);
        var $504=HEAP32[(($253)>>2)];
        if ($503) {
         var $i_2188_i290=$500;var $495=$504;
        } else {
         var $_lcssa288=$504;
         break;
        }
       }
      }
      var $_lcssa288;
      var $505=(($_lcssa288+7528)|0);
      var $506=(($_lcssa288+212)|0);
      var $507=_FLAC__memory_alloc_aligned_real_array($443,$505,$506);
      var $508=($507|0)==0;
      if ($508) {
       var $538=0;
       break;
      } else {
       var $channel_0182_i=0;
      }
     }
     while(1) {
      var $channel_0182_i;
      var $509=HEAP32[(($1)>>2)];
      var $510=(($509+24)|0);
      var $511=HEAP32[(($510)>>2)];
      var $512=($channel_0182_i>>>0)<($511>>>0);
      if ($512) {
       var $i_3178_i=0;
      } else {
       var $channel_1173_i=0;
       break;
      }
      while(1) {
       var $i_3178_i;
       var $513=HEAP32[(($253)>>2)];
       var $514=(($513+7532+($channel_0182_i<<3)+($i_3178_i<<2))|0);
       var $515=(($513+256+($channel_0182_i<<3)+($i_3178_i<<2))|0);
       var $516=_FLAC__memory_alloc_aligned_int32_array($443,$514,$515);
       var $517=($516|0)!=0;
       var $518=((($i_3178_i)+(1))|0);
       var $519=($518>>>0)<2;
       var $or_cond_i=$517&$519;
       if ($or_cond_i) {
        var $i_3178_i=$518;
       } else {
        break;
       }
      }
      if (!($517)) {
       var $538=0;
       break L6971;
      }
      var $520=((($channel_0182_i)+(1))|0);
      var $channel_0182_i=$520;
     }
     while(1) {
      var $channel_1173_i;
      var $i_4170_i=0;
      while(1) {
       var $i_4170_i;
       var $522=HEAP32[(($253)>>2)];
       var $523=(($522+7596+($channel_1173_i<<3)+($i_4170_i<<2))|0);
       var $524=(($522+320+($channel_1173_i<<3)+($i_4170_i<<2))|0);
       var $525=_FLAC__memory_alloc_aligned_int32_array($443,$523,$524);
       var $526=($525|0)!=0;
       var $527=((($i_4170_i)+(1))|0);
       var $528=($527>>>0)<2;
       var $or_cond159_i=$526&$528;
       if ($or_cond159_i) {
        var $i_4170_i=$527;
       } else {
        break;
       }
      }
      var $529=((($channel_1173_i)+(1))|0);
      var $530=($529>>>0)<2;
      var $or_cond158_i=$526&$530;
      if ($or_cond158_i) {
       var $channel_1173_i=$529;
      } else {
       break;
      }
     }
     if (!($526)) {
      var $538=0;
      break;
     }
     var $532=$443<<1;
     var $533=HEAP32[(($253)>>2)];
     var $534=(($533+7612)|0);
     var $535=(($533+6848)|0);
     var $536=_FLAC__memory_alloc_aligned_uint64_array($532,$534,$535);
     var $537=($536|0)!=0;
     var $538=$537;
    }
   } while(0);
   var $538;
   var $539=HEAP32[(($1)>>2)];
   var $540=(($539+316)|0);
   var $541=HEAP32[(($540)>>2)];
   var $542=($541|0)==0;
   var $_not_i=$538^1;
   var $brmerge_i=$542|$_not_i;
   var $_mux_i=$542&$538;
   do {
    if ($brmerge_i) {
     var $ok_8_i=($_mux_i&1);
     if ($_mux_i) {
      var $ok_8166_i=$ok_8_i;
      label = 5210;
     } else {
      var $ok_8165_i=$ok_8_i;var $642=$539;
      label = 5233;
     }
    } else {
     var $544=$443<<1;
     var $545=HEAP32[(($253)>>2)];
     var $546=(($545+7616)|0);
     var $547=(($545+6852)|0);
     var $548=_FLAC__memory_alloc_aligned_unsigned_array($544,$546,$547);
     var $549=($548|0)!=0;
     var $ok_8162_i=($549&1);
     if ($549) {
      var $ok_8166_i=$ok_8162_i;
      label = 5210;
      break;
     }
     var $_pre210_i=HEAP32[(($1)>>2)];
     var $ok_8165_i=$ok_8162_i;var $642=$_pre210_i;
     label = 5233;
    }
   } while(0);
   if (label == 5210) {
    var $ok_8166_i;
    var $551=HEAP32[(($253)>>2)];
    var $552=(($551)|0);
    var $553=HEAP32[(($552)>>2)];
    var $554=($553|0)==($443|0);
    do {
     if ($554) {
      var $640=$551;
     } else {
      var $556=HEAP32[(($1)>>2)];
      var $557=(($556+300)|0);
      var $558=HEAP32[(($557)>>2)];
      var $559=($558|0)==0;
      if ($559) {
       var $640=$551;
       break;
      }
      var $560=(($556+40)|0);
      var $561=HEAP32[(($560)>>2)];
      var $562=($561|0)==0;
      if ($562) {
       var $640=$551;
       break;
      } else {
       var $i_5167_i=0;var $563=$556;
      }
      while(1) {
       var $563;
       var $i_5167_i;
       var $564=(($563+44+($i_5167_i<<3))|0);
       var $565=HEAP32[(($564)>>2)];
       switch (($565|0)) {
       case 6: {
        var $591=HEAP32[(($253)>>2)];
        var $592=(($591+84+($i_5167_i<<2))|0);
        var $593=HEAP32[(($592)>>2)];
        var $594=(($563+44+($i_5167_i<<3)+4)|0);
        var $595=HEAPF32[(($594)>>2)];
        _FLAC__window_gauss($593,$443,$595);
        break;
       }
       case 0: {
        var $567=HEAP32[(($253)>>2)];
        var $568=(($567+84+($i_5167_i<<2))|0);
        var $569=HEAP32[(($568)>>2)];
        _FLAC__window_bartlett($569,$443);
        break;
       }
       case 1: {
        var $571=HEAP32[(($253)>>2)];
        var $572=(($571+84+($i_5167_i<<2))|0);
        var $573=HEAP32[(($572)>>2)];
        _FLAC__window_bartlett_hann($573,$443);
        break;
       }
       case 2: {
        var $575=HEAP32[(($253)>>2)];
        var $576=(($575+84+($i_5167_i<<2))|0);
        var $577=HEAP32[(($576)>>2)];
        _FLAC__window_blackman($577,$443);
        break;
       }
       case 8: {
        var $601=HEAP32[(($253)>>2)];
        var $602=(($601+84+($i_5167_i<<2))|0);
        var $603=HEAP32[(($602)>>2)];
        _FLAC__window_hann($603,$443);
        break;
       }
       case 9: {
        var $605=HEAP32[(($253)>>2)];
        var $606=(($605+84+($i_5167_i<<2))|0);
        var $607=HEAP32[(($606)>>2)];
        _FLAC__window_kaiser_bessel($607,$443);
        break;
       }
       case 4: {
        var $583=HEAP32[(($253)>>2)];
        var $584=(($583+84+($i_5167_i<<2))|0);
        var $585=HEAP32[(($584)>>2)];
        _FLAC__window_connes($585,$443);
        break;
       }
       case 5: {
        var $587=HEAP32[(($253)>>2)];
        var $588=(($587+84+($i_5167_i<<2))|0);
        var $589=HEAP32[(($588)>>2)];
        _FLAC__window_flattop($589,$443);
        break;
       }
       case 3: {
        var $579=HEAP32[(($253)>>2)];
        var $580=(($579+84+($i_5167_i<<2))|0);
        var $581=HEAP32[(($580)>>2)];
        _FLAC__window_blackman_harris_4term_92db_sidelobe($581,$443);
        break;
       }
       case 7: {
        var $597=HEAP32[(($253)>>2)];
        var $598=(($597+84+($i_5167_i<<2))|0);
        var $599=HEAP32[(($598)>>2)];
        _FLAC__window_hamming($599,$443);
        break;
       }
       case 14: {
        var $627=HEAP32[(($253)>>2)];
        var $628=(($627+84+($i_5167_i<<2))|0);
        var $629=HEAP32[(($628)>>2)];
        _FLAC__window_welch($629,$443);
        break;
       }
       case 12: {
        var $617=HEAP32[(($253)>>2)];
        var $618=(($617+84+($i_5167_i<<2))|0);
        var $619=HEAP32[(($618)>>2)];
        _FLAC__window_triangle($619,$443);
        break;
       }
       case 13: {
        var $621=HEAP32[(($253)>>2)];
        var $622=(($621+84+($i_5167_i<<2))|0);
        var $623=HEAP32[(($622)>>2)];
        var $624=(($563+44+($i_5167_i<<3)+4)|0);
        var $625=HEAPF32[(($624)>>2)];
        _FLAC__window_tukey($623,$443,$625);
        break;
       }
       case 10: {
        var $609=HEAP32[(($253)>>2)];
        var $610=(($609+84+($i_5167_i<<2))|0);
        var $611=HEAP32[(($610)>>2)];
        _FLAC__window_nuttall($611,$443);
        break;
       }
       case 11: {
        var $613=HEAP32[(($253)>>2)];
        var $614=(($613+84+($i_5167_i<<2))|0);
        var $615=HEAP32[(($614)>>2)];
        _FLAC__window_rectangle($615,$443);
        break;
       }
       default: {
        var $631=HEAP32[(($253)>>2)];
        var $632=(($631+84+($i_5167_i<<2))|0);
        var $633=HEAP32[(($632)>>2)];
        _FLAC__window_hann($633,$443);
       }
       }
       var $635=((($i_5167_i)+(1))|0);
       var $636=HEAP32[(($1)>>2)];
       var $637=(($636+40)|0);
       var $638=HEAP32[(($637)>>2)];
       var $639=($635>>>0)<($638>>>0);
       if ($639) {
        var $i_5167_i=$635;var $563=$636;
       } else {
        break;
       }
      }
      var $_pre_pre_i=HEAP32[(($253)>>2)];
      var $640=$_pre_pre_i;
     }
    } while(0);
    var $640;
    var $641=(($640)|0);
    HEAP32[(($641)>>2)]=$443;
    var $_0_i=$ok_8166_i;
   }
   else if (label == 5233) {
    var $642;
    var $ok_8165_i;
    var $643=(($642)|0);
    HEAP32[(($643)>>2)]=8;
    var $_0_i=$ok_8165_i;
   }
   var $_0_i;
   var $644=($_0_i|0)==0;
   if ($644) {
    var $_0=1;
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $_pre361=HEAP32[(($253)>>2)];
    var $645=$_pre361;
    break;
   }
  } else {
   var $645=$444;
  }
 } while(0);
 var $645;
 var $646=(($645+6856)|0);
 var $647=HEAP32[(($646)>>2)];
 var $648=_FLAC__bitwriter_init($647);
 var $649=($648|0)==0;
 var $650=HEAP32[(($1)>>2)];
 if ($649) {
  var $652=(($650)|0);
  HEAP32[(($652)>>2)]=8;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $654=(($650+4)|0);
 var $655=HEAP32[(($654)>>2)];
 var $656=($655|0)==0;
 do {
  if (!($656)) {
   var $658=(($650+36)|0);
   var $659=HEAP32[(($658)>>2)];
   var $660=((($659)+(1))|0);
   var $661=HEAP32[(($253)>>2)];
   var $662=(($661+11788)|0);
   HEAP32[(($662)>>2)]=$660;
   var $i_6=0;
   while(1) {
    var $i_6;
    var $664=HEAP32[(($1)>>2)];
    var $665=(($664+24)|0);
    var $666=HEAP32[(($665)>>2)];
    var $667=($i_6>>>0)<($666>>>0);
    var $668=HEAP32[(($253)>>2)];
    if (!($667)) {
     break;
    }
    var $670=(($668+11788)|0);
    var $671=HEAP32[(($670)>>2)];
    var $672=_safe_malloc_mul_2op_p(4,$671);
    var $673=$672;
    var $674=HEAP32[(($253)>>2)];
    var $675=(($674+11756+($i_6<<2))|0);
    HEAP32[(($675)>>2)]=$673;
    var $676=($672|0)==0;
    var $677=((($i_6)+(1))|0);
    if ($676) {
     label = 5242;
     break;
    } else {
     var $i_6=$677;
    }
   }
   if (label == 5242) {
    var $679=HEAP32[(($1)>>2)];
    var $680=(($679)|0);
    HEAP32[(($680)>>2)]=8;
    var $_0=1;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $682=(($668+11792)|0);
   HEAP32[(($682)>>2)]=0;
   var $683=HEAP32[(($253)>>2)];
   var $684=(($683+11744)|0);
   var $685=HEAP32[(($684)>>2)];
   var $686=($685|0)==0;
   do {
    if ($686) {
     var $688=_FLAC__stream_decoder_new();
     var $689=HEAP32[(($253)>>2)];
     var $690=(($689+11744)|0);
     HEAP32[(($690)>>2)]=$688;
     var $691=HEAP32[(($253)>>2)];
     var $692=(($691+11744)|0);
     var $693=HEAP32[(($692)>>2)];
     var $694=($693|0)==0;
     if (!($694)) {
      var $699=$693;
      break;
     }
     var $696=HEAP32[(($1)>>2)];
     var $697=(($696)|0);
     HEAP32[(($697)>>2)]=3;
     var $_0=1;
     var $_0;
     STACKTOP=sp;return $_0;
    } else {
     var $699=$685;
    }
   } while(0);
   var $699;
   var $700=$encoder;
   var $701=_FLAC__stream_decoder_init_stream($699,54,0,0,0,0,92,28,42,$700);
   var $702=($701|0)==0;
   if ($702) {
    break;
   }
   var $704=HEAP32[(($1)>>2)];
   var $705=(($704)|0);
   HEAP32[(($705)>>2)]=3;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $707=HEAP32[(($253)>>2)];
 var $708=(($707+11808)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($708)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($708+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $709=HEAP32[(($253)>>2)];
 var $710=(($709+11816)|0);
 HEAP32[(($710)>>2)]=0;
 var $711=HEAP32[(($253)>>2)];
 var $712=(($711+11820)|0);
 HEAP32[(($712)>>2)]=0;
 var $713=HEAP32[(($253)>>2)];
 var $714=(($713+11824)|0);
 HEAP32[(($714)>>2)]=0;
 var $715=HEAP32[(($253)>>2)];
 var $716=(($715+11828)|0);
 HEAP32[(($716)>>2)]=0;
 var $717=HEAP32[(($253)>>2)];
 var $718=(($717+11832)|0);
 HEAP32[(($718)>>2)]=0;
 var $719=HEAP32[(($253)>>2)];
 var $720=(($719+7284)|0);
 HEAP32[(($720)>>2)]=0;
 var $721=HEAP32[(($253)>>2)];
 var $722=(($721+7304)|0);
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($722)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($722+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $723=HEAP32[(($1)>>2)];
 var $724=(($723+352)|0);
 var $$etemp$6$0=0;
 var $$etemp$6$1=0;
 var $st$7$0=(($724)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$6$0;
 var $st$8$1=(($724+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$6$1;
 var $725=HEAP32[(($1)>>2)];
 var $726=(($725+360)|0);
 var $$etemp$9$0=0;
 var $$etemp$9$1=0;
 var $st$10$0=(($726)|0);
 HEAP32[(($st$10$0)>>2)]=$$etemp$9$0;
 var $st$11$1=(($726+4)|0);
 HEAP32[(($st$11$1)>>2)]=$$etemp$9$1;
 var $727=HEAP32[(($1)>>2)];
 var $728=(($727+368)|0);
 var $$etemp$12$0=0;
 var $$etemp$12$1=0;
 var $st$13$0=(($728)|0);
 HEAP32[(($st$13$0)>>2)]=$$etemp$12$0;
 var $st$14$1=(($728+4)|0);
 HEAP32[(($st$14$1)>>2)]=$$etemp$12$1;
 var $729=HEAP32[(($1)>>2)];
 var $730=(($729+4)|0);
 var $731=HEAP32[(($730)>>2)];
 var $732=($731|0)==0;
 if (!($732)) {
  var $734=HEAP32[(($253)>>2)];
  var $735=(($734+11748)|0);
  HEAP32[(($735)>>2)]=0;
 }
 var $737=HEAP32[(($253)>>2)];
 var $738=(($737+6856)|0);
 var $739=HEAP32[(($738)>>2)];
 var $740=HEAP32[((9888)>>2)];
 var $741=HEAP32[((9880)>>2)];
 var $742=_FLAC__bitwriter_write_raw_uint32($739,$740,$741);
 var $743=($742|0)==0;
 if ($743) {
  var $745=HEAP32[(($1)>>2)];
  var $746=(($745)|0);
  HEAP32[(($746)>>2)]=7;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $748=_write_bitbuffer_($encoder,0);
 var $749=($748|0)==0;
 if ($749) {
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $751=HEAP32[(($1)>>2)];
 var $752=(($751+4)|0);
 var $753=HEAP32[(($752)>>2)];
 var $754=($753|0)==0;
 if (!($754)) {
  var $756=HEAP32[(($253)>>2)];
  var $757=(($756+11748)|0);
  HEAP32[(($757)>>2)]=1;
 }
 var $759=HEAP32[(($253)>>2)];
 var $760=(($759+6872)|0);
 HEAP32[(($760)>>2)]=0;
 var $761=HEAP32[(($253)>>2)];
 var $762=(($761+6876)|0);
 HEAP32[(($762)>>2)]=0;
 var $763=HEAP32[(($253)>>2)];
 var $764=(($763+6880)|0);
 HEAP32[(($764)>>2)]=34;
 var $765=HEAP32[(($1)>>2)];
 var $766=(($765+36)|0);
 var $767=HEAP32[(($766)>>2)];
 var $768=HEAP32[(($253)>>2)];
 var $769=(($768+6888)|0);
 var $770=$769;
 HEAP32[(($770)>>2)]=$767;
 var $771=HEAP32[(($1)>>2)];
 var $772=(($771+36)|0);
 var $773=HEAP32[(($772)>>2)];
 var $774=HEAP32[(($253)>>2)];
 var $775=(($774+6892)|0);
 var $776=$775;
 HEAP32[(($776)>>2)]=$773;
 var $777=HEAP32[(($253)>>2)];
 var $778=(($777+6896)|0);
 var $779=$778;
 HEAP32[(($779)>>2)]=0;
 var $780=HEAP32[(($253)>>2)];
 var $781=(($780+6900)|0);
 var $782=$781;
 HEAP32[(($782)>>2)]=0;
 var $783=HEAP32[(($1)>>2)];
 var $784=(($783+32)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=HEAP32[(($253)>>2)];
 var $787=(($786+6904)|0);
 var $788=$787;
 HEAP32[(($788)>>2)]=$785;
 var $789=HEAP32[(($1)>>2)];
 var $790=(($789+24)|0);
 var $791=HEAP32[(($790)>>2)];
 var $792=HEAP32[(($253)>>2)];
 var $793=(($792+6908)|0);
 var $794=$793;
 HEAP32[(($794)>>2)]=$791;
 var $795=HEAP32[(($1)>>2)];
 var $796=(($795+28)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=HEAP32[(($253)>>2)];
 var $799=(($798+6912)|0);
 var $800=$799;
 HEAP32[(($800)>>2)]=$797;
 var $801=HEAP32[(($1)>>2)];
 var $802=(($801+336)|0);
 var $ld$15$0=(($802)|0);
 var $803$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($802+4)|0);
 var $803$1=HEAP32[(($ld$16$1)>>2)];
 var $804=HEAP32[(($253)>>2)];
 var $805=(($804+6920)|0);
 var $806=$805;
 var $st$17$0=(($806)|0);
 HEAP32[(($st$17$0)>>2)]=$803$0;
 var $st$18$1=(($806+4)|0);
 HEAP32[(($st$18$1)>>2)]=$803$1;
 var $807=HEAP32[(($253)>>2)];
 var $808=(($807+6928)|0);
 _memset($808, 0, 16);
 var $809=HEAP32[(($1)>>2)];
 var $810=(($809+12)|0);
 var $811=HEAP32[(($810)>>2)];
 var $812=($811|0)==0;
 if (!($812)) {
  var $814=HEAP32[(($253)>>2)];
  var $815=(($814+7060)|0);
  _FLAC__MD5Init($815);
 }
 var $817=HEAP32[(($253)>>2)];
 var $818=(($817+6872)|0);
 var $819=(($817+6856)|0);
 var $820=HEAP32[(($819)>>2)];
 var $821=_FLAC__add_metadata_block($818,$820);
 var $822=($821|0)==0;
 if ($822) {
  var $824=HEAP32[(($1)>>2)];
  var $825=(($824)|0);
  HEAP32[(($825)>>2)]=7;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $827=_write_bitbuffer_($encoder,0);
 var $828=($827|0)==0;
 if ($828) {
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $830=HEAP32[((9936)>>2)];
 var $831=1<<$830;
 var $832=((($831)-(1))|0);
 var $833=HEAP32[(($253)>>2)];
 var $834=(($833+6896)|0);
 var $835=$834;
 HEAP32[(($835)>>2)]=$832;
 var $836=HEAP32[(($253)>>2)];
 var $837=(($836+6920)|0);
 var $838=$837;
 var $$etemp$19$0=0;
 var $$etemp$19$1=0;
 var $st$20$0=(($838)|0);
 HEAP32[(($st$20$0)>>2)]=$$etemp$19$0;
 var $st$21$1=(($838+4)|0);
 HEAP32[(($st$21$1)>>2)]=$$etemp$19$1;
 var $839=($metadata_has_vorbis_comment_0_lcssa|0)==0;
 do {
  if ($839) {
   var $841=(($vorbis_comment)|0);
   HEAP32[(($841)>>2)]=4;
   var $842=HEAP32[(($1)>>2)];
   var $843=(($842+348)|0);
   var $844=HEAP32[(($843)>>2)];
   var $845=($844|0)==0;
   var $846=($845&1);
   var $847=(($vorbis_comment+4)|0);
   HEAP32[(($847)>>2)]=$846;
   var $848=(($vorbis_comment+8)|0);
   HEAP32[(($848)>>2)]=8;
   var $849=(($vorbis_comment+16)|0);
   HEAP32[(($849)>>2)]=0; HEAP32[((($849)+(4))>>2)]=0; HEAP32[((($849)+(8))>>2)]=0; HEAP32[((($849)+(12))>>2)]=0;
   var $850=HEAP32[(($253)>>2)];
   var $851=(($850+6856)|0);
   var $852=HEAP32[(($851)>>2)];
   var $853=_FLAC__add_metadata_block($vorbis_comment,$852);
   var $854=($853|0)==0;
   if ($854) {
    var $856=HEAP32[(($1)>>2)];
    var $857=(($856)|0);
    HEAP32[(($857)>>2)]=7;
    var $_0=1;
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $859=_write_bitbuffer_($encoder,0);
    var $860=($859|0)==0;
    if ($860) {
     var $_0=1;
    } else {
     var $i_7=0;
     break;
    }
    var $_0;
    STACKTOP=sp;return $_0;
   }
  } else {
   var $i_7=0;
  }
 } while(0);
 while(1) {
  var $i_7;
  var $861=HEAP32[(($1)>>2)];
  var $862=(($861+348)|0);
  var $863=HEAP32[(($862)>>2)];
  var $864=($i_7>>>0)<($863>>>0);
  if (!($864)) {
   label = 5268;
   break;
  }
  var $866=((($863)-(1))|0);
  var $867=($i_7|0)==($866|0);
  var $868=($867&1);
  var $869=(($861+344)|0);
  var $870=HEAP32[(($869)>>2)];
  var $871=(($870+($i_7<<2))|0);
  var $872=HEAP32[(($871)>>2)];
  var $873=(($872+4)|0);
  HEAP32[(($873)>>2)]=$868;
  var $874=HEAP32[(($1)>>2)];
  var $875=(($874+344)|0);
  var $876=HEAP32[(($875)>>2)];
  var $877=(($876+($i_7<<2))|0);
  var $878=HEAP32[(($877)>>2)];
  var $879=HEAP32[(($253)>>2)];
  var $880=(($879+6856)|0);
  var $881=HEAP32[(($880)>>2)];
  var $882=_FLAC__add_metadata_block($878,$881);
  var $883=($882|0)==0;
  if ($883) {
   label = 5266;
   break;
  }
  var $888=_write_bitbuffer_($encoder,0);
  var $889=($888|0)==0;
  var $890=((($i_7)+(1))|0);
  if ($889) {
   var $_0=1;
   label = 5313;
   break;
  } else {
   var $i_7=$890;
  }
 }
 if (label == 5266) {
  var $885=HEAP32[(($1)>>2)];
  var $886=(($885)|0);
  HEAP32[(($886)>>2)]=7;
  var $_0=1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 5268) {
  var $892=HEAP32[(($253)>>2)];
  var $893=(($892+7264)|0);
  var $894=HEAP32[(($893)>>2)];
  var $895=($894|0)==0;
  do {
   if ($895) {
    var $905=$861;
   } else {
    var $897=(($861+368)|0);
    var $898=(($892+7280)|0);
    var $899=HEAP32[(($898)>>2)];
    var $900=FUNCTION_TABLE[$894]($encoder,$897,$899);
    var $901=($900|0)==1;
    var $902=HEAP32[(($1)>>2)];
    if (!($901)) {
     var $905=$902;
     break;
    }
    var $904=(($902)|0);
    HEAP32[(($904)>>2)]=5;
    var $_0=1;
    var $_0;
    STACKTOP=sp;return $_0;
   }
  } while(0);
  var $905;
  var $906=(($905+4)|0);
  var $907=HEAP32[(($906)>>2)];
  var $908=($907|0)==0;
  if ($908) {
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
  var $910=HEAP32[(($253)>>2)];
  var $911=(($910+11748)|0);
  HEAP32[(($911)>>2)]=2;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 else if (label == 5313) {
  var $_0;
  STACKTOP=sp;return $_0;
 }
}
function _FLAC__stream_encoder_init_ogg_stream($encoder,$read_callback,$write_callback,$seek_callback,$tell_callback,$metadata_callback,$client_data){
 var label=0;
 var $0=(($encoder)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($1)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==1;
 var $_=$4?2:13;
 return $_;
}
function _FLAC__stream_encoder_init_FILE($encoder,$file,$progress_callback,$client_data){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0_i=13;
  var $_0_i;
  return $_0_i;
 }
 var $7=($file|0)==0;
 if ($7) {
  HEAP32[(($3)>>2)]=6;
  var $_0_i=1;
  var $_0_i;
  return $_0_i;
 }
 var $10=(($encoder+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+7288)|0);
 HEAP32[(($12)>>2)]=$file;
 var $13=HEAP32[(($10)>>2)];
 var $14=(($13+7276)|0);
 HEAP32[(($14)>>2)]=$progress_callback;
 var $15=HEAP32[(($10)>>2)];
 var $16=(($15+7296)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($16)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($16+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $17=HEAP32[(($10)>>2)];
 var $18=(($17+7304)|0);
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($18)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($18+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $19=HEAP32[(($10)>>2)];
 var $20=(($19+7312)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=HEAP32[(($10)>>2)];
 var $22=(($21+7288)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[((_stdout)>>2)];
 var $25=($23|0)==($24|0);
 var $26=$25?0:(36);
 var $27=$25?0:(50);
 var $28=_init_stream_internal_213($encoder,0,56,$26,$27,0,$client_data,0);
 var $29=($28|0)==0;
 if (!($29)) {
  var $_0_i=$28;
  var $_0_i;
  return $_0_i;
 }
 var $31=HEAP32[(($1)>>2)];
 var $32=(($31+36)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($31+336)|0);
 var $ld$6$0=(($34)|0);
 var $35$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($34+4)|0);
 var $35$1=HEAP32[(($ld$7$1)>>2)];
 var $36$0=$33;
 var $36$1=0;
 var $$etemp$8$0=-1;
 var $$etemp$8$1=-1;
 var $37$0=_i64Add($36$0,$36$1,$$etemp$8$0,$$etemp$8$1);var $37$1=tempRet0;
 var $38$0=_i64Add($37$0,$37$1,$35$0,$35$1);var $38$1=tempRet0;
 var $39$0=___udivdi3($38$0,$38$1,$36$0,$36$1);var $39$1=tempRet0;
 var $40$0=$39$0;
 var $40=$40$0;
 var $41=HEAP32[(($10)>>2)];
 var $42=(($41+7316)|0);
 HEAP32[(($42)>>2)]=$40;
 var $_0_i=0;
 var $_0_i;
 return $_0_i;
}
function _FLAC__stream_encoder_init_ogg_FILE($encoder,$file,$progress_callback,$client_data){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0_i=13;
  var $_0_i;
  return $_0_i;
 }
 var $7=($file|0)==0;
 if (!($7)) {
  var $10=(($encoder+4)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($11+7288)|0);
  HEAP32[(($12)>>2)]=$file;
  var $13=HEAP32[(($10)>>2)];
  var $14=(($13+7276)|0);
  HEAP32[(($14)>>2)]=$progress_callback;
  var $15=HEAP32[(($10)>>2)];
  var $16=(($15+7296)|0);
  var $$etemp$0$0=0;
  var $$etemp$0$1=0;
  var $st$1$0=(($16)|0);
  HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
  var $st$2$1=(($16+4)|0);
  HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
  var $17=HEAP32[(($10)>>2)];
  var $18=(($17+7304)|0);
  var $$etemp$3$0=0;
  var $$etemp$3$1=0;
  var $st$4$0=(($18)|0);
  HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
  var $st$5$1=(($18+4)|0);
  HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
  var $19=HEAP32[(($10)>>2)];
  var $20=(($19+7312)|0);
  HEAP32[(($20)>>2)]=0;
  var $21=HEAP32[(($1)>>2)];
  var $22=(($21)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=($23|0)==1;
  var $_=$24?2:13;
  return $_;
 }
 HEAP32[(($3)>>2)]=6;
 var $_0_i=1;
 var $_0_i;
 return $_0_i;
}
function _FLAC__stream_encoder_init_file($encoder,$filename,$progress_callback,$client_data){
 var label=0;
 var $1=_init_file_internal_($encoder,$filename,$progress_callback,$client_data,0);
 return $1;
}
function _init_file_internal_($encoder,$filename,$progress_callback,$client_data,$is_ogg){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=13;
  var $_0;
  return $_0;
 }
 var $7=($filename|0)==0;
 if ($7) {
  var $11=HEAP32[((_stdout)>>2)];
  var $14=$11;var $13=$2;
 } else {
  var $9=_fopen($filename,1816);
  var $_pre=HEAP32[(($1)>>2)];
  var $14=$9;var $13=$_pre;
 }
 var $13;
 var $14;
 var $15=($14|0)==0;
 var $16=(($13)|0);
 if ($15) {
  HEAP32[(($16)>>2)]=6;
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $19=HEAP32[(($16)>>2)];
 var $20=($19|0)==1;
 if (!($20)) {
  var $_0=13;
  var $_0;
  return $_0;
 }
 var $22=(($encoder+4)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+7288)|0);
 HEAP32[(($24)>>2)]=$14;
 var $25=HEAP32[(($22)>>2)];
 var $26=(($25+7276)|0);
 HEAP32[(($26)>>2)]=$progress_callback;
 var $27=HEAP32[(($22)>>2)];
 var $28=(($27+7296)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($28)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($28+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $29=HEAP32[(($22)>>2)];
 var $30=(($29+7304)|0);
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($30)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($30+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $31=HEAP32[(($22)>>2)];
 var $32=(($31+7312)|0);
 HEAP32[(($32)>>2)]=0;
 var $33=HEAP32[(($22)>>2)];
 var $34=(($33+7288)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=HEAP32[((_stdout)>>2)];
 var $37=($35|0)==($36|0);
 if ($37) {
  var $42=0;
 } else {
  var $39=($is_ogg|0)!=0;
  var $40=$39?(32):0;
  var $42=$40;
 }
 var $42;
 var $43=$37?0:(36);
 var $44=$37?0:(50);
 var $45=_init_stream_internal_213($encoder,$42,56,$43,$44,0,$client_data,$is_ogg);
 var $46=($45|0)==0;
 if (!($46)) {
  var $_0=$45;
  var $_0;
  return $_0;
 }
 var $48=HEAP32[(($1)>>2)];
 var $49=(($48+36)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($48+336)|0);
 var $ld$6$0=(($51)|0);
 var $52$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($51+4)|0);
 var $52$1=HEAP32[(($ld$7$1)>>2)];
 var $53$0=$50;
 var $53$1=0;
 var $$etemp$8$0=-1;
 var $$etemp$8$1=-1;
 var $54$0=_i64Add($53$0,$53$1,$$etemp$8$0,$$etemp$8$1);var $54$1=tempRet0;
 var $55$0=_i64Add($54$0,$54$1,$52$0,$52$1);var $55$1=tempRet0;
 var $56$0=___udivdi3($55$0,$55$1,$53$0,$53$1);var $56$1=tempRet0;
 var $57$0=$56$0;
 var $57=$57$0;
 var $58=HEAP32[(($22)>>2)];
 var $59=(($58+7316)|0);
 HEAP32[(($59)>>2)]=$57;
 var $_0=0;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_init_ogg_file($encoder,$filename,$progress_callback,$client_data){
 var label=0;
 var $1=_init_file_internal_($encoder,$filename,$progress_callback,$client_data,1);
 return $1;
}
function _process_frame_($encoder,$is_fractional_block){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;
 var $frame_header_i=sp;
 var $crc=(sp)+(40);
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 do {
  if ($5) {
   var $24=$2;
  } else {
   var $7=(($encoder+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+7060)|0);
   var $10=(($8+4)|0);
   var $11=(($2+24)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($2+36)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($2+28)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=((($16)+(7))|0);
   var $18=$17>>>3;
   var $19=_FLAC__MD5Accumulate($9,$10,$12,$14,$18);
   var $20=($19|0)==0;
   var $21=HEAP32[(($1)>>2)];
   if (!($20)) {
    var $24=$21;
    break;
   }
   var $23=(($21)|0);
   HEAP32[(($23)>>2)]=8;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $24;
 var $25=$frame_header_i;
 var $26=(($24+320)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($is_fractional_block|0)==0;
 if ($28) {
  var $30=(($24+36)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=_FLAC__format_get_max_rice_partition_order_from_blocksize($31);
  var $33=HEAP32[(($1)>>2)];
  var $34=(($33+324)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=($32>>>0)<($35>>>0);
  var $__i=$36?$32:$35;
  var $max_partition_order_0_i=$__i;var $38=$33;
 } else {
  var $max_partition_order_0_i=0;var $38=$24;
 }
 var $38;
 var $max_partition_order_0_i;
 var $39=($27>>>0)<($max_partition_order_0_i>>>0);
 var $40=$39?$27:$max_partition_order_0_i;
 var $41=(($38+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($frame_header_i)|0);
 HEAP32[(($43)>>2)]=$42;
 var $44=(($38+32)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($frame_header_i+4)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($38+24)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($frame_header_i+8)|0);
 HEAP32[(($49)>>2)]=$48;
 var $50=(($frame_header_i+12)|0);
 HEAP32[(($50)>>2)]=0;
 var $51=(($38+28)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($frame_header_i+16)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=(($frame_header_i+20)|0);
 HEAP32[(($54)>>2)]=0;
 var $55=(($encoder+4)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+7056)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($frame_header_i+24)|0);
 var $60=$59;
 HEAP32[(($60)>>2)]=$58;
 var $61=(($38+16)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 do {
  if ($63) {
   var $do_mid_side_0174_ph_i=0;
   label = 5365;
  } else {
   var $65=(($38+20)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=($66|0)==0;
   if ($67) {
    var $do_mid_side_0174_ph_i=1;
    label = 5365;
    break;
   }
   var $69=(($56+6864)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=($70|0)==0;
   if ($71) {
    var $do_mid_side_0174_ph_i=1;
    label = 5365;
    break;
   }
   var $73=(($56+6868)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=($74|0)==0;
   var $76=($75&1);
   var $77=$76^1;
   if ($75) {
    var $do_mid_side_0174_ph_i=$77;
    label = 5365;
   } else {
    var $do_independent_0171_i=0;var $do_mid_side_0173_i=$77;var $123=$38;
   }
  }
 } while(0);
 L7162: do {
  if (label == 5365) {
   var $do_mid_side_0174_ph_i;
   var $78=HEAP32[(($47)>>2)];
   var $79=($78|0)==0;
   if ($79) {
    var $do_independent_0171_i=1;var $do_mid_side_0173_i=$do_mid_side_0174_ph_i;var $123=$38;
    break;
   } else {
    var $channel_0204_i=0;var $81=$38;var $80=$56;
   }
   while(1) {
    var $80;
    var $81;
    var $channel_0204_i;
    var $82=(($80+4+($channel_0204_i<<2))|0);
    var $83=HEAP32[(($82)>>2)];
    var $84=(($81+36)|0);
    var $85=HEAP32[(($84)>>2)];
    var $86=($85|0)==0;
    do {
     if ($86) {
      var $shift_116_i_i=0;var $108=$80;
     } else {
      var $i_022_i_i=0;var $x_023_i_i=0;
      while(1) {
       var $x_023_i_i;
       var $i_022_i_i;
       var $87=$x_023_i_i&1;
       var $88=($87|0)==0;
       if (!($88)) {
        var $x_0_lcssa_i_i=$x_023_i_i;
        break;
       }
       var $90=(($83+($i_022_i_i<<2))|0);
       var $91=HEAP32[(($90)>>2)];
       var $92=$91|$x_023_i_i;
       var $93=((($i_022_i_i)+(1))|0);
       var $94=($93>>>0)<($85>>>0);
       if ($94) {
        var $i_022_i_i=$93;var $x_023_i_i=$92;
       } else {
        var $x_0_lcssa_i_i=$92;
        break;
       }
      }
      var $x_0_lcssa_i_i;
      var $95=($x_0_lcssa_i_i|0)!=0;
      var $96=$x_0_lcssa_i_i&1;
      var $97=($96|0)==0;
      var $or_cond_i_i=$95&$97;
      if ($or_cond_i_i) {
       var $shift_019_i_i=0;var $x_120_i_i=$x_0_lcssa_i_i;
      } else {
       var $shift_116_i_i=0;var $108=$80;
       break;
      }
      while(1) {
       var $x_120_i_i;
       var $shift_019_i_i;
       var $98=$x_120_i_i>>1;
       var $99=((($shift_019_i_i)+(1))|0);
       var $100=$98&1;
       var $101=($100|0)==0;
       if ($101) {
        var $shift_019_i_i=$99;var $x_120_i_i=$98;
       } else {
        break;
       }
      }
      var $102=($99|0)==0;
      if ($102) {
       var $shift_116_i_i=0;var $108=$80;
       break;
      } else {
       var $i_117_i_i=0;
      }
      while(1) {
       var $i_117_i_i;
       var $103=(($83+($i_117_i_i<<2))|0);
       var $104=HEAP32[(($103)>>2)];
       var $105=$104>>($99|0);
       HEAP32[(($103)>>2)]=$105;
       var $106=((($i_117_i_i)+(1))|0);
       var $107=($106>>>0)<($85>>>0);
       if ($107) {
        var $i_117_i_i=$106;
       } else {
        break;
       }
      }
      var $_pre_i=HEAP32[(($55)>>2)];
      var $shift_116_i_i=$99;var $108=$_pre_i;
     }
    } while(0);
    var $108;
    var $shift_116_i_i;
    var $109=(($108+336+((($channel_0204_i)*(584))&-1)+580)|0);
    HEAP32[(($109)>>2)]=$shift_116_i_i;
    var $110=HEAP32[(($55)>>2)];
    var $111=(($110+336+((($channel_0204_i)*(584))&-1)+288)|0);
    HEAP32[(($111)>>2)]=$shift_116_i_i;
    var $112=HEAP32[(($1)>>2)];
    var $113=(($112+28)|0);
    var $114=HEAP32[(($113)>>2)];
    var $115=((($114)-($shift_116_i_i))|0);
    var $116=HEAP32[(($55)>>2)];
    var $117=(($116+216+($channel_0204_i<<2))|0);
    HEAP32[(($117)>>2)]=$115;
    var $118=((($channel_0204_i)+(1))|0);
    var $119=HEAP32[(($1)>>2)];
    var $120=(($119+24)|0);
    var $121=HEAP32[(($120)>>2)];
    var $122=($118>>>0)<($121>>>0);
    if (!($122)) {
     var $do_independent_0171_i=1;var $do_mid_side_0173_i=$do_mid_side_0174_ph_i;var $123=$119;
     break L7162;
    }
    var $_pre212_i=HEAP32[(($55)>>2)];
    var $channel_0204_i=$118;var $81=$119;var $80=$_pre212_i;
   }
  }
 } while(0);
 var $123;
 var $do_mid_side_0173_i;
 var $do_independent_0171_i;
 var $124=($do_mid_side_0173_i|0)!=0;
 if ($124) {
  var $125=HEAP32[(($55)>>2)];
  var $126=(($125+36)|0);
  var $127=HEAP32[(($126)>>2)];
  var $128=(($123+36)|0);
  var $129=HEAP32[(($128)>>2)];
  var $130=($129|0)==0;
  do {
   if ($130) {
    var $shift_116_i169_i=0;var $152=$125;
   } else {
    var $i_022_i157_i=0;var $x_023_i156_i=0;
    while(1) {
     var $x_023_i156_i;
     var $i_022_i157_i;
     var $131=$x_023_i156_i&1;
     var $132=($131|0)==0;
     if (!($132)) {
      var $x_0_lcssa_i159_i=$x_023_i156_i;
      break;
     }
     var $134=(($127+($i_022_i157_i<<2))|0);
     var $135=HEAP32[(($134)>>2)];
     var $136=$135|$x_023_i156_i;
     var $137=((($i_022_i157_i)+(1))|0);
     var $138=($137>>>0)<($129>>>0);
     if ($138) {
      var $i_022_i157_i=$137;var $x_023_i156_i=$136;
     } else {
      var $x_0_lcssa_i159_i=$136;
      break;
     }
    }
    var $x_0_lcssa_i159_i;
    var $139=($x_0_lcssa_i159_i|0)!=0;
    var $140=$x_0_lcssa_i159_i&1;
    var $141=($140|0)==0;
    var $or_cond_i160_i=$139&$141;
    if ($or_cond_i160_i) {
     var $shift_019_i163_i=0;var $x_120_i162_i=$x_0_lcssa_i159_i;
    } else {
     var $shift_116_i169_i=0;var $152=$125;
     break;
    }
    while(1) {
     var $x_120_i162_i;
     var $shift_019_i163_i;
     var $142=$x_120_i162_i>>1;
     var $143=((($shift_019_i163_i)+(1))|0);
     var $144=$142&1;
     var $145=($144|0)==0;
     if ($145) {
      var $shift_019_i163_i=$143;var $x_120_i162_i=$142;
     } else {
      break;
     }
    }
    var $146=($143|0)==0;
    if ($146) {
     var $shift_116_i169_i=0;var $152=$125;
     break;
    } else {
     var $i_117_i167_i=0;
    }
    while(1) {
     var $i_117_i167_i;
     var $147=(($127+($i_117_i167_i<<2))|0);
     var $148=HEAP32[(($147)>>2)];
     var $149=$148>>($143|0);
     HEAP32[(($147)>>2)]=$149;
     var $150=((($i_117_i167_i)+(1))|0);
     var $151=($150>>>0)<($129>>>0);
     if ($151) {
      var $i_117_i167_i=$150;
     } else {
      break;
     }
    }
    var $_pre207_i=HEAP32[(($55)>>2)];
    var $shift_116_i169_i=$143;var $152=$_pre207_i;
   }
  } while(0);
  var $152;
  var $shift_116_i169_i;
  var $153=(($152+5588)|0);
  HEAP32[(($153)>>2)]=$shift_116_i169_i;
  var $154=HEAP32[(($55)>>2)];
  var $155=(($154+5296)|0);
  HEAP32[(($155)>>2)]=$shift_116_i169_i;
  var $156=HEAP32[(($1)>>2)];
  var $157=(($156+28)|0);
  var $158=HEAP32[(($157)>>2)];
  var $159=((($158)-($shift_116_i169_i))|0);
  var $160=HEAP32[(($55)>>2)];
  var $161=(($160+248)|0);
  HEAP32[(($161)>>2)]=$159;
  var $162=HEAP32[(($55)>>2)];
  var $163=(($162+40)|0);
  var $164=HEAP32[(($163)>>2)];
  var $165=HEAP32[(($1)>>2)];
  var $166=(($165+36)|0);
  var $167=HEAP32[(($166)>>2)];
  var $168=($167|0)==0;
  do {
   if ($168) {
    var $shift_116_i169_1_i=0;var $366=$162;
   } else {
    var $i_022_i157_1_i=0;var $x_023_i156_1_i=0;
    while(1) {
     var $x_023_i156_1_i;
     var $i_022_i157_1_i;
     var $345=$x_023_i156_1_i&1;
     var $346=($345|0)==0;
     if (!($346)) {
      var $x_0_lcssa_i159_1_i=$x_023_i156_1_i;
      break;
     }
     var $348=(($164+($i_022_i157_1_i<<2))|0);
     var $349=HEAP32[(($348)>>2)];
     var $350=$349|$x_023_i156_1_i;
     var $351=((($i_022_i157_1_i)+(1))|0);
     var $352=($351>>>0)<($167>>>0);
     if ($352) {
      var $i_022_i157_1_i=$351;var $x_023_i156_1_i=$350;
     } else {
      var $x_0_lcssa_i159_1_i=$350;
      break;
     }
    }
    var $x_0_lcssa_i159_1_i;
    var $353=($x_0_lcssa_i159_1_i|0)!=0;
    var $354=$x_0_lcssa_i159_1_i&1;
    var $355=($354|0)==0;
    var $or_cond_i160_1_i=$353&$355;
    if ($or_cond_i160_1_i) {
     var $shift_019_i163_1_i=0;var $x_120_i162_1_i=$x_0_lcssa_i159_1_i;
    } else {
     var $shift_116_i169_1_i=0;var $366=$162;
     break;
    }
    while(1) {
     var $x_120_i162_1_i;
     var $shift_019_i163_1_i;
     var $356=$x_120_i162_1_i>>1;
     var $357=((($shift_019_i163_1_i)+(1))|0);
     var $358=$356&1;
     var $359=($358|0)==0;
     if ($359) {
      var $shift_019_i163_1_i=$357;var $x_120_i162_1_i=$356;
     } else {
      break;
     }
    }
    var $360=($357|0)==0;
    if ($360) {
     var $shift_116_i169_1_i=0;var $366=$162;
     break;
    } else {
     var $i_117_i167_1_i=0;
    }
    while(1) {
     var $i_117_i167_1_i;
     var $361=(($164+($i_117_i167_1_i<<2))|0);
     var $362=HEAP32[(($361)>>2)];
     var $363=$362>>($357|0);
     HEAP32[(($361)>>2)]=$363;
     var $364=((($i_117_i167_1_i)+(1))|0);
     var $365=($364>>>0)<($167>>>0);
     if ($365) {
      var $i_117_i167_1_i=$364;
     } else {
      break;
     }
    }
    var $_pre208_i=HEAP32[(($55)>>2)];
    var $shift_116_i169_1_i=$357;var $366=$_pre208_i;
   }
  } while(0);
  var $366;
  var $shift_116_i169_1_i;
  var $367=(($366+6172)|0);
  HEAP32[(($367)>>2)]=$shift_116_i169_1_i;
  var $368=HEAP32[(($55)>>2)];
  var $369=(($368+5880)|0);
  HEAP32[(($369)>>2)]=$shift_116_i169_1_i;
  var $370=HEAP32[(($1)>>2)];
  var $371=(($370+28)|0);
  var $372=HEAP32[(($371)>>2)];
  var $373=(((1)-($shift_116_i169_1_i))|0);
  var $374=((($373)+($372))|0);
  var $375=HEAP32[(($55)>>2)];
  var $376=(($375+252)|0);
  HEAP32[(($376)>>2)]=$374;
 }
 do {
  if ($do_independent_0171_i) {
   var $170=HEAP32[(($1)>>2)];
   var $171=(($170+24)|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=($172|0)==0;
   if ($173) {
    break;
   } else {
    var $channel_2198_i=0;
   }
   while(1) {
    var $channel_2198_i;
    var $174=HEAP32[(($55)>>2)];
    var $175=(($174+216+($channel_2198_i<<2))|0);
    var $176=HEAP32[(($175)>>2)];
    var $177=(($174+4+($channel_2198_i<<2))|0);
    var $178=HEAP32[(($177)>>2)];
    var $179=(($174+6176+($channel_2198_i<<3))|0);
    var $180=(($174+6640+($channel_2198_i<<3))|0);
    var $181=(($174+256+($channel_2198_i<<3))|0);
    var $182=(($174+6768+($channel_2198_i<<2))|0);
    var $183=(($174+6808+($channel_2198_i<<2))|0);
    _process_subframe_($encoder,$40,$max_partition_order_0_i,$frame_header_i,$176,$178,$179,$180,$181,$182,$183);
    var $184=((($channel_2198_i)+(1))|0);
    var $185=HEAP32[(($1)>>2)];
    var $186=(($185+24)|0);
    var $187=HEAP32[(($186)>>2)];
    var $188=($184>>>0)<($187>>>0);
    if ($188) {
     var $channel_2198_i=$184;
    } else {
     break;
    }
   }
  }
 } while(0);
 var $189=HEAP32[(($55)>>2)];
 L7212: do {
  if ($124) {
   var $191=(($189+248)|0);
   var $192=HEAP32[(($191)>>2)];
   var $193=(($189+36)|0);
   var $194=HEAP32[(($193)>>2)];
   var $195=(($189+6240)|0);
   var $196=(($189+6704)|0);
   var $197=(($189+320)|0);
   var $198=(($189+6800)|0);
   var $199=(($189+6840)|0);
   _process_subframe_($encoder,$40,$max_partition_order_0_i,$frame_header_i,$192,$194,$195,$196,$197,$198,$199);
   var $200=HEAP32[(($55)>>2)];
   var $201=(($200+252)|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=(($200+40)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=(($200+6248)|0);
   var $206=(($200+6712)|0);
   var $207=(($200+328)|0);
   var $208=(($200+6804)|0);
   var $209=(($200+6844)|0);
   _process_subframe_($encoder,$40,$max_partition_order_0_i,$frame_header_i,$202,$204,$205,$206,$207,$208,$209);
   var $210=HEAP32[(($1)>>2)];
   var $211=(($210+20)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=($212|0)==0;
   var $_pre213_i=HEAP32[(($55)>>2)];
   do {
    if ($213) {
     label = 5393;
    } else {
     var $215=(($_pre213_i+6864)|0);
     var $216=HEAP32[(($215)>>2)];
     var $217=($216|0)==0;
     if ($217) {
      label = 5393;
      break;
     }
     var $219=(($_pre213_i+6868)|0);
     var $220=HEAP32[(($219)>>2)];
     var $221=($220|0)==0;
     var $222=$221?0:3;
     var $channel_assignment_2_i=$222;
    }
   } while(0);
   if (label == 5393) {
    var $223=(($_pre213_i+6808)|0);
    var $224=HEAP32[(($223)>>2)];
    var $225=(($_pre213_i+6812)|0);
    var $226=HEAP32[(($225)>>2)];
    var $227=((($226)+($224))|0);
    var $228=(($_pre213_i+6844)|0);
    var $229=HEAP32[(($228)>>2)];
    var $230=((($229)+($224))|0);
    var $231=((($229)+($226))|0);
    var $232=(($_pre213_i+6840)|0);
    var $233=HEAP32[(($232)>>2)];
    var $234=((($233)+($229))|0);
    var $235=($230>>>0)<($227>>>0);
    var $ca_0_channel_assignment_0_i=($235&1);
    var $_min_bits_0_i=$235?$230:$227;
    var $236=($231>>>0)<($_min_bits_0_i>>>0);
    var $ca_0_channel_assignment_0_1_i=$236?2:$ca_0_channel_assignment_0_i;
    var $_min_bits_0_1_i=$236?$231:$_min_bits_0_i;
    var $237=($234>>>0)<($_min_bits_0_1_i>>>0);
    var $ca_0_channel_assignment_0_2_i=$237?3:$ca_0_channel_assignment_0_1_i;
    var $channel_assignment_2_i=$ca_0_channel_assignment_0_2_i;
   }
   var $channel_assignment_2_i;
   HEAP32[(($50)>>2)]=$channel_assignment_2_i;
   var $239=(($_pre213_i+6856)|0);
   var $240=HEAP32[(($239)>>2)];
   var $241=_FLAC__frame_add_header($frame_header_i,$240);
   var $242=($241|0)==0;
   if ($242) {
    var $244=HEAP32[(($1)>>2)];
    var $245=(($244)|0);
    HEAP32[(($245)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   if (($channel_assignment_2_i|0)==2) {
    var $269=HEAP32[(($55)>>2)];
    var $270=(($269+6804)|0);
    var $271=HEAP32[(($270)>>2)];
    var $272=(($269+5592+((($271)*(292))&-1))|0);
    var $273=(($269+6772)|0);
    var $274=HEAP32[(($273)>>2)];
    var $275=(($269+920+((($274)*(292))&-1))|0);
    var $276=(($269+252)|0);
    var $277=HEAP32[(($276)>>2)];
    var $278=(($269+220)|0);
    var $279=HEAP32[(($278)>>2)];
    var $right_bps_0_i=$279;var $left_bps_0_i=$277;var $left_subframe_0177_i=$272;var $right_subframe_0179_i=$275;var $292=$269;
   } else if (($channel_assignment_2_i|0)==3) {
    var $280=HEAP32[(($55)>>2)];
    var $281=(($280+6800)|0);
    var $282=HEAP32[(($281)>>2)];
    var $283=(($280+5008+((($282)*(292))&-1))|0);
    var $284=(($280+6804)|0);
    var $285=HEAP32[(($284)>>2)];
    var $286=(($280+5592+((($285)*(292))&-1))|0);
    var $287=(($280+248)|0);
    var $288=HEAP32[(($287)>>2)];
    var $289=(($280+252)|0);
    var $290=HEAP32[(($289)>>2)];
    var $right_bps_0_i=$290;var $left_bps_0_i=$288;var $left_subframe_0177_i=$283;var $right_subframe_0179_i=$286;var $292=$280;
   } else if (($channel_assignment_2_i|0)==1) {
    var $258=HEAP32[(($55)>>2)];
    var $259=(($258+6768)|0);
    var $260=HEAP32[(($259)>>2)];
    var $261=(($258+336+((($260)*(292))&-1))|0);
    var $262=(($258+6804)|0);
    var $263=HEAP32[(($262)>>2)];
    var $264=(($258+5592+((($263)*(292))&-1))|0);
    var $265=(($258+216)|0);
    var $266=HEAP32[(($265)>>2)];
    var $267=(($258+252)|0);
    var $268=HEAP32[(($267)>>2)];
    var $right_bps_0_i=$268;var $left_bps_0_i=$266;var $left_subframe_0177_i=$261;var $right_subframe_0179_i=$264;var $292=$258;
   } else if (($channel_assignment_2_i|0)==0) {
    var $247=HEAP32[(($55)>>2)];
    var $248=(($247+6768)|0);
    var $249=HEAP32[(($248)>>2)];
    var $250=(($247+336+((($249)*(292))&-1))|0);
    var $251=(($247+6772)|0);
    var $252=HEAP32[(($251)>>2)];
    var $253=(($247+920+((($252)*(292))&-1))|0);
    var $254=(($247+216)|0);
    var $255=HEAP32[(($254)>>2)];
    var $256=(($247+220)|0);
    var $257=HEAP32[(($256)>>2)];
    var $right_bps_0_i=$257;var $left_bps_0_i=$255;var $left_subframe_0177_i=$250;var $right_subframe_0179_i=$253;var $292=$247;
   } else {
    var $_pre214_i=HEAP32[(($55)>>2)];
    var $right_bps_0_i=0;var $left_bps_0_i=0;var $left_subframe_0177_i=0;var $right_subframe_0179_i=0;var $292=$_pre214_i;
   }
   var $292;
   var $right_subframe_0179_i;
   var $left_subframe_0177_i;
   var $left_bps_0_i;
   var $right_bps_0_i;
   var $293=HEAP32[(($43)>>2)];
   var $294=(($292+6856)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296=_add_subframe_($encoder,$293,$left_bps_0_i,$left_subframe_0177_i,$295);
   var $297=($296|0)==0;
   if ($297) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $299=HEAP32[(($43)>>2)];
   var $300=HEAP32[(($55)>>2)];
   var $301=(($300+6856)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=_add_subframe_($encoder,$299,$right_bps_0_i,$right_subframe_0179_i,$302);
   var $304=($303|0)==0;
   if ($304) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $_pre215_i=HEAP32[(($1)>>2)];
    var $329=$_pre215_i;
    break;
   }
  } else {
   var $305=(($189+6856)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=_FLAC__frame_add_header($frame_header_i,$306);
   var $308=($307|0)==0;
   if ($308) {
    var $310=HEAP32[(($1)>>2)];
    var $311=(($310)|0);
    HEAP32[(($311)>>2)]=7;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   } else {
    var $channel_4_i=0;
   }
   while(1) {
    var $channel_4_i;
    var $312=HEAP32[(($1)>>2)];
    var $313=(($312+24)|0);
    var $314=HEAP32[(($313)>>2)];
    var $315=($channel_4_i>>>0)<($314>>>0);
    if (!($315)) {
     var $329=$312;
     break L7212;
    }
    var $317=HEAP32[(($43)>>2)];
    var $318=HEAP32[(($55)>>2)];
    var $319=(($318+216+($channel_4_i<<2))|0);
    var $320=HEAP32[(($319)>>2)];
    var $321=(($318+6768+($channel_4_i<<2))|0);
    var $322=HEAP32[(($321)>>2)];
    var $323=(($318+336+((($channel_4_i)*(584))&-1)+((($322)*(292))&-1))|0);
    var $324=(($318+6856)|0);
    var $325=HEAP32[(($324)>>2)];
    var $326=_add_subframe_($encoder,$317,$320,$323,$325);
    var $327=($326|0)==0;
    var $328=((($channel_4_i)+(1))|0);
    if ($327) {
     var $_0=0;
     break;
    } else {
     var $channel_4_i=$328;
    }
   }
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $329;
 var $330=(($329+20)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=($331|0)==0;
 do {
  if (!($332)) {
   var $334=HEAP32[(($55)>>2)];
   var $335=(($334+6864)|0);
   var $336=HEAP32[(($335)>>2)];
   var $337=((($336)+(1))|0);
   HEAP32[(($335)>>2)]=$337;
   var $338=HEAP32[(($55)>>2)];
   var $339=(($338+6864)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341=(($338+6860)|0);
   var $342=HEAP32[(($341)>>2)];
   var $343=($340>>>0)<($342>>>0);
   if ($343) {
    break;
   }
   HEAP32[(($339)>>2)]=0;
  }
 } while(0);
 var $377=HEAP32[(($50)>>2)];
 var $378=HEAP32[(($55)>>2)];
 var $379=(($378+6868)|0);
 HEAP32[(($379)>>2)]=$377;
 var $380=HEAP32[(($55)>>2)];
 var $381=(($380+6856)|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=_FLAC__bitwriter_zero_pad_to_byte_boundary($382);
 var $384=($383|0)==0;
 if ($384) {
  var $386=HEAP32[(($1)>>2)];
  var $387=(($386)|0);
  HEAP32[(($387)>>2)]=8;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $389=HEAP32[(($55)>>2)];
 var $390=(($389+6856)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=_FLAC__bitwriter_get_write_crc16($391,$crc);
 var $393=($392|0)==0;
 do {
  if (!($393)) {
   var $395=HEAP32[(($55)>>2)];
   var $396=(($395+6856)|0);
   var $397=HEAP32[(($396)>>2)];
   var $398=HEAP16[(($crc)>>1)];
   var $399=($398&65535);
   var $400=HEAP32[((10472)>>2)];
   var $401=_FLAC__bitwriter_write_raw_uint32($397,$399,$400);
   var $402=($401|0)==0;
   if ($402) {
    break;
   }
   var $407=HEAP32[(($1)>>2)];
   var $408=(($407+36)|0);
   var $409=HEAP32[(($408)>>2)];
   var $410=_write_bitbuffer_($encoder,$409);
   var $411=($410|0)==0;
   if ($411) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $413=HEAP32[(($55)>>2)];
   var $414=(($413+7052)|0);
   HEAP32[(($414)>>2)]=0;
   var $415=HEAP32[(($55)>>2)];
   var $416=(($415+7056)|0);
   var $417=HEAP32[(($416)>>2)];
   var $418=((($417)+(1))|0);
   HEAP32[(($416)>>2)]=$418;
   var $419=HEAP32[(($1)>>2)];
   var $420=(($419+36)|0);
   var $421=HEAP32[(($420)>>2)];
   var $422$0=$421;
   var $422$1=0;
   var $423=HEAP32[(($55)>>2)];
   var $424=(($423+6920)|0);
   var $425=$424;
   var $ld$0$0=(($425)|0);
   var $426$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($425+4)|0);
   var $426$1=HEAP32[(($ld$1$1)>>2)];
   var $427$0=_i64Add($426$0,$426$1,$422$0,$422$1);var $427$1=tempRet0;
   var $st$2$0=(($425)|0);
   HEAP32[(($st$2$0)>>2)]=$427$0;
   var $st$3$1=(($425+4)|0);
   HEAP32[(($st$3$1)>>2)]=$427$1;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $404=HEAP32[(($1)>>2)];
 var $405=(($404)|0);
 HEAP32[(($405)>>2)]=8;
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _FLAC__stream_encoder_set_ogg_serial_number($encoder,$value){
 var label=0;
 return 0;
}
function _FLAC__stream_encoder_set_verify($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+4)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_streamable_subset($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+8)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_do_md5($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+12)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_channels($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+24)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_bits_per_sample($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+28)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_sample_rate($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+32)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_compression_level($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_036=0;
  var $_036;
  return $_036;
 }
 var $6=($value>>>0)>8;
 var $_value=$6?8:$value;
 var $7=((304+((($_value)*(40))&-1))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($2+16)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($1)>>2)];
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if ($13) {
  var $15=((304+((($_value)*(40))&-1)+4)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=(($10+20)|0);
  HEAP32[(($17)>>2)]=$16;
  var $_pre=HEAP32[(($1)>>2)];
  var $_0_i44=1;var $18=$_pre;
 } else {
  var $_0_i44=0;var $18=$10;
 }
 var $18;
 var $_0_i44;
 var $19=(($18+40)|0);
 HEAP32[(($19)>>2)]=1;
 var $20=HEAP32[(($1)>>2)];
 var $21=(($20+44)|0);
 HEAP32[(($21)>>2)]=13;
 var $22=HEAP32[(($1)>>2)];
 var $23=(($22+48)|0);
 HEAPF32[(($23)>>2)]=0.5;
 var $24=HEAP32[(($1)>>2)];
 var $25=(($24)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==1;
 do {
  if ($27) {
   var $28=((304+((($_value)*(40))&-1)+8)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($24+300)|0);
   HEAP32[(($30)>>2)]=$29;
   var $_pre45=HEAP32[(($1)>>2)];
   var $_phi_trans_insert=(($_pre45)|0);
   var $_pre46=HEAP32[(($_phi_trans_insert)>>2)];
   var $31=($_pre46|0)==1;
   if (!($31)) {
    var $_0_i37=0;var $54=$_pre46;var $53=0;
    break;
   }
   var $32=((304+((($_value)*(40))&-1)+12)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($_pre45+304)|0);
   HEAP32[(($34)>>2)]=$33;
   var $_pre47=HEAP32[(($1)>>2)];
   var $_phi_trans_insert48=(($_pre47)|0);
   var $_pre49=HEAP32[(($_phi_trans_insert48)>>2)];
   var $35=($_pre49|0)==1;
   if (!($35)) {
    var $_0_i37=0;var $54=$_pre49;var $53=0;
    break;
   }
   var $36=((304+((($_value)*(40))&-1)+16)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($_pre47+308)|0);
   HEAP32[(($38)>>2)]=$37;
   var $_pre50=HEAP32[(($1)>>2)];
   var $_phi_trans_insert51=(($_pre50)|0);
   var $_pre52=HEAP32[(($_phi_trans_insert51)>>2)];
   var $39=($_pre52|0)==1;
   var $__i40=($39&1);
   if (!($39)) {
    var $_0_i37=0;var $54=$_pre52;var $53=0;
    break;
   }
   var $40=((304+((($_value)*(40))&-1)+24)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($_pre50+312)|0);
   HEAP32[(($42)>>2)]=$41;
   var $_pre53=HEAP32[(($1)>>2)];
   var $_phi_trans_insert54=(($_pre53)|0);
   var $_pre55=HEAP32[(($_phi_trans_insert54)>>2)];
   var $43=($_pre55|0)==1;
   if (!($43)) {
    var $_0_i37=0;var $54=$_pre55;var $53=0;
    break;
   }
   var $44=$_0_i44&$__i40;
   var $45=((304+((($_value)*(40))&-1)+28)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($_pre53+320)|0);
   HEAP32[(($47)>>2)]=$46;
   var $_pre56=HEAP32[(($1)>>2)];
   var $_phi_trans_insert57=(($_pre56)|0);
   var $_pre58=HEAP32[(($_phi_trans_insert57)>>2)];
   var $48=($_pre58|0)==1;
   if (!($48)) {
    var $_0_i37=0;var $54=$_pre58;var $53=$44;
    break;
   }
   var $50=((304+((($_value)*(40))&-1)+32)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($_pre56+324)|0);
   HEAP32[(($52)>>2)]=$51;
   var $_pre59=HEAP32[(($1)>>2)];
   var $_phi_trans_insert60=(($_pre59)|0);
   var $_pre61=HEAP32[(($_phi_trans_insert60)>>2)];
   var $_0_i37=1;var $54=$_pre61;var $53=$44;
  } else {
   var $_0_i37=0;var $54=$26;var $53=0;
  }
 } while(0);
 var $53;
 var $54;
 var $_0_i37;
 var $55=$53&$_0_i37;
 var $56=($54|0)==1;
 var $__i=($56&1);
 var $57=$55&$__i;
 var $_036=$57;
 var $_036;
 return $_036;
}
function _FLAC__stream_encoder_set_do_mid_side_stereo($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+16)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_loose_mid_side_stereo($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+20)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_max_lpc_order($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+300)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_qlp_coeff_precision($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+304)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_do_qlp_coeff_prec_search($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+308)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_do_escape_coding($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 var $_=($5&1);
 return $_;
}
function _FLAC__stream_encoder_set_do_exhaustive_model_search($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+312)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_min_residual_partition_order($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+320)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_max_residual_partition_order($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+324)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_rice_parameter_search_dist($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 var $_=($5&1);
 return $_;
}
function _FLAC__stream_encoder_set_blocksize($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+36)|0);
 HEAP32[(($7)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_apodization($encoder,$specification){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+40)|0);
 HEAP32[(($7)>>2)]=0;
 var $_096=$specification;
 while(1) {
  var $_096;
  var $9=_strchr($_096,59);
  var $10=($9|0)!=0;
  if ($10) {
   var $12=$9;
   var $13=$_096;
   var $14=((($12)-($13))|0);
   var $18=$14;
  } else {
   var $16=_strlen($_096);
   var $18=$16;
  }
  var $18;
  var $19=($18|0)==8;
  do {
   if ($19) {
    var $21=_strncmp(3000,$_096,8);
    var $22=($21|0)==0;
    if ($22) {
     var $24=HEAP32[(($1)>>2)];
     var $25=(($24+40)|0);
     var $26=HEAP32[(($25)>>2)];
     var $27=((($26)+(1))|0);
     HEAP32[(($25)>>2)]=$27;
     var $28=HEAP32[(($1)>>2)];
     var $29=(($28+44+($26<<3))|0);
     HEAP32[(($29)>>2)]=0;
     break;
    }
    var $42=_strncmp(2832,$_096,8);
    var $43=($42|0)==0;
    if (!($43)) {
     var $82=0;
     label = 5550;
     break;
    }
    var $45=HEAP32[(($1)>>2)];
    var $46=(($45+40)|0);
    var $47=HEAP32[(($46)>>2)];
    var $48=((($47)+(1))|0);
    HEAP32[(($46)>>2)]=$48;
    var $49=HEAP32[(($1)>>2)];
    var $50=(($49+44+($47<<3))|0);
    HEAP32[(($50)>>2)]=2;
   } else {
    if (($18|0)==26) {
     var $52=_strncmp(2768,$_096,26);
     var $53=($52|0)==0;
     if (!($53)) {
      var $82=0;
      label = 5550;
      break;
     }
     var $55=HEAP32[(($1)>>2)];
     var $56=(($55+40)|0);
     var $57=HEAP32[(($56)>>2)];
     var $58=((($57)+(1))|0);
     HEAP32[(($56)>>2)]=$58;
     var $59=HEAP32[(($1)>>2)];
     var $60=(($59+44+($57<<3))|0);
     HEAP32[(($60)>>2)]=3;
     break;
    } else if (($18|0)==6) {
     var $62=_strncmp(2736,$_096,6);
     var $63=($62|0)==0;
     if (!($63)) {
      break;
     }
     var $65=HEAP32[(($1)>>2)];
     var $66=(($65+40)|0);
     var $67=HEAP32[(($66)>>2)];
     var $68=((($67)+(1))|0);
     HEAP32[(($66)>>2)]=$68;
     var $69=HEAP32[(($1)>>2)];
     var $70=(($69+44+($67<<3))|0);
     HEAP32[(($70)>>2)]=4;
     break;
    } else if (($18|0)==13) {
     var $32=_strncmp(2912,$_096,13);
     var $33=($32|0)==0;
     if (!($33)) {
      var $82=1;
      label = 5550;
      break;
     }
     var $35=HEAP32[(($1)>>2)];
     var $36=(($35+40)|0);
     var $37=HEAP32[(($36)>>2)];
     var $38=((($37)+(1))|0);
     HEAP32[(($36)>>2)]=$38;
     var $39=HEAP32[(($1)>>2)];
     var $40=(($39+44+($37<<3))|0);
     HEAP32[(($40)>>2)]=1;
     break;
    } else if (($18|0)==7) {
     var $72=_strncmp(2696,$_096,7);
     var $73=($72|0)==0;
     if ($73) {
      var $75=HEAP32[(($1)>>2)];
      var $76=(($75+40)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)+(1))|0);
      HEAP32[(($76)>>2)]=$78;
      var $79=HEAP32[(($1)>>2)];
      var $80=(($79+44+($77<<3))|0);
      HEAP32[(($80)>>2)]=5;
      break;
     }
     var $102=_strncmp(2464,$_096,7);
     var $103=($102|0)==0;
     if (!($103)) {
      var $114=0;var $113=0;var $112=1;
      label = 5555;
      break;
     }
     var $105=HEAP32[(($1)>>2)];
     var $106=(($105+40)|0);
     var $107=HEAP32[(($106)>>2)];
     var $108=((($107)+(1))|0);
     HEAP32[(($106)>>2)]=$108;
     var $109=HEAP32[(($1)>>2)];
     var $110=(($109+44+($107<<3))|0);
     HEAP32[(($110)>>2)]=7;
     break;
    } else {
     var $81=($18>>>0)>7;
     if ($81) {
      var $82=0;
      label = 5550;
      break;
     } else {
      var $114=0;var $113=0;var $112=0;
      label = 5555;
      break;
     }
    }
   }
  } while(0);
  do {
   if (label == 5550) {
    label = 0;
    var $82;
    var $83=_strncmp(2616,$_096,6);
    var $84=($83|0)==0;
    if (!($84)) {
     var $114=1;var $113=$82;var $112=0;
     label = 5555;
     break;
    }
    var $86=(($_096+6)|0);
    var $87=_strtod($86,0);
    var $88=$87;
    var $89=$88<=0;
    var $90=$88>(0.5);
    var $or_cond=$89|$90;
    if ($or_cond) {
     break;
    }
    var $92=HEAP32[(($1)>>2)];
    var $93=(($92+40)|0);
    var $94=HEAP32[(($93)>>2)];
    var $95=(($92+44+($94<<3)+4)|0);
    HEAPF32[(($95)>>2)]=$88;
    var $96=HEAP32[(($1)>>2)];
    var $97=(($96+40)|0);
    var $98=HEAP32[(($97)>>2)];
    var $99=((($98)+(1))|0);
    HEAP32[(($97)>>2)]=$99;
    var $100=HEAP32[(($1)>>2)];
    var $101=(($100+44+($98<<3))|0);
    HEAP32[(($101)>>2)]=6;
   }
  } while(0);
  L7391: do {
   if (label == 5555) {
    label = 0;
    var $112;
    var $113;
    var $114;
    var $115=($18|0)==4;
    do {
     if ($115) {
      var $117=_strncmp(2384,$_096,4);
      var $118=($117|0)==0;
      if (!($118)) {
       break;
      }
      var $120=HEAP32[(($1)>>2)];
      var $121=(($120+40)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=((($122)+(1))|0);
      HEAP32[(($121)>>2)]=$123;
      var $124=HEAP32[(($1)>>2)];
      var $125=(($124+44+($122<<3))|0);
      HEAP32[(($125)>>2)]=8;
      break L7391;
     }
    } while(0);
    do {
     if ($113) {
      var $128=_strncmp(2312,$_096,$18);
      var $129=($128|0)==0;
      if (!($129)) {
       break;
      }
      var $131=HEAP32[(($1)>>2)];
      var $132=(($131+40)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($133)+(1))|0);
      HEAP32[(($132)>>2)]=$134;
      var $135=HEAP32[(($1)>>2)];
      var $136=(($135+44+($133<<3))|0);
      HEAP32[(($136)>>2)]=9;
      break L7391;
     }
    } while(0);
    do {
     if ($112) {
      var $139=_strncmp(2240,$_096,$18);
      var $140=($139|0)==0;
      if (!($140)) {
       break;
      }
      var $142=HEAP32[(($1)>>2)];
      var $143=(($142+40)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=((($144)+(1))|0);
      HEAP32[(($143)>>2)]=$145;
      var $146=HEAP32[(($1)>>2)];
      var $147=(($146+44+($144<<3))|0);
      HEAP32[(($147)>>2)]=10;
      break L7391;
     }
    } while(0);
    var $148=($18|0)==9;
    do {
     if ($148) {
      var $150=_strncmp(2128,$_096,9);
      var $151=($150|0)==0;
      if (!($151)) {
       break;
      }
      var $153=HEAP32[(($1)>>2)];
      var $154=(($153+40)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=((($155)+(1))|0);
      HEAP32[(($154)>>2)]=$156;
      var $157=HEAP32[(($1)>>2)];
      var $158=(($157+44+($155<<3))|0);
      HEAP32[(($158)>>2)]=11;
      break L7391;
     }
    } while(0);
    do {
     if ($19) {
      var $161=_strncmp(2056,$_096,8);
      var $162=($161|0)==0;
      if (!($162)) {
       break;
      }
      var $164=HEAP32[(($1)>>2)];
      var $165=(($164+40)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=((($166)+(1))|0);
      HEAP32[(($165)>>2)]=$167;
      var $168=HEAP32[(($1)>>2)];
      var $169=(($168+44+($166<<3))|0);
      HEAP32[(($169)>>2)]=12;
      break L7391;
     }
    } while(0);
    do {
     if ($114) {
      var $172=_strncmp(1976,$_096,6);
      var $173=($172|0)==0;
      if (!($173)) {
       break;
      }
      var $175=(($_096+6)|0);
      var $176=_strtod($175,0);
      var $177=$176;
      var $178=$177<0;
      var $179=$177>1;
      var $or_cond97=$178|$179;
      if ($or_cond97) {
       break L7391;
      }
      var $181=HEAP32[(($1)>>2)];
      var $182=(($181+40)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=(($181+44+($183<<3)+4)|0);
      HEAPF32[(($184)>>2)]=$177;
      var $185=HEAP32[(($1)>>2)];
      var $186=(($185+40)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=((($187)+(1))|0);
      HEAP32[(($186)>>2)]=$188;
      var $189=HEAP32[(($1)>>2)];
      var $190=(($189+44+($187<<3))|0);
      HEAP32[(($190)>>2)]=13;
      break L7391;
     }
    } while(0);
    var $191=($18|0)==5;
    if (!($191)) {
     break;
    }
    var $193=_strncmp(1896,$_096,5);
    var $194=($193|0)==0;
    if (!($194)) {
     break;
    }
    var $196=HEAP32[(($1)>>2)];
    var $197=(($196+40)|0);
    var $198=HEAP32[(($197)>>2)];
    var $199=((($198)+(1))|0);
    HEAP32[(($197)>>2)]=$199;
    var $200=HEAP32[(($1)>>2)];
    var $201=(($200+44+($198<<3))|0);
    HEAP32[(($201)>>2)]=14;
   }
  } while(0);
  var $202=HEAP32[(($1)>>2)];
  var $203=(($202+40)|0);
  var $204=HEAP32[(($203)>>2)];
  var $205=($204|0)==32;
  var $_not=$10^1;
  var $brmerge=$205|$_not;
  var $206=(($9+1)|0);
  if ($brmerge) {
   break;
  } else {
   var $_096=$206;
  }
 }
 var $208=($204|0)==0;
 if (!($208)) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 HEAP32[(($203)>>2)]=1;
 var $210=HEAP32[(($1)>>2)];
 var $211=(($210+44)|0);
 HEAP32[(($211)>>2)]=13;
 var $212=HEAP32[(($1)>>2)];
 var $213=(($212+48)|0);
 HEAPF32[(($213)>>2)]=0.5;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_total_samples_estimate($encoder,$value$0,$value$1){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($2+336)|0);
 var $st$0$0=(($7)|0);
 HEAP32[(($st$0$0)>>2)]=$value$0;
 var $st$1$1=(($7+4)|0);
 HEAP32[(($st$1$1)>>2)]=$value$1;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_set_metadata($encoder,$metadata,$num_blocks){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=($metadata|0)==0;
 var $_num_blocks=$7?0:$num_blocks;
 var $8=($_num_blocks|0)==0;
 var $9=(($2+344)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if (!($11)) {
  var $13=$10;
  _free($13);
  var $14=HEAP32[(($1)>>2)];
  var $15=(($14+344)|0);
  HEAP32[(($15)>>2)]=0;
  var $16=HEAP32[(($1)>>2)];
  var $17=(($16+348)|0);
  HEAP32[(($17)>>2)]=0;
 }
 if ($8) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $20=_safe_malloc_mul_2op_p(4,$_num_blocks);
 var $21=($20|0)==0;
 if ($21) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $23=$20;
 var $24=$metadata;
 var $25=$_num_blocks<<2;
 (_memcpy($20, $24, $25)|0);
 var $26=HEAP32[(($1)>>2)];
 var $27=(($26+344)|0);
 HEAP32[(($27)>>2)]=$23;
 var $28=HEAP32[(($1)>>2)];
 var $29=(($28+348)|0);
 HEAP32[(($29)>>2)]=$_num_blocks;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_disable_constant_subframes($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($encoder+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+7244)|0);
 HEAP32[(($9)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_disable_fixed_subframes($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($encoder+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+7248)|0);
 HEAP32[(($9)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_disable_verbatim_subframes($encoder,$value){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==1;
 if (!($5)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $7=(($encoder+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+7252)|0);
 HEAP32[(($9)>>2)]=$value;
 var $_0=1;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_get_state($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_verify_decoder_state($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if ($5) {
  var $_0=9;
  var $_0;
  return $_0;
 }
 var $7=(($encoder+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+11744)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_FLAC__stream_decoder_get_state($10);
 var $_0=$11;
 var $_0;
 return $_0;
}
function _FLAC__stream_encoder_get_resolved_state_string($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==3;
 if ($5) {
  var $10=(($encoder+4)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($11+11744)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=_FLAC__stream_decoder_get_resolved_state_string($13);
  var $_0=$14;
  var $_0;
  return $_0;
 } else {
  var $7=((9528+($4<<2))|0);
  var $8=HEAP32[(($7)>>2)];
  var $_0=$8;
  var $_0;
  return $_0;
 }
}
function _FLAC__stream_encoder_get_verify_decoder_error_stats($encoder,$absolute_sample,$frame_number,$channel,$sample,$expected,$got){
 var label=0;
 var $1=($absolute_sample|0)==0;
 if (!($1)) {
  var $3=(($encoder+4)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+11808)|0);
  var $ld$0$0=(($5)|0);
  var $6$0=HEAP32[(($ld$0$0)>>2)];
  var $ld$1$1=(($5+4)|0);
  var $6$1=HEAP32[(($ld$1$1)>>2)];
  var $st$2$0=(($absolute_sample)|0);
  HEAP32[(($st$2$0)>>2)]=$6$0;
  var $st$3$1=(($absolute_sample+4)|0);
  HEAP32[(($st$3$1)>>2)]=$6$1;
 }
 var $8=($frame_number|0)==0;
 if (!($8)) {
  var $10=(($encoder+4)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($11+11816)|0);
  var $13=HEAP32[(($12)>>2)];
  HEAP32[(($frame_number)>>2)]=$13;
 }
 var $15=($channel|0)==0;
 if (!($15)) {
  var $17=(($encoder+4)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=(($18+11820)|0);
  var $20=HEAP32[(($19)>>2)];
  HEAP32[(($channel)>>2)]=$20;
 }
 var $22=($sample|0)==0;
 if (!($22)) {
  var $24=(($encoder+4)|0);
  var $25=HEAP32[(($24)>>2)];
  var $26=(($25+11824)|0);
  var $27=HEAP32[(($26)>>2)];
  HEAP32[(($sample)>>2)]=$27;
 }
 var $29=($expected|0)==0;
 if (!($29)) {
  var $31=(($encoder+4)|0);
  var $32=HEAP32[(($31)>>2)];
  var $33=(($32+11828)|0);
  var $34=HEAP32[(($33)>>2)];
  HEAP32[(($expected)>>2)]=$34;
 }
 var $36=($got|0)==0;
 if ($36) {
  return;
 }
 var $38=(($encoder+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+11832)|0);
 var $41=HEAP32[(($40)>>2)];
 HEAP32[(($got)>>2)]=$41;
 return;
}
function _FLAC__stream_encoder_get_verify($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_streamable_subset($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_do_md5($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_channels($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_bits_per_sample($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+28)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_sample_rate($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+32)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_blocksize($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_do_mid_side_stereo($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+16)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_loose_mid_side_stereo($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_max_lpc_order($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+300)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_qlp_coeff_precision($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+304)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_do_qlp_coeff_prec_search($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+308)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_do_escape_coding($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+316)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_do_exhaustive_model_search($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+312)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_min_residual_partition_order($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+320)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_max_residual_partition_order($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+324)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_rice_parameter_search_dist($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+328)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _FLAC__stream_encoder_get_total_samples_estimate($encoder){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+336)|0);
 var $ld$0$0=(($3)|0);
 var $4$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($3+4)|0);
 var $4$1=HEAP32[(($ld$1$1)>>2)];
 return (tempRet0=$4$1,$4$0);
}
function _FLAC__stream_encoder_process($encoder,$buffer,$samples){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+36)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)+(1))|0);
 var $8=(($encoder+4)|0);
 var $9=($4|0)==0;
 var $10=(($buffer+4)|0);
 var $j_0=0;var $12=$2;
 while(1) {
  var $12;
  var $j_0;
  var $13=HEAP32[(($8)>>2)];
  var $14=(($13+7052)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=((($7)-($15))|0);
  var $17=((($samples)-($j_0))|0);
  var $18=($16>>>0)<($17>>>0);
  var $_=$18?$16:$17;
  var $19=(($12+4)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=($20|0)==0;
  if (!($21)) {
   var $23=(($13+11792)|0);
   var $24=HEAP32[(($23)>>2)];
   if ($9) {
    var $_lcssa11_i=$24;
   } else {
    var $25=$_<<2;
    var $channel_012_i=0;var $27=$24;
    while(1) {
     var $27;
     var $channel_012_i;
     var $28=(($13+11756+($channel_012_i<<2))|0);
     var $29=HEAP32[(($28)>>2)];
     var $30=(($29+($27<<2))|0);
     var $31=$30;
     var $32=(($buffer+($channel_012_i<<2))|0);
     var $33=HEAP32[(($32)>>2)];
     var $34=(($33+($j_0<<2))|0);
     var $35=$34;
     (_memcpy($31, $35, $25)|0);
     var $36=((($channel_012_i)+(1))|0);
     var $37=($36>>>0)<($4>>>0);
     var $38=HEAP32[(($23)>>2)];
     if ($37) {
      var $channel_012_i=$36;var $27=$38;
     } else {
      var $_lcssa11_i=$38;
      break;
     }
    }
   }
   var $_lcssa11_i;
   var $39=((($_lcssa11_i)+($_))|0);
   HEAP32[(($23)>>2)]=$39;
  }
  if (!($9)) {
   var $40=$_<<2;
   var $channel_065=0;
   while(1) {
    var $channel_065;
    var $41=HEAP32[(($8)>>2)];
    var $42=(($41+7052)|0);
    var $43=HEAP32[(($42)>>2)];
    var $44=(($41+4+($channel_065<<2))|0);
    var $45=HEAP32[(($44)>>2)];
    var $46=(($45+($43<<2))|0);
    var $47=$46;
    var $48=(($buffer+($channel_065<<2))|0);
    var $49=HEAP32[(($48)>>2)];
    var $50=(($49+($j_0<<2))|0);
    var $51=$50;
    (_memcpy($47, $51, $40)|0);
    var $52=((($channel_065)+(1))|0);
    var $53=($52>>>0)<($4>>>0);
    if ($53) {
     var $channel_065=$52;
    } else {
     break;
    }
   }
  }
  var $54=HEAP32[(($1)>>2)];
  var $55=(($54+16)|0);
  var $56=HEAP32[(($55)>>2)];
  var $57=($56|0)==0;
  L7526: do {
   if ($57) {
    var $92=((($_)+($j_0))|0);
    var $j_2=$92;
   } else {
    var $59=HEAP32[(($8)>>2)];
    var $60=(($59+7052)|0);
    var $61=HEAP32[(($60)>>2)];
    var $62=($61>>>0)<=($6>>>0);
    var $63=($j_0>>>0)<($samples>>>0);
    var $or_cond66=$62&$63;
    if ($or_cond66) {
     var $j_167=$j_0;var $i_068=$61;var $64=$59;
    } else {
     var $j_2=$j_0;
     break;
    }
    while(1) {
     var $64;
     var $i_068;
     var $j_167;
     var $65=HEAP32[(($buffer)>>2)];
     var $66=(($65+($j_167<<2))|0);
     var $67=HEAP32[(($66)>>2)];
     var $68=HEAP32[(($10)>>2)];
     var $69=(($68+($j_167<<2))|0);
     var $70=HEAP32[(($69)>>2)];
     var $71=((($67)-($70))|0);
     var $72=(($64+40)|0);
     var $73=HEAP32[(($72)>>2)];
     var $74=(($73+($i_068<<2))|0);
     HEAP32[(($74)>>2)]=$71;
     var $75=HEAP32[(($buffer)>>2)];
     var $76=(($75+($j_167<<2))|0);
     var $77=HEAP32[(($76)>>2)];
     var $78=HEAP32[(($10)>>2)];
     var $79=(($78+($j_167<<2))|0);
     var $80=HEAP32[(($79)>>2)];
     var $81=((($80)+($77))|0);
     var $82=$81>>1;
     var $83=HEAP32[(($8)>>2)];
     var $84=(($83+36)|0);
     var $85=HEAP32[(($84)>>2)];
     var $86=(($85+($i_068<<2))|0);
     HEAP32[(($86)>>2)]=$82;
     var $87=((($i_068)+(1))|0);
     var $88=((($j_167)+(1))|0);
     var $89=($87>>>0)<=($6>>>0);
     var $90=($88>>>0)<($samples>>>0);
     var $or_cond=$89&$90;
     if (!($or_cond)) {
      var $j_2=$88;
      break L7526;
     }
     var $_pre79=HEAP32[(($8)>>2)];
     var $j_167=$88;var $i_068=$87;var $64=$_pre79;
    }
   }
  } while(0);
  var $j_2;
  var $93=HEAP32[(($8)>>2)];
  var $94=(($93+7052)|0);
  var $95=HEAP32[(($94)>>2)];
  var $96=((($95)+($_))|0);
  HEAP32[(($94)>>2)]=$96;
  var $97=HEAP32[(($8)>>2)];
  var $98=(($97+7052)|0);
  var $99=HEAP32[(($98)>>2)];
  var $100=($99>>>0)>($6>>>0);
  if ($100) {
   var $102=_process_frame_($encoder,0);
   var $103=($102|0)==0;
   if ($103) {
    var $_0=0;
    label = 5684;
    break;
   }
   if (!($9)) {
    var $channel_172=0;
    while(1) {
     var $channel_172;
     var $104=HEAP32[(($8)>>2)];
     var $105=(($104+4+($channel_172<<2))|0);
     var $106=HEAP32[(($105)>>2)];
     var $107=(($106+($6<<2))|0);
     var $108=HEAP32[(($107)>>2)];
     HEAP32[(($106)>>2)]=$108;
     var $109=((($channel_172)+(1))|0);
     var $110=($109>>>0)<($4>>>0);
     if ($110) {
      var $channel_172=$109;
     } else {
      break;
     }
    }
   }
   var $111=HEAP32[(($1)>>2)];
   var $112=(($111+16)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=($113|0)==0;
   if (!($114)) {
    var $116=HEAP32[(($8)>>2)];
    var $117=(($116+36)|0);
    var $118=HEAP32[(($117)>>2)];
    var $119=(($118+($6<<2))|0);
    var $120=HEAP32[(($119)>>2)];
    HEAP32[(($118)>>2)]=$120;
    var $121=HEAP32[(($8)>>2)];
    var $122=(($121+40)|0);
    var $123=HEAP32[(($122)>>2)];
    var $124=(($123+($6<<2))|0);
    var $125=HEAP32[(($124)>>2)];
    HEAP32[(($123)>>2)]=$125;
   }
   var $127=HEAP32[(($8)>>2)];
   var $128=(($127+7052)|0);
   HEAP32[(($128)>>2)]=1;
  }
  var $130=($j_2>>>0)<($samples>>>0);
  if (!($130)) {
   var $_0=1;
   label = 5685;
   break;
  }
  var $_pre=HEAP32[(($1)>>2)];
  var $j_0=$j_2;var $12=$_pre;
 }
 if (label == 5685) {
  var $_0;
  return $_0;
 }
 else if (label == 5684) {
  var $_0;
  return $_0;
 }
}
function _FLAC__stream_encoder_process_interleaved($encoder,$buffer,$samples){
 var label=0;
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+36)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=0;
 var $10=($4|0)==2;
 var $or_cond=$9&$10;
 var $11=(($encoder+4)|0);
 if ($or_cond) {
  var $14=((($6)+(1))|0);
  var $j_0=0;var $k_0=0;var $16=$2;
  while(1) {
   var $16;
   var $k_0;
   var $j_0;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=($18|0)==0;
   if (!($19)) {
    var $21=HEAP32[(($11)>>2)];
    var $22=(($21+7052)|0);
    var $23=HEAP32[(($22)>>2)];
    var $24=((($14)-($23))|0);
    var $25=((($samples)-($j_0))|0);
    var $26=($24>>>0)<($25>>>0);
    var $_=$26?$24:$25;
    var $27=(($21+11792)|0);
    var $28=HEAP32[(($27)>>2)];
    var $29=($_|0)==0;
    if ($29) {
     var $tail_0_lcssa_i=$28;
    } else {
     var $30=$j_0<<1;
     var $sample_015_us_i=$30;var $wide_sample_016_us_i=0;var $tail_017_us_i=$28;
     while(1) {
      var $tail_017_us_i;
      var $wide_sample_016_us_i;
      var $sample_015_us_i;
      var $channel_013_us_i=0;var $sample_114_us_i=$sample_015_us_i;
      while(1) {
       var $sample_114_us_i;
       var $channel_013_us_i;
       var $37=((($sample_114_us_i)+(1))|0);
       var $38=(($buffer+($sample_114_us_i<<2))|0);
       var $39=HEAP32[(($38)>>2)];
       var $40=(($21+11756+($channel_013_us_i<<2))|0);
       var $41=HEAP32[(($40)>>2)];
       var $42=(($41+($tail_017_us_i<<2))|0);
       HEAP32[(($42)>>2)]=$39;
       var $43=((($channel_013_us_i)+(1))|0);
       var $44=($43>>>0)<2;
       if ($44) {
        var $channel_013_us_i=$43;var $sample_114_us_i=$37;
       } else {
        break;
       }
      }
      var $32=((($sample_015_us_i)+(2))|0);
      var $33=((($tail_017_us_i)+(1))|0);
      var $34=((($wide_sample_016_us_i)+(1))|0);
      var $35=($34>>>0)<($_>>>0);
      if ($35) {
       var $sample_015_us_i=$32;var $wide_sample_016_us_i=$34;var $tail_017_us_i=$33;
      } else {
       break;
      }
     }
     var $split19_i=((($_)+($28))|0);
     var $tail_0_lcssa_i=$split19_i;
    }
    var $tail_0_lcssa_i;
    HEAP32[(($27)>>2)]=$tail_0_lcssa_i;
   }
   var $46=HEAP32[(($11)>>2)];
   var $47=(($46+7052)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=($48>>>0)<=($6>>>0);
   var $50=($j_0>>>0)<($samples>>>0);
   var $or_cond101116=$49&$50;
   if ($or_cond101116) {
    var $k_1117=$k_0;var $j_1118=$j_0;var $i_0119=$48;var $51=$46;
    while(1) {
     var $51;
     var $i_0119;
     var $j_1118;
     var $k_1117;
     var $52=((($k_1117)+(1))|0);
     var $53=(($buffer+($k_1117<<2))|0);
     var $54=HEAP32[(($53)>>2)];
     var $55=(($51+4)|0);
     var $56=HEAP32[(($55)>>2)];
     var $57=(($56+($i_0119<<2))|0);
     HEAP32[(($57)>>2)]=$54;
     var $58=((($k_1117)+(2))|0);
     var $59=(($buffer+($52<<2))|0);
     var $60=HEAP32[(($59)>>2)];
     var $61=HEAP32[(($11)>>2)];
     var $62=(($61+8)|0);
     var $63=HEAP32[(($62)>>2)];
     var $64=(($63+($i_0119<<2))|0);
     HEAP32[(($64)>>2)]=$60;
     var $65=((($60)+($54))|0);
     var $66=((($54)-($60))|0);
     var $67=$65>>1;
     var $68=HEAP32[(($11)>>2)];
     var $69=(($68+40)|0);
     var $70=HEAP32[(($69)>>2)];
     var $71=(($70+($i_0119<<2))|0);
     HEAP32[(($71)>>2)]=$66;
     var $72=HEAP32[(($11)>>2)];
     var $73=(($72+36)|0);
     var $74=HEAP32[(($73)>>2)];
     var $75=(($74+($i_0119<<2))|0);
     HEAP32[(($75)>>2)]=$67;
     var $76=((($i_0119)+(1))|0);
     var $77=((($j_1118)+(1))|0);
     var $78=($76>>>0)<=($6>>>0);
     var $79=($77>>>0)<($samples>>>0);
     var $or_cond101=$78&$79;
     var $_pre163=HEAP32[(($11)>>2)];
     if ($or_cond101) {
      var $k_1117=$58;var $j_1118=$77;var $i_0119=$76;var $51=$_pre163;
     } else {
      var $k_1_lcssa=$58;var $j_1_lcssa=$77;var $i_0_lcssa=$76;var $_lcssa=$79;var $80=$_pre163;
      break;
     }
    }
   } else {
    var $k_1_lcssa=$k_0;var $j_1_lcssa=$j_0;var $i_0_lcssa=$48;var $_lcssa=$50;var $80=$46;
   }
   var $80;
   var $_lcssa;
   var $i_0_lcssa;
   var $j_1_lcssa;
   var $k_1_lcssa;
   var $81=(($80+7052)|0);
   HEAP32[(($81)>>2)]=$i_0_lcssa;
   var $82=($i_0_lcssa>>>0)>($6>>>0);
   if ($82) {
    var $84=_process_frame_($encoder,0);
    var $85=($84|0)==0;
    if ($85) {
     var $_0=0;
     label = 5732;
     break;
    }
    var $87=HEAP32[(($11)>>2)];
    var $88=(($87+4)|0);
    var $89=HEAP32[(($88)>>2)];
    var $90=(($89+($6<<2))|0);
    var $91=HEAP32[(($90)>>2)];
    HEAP32[(($89)>>2)]=$91;
    var $92=HEAP32[(($11)>>2)];
    var $93=(($92+8)|0);
    var $94=HEAP32[(($93)>>2)];
    var $95=(($94+($6<<2))|0);
    var $96=HEAP32[(($95)>>2)];
    HEAP32[(($94)>>2)]=$96;
    var $97=HEAP32[(($11)>>2)];
    var $98=(($97+36)|0);
    var $99=HEAP32[(($98)>>2)];
    var $100=(($99+($6<<2))|0);
    var $101=HEAP32[(($100)>>2)];
    HEAP32[(($99)>>2)]=$101;
    var $102=HEAP32[(($11)>>2)];
    var $103=(($102+40)|0);
    var $104=HEAP32[(($103)>>2)];
    var $105=(($104+($6<<2))|0);
    var $106=HEAP32[(($105)>>2)];
    HEAP32[(($104)>>2)]=$106;
    var $107=HEAP32[(($11)>>2)];
    var $108=(($107+7052)|0);
    HEAP32[(($108)>>2)]=1;
   }
   if (!($_lcssa)) {
    var $_0=1;
    label = 5730;
    break;
   }
   var $_pre162=HEAP32[(($1)>>2)];
   var $j_0=$j_1_lcssa;var $k_0=$k_1_lcssa;var $16=$_pre162;
  }
  if (label == 5732) {
   var $_0;
   return $_0;
  }
  else if (label == 5730) {
   var $_0;
   return $_0;
  }
 }
 var $12=($4|0)==0;
 var $13=((($6)+(1))|0);
 var $j_2=0;var $k_2=0;var $111=$2;
 while(1) {
  var $111;
  var $k_2;
  var $j_2;
  var $112=(($111+4)|0);
  var $113=HEAP32[(($112)>>2)];
  var $114=($113|0)==0;
  if (!($114)) {
   var $116=HEAP32[(($11)>>2)];
   var $117=(($116+7052)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=((($13)-($118))|0);
   var $120=((($samples)-($j_2))|0);
   var $121=($119>>>0)<($120>>>0);
   var $_102=$121?$119:$120;
   var $122=(($116+11792)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=($_102|0)==0;
   if ($124) {
    var $tail_0_lcssa_i113=$123;
   } else {
    if (!($12)) {
     var $125=(Math_imul($j_2,$4)|0);
     var $sample_015_us_i109=$125;var $wide_sample_016_us_i108=0;var $tail_017_us_i107=$123;
     while(1) {
      var $tail_017_us_i107;
      var $wide_sample_016_us_i108;
      var $sample_015_us_i109;
      var $channel_013_us_i106=0;var $sample_114_us_i105=$sample_015_us_i109;
      while(1) {
       var $sample_114_us_i105;
       var $channel_013_us_i106;
       var $132=((($sample_114_us_i105)+(1))|0);
       var $133=(($buffer+($sample_114_us_i105<<2))|0);
       var $134=HEAP32[(($133)>>2)];
       var $135=(($116+11756+($channel_013_us_i106<<2))|0);
       var $136=HEAP32[(($135)>>2)];
       var $137=(($136+($tail_017_us_i107<<2))|0);
       HEAP32[(($137)>>2)]=$134;
       var $138=((($channel_013_us_i106)+(1))|0);
       var $139=($138>>>0)<($4>>>0);
       if ($139) {
        var $channel_013_us_i106=$138;var $sample_114_us_i105=$132;
       } else {
        break;
       }
      }
      var $127=((($sample_015_us_i109)+($4))|0);
      var $128=((($tail_017_us_i107)+(1))|0);
      var $129=((($wide_sample_016_us_i108)+(1))|0);
      var $130=($129>>>0)<($_102>>>0);
      if ($130) {
       var $sample_015_us_i109=$127;var $wide_sample_016_us_i108=$129;var $tail_017_us_i107=$128;
      } else {
       break;
      }
     }
    }
    var $split19_i111=((($_102)+($123))|0);
    var $tail_0_lcssa_i113=$split19_i111;
   }
   var $tail_0_lcssa_i113;
   HEAP32[(($122)>>2)]=$tail_0_lcssa_i113;
  }
  var $141=HEAP32[(($11)>>2)];
  var $142=(($141+7052)|0);
  var $143=HEAP32[(($142)>>2)];
  var $144=($143>>>0)<=($6>>>0);
  var $145=($j_2>>>0)<($samples>>>0);
  var $or_cond103129=$144&$145;
  L7594: do {
   if ($or_cond103129) {
    if ($12) {
     var $j_3131=$j_2;var $i_1132=$143;
     while(1) {
      var $i_1132;
      var $j_3131;
      var $163=((($i_1132)+(1))|0);
      var $164=((($j_3131)+(1))|0);
      var $165=($163>>>0)<=($6>>>0);
      var $166=($164>>>0)<($samples>>>0);
      var $or_cond103=$165&$166;
      if ($or_cond103) {
       var $j_3131=$164;var $i_1132=$163;
      } else {
       var $k_3_lcssa=$k_2;var $j_3_lcssa=$164;var $i_1_lcssa=$163;var $_lcssa128=$166;var $167=$141;
       break L7594;
      }
     }
    } else {
     var $k_3130_us=$k_2;var $j_3131_us=$j_2;var $i_1132_us=$143;
    }
    while(1) {
     var $i_1132_us;
     var $j_3131_us;
     var $k_3130_us;
     var $channel_0124_us=0;var $k_4125_us=$k_3130_us;
     while(1) {
      var $k_4125_us;
      var $channel_0124_us;
      var $153=(($buffer+($k_4125_us<<2))|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=HEAP32[(($11)>>2)];
      var $156=(($155+4+($channel_0124_us<<2))|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157+($i_1132_us<<2))|0);
      HEAP32[(($158)>>2)]=$154;
      var $159=((($channel_0124_us)+(1))|0);
      var $160=($159>>>0)<($4>>>0);
      if (!($160)) {
       break;
      }
      var $161=((($k_4125_us)+(1))|0);
      var $channel_0124_us=$159;var $k_4125_us=$161;
     }
     var $147=((($4)+($k_3130_us))|0);
     var $148=((($i_1132_us)+(1))|0);
     var $149=((($j_3131_us)+(1))|0);
     var $150=($148>>>0)<=($6>>>0);
     var $151=($149>>>0)<($samples>>>0);
     var $or_cond103_us=$150&$151;
     if ($or_cond103_us) {
      var $k_3130_us=$147;var $j_3131_us=$149;var $i_1132_us=$148;
     } else {
      break;
     }
    }
    var $_pre158_pre=HEAP32[(($11)>>2)];
    var $k_3_lcssa=$147;var $j_3_lcssa=$149;var $i_1_lcssa=$148;var $_lcssa128=$151;var $167=$_pre158_pre;
   } else {
    var $k_3_lcssa=$k_2;var $j_3_lcssa=$j_2;var $i_1_lcssa=$143;var $_lcssa128=$145;var $167=$141;
   }
  } while(0);
  var $167;
  var $_lcssa128;
  var $i_1_lcssa;
  var $j_3_lcssa;
  var $k_3_lcssa;
  var $168=(($167+7052)|0);
  HEAP32[(($168)>>2)]=$i_1_lcssa;
  var $169=($i_1_lcssa>>>0)>($6>>>0);
  if ($169) {
   var $171=_process_frame_($encoder,0);
   var $172=($171|0)==0;
   if ($172) {
    var $_0=0;
    label = 5729;
    break;
   }
   var $173=HEAP32[(($11)>>2)];
   if ($12) {
    var $_lcssa138=$173;
   } else {
    var $channel_1139=0;var $174=$173;
    while(1) {
     var $174;
     var $channel_1139;
     var $175=(($174+4+($channel_1139<<2))|0);
     var $176=HEAP32[(($175)>>2)];
     var $177=(($176+($6<<2))|0);
     var $178=HEAP32[(($177)>>2)];
     HEAP32[(($176)>>2)]=$178;
     var $179=((($channel_1139)+(1))|0);
     var $180=($179>>>0)<($4>>>0);
     var $181=HEAP32[(($11)>>2)];
     if ($180) {
      var $channel_1139=$179;var $174=$181;
     } else {
      var $_lcssa138=$181;
      break;
     }
    }
   }
   var $_lcssa138;
   var $182=(($_lcssa138+7052)|0);
   HEAP32[(($182)>>2)]=1;
  }
  if (!($_lcssa128)) {
   var $_0=1;
   label = 5731;
   break;
  }
  var $_pre164=HEAP32[(($1)>>2)];
  var $j_2=$j_3_lcssa;var $k_2=$k_3_lcssa;var $111=$_pre164;
 }
 if (label == 5729) {
  var $_0;
  return $_0;
 }
 else if (label == 5731) {
  var $_0;
  return $_0;
 }
}
function _write_bitbuffer_($encoder,$samples){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 var $output_position_i=sp;
 var $buffer=(sp)+(8);
 var $bytes=(sp)+(16);
 var $1=(($encoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+6856)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_FLAC__bitwriter_get_buffer($4,$buffer,$bytes);
 var $6=($5|0)==0;
 var $7=(($encoder)|0);
 var $8=HEAP32[(($7)>>2)];
 if ($6) {
  var $10=(($8)|0);
  HEAP32[(($10)>>2)]=8;
  var $_0=0;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $12=(($8+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 do {
  if (!($14)) {
   var $16=HEAP32[(($buffer)>>2)];
   var $17=HEAP32[(($1)>>2)];
   var $18=(($17+11796)|0);
   HEAP32[(($18)>>2)]=$16;
   var $19=HEAP32[(($bytes)>>2)];
   var $20=HEAP32[(($1)>>2)];
   var $21=(($20+11804)|0);
   HEAP32[(($21)>>2)]=$19;
   var $22=HEAP32[(($1)>>2)];
   var $23=(($22+11748)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=($24|0)==0;
   if ($25) {
    var $27=(($22+11752)|0);
    HEAP32[(($27)>>2)]=1;
    break;
   }
   var $29=(($22+11744)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=_FLAC__stream_decoder_process_single($30);
   var $32=($31|0)==0;
   if (!($32)) {
    break;
   }
   var $34=HEAP32[(($1)>>2)];
   var $35=(($34+6856)|0);
   var $36=HEAP32[(($35)>>2)];
   _FLAC__bitwriter_release_buffer($36);
   var $37=HEAP32[(($1)>>2)];
   var $38=(($37+6856)|0);
   var $39=HEAP32[(($38)>>2)];
   _FLAC__bitwriter_clear($39);
   var $40=HEAP32[(($7)>>2)];
   var $41=(($40)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=($42|0)==4;
   if ($43) {
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   HEAP32[(($41)>>2)]=3;
   var $_0=0;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $46=HEAP32[(($buffer)>>2)];
 var $47=HEAP32[(($bytes)>>2)];
 var $48=$output_position_i;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($output_position_i)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($output_position_i+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $49=HEAP32[(($1)>>2)];
 var $50=(($49+7264)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)==0;
 do {
  if ($52) {
   label = 5744;
  } else {
   var $54=(($49+7280)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=FUNCTION_TABLE[$51]($encoder,$output_position_i,$55);
   var $57=($56|0)==1;
   if (!($57)) {
    label = 5744;
    break;
   }
   var $58=HEAP32[(($7)>>2)];
   var $59=(($58)|0);
   HEAP32[(($59)>>2)]=5;
   var $60=HEAP32[(($1)>>2)];
   var $61=(($60+6856)|0);
   var $62=HEAP32[(($61)>>2)];
   _FLAC__bitwriter_release_buffer($62);
   var $63=HEAP32[(($1)>>2)];
   var $64=(($63+6856)|0);
   var $65=HEAP32[(($64)>>2)];
   _FLAC__bitwriter_clear($65);
  }
 } while(0);
 do {
  if (label == 5744) {
   var $67=($samples|0)==0;
   do {
    if ($67) {
     var $69=HEAP8[($46)];
     var $70=($69&255);
     var $71=$70&127;
     if (($71|0)==0) {
      var $ld$3$0=(($output_position_i)|0);
      var $73$0=HEAP32[(($ld$3$0)>>2)];
      var $ld$4$1=(($output_position_i+4)|0);
      var $73$1=HEAP32[(($ld$4$1)>>2)];
      var $74=HEAP32[(($7)>>2)];
      var $75=(($74+352)|0);
      var $st$5$0=(($75)|0);
      HEAP32[(($st$5$0)>>2)]=$73$0;
      var $st$6$1=(($75+4)|0);
      HEAP32[(($st$6$1)>>2)]=$73$1;
      break;
     } else if (!(($71|0)==3)) {
      break;
     }
     var $77=HEAP32[(($7)>>2)];
     var $78=(($77+360)|0);
     var $ld$7$0=(($78)|0);
     var $79$0=HEAP32[(($ld$7$0)>>2)];
     var $ld$8$1=(($78+4)|0);
     var $79$1=HEAP32[(($ld$8$1)>>2)];
     var $$etemp$9$0=0;
     var $$etemp$9$1=0;
     var $80=(($79$0|0) == ($$etemp$9$0|0)) & (($79$1|0) == ($$etemp$9$1|0));
     if (!($80)) {
      break;
     }
     var $ld$10$0=(($output_position_i)|0);
     var $82$0=HEAP32[(($ld$10$0)>>2)];
     var $ld$11$1=(($output_position_i+4)|0);
     var $82$1=HEAP32[(($ld$11$1)>>2)];
     var $st$12$0=(($78)|0);
     HEAP32[(($st$12$0)>>2)]=$82$0;
     var $st$13$1=(($78+4)|0);
     HEAP32[(($st$13$1)>>2)]=$82$1;
    }
   } while(0);
   var $83=HEAP32[(($1)>>2)];
   var $84=(($83+7048)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=($85|0)==0;
   L7647: do {
    if ($86) {
     var $150=$83;
    } else {
     var $88=HEAP32[(($7)>>2)];
     var $89=(($88+368)|0);
     var $ld$14$0=(($89)|0);
     var $90$0=HEAP32[(($ld$14$0)>>2)];
     var $ld$15$1=(($89+4)|0);
     var $90$1=HEAP32[(($ld$15$1)>>2)];
     var $$etemp$16$0=0;
     var $$etemp$16$1=0;
     var $91=(($90$0|0) == ($$etemp$16$0|0)) & (($90$1|0) == ($$etemp$16$1|0));
     if ($91) {
      var $150=$83;
      break;
     }
     var $93=(($85)|0);
     var $94=HEAP32[(($93)>>2)];
     var $95=($94|0)==0;
     if ($95) {
      var $150=$83;
      break;
     }
     var $97=(($88+36)|0);
     var $98=HEAP32[(($97)>>2)];
     var $99=(($83+7304)|0);
     var $ld$17$0=(($99)|0);
     var $100$0=HEAP32[(($ld$17$0)>>2)];
     var $ld$18$1=(($99+4)|0);
     var $100$1=HEAP32[(($ld$18$1)>>2)];
     var $101$0=$98;
     var $101$1=0;
     var $$etemp$19$0=-1;
     var $$etemp$19$1=-1;
     var $102$0=_i64Add($101$0,$101$1,$$etemp$19$0,$$etemp$19$1);var $102$1=tempRet0;
     var $103$0=_i64Add($102$0,$102$1,$100$0,$100$1);var $103$1=tempRet0;
     var $104=(($83+7284)|0);
     var $105=HEAP32[(($104)>>2)];
     var $106=($105>>>0)<($94>>>0);
     if ($106) {
      var $i_01_i=$105;var $108=$83;var $107=$85;
     } else {
      var $150=$83;
      break;
     }
     while(1) {
      var $107;
      var $108;
      var $i_01_i;
      var $109=(($107+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+((($i_01_i)*(24))&-1))|0);
      var $ld$20$0=(($111)|0);
      var $112$0=HEAP32[(($ld$20$0)>>2)];
      var $ld$21$1=(($111+4)|0);
      var $112$1=HEAP32[(($ld$21$1)>>2)];
      var $113=(($112$1>>>0) > ($103$1>>>0)) | (((($112$1>>>0) == ($103$1>>>0) & ($112$0>>>0) >  ($103$0>>>0))));
      if ($113) {
       var $150=$108;
       break L7647;
      }
      var $115=(($112$1>>>0) < ($100$1>>>0)) | (((($112$1>>>0) == ($100$1>>>0) & ($112$0>>>0) <  ($100$0>>>0))));
      if ($115) {
       var $139=(($108+7284)|0);
       var $140=HEAP32[(($139)>>2)];
       var $141=((($140)+(1))|0);
       HEAP32[(($139)>>2)]=$141;
      } else {
       var $st$22$0=(($111)|0);
       HEAP32[(($st$22$0)>>2)]=$100$0;
       var $st$23$1=(($111+4)|0);
       HEAP32[(($st$23$1)>>2)]=$100$1;
       var $ld$24$0=(($output_position_i)|0);
       var $117$0=HEAP32[(($ld$24$0)>>2)];
       var $ld$25$1=(($output_position_i+4)|0);
       var $117$1=HEAP32[(($ld$25$1)>>2)];
       var $118=HEAP32[(($7)>>2)];
       var $119=(($118+368)|0);
       var $ld$26$0=(($119)|0);
       var $120$0=HEAP32[(($ld$26$0)>>2)];
       var $ld$27$1=(($119+4)|0);
       var $120$1=HEAP32[(($ld$27$1)>>2)];
       var $121$0=_i64Subtract($117$0,$117$1,$120$0,$120$1);var $121$1=tempRet0;
       var $122=HEAP32[(($1)>>2)];
       var $123=(($122+7048)|0);
       var $124=HEAP32[(($123)>>2)];
       var $125=(($124+4)|0);
       var $126=HEAP32[(($125)>>2)];
       var $127=(($126+((($i_01_i)*(24))&-1)+8)|0);
       var $st$28$0=(($127)|0);
       HEAP32[(($st$28$0)>>2)]=$121$0;
       var $st$29$1=(($127+4)|0);
       HEAP32[(($st$29$1)>>2)]=$121$1;
       var $128=HEAP32[(($1)>>2)];
       var $129=(($128+7048)|0);
       var $130=HEAP32[(($129)>>2)];
       var $131=(($130+4)|0);
       var $132=HEAP32[(($131)>>2)];
       var $133=(($132+((($i_01_i)*(24))&-1)+16)|0);
       HEAP32[(($133)>>2)]=$98;
       var $134=HEAP32[(($1)>>2)];
       var $135=(($134+7284)|0);
       var $136=HEAP32[(($135)>>2)];
       var $137=((($136)+(1))|0);
       HEAP32[(($135)>>2)]=$137;
      }
      var $143=((($i_01_i)+(1))|0);
      var $144=HEAP32[(($1)>>2)];
      var $145=(($144+7048)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=($143>>>0)<($148>>>0);
      if ($149) {
       var $i_01_i=$143;var $108=$144;var $107=$146;
      } else {
       var $150=$144;
       break;
      }
     }
    }
   } while(0);
   var $150;
   var $151=(($150+7268)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=(($150+7056)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($150+7280)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=FUNCTION_TABLE[$152]($encoder,$46,$47,$samples,$154,$156);
   var $158=($157|0)==0;
   if (!($158)) {
    var $182=HEAP32[(($7)>>2)];
    var $183=(($182)|0);
    HEAP32[(($183)>>2)]=5;
    var $184=HEAP32[(($1)>>2)];
    var $185=(($184+6856)|0);
    var $186=HEAP32[(($185)>>2)];
    _FLAC__bitwriter_release_buffer($186);
    var $187=HEAP32[(($1)>>2)];
    var $188=(($187+6856)|0);
    var $189=HEAP32[(($188)>>2)];
    _FLAC__bitwriter_clear($189);
    break;
   }
   var $159$0=$47;
   var $159$1=0;
   var $160=HEAP32[(($1)>>2)];
   var $161=(($160+7296)|0);
   var $ld$30$0=(($161)|0);
   var $162$0=HEAP32[(($ld$30$0)>>2)];
   var $ld$31$1=(($161+4)|0);
   var $162$1=HEAP32[(($ld$31$1)>>2)];
   var $163$0=_i64Add($162$0,$162$1,$159$0,$159$1);var $163$1=tempRet0;
   var $st$32$0=(($161)|0);
   HEAP32[(($st$32$0)>>2)]=$163$0;
   var $st$33$1=(($161+4)|0);
   HEAP32[(($st$33$1)>>2)]=$163$1;
   var $164$0=$samples;
   var $164$1=0;
   var $165=HEAP32[(($1)>>2)];
   var $166=(($165+7304)|0);
   var $ld$34$0=(($166)|0);
   var $167$0=HEAP32[(($ld$34$0)>>2)];
   var $ld$35$1=(($166+4)|0);
   var $167$1=HEAP32[(($ld$35$1)>>2)];
   var $168$0=_i64Add($167$0,$167$1,$164$0,$164$1);var $168$1=tempRet0;
   var $st$36$0=(($166)|0);
   HEAP32[(($st$36$0)>>2)]=$168$0;
   var $st$37$1=(($166+4)|0);
   HEAP32[(($st$37$1)>>2)]=$168$1;
   var $169=HEAP32[(($1)>>2)];
   var $170=(($169+7312)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($169+7056)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=((($173)+(1))|0);
   var $175=($171>>>0)>($174>>>0);
   var $__i=$175?$171:$174;
   HEAP32[(($170)>>2)]=$__i;
   var $176=HEAP32[(($1)>>2)];
   var $177=(($176+6856)|0);
   var $178=HEAP32[(($177)>>2)];
   _FLAC__bitwriter_release_buffer($178);
   var $179=HEAP32[(($1)>>2)];
   var $180=(($179+6856)|0);
   var $181=HEAP32[(($180)>>2)];
   _FLAC__bitwriter_clear($181);
   if ($67) {
    var $_0=1;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $194=HEAP32[(($bytes)>>2)];
   var $195=HEAP32[(($1)>>2)];
   var $196=(($195+6896)|0);
   var $197=$196;
   var $198=HEAP32[(($197)>>2)];
   var $199=($194>>>0)<($198>>>0);
   var $_=$199?$194:$198;
   HEAP32[(($197)>>2)]=$_;
   var $200=HEAP32[(($bytes)>>2)];
   var $201=HEAP32[(($1)>>2)];
   var $202=(($201+6900)|0);
   var $203=$202;
   var $204=HEAP32[(($203)>>2)];
   var $205=($200>>>0)>($204>>>0);
   var $206=$205?$200:$204;
   HEAP32[(($203)>>2)]=$206;
   var $_0=1;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $191=HEAP32[(($7)>>2)];
 var $192=(($191)|0);
 HEAP32[(($192)>>2)]=5;
 var $_0=0;
 var $_0;
 STACKTOP=sp;return $_0;
}
function _process_subframe_($encoder,$min_partition_order,$max_partition_order,$frame_header,$subframe_bps,$integer_signal,$subframe,$partitioned_rice_contents,$residual,$best_subframe,$best_bits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+560)|0;
 var $qlp_coeff_i=sp;
 var $quantization_i=(sp)+(128);
 var $fixed_residual_bits_per_sample=(sp)+(136);
 var $autoc=(sp)+(160);
 var $lpc_error=(sp)+(296);
 var $max_lpc_order=(sp)+(552);
 var $1=(($encoder)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+28)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4>>>0)>16;
 var $6=HEAP32[((10536)>>2)];
 var $7=HEAP32[((10520)>>2)];
 var $8=$5?$6:$7;
 var $9=(($encoder+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+7252)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)!=0;
 var $_phi_trans_insert55=(($frame_header)|0);
 var $_pre56=HEAP32[(($_phi_trans_insert55)>>2)];
 var $14=($_pre56>>>0)>3;
 var $or_cond68=$13&$14;
 var $15=(($frame_header)|0);
 if ($or_cond68) {
  var $32=$_pre56;var $_best_bits_063=-1;var $31=$15;
  label = 5772;
 } else {
  var $16=HEAP32[(($subframe)>>2)];
  var $17=(($16)|0);
  HEAP32[(($17)>>2)]=1;
  var $18=(($16+4)|0);
  var $signal_c_i9=$integer_signal;
  HEAP32[(($18)>>2)]=$signal_c_i9;
  var $19=HEAP32[((9808)>>2)];
  var $20=HEAP32[((9840)>>2)];
  var $21=HEAP32[((9816)>>2)];
  var $22=(($16+288)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=(Math_imul($_pre56,$subframe_bps)|0);
  var $25=((($19)+($24))|0);
  var $26=((($25)+($20))|0);
  var $27=((($26)+($21))|0);
  var $28=((($27)+($23))|0);
  var $_pre=HEAP32[(($15)>>2)];
  var $29=(($frame_header)|0);
  var $30=($_pre>>>0)>3;
  if ($30) {
   var $32=$_pre;var $_best_bits_063=$28;var $31=$29;
   label = 5772;
  } else {
   var $_best_subframe_9=0;var $_best_bits_10=$28;var $343=$29;
  }
 }
 L7671: do {
  if (label == 5772) {
   var $31;
   var $_best_bits_063;
   var $32;
   var $33=HEAP32[(($9)>>2)];
   var $34=(($33+7212)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($integer_signal+16)|0);
   var $37=((($32)-(4))|0);
   var $38=(($fixed_residual_bits_per_sample)|0);
   var $39=FUNCTION_TABLE[$35]($36,$37,$38);
   var $40=HEAP32[(($9)>>2)];
   var $41=(($40+7244)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=($42|0)==0;
   L7673: do {
    if ($43) {
     var $45=(($fixed_residual_bits_per_sample+4)|0);
     var $46=HEAPF32[(($45)>>2)];
     var $47=$46==0;
     if (!($47)) {
      break;
     }
     var $48=HEAP32[(($31)>>2)];
     var $49=HEAP32[(($integer_signal)>>2)];
     var $i_0=1;
     while(1) {
      var $i_0;
      var $51=($i_0>>>0)<($48>>>0);
      if (!($51)) {
       break;
      }
      var $53=(($integer_signal+($i_0<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=($49|0)==($54|0);
      var $56=((($i_0)+(1))|0);
      if ($55) {
       var $i_0=$56;
      } else {
       break L7673;
      }
     }
     var $57=(($subframe+4)|0);
     var $58=HEAP32[(($57)>>2)];
     var $59=(($58)|0);
     HEAP32[(($59)>>2)]=0;
     var $60=(($58+4)|0);
     HEAP32[(($60)>>2)]=$49;
     var $61=HEAP32[((9808)>>2)];
     var $62=HEAP32[((9840)>>2)];
     var $63=HEAP32[((9816)>>2)];
     var $64=(($58+288)|0);
     var $65=HEAP32[(($64)>>2)];
     var $66=((($61)+($subframe_bps))|0);
     var $67=((($66)+($62))|0);
     var $68=((($67)+($63))|0);
     var $69=((($68)+($65))|0);
     var $70=($69>>>0)<($_best_bits_063>>>0);
     var $__best_bits_0=$70?$69:$_best_bits_063;
     var $_8=($70&1);
     var $_best_subframe_9=$_8;var $_best_bits_10=$__best_bits_0;var $343=$31;
     break L7671;
    }
   } while(0);
   var $71=(($40+7248)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=($72|0)==0;
   var $_pre57=HEAP32[(($1)>>2)];
   if ($73) {
    label = 5780;
   } else {
    var $75=(($_pre57+300)|0);
    var $76=HEAP32[(($75)>>2)];
    var $77=($76|0)==0;
    var $78=($_best_bits_063|0)==-1;
    var $or_cond=$77&$78;
    if ($or_cond) {
     label = 5780;
    } else {
     var $_best_subframe_2=0;var $_best_bits_3=$_best_bits_063;var $153=$_pre57;var $152=$76;
    }
   }
   if (label == 5780) {
    var $79=(($_pre57+312)|0);
    var $80=HEAP32[(($79)>>2)];
    var $81=($80|0)==0;
    var $_=$81?$39:0;
    var $_3=$81?$39:4;
    var $82=HEAP32[(($31)>>2)];
    var $83=($_3>>>0)<($82>>>0);
    var $84=((($82)-(1))|0);
    var $max_fixed_order_1=$83?$_3:$84;
    var $85=($_>>>0)>($max_fixed_order_1>>>0);
    if ($85) {
     var $_best_bits_1_lcssa=$_best_bits_063;var $_best_subframe_0_lcssa=0;var $_pre46=$_pre57;
    } else {
     var $86=($subframe_bps>>>0);
     var $87=((($8)-(1))|0);
     var $88=HEAP32[((9808)>>2)];
     var $89=HEAP32[((9840)>>2)];
     var $90=HEAP32[((9816)>>2)];
     var $fixed_order_035=$_;var $_best_bits_137=$_best_bits_063;var $_best_subframe_038=0;
     while(1) {
      var $_best_subframe_038;
      var $_best_bits_137;
      var $fixed_order_035;
      var $92=(($fixed_residual_bits_per_sample+($fixed_order_035<<2))|0);
      var $93=HEAPF32[(($92)>>2)];
      var $94=$93<$86;
      if ($94) {
       var $96=$93>0;
       if ($96) {
        var $98=$93;
        var $99=($98)+((0.5));
        var $100=($99>=0 ? Math_floor($99) : Math_ceil($99));
        var $phitmp1=((($100)+(1))|0);
        var $101=$phitmp1;
       } else {
        var $101=1;
       }
       var $101;
       var $102=($101>>>0)<($8>>>0);
       var $_4=$102?$101:$87;
       var $103=($_best_subframe_038|0)==0;
       var $104=($103&1);
       var $105=(($residual+($104<<2))|0);
       var $106=HEAP32[(($105)>>2)];
       var $107=HEAP32[(($9)>>2)];
       var $108=(($107+6848)|0);
       var $109=HEAP32[(($108)>>2)];
       var $110=(($107+6852)|0);
       var $111=HEAP32[(($110)>>2)];
       var $112=HEAP32[(($31)>>2)];
       var $113=HEAP32[(($1)>>2)];
       var $114=(($113+316)|0);
       var $115=HEAP32[(($114)>>2)];
       var $116=(($subframe+($104<<2))|0);
       var $117=HEAP32[(($116)>>2)];
       var $118=(($partitioned_rice_contents+($104<<2))|0);
       var $119=HEAP32[(($118)>>2)];
       var $120=((($112)-($fixed_order_035))|0);
       var $121=(($integer_signal+($fixed_order_035<<2))|0);
       _FLAC__fixed_compute_residual($121,$120,$fixed_order_035,$106);
       var $122=(($117)|0);
       HEAP32[(($122)>>2)]=2;
       var $123=(($117+4)|0);
       var $124=(($123)|0);
       var $125=(($123)|0);
       HEAP32[(($125)>>2)]=0;
       var $126=(($117+12)|0);
       HEAP32[(($126)>>2)]=$119;
       var $127=(($117+36)|0);
       var $residual_c_i=$106;
       HEAP32[(($127)>>2)]=$residual_c_i;
       var $128=HEAP32[(($9)>>2)];
       var $129=_find_best_partition_order_($128,$106,$109,$111,$120,$fixed_order_035,$_4,$8,$min_partition_order,$max_partition_order,$subframe_bps,$115,$124);
       var $130=(($117+16)|0);
       HEAP32[(($130)>>2)]=$fixed_order_035;
       var $131=($fixed_order_035|0)==0;
       if (!($131)) {
        var $132=(($117+20)|0);
        var $i_01_i11=0;
        while(1) {
         var $i_01_i11;
         var $134=(($integer_signal+($i_01_i11<<2))|0);
         var $135=HEAP32[(($134)>>2)];
         var $136=(($132+($i_01_i11<<2))|0);
         HEAP32[(($136)>>2)]=$135;
         var $137=((($i_01_i11)+(1))|0);
         var $138=($137>>>0)<($fixed_order_035>>>0);
         if ($138) {
          var $i_01_i11=$137;
         } else {
          break;
         }
        }
       }
       var $139=(($117+288)|0);
       var $140=HEAP32[(($139)>>2)];
       var $141=(Math_imul($fixed_order_035,$subframe_bps)|0);
       var $142=((($129)+($141))|0);
       var $143=((($142)+($88))|0);
       var $144=((($143)+($89))|0);
       var $145=((($144)+($90))|0);
       var $146=((($145)+($140))|0);
       var $147=($146>>>0)<($_best_bits_137>>>0);
       var $__best_bits_1=$147?$146:$_best_bits_137;
       var $__best_subframe_0=$147?$104:$_best_subframe_038;
       var $_best_subframe_1=$__best_subframe_0;var $_best_bits_2=$__best_bits_1;
      } else {
       var $_best_subframe_1=$_best_subframe_038;var $_best_bits_2=$_best_bits_137;
      }
      var $_best_bits_2;
      var $_best_subframe_1;
      var $149=((($fixed_order_035)+(1))|0);
      var $150=($149>>>0)>($max_fixed_order_1>>>0);
      if ($150) {
       break;
      } else {
       var $fixed_order_035=$149;var $_best_bits_137=$_best_bits_2;var $_best_subframe_038=$_best_subframe_1;
      }
     }
     var $_pre46_pre=HEAP32[(($1)>>2)];
     var $_best_bits_1_lcssa=$_best_bits_2;var $_best_subframe_0_lcssa=$_best_subframe_1;var $_pre46=$_pre46_pre;
    }
    var $_pre46;
    var $_best_subframe_0_lcssa;
    var $_best_bits_1_lcssa;
    var $_phi_trans_insert47=(($_pre46+300)|0);
    var $_pre48=HEAP32[(($_phi_trans_insert47)>>2)];
    var $_best_subframe_2=$_best_subframe_0_lcssa;var $_best_bits_3=$_best_bits_1_lcssa;var $153=$_pre46;var $152=$_pre48;
   }
   var $152;
   var $153;
   var $_best_bits_3;
   var $_best_subframe_2;
   var $154=($152|0)==0;
   if ($154) {
    var $_best_subframe_9=$_best_subframe_2;var $_best_bits_10=$_best_bits_3;var $343=$31;
    break;
   }
   var $156=HEAP32[(($31)>>2)];
   var $157=($152>>>0)<($156>>>0);
   var $158=((($156)-(1))|0);
   var $storemerge=$157?$152:$158;
   HEAP32[(($max_lpc_order)>>2)]=$storemerge;
   var $159=($storemerge|0)==0;
   if ($159) {
    var $_best_subframe_9=$_best_subframe_2;var $_best_bits_10=$_best_bits_3;var $343=$31;
    break;
   }
   var $160=(($153+40)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=($161|0)==0;
   if ($162) {
    var $_best_subframe_9=$_best_subframe_2;var $_best_bits_10=$_best_bits_3;var $343=$31;
    break;
   }
   var $163=(($autoc)|0);
   var $164=(($lpc_error)|0);
   var $165=($subframe_bps>>>0);
   var $166=((($8)-(1))|0);
   var $167=$qlp_coeff_i;
   var $168=$quantization_i;
   var $169=($subframe_bps>>>0)<17;
   var $170=(((32)-($subframe_bps))|0);
   var $171=(($qlp_coeff_i)|0);
   var $172=HEAP32[((9808)>>2)];
   var $173=HEAP32[((9840)>>2)];
   var $174=HEAP32[((9816)>>2)];
   var $175=HEAP32[((9864)>>2)];
   var $176=HEAP32[((9856)>>2)];
   var $177=($subframe_bps>>>0)<18;
   var $_best_bits_428=$_best_bits_3;var $_best_subframe_329=$_best_subframe_2;var $a_030=0;var $180=$storemerge;var $179=$156;
   while(1) {
    var $179;
    var $180;
    var $a_030;
    var $_best_subframe_329;
    var $_best_bits_428;
    var $181=HEAP32[(($9)>>2)];
    var $182=(($181+84+($a_030<<2))|0);
    var $183=HEAP32[(($182)>>2)];
    var $184=(($181+212)|0);
    var $185=HEAP32[(($184)>>2)];
    _FLAC__lpc_window_data($integer_signal,$183,$185,$179);
    var $186=HEAP32[(($9)>>2)];
    var $187=(($186+7216)|0);
    var $188=HEAP32[(($187)>>2)];
    var $189=(($186+212)|0);
    var $190=HEAP32[(($189)>>2)];
    var $191=HEAP32[(($31)>>2)];
    var $192=((($180)+(1))|0);
    FUNCTION_TABLE[$188]($190,$191,$192,$163);
    var $193=HEAPF32[(($163)>>2)];
    var $194=$193!=0;
    L7708: do {
     if ($194) {
      var $196=HEAP32[(($9)>>2)];
      var $197=(($196+7620)|0);
      _FLAC__lpc_compute_lp_coefficients($163,$max_lpc_order,$197,$164);
      var $198=HEAP32[(($1)>>2)];
      var $199=(($198+312)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=($200|0)==0;
      var $202=HEAP32[(($max_lpc_order)>>2)];
      if ($201) {
       var $204=HEAP32[(($31)>>2)];
       var $205=(($198+308)|0);
       var $206=HEAP32[(($205)>>2)];
       var $207=($206|0)==0;
       if ($207) {
        var $209=(($198+304)|0);
        var $210=HEAP32[(($209)>>2)];
        var $212=$210;
       } else {
        var $212=5;
       }
       var $212;
       var $213=((($212)+($subframe_bps))|0);
       var $214=_FLAC__lpc_compute_best_order($164,$202,$204,$213);
       HEAP32[(($max_lpc_order)>>2)]=$214;
       var $min_lpc_order_0=$214;var $215=$214;
      } else {
       var $min_lpc_order_0=1;var $215=$202;
      }
      var $215;
      var $min_lpc_order_0;
      var $216=HEAP32[(($31)>>2)];
      var $217=($215>>>0)<($216>>>0);
      if ($217) {
       var $220=$215;
      } else {
       var $219=((($216)-(1))|0);
       HEAP32[(($max_lpc_order)>>2)]=$219;
       var $220=$219;
      }
      var $220;
      var $221=($min_lpc_order_0>>>0)>($220>>>0);
      if ($221) {
       var $_best_subframe_8=$_best_subframe_329;var $_best_bits_9=$_best_bits_428;var $337=$220;
       break;
      } else {
       var $_best_bits_518=$_best_bits_428;var $_best_subframe_419=$_best_subframe_329;var $lpc_order_020=$min_lpc_order_0;var $222=$216;
      }
      while(1) {
       var $222;
       var $lpc_order_020;
       var $_best_subframe_419;
       var $_best_bits_518;
       var $223=((($lpc_order_020)-(1))|0);
       var $224=(($lpc_error+($223<<3))|0);
       var $225=HEAPF64[(($224)>>3)];
       var $226=((($222)-($lpc_order_020))|0);
       var $227=_FLAC__lpc_compute_expected_bits_per_residual_sample($225,$226);
       var $228=$227<$165;
       L7721: do {
        if ($228) {
         var $230=$227>0;
         if ($230) {
          var $232=($227)+((0.5));
          var $233=($232>=0 ? Math_floor($232) : Math_ceil($232));
          var $phitmp=((($233)+(1))|0);
          var $235=$phitmp;
         } else {
          var $235=1;
         }
         var $235;
         var $236=($235>>>0)<($8>>>0);
         var $_5=$236?$235:$166;
         var $237=HEAP32[(($1)>>2)];
         var $238=(($237+308)|0);
         var $239=HEAP32[(($238)>>2)];
         var $240=($239|0)==0;
         do {
          if ($240) {
           var $248=(($237+304)|0);
           var $249=HEAP32[(($248)>>2)];
           var $min_qlp_coeff_precision_0_ph=$249;var $max_qlp_coeff_precision_0_ph=$249;
          } else {
           if (!($177)) {
            var $min_qlp_coeff_precision_0_ph=5;var $max_qlp_coeff_precision_0_ph=15;
            break;
           }
           var $243=((($170)-($lpc_order_020))|0);
           var $244=($243>>>0)<15;
           var $_6=$244?$243:15;
           var $245=($_6>>>0)>5;
           var $246=$245?$_6:5;
           var $min_qlp_coeff_precision_0_ph=5;var $max_qlp_coeff_precision_0_ph=$246;
          }
         } while(0);
         var $max_qlp_coeff_precision_0_ph;
         var $min_qlp_coeff_precision_0_ph;
         var $250=_llvm_ctlz_i32($lpc_order_020,1);
         var $251=$250^31;
         var $252=((($170)-($251))|0);
         var $253=(($integer_signal+($lpc_order_020<<2))|0);
         var $254=($lpc_order_020|0)==0;
         var $qlp_coeff_precision_013=$min_qlp_coeff_precision_0_ph;var $_best_bits_614=$_best_bits_518;var $_best_subframe_515=$_best_subframe_419;var $256=$237;
         while(1) {
          var $256;
          var $_best_subframe_515;
          var $_best_bits_614;
          var $qlp_coeff_precision_013;
          var $257=($_best_subframe_515|0)==0;
          var $258=($257&1);
          var $259=(($residual+($258<<2))|0);
          var $260=HEAP32[(($259)>>2)];
          var $261=HEAP32[(($9)>>2)];
          var $262=(($261+6848)|0);
          var $263=HEAP32[(($262)>>2)];
          var $264=(($261+6852)|0);
          var $265=HEAP32[(($264)>>2)];
          var $266=(($261+7620+($223<<7))|0);
          var $267=HEAP32[(($31)>>2)];
          var $268=(($256+316)|0);
          var $269=HEAP32[(($268)>>2)];
          var $270=(($subframe+($258<<2))|0);
          var $271=HEAP32[(($270)>>2)];
          var $272=(($partitioned_rice_contents+($258<<2))|0);
          var $273=HEAP32[(($272)>>2)];
          var $274=((($267)-($lpc_order_020))|0);
          if ($169) {
           var $276=($252>>>0)>($qlp_coeff_precision_013>>>0);
           var $qlp_coeff_precision__i=$276?$qlp_coeff_precision_013:$252;
           var $_071_i=$qlp_coeff_precision__i;
          } else {
           var $_071_i=$qlp_coeff_precision_013;
          }
          var $_071_i;
          var $278=_FLAC__lpc_quantize_coefficients($266,$lpc_order_020,$_071_i,$171,$quantization_i);
          var $279=($278|0)==0;
          if ($279) {
           var $281=((($_071_i)+($subframe_bps))|0);
           var $282=((($251)+($281))|0);
           var $283=($282>>>0)<33;
           do {
            if ($283) {
             var $285=($_071_i>>>0)<17;
             var $or_cond_i=$169&$285;
             var $286=HEAP32[(($9)>>2)];
             if ($or_cond_i) {
              var $288=(($286+7228)|0);
              var $289=HEAP32[(($288)>>2)];
              var $290=HEAP32[(($quantization_i)>>2)];
              FUNCTION_TABLE[$289]($253,$274,$171,$lpc_order_020,$290,$260);
              break;
             } else {
              var $292=(($286+7220)|0);
              var $293=HEAP32[(($292)>>2)];
              var $294=HEAP32[(($quantization_i)>>2)];
              FUNCTION_TABLE[$293]($253,$274,$171,$lpc_order_020,$294,$260);
              break;
             }
            } else {
             var $296=HEAP32[(($9)>>2)];
             var $297=(($296+7224)|0);
             var $298=HEAP32[(($297)>>2)];
             var $299=HEAP32[(($quantization_i)>>2)];
             FUNCTION_TABLE[$298]($253,$274,$171,$lpc_order_020,$299,$260);
            }
           } while(0);
           var $301=(($271)|0);
           HEAP32[(($301)>>2)]=3;
           var $302=(($271+4)|0);
           var $303=(($302)|0);
           var $304=(($302)|0);
           HEAP32[(($304)>>2)]=0;
           var $305=(($271+12)|0);
           HEAP32[(($305)>>2)]=$273;
           var $306=(($271+284)|0);
           HEAP32[(($306)>>2)]=$260;
           var $307=HEAP32[(($9)>>2)];
           var $308=_find_best_partition_order_($307,$260,$263,$265,$274,$lpc_order_020,$_5,$8,$min_partition_order,$max_partition_order,$subframe_bps,$269,$303);
           var $309=(($271+16)|0);
           HEAP32[(($309)>>2)]=$lpc_order_020;
           var $310=(($271+20)|0);
           HEAP32[(($310)>>2)]=$_071_i;
           var $311=HEAP32[(($quantization_i)>>2)];
           var $312=(($271+24)|0);
           HEAP32[(($312)>>2)]=$311;
           var $313=(($271+28)|0);
           var $314=$313;
           (_memcpy($314, $167, 128)|0);
           if (!($254)) {
            var $i_01_i=0;
            while(1) {
             var $i_01_i;
             var $315=(($integer_signal+($i_01_i<<2))|0);
             var $316=HEAP32[(($315)>>2)];
             var $317=(($271+156+($i_01_i<<2))|0);
             HEAP32[(($317)>>2)]=$316;
             var $318=((($i_01_i)+(1))|0);
             var $319=($318>>>0)<($lpc_order_020>>>0);
             if ($319) {
              var $i_01_i=$318;
             } else {
              break;
             }
            }
           }
           var $320=(($271+288)|0);
           var $321=HEAP32[(($320)>>2)];
           var $322=(Math_imul($281,$lpc_order_020)|0);
           var $323=((($308)+($322))|0);
           var $324=((($323)+($172))|0);
           var $325=((($324)+($173))|0);
           var $326=((($325)+($174))|0);
           var $327=((($326)+($321))|0);
           var $328=((($327)+($175))|0);
           var $329=((($328)+($176))|0);
           var $_0_i=$329;
          } else {
           var $_0_i=0;
          }
          var $_0_i;
          var $330=($_0_i|0)!=0;
          var $331=($_0_i>>>0)<($_best_bits_614>>>0);
          var $or_cond7=$330&$331;
          var $_best_bits_7=$or_cond7?$_0_i:$_best_bits_614;
          var $_best_subframe_6=$or_cond7?$258:$_best_subframe_515;
          var $332=((($qlp_coeff_precision_013)+(1))|0);
          var $333=($332>>>0)>($max_qlp_coeff_precision_0_ph>>>0);
          if ($333) {
           var $_best_subframe_7=$_best_subframe_6;var $_best_bits_8=$_best_bits_7;
           break L7721;
          }
          var $_pre62=HEAP32[(($1)>>2)];
          var $qlp_coeff_precision_013=$332;var $_best_bits_614=$_best_bits_7;var $_best_subframe_515=$_best_subframe_6;var $256=$_pre62;
         }
        } else {
         var $_best_subframe_7=$_best_subframe_419;var $_best_bits_8=$_best_bits_518;
        }
       } while(0);
       var $_best_bits_8;
       var $_best_subframe_7;
       var $334=((($lpc_order_020)+(1))|0);
       var $335=HEAP32[(($max_lpc_order)>>2)];
       var $336=($334>>>0)>($335>>>0);
       if ($336) {
        var $_best_subframe_8=$_best_subframe_7;var $_best_bits_9=$_best_bits_8;var $337=$335;
        break L7708;
       }
       var $_pre61=HEAP32[(($31)>>2)];
       var $_best_bits_518=$_best_bits_8;var $_best_subframe_419=$_best_subframe_7;var $lpc_order_020=$334;var $222=$_pre61;
      }
     } else {
      var $_best_subframe_8=$_best_subframe_329;var $_best_bits_9=$_best_bits_428;var $337=$180;
     }
    } while(0);
    var $337;
    var $_best_bits_9;
    var $_best_subframe_8;
    var $338=((($a_030)+(1))|0);
    var $339=HEAP32[(($1)>>2)];
    var $340=(($339+40)|0);
    var $341=HEAP32[(($340)>>2)];
    var $342=($338>>>0)<($341>>>0);
    if (!($342)) {
     var $_best_subframe_9=$_best_subframe_8;var $_best_bits_10=$_best_bits_9;var $343=$31;
     break L7671;
    }
    var $_pre59=HEAP32[(($31)>>2)];
    var $_best_bits_428=$_best_bits_9;var $_best_subframe_329=$_best_subframe_8;var $a_030=$338;var $180=$337;var $179=$_pre59;
   }
  }
 } while(0);
 var $343;
 var $_best_bits_10;
 var $_best_subframe_9;
 var $344=($_best_bits_10|0)==-1;
 if (!($344)) {
  var $_best_bits_11=$_best_bits_10;
  var $_best_bits_11;
  HEAP32[(($best_subframe)>>2)]=$_best_subframe_9;
  HEAP32[(($best_bits)>>2)]=$_best_bits_11;
  STACKTOP=sp;return;
 }
 var $346=HEAP32[(($343)>>2)];
 var $347=(($subframe+($_best_subframe_9<<2))|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($348)|0);
 HEAP32[(($349)>>2)]=1;
 var $350=(($348+4)|0);
 var $signal_c_i=$integer_signal;
 HEAP32[(($350)>>2)]=$signal_c_i;
 var $351=HEAP32[((9808)>>2)];
 var $352=HEAP32[((9840)>>2)];
 var $353=HEAP32[((9816)>>2)];
 var $354=(($348+288)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(Math_imul($346,$subframe_bps)|0);
 var $357=((($351)+($356))|0);
 var $358=((($357)+($352))|0);
 var $359=((($358)+($353))|0);
 var $360=((($359)+($355))|0);
 var $_best_bits_11=$360;
 var $_best_bits_11;
 HEAP32[(($best_subframe)>>2)]=$_best_subframe_9;
 HEAP32[(($best_bits)>>2)]=$_best_bits_11;
 STACKTOP=sp;return;
}
function _add_subframe_($encoder,$blocksize,$subframe_bps,$subframe,$frame){
 var label=0;
 var $1=(($subframe)|0);
 var $2=HEAP32[(($1)>>2)];
 if (($2|0)==0) {
  var $4=(($subframe+4)|0);
  var $5=$4;
  var $6=(($subframe+288)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=_FLAC__subframe_add_constant($5,$subframe_bps,$7,$frame);
  var $9=($8|0)==0;
  if (!($9)) {
   var $_0=1;
   var $_0;
   return $_0;
  }
  var $11=(($encoder)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12)|0);
  HEAP32[(($13)>>2)]=7;
  var $_0=0;
  var $_0;
  return $_0;
 } else if (($2|0)==1) {
  var $42=(($subframe+4)|0);
  var $43=$42;
  var $44=(($subframe+288)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=_FLAC__subframe_add_verbatim($43,$blocksize,$subframe_bps,$45,$frame);
  var $47=($46|0)==0;
  if (!($47)) {
   var $_0=1;
   var $_0;
   return $_0;
  }
  var $49=(($encoder)|0);
  var $50=HEAP32[(($49)>>2)];
  var $51=(($50)|0);
  HEAP32[(($51)>>2)]=7;
  var $_0=0;
  var $_0;
  return $_0;
 } else if (($2|0)==3) {
  var $29=(($subframe+4)|0);
  var $30=(($subframe+16)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=((($blocksize)-($31))|0);
  var $33=(($subframe+288)|0);
  var $34=HEAP32[(($33)>>2)];
  var $35=_FLAC__subframe_add_lpc($29,$32,$subframe_bps,$34,$frame);
  var $36=($35|0)==0;
  if (!($36)) {
   var $_0=1;
   var $_0;
   return $_0;
  }
  var $38=(($encoder)|0);
  var $39=HEAP32[(($38)>>2)];
  var $40=(($39)|0);
  HEAP32[(($40)>>2)]=7;
  var $_0=0;
  var $_0;
  return $_0;
 } else if (($2|0)==2) {
  var $15=(($subframe+4)|0);
  var $16=$15;
  var $17=(($subframe+16)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=((($blocksize)-($18))|0);
  var $20=(($subframe+288)|0);
  var $21=HEAP32[(($20)>>2)];
  var $22=_FLAC__subframe_add_fixed($16,$19,$subframe_bps,$21,$frame);
  var $23=($22|0)==0;
  if (!($23)) {
   var $_0=1;
   var $_0;
   return $_0;
  }
  var $25=(($encoder)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=(($26)|0);
  HEAP32[(($27)>>2)]=7;
  var $_0=0;
  var $_0;
  return $_0;
 } else {
  var $_0=1;
  var $_0;
  return $_0;
 }
}
function _find_best_partition_order_($private_,$residual,$abs_residual_partition_sums,$raw_bits_per_partition,$residual_samples,$predictor_order,$rice_parameter,$rice_parameter_limit,$min_partition_order,$max_partition_order,$bps,$do_escape_coding,$best_ecm){
 var label=0;
 var $1=((($predictor_order)+($residual_samples))|0);
 var $2=_FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($max_partition_order,$1,$predictor_order);
 var $3=($2>>>0)>($min_partition_order>>>0);
 var $4=$3?$min_partition_order:$2;
 var $5=$1>>>($2>>>0);
 var $6=1<<$2;
 var $7=(((-$predictor_order))|0);
 var $8=_llvm_ctlz_i32($5,1);
 var $9=$8^31;
 var $10=((($9)+($bps))|0);
 var $11=($10>>>0)<32;
 var $12=((($5)-($predictor_order))|0);
 if ($11) {
  var $partition_060_i=0;var $residual_sample_061_i=0;var $end_062_i=$7;var $indvars_iv_i=$12;
  while(1) {
   var $indvars_iv_i;
   var $end_062_i;
   var $residual_sample_061_i;
   var $partition_060_i;
   var $14=((($end_062_i)+($5))|0);
   var $15=($residual_sample_061_i>>>0)<($14>>>0);
   if ($15) {
    var $residual_sample_152_i=$residual_sample_061_i;var $abs_residual_partition_sum_053_i=0;
    while(1) {
     var $abs_residual_partition_sum_053_i;
     var $residual_sample_152_i;
     var $16=(($residual+($residual_sample_152_i<<2))|0);
     var $17=HEAP32[(($16)>>2)];
     var $ispos_i=($17|0)>-1;
     var $neg_i=(((-$17))|0);
     var $18=$ispos_i?$17:$neg_i;
     var $19=((($18)+($abs_residual_partition_sum_053_i))|0);
     var $20=((($residual_sample_152_i)+(1))|0);
     var $21=($20>>>0)<($14>>>0);
     if ($21) {
      var $residual_sample_152_i=$20;var $abs_residual_partition_sum_053_i=$19;
     } else {
      break;
     }
    }
    var $phitmp_i$0=$19;
    var $phitmp_i$1=0;
    var $residual_sample_1_lcssa_i=$indvars_iv_i;var $abs_residual_partition_sum_0_lcssa_i$1=$phitmp_i$1;var $abs_residual_partition_sum_0_lcssa_i$0=$phitmp_i$0;
   } else {
    var $residual_sample_1_lcssa_i=$residual_sample_061_i;var $abs_residual_partition_sum_0_lcssa_i$1=0;var $abs_residual_partition_sum_0_lcssa_i$0=0;
   }
   var $abs_residual_partition_sum_0_lcssa_i$0;
   var $abs_residual_partition_sum_0_lcssa_i$1;
   var $residual_sample_1_lcssa_i;
   var $23=(($abs_residual_partition_sums+($partition_060_i<<3))|0);
   var $st$0$0=(($23)|0);
   HEAP32[(($st$0$0)>>2)]=$abs_residual_partition_sum_0_lcssa_i$0;
   var $st$1$1=(($23+4)|0);
   HEAP32[(($st$1$1)>>2)]=$abs_residual_partition_sum_0_lcssa_i$1;
   var $24=((($partition_060_i)+(1))|0);
   var $25=($24>>>0)<($6>>>0);
   var $indvars_iv_next_i=((($indvars_iv_i)+($5))|0);
   if ($25) {
    var $partition_060_i=$24;var $residual_sample_061_i=$residual_sample_1_lcssa_i;var $end_062_i=$14;var $indvars_iv_i=$indvars_iv_next_i;
   } else {
    break;
   }
  }
 } else {
  var $partition_172_i=0;var $residual_sample_273_i=0;var $end_174_i=$7;var $indvars_iv79_i=$12;
  while(1) {
   var $indvars_iv79_i;
   var $end_174_i;
   var $residual_sample_273_i;
   var $partition_172_i;
   var $26=((($end_174_i)+($5))|0);
   var $27=($residual_sample_273_i>>>0)<($26>>>0);
   if ($27) {
    var $residual_sample_363_i=$residual_sample_273_i;var $abs_residual_partition_sum1_064_i$1=0;var $abs_residual_partition_sum1_064_i$0=0;
    while(1) {
     var $abs_residual_partition_sum1_064_i$0;
     var $abs_residual_partition_sum1_064_i$1;
     var $residual_sample_363_i;
     var $28=(($residual+($residual_sample_363_i<<2))|0);
     var $29=HEAP32[(($28)>>2)];
     var $ispos40_i=($29|0)>-1;
     var $neg41_i=(((-$29))|0);
     var $30=$ispos40_i?$29:$neg41_i;
     var $31$0=$30;
     var $31$1=(((($30|0)<0))|0)?-1:0;
     var $32$0=_i64Add($31$0,$31$1,$abs_residual_partition_sum1_064_i$0,$abs_residual_partition_sum1_064_i$1);var $32$1=tempRet0;
     var $33=((($residual_sample_363_i)+(1))|0);
     var $34=($33>>>0)<($26>>>0);
     if ($34) {
      var $residual_sample_363_i=$33;var $abs_residual_partition_sum1_064_i$1=$32$1;var $abs_residual_partition_sum1_064_i$0=$32$0;
     } else {
      var $residual_sample_3_lcssa_i=$indvars_iv79_i;var $abs_residual_partition_sum1_0_lcssa_i$1=$32$1;var $abs_residual_partition_sum1_0_lcssa_i$0=$32$0;
      break;
     }
    }
   } else {
    var $residual_sample_3_lcssa_i=$residual_sample_273_i;var $abs_residual_partition_sum1_0_lcssa_i$1=0;var $abs_residual_partition_sum1_0_lcssa_i$0=0;
   }
   var $abs_residual_partition_sum1_0_lcssa_i$0;
   var $abs_residual_partition_sum1_0_lcssa_i$1;
   var $residual_sample_3_lcssa_i;
   var $35=(($abs_residual_partition_sums+($partition_172_i<<3))|0);
   var $st$2$0=(($35)|0);
   HEAP32[(($st$2$0)>>2)]=$abs_residual_partition_sum1_0_lcssa_i$0;
   var $st$3$1=(($35+4)|0);
   HEAP32[(($st$3$1)>>2)]=$abs_residual_partition_sum1_0_lcssa_i$1;
   var $36=((($partition_172_i)+(1))|0);
   var $37=($36>>>0)<($6>>>0);
   var $indvars_iv_next80_i=((($indvars_iv79_i)+($5))|0);
   if ($37) {
    var $partition_172_i=$36;var $residual_sample_273_i=$residual_sample_3_lcssa_i;var $end_174_i=$26;var $indvars_iv79_i=$indvars_iv_next80_i;
   } else {
    break;
   }
  }
 }
 var $partition_order_046_i=((($2)-(1))|0);
 var $13=($partition_order_046_i|0)<($4|0);
 if (!($13)) {
  var $partitions_047_i=$6;var $from_partition_048_i=0;var $to_partition_049_i=$6;var $partition_order_050_i=$partition_order_046_i;
  while(1) {
   var $partition_order_050_i;
   var $to_partition_049_i;
   var $from_partition_048_i;
   var $partitions_047_i;
   var $41=$partitions_047_i>>>1;
   var $42=($41|0)==0;
   if ($42) {
    var $from_partition_1_lcssa_i=$from_partition_048_i;var $to_partition_1_lcssa_i=$to_partition_049_i;
   } else {
    var $43=$41<<1;
    var $from_partition_142_i=$from_partition_048_i;var $to_partition_143_i=$to_partition_049_i;var $i_044_i=0;
    while(1) {
     var $i_044_i;
     var $to_partition_143_i;
     var $from_partition_142_i;
     var $45=(($abs_residual_partition_sums+($from_partition_142_i<<3))|0);
     var $ld$4$0=(($45)|0);
     var $46$0=HEAP32[(($ld$4$0)>>2)];
     var $ld$5$1=(($45+4)|0);
     var $46$1=HEAP32[(($ld$5$1)>>2)];
     var $47=((($from_partition_142_i)+(1))|0);
     var $48=(($abs_residual_partition_sums+($47<<3))|0);
     var $ld$6$0=(($48)|0);
     var $49$0=HEAP32[(($ld$6$0)>>2)];
     var $ld$7$1=(($48+4)|0);
     var $49$1=HEAP32[(($ld$7$1)>>2)];
     var $50$0=_i64Add($49$0,$49$1,$46$0,$46$1);var $50$1=tempRet0;
     var $51=((($to_partition_143_i)+(1))|0);
     var $52=(($abs_residual_partition_sums+($to_partition_143_i<<3))|0);
     var $st$8$0=(($52)|0);
     HEAP32[(($st$8$0)>>2)]=$50$0;
     var $st$9$1=(($52+4)|0);
     HEAP32[(($st$9$1)>>2)]=$50$1;
     var $53=((($from_partition_142_i)+(2))|0);
     var $54=((($i_044_i)+(1))|0);
     var $55=($54>>>0)<($41>>>0);
     if ($55) {
      var $from_partition_142_i=$53;var $to_partition_143_i=$51;var $i_044_i=$54;
     } else {
      break;
     }
    }
    var $38=((($43)+($from_partition_048_i))|0);
    var $39=((($41)+($to_partition_049_i))|0);
    var $from_partition_1_lcssa_i=$38;var $to_partition_1_lcssa_i=$39;
   }
   var $to_partition_1_lcssa_i;
   var $from_partition_1_lcssa_i;
   var $partition_order_0_i=((($partition_order_050_i)-(1))|0);
   var $40=($partition_order_0_i|0)<($4|0);
   if ($40) {
    break;
   } else {
    var $partitions_047_i=$41;var $from_partition_048_i=$from_partition_1_lcssa_i;var $to_partition_049_i=$to_partition_1_lcssa_i;var $partition_order_050_i=$partition_order_0_i;
   }
  }
 }
 var $56=($do_escape_coding|0)!=0;
 do {
  if ($56) {
   var $58=($2|0)>-1;
   if ($58) {
    var $partition_049_i=0;var $residual_sample_050_i=0;
    while(1) {
     var $residual_sample_050_i;
     var $partition_049_i;
     var $59=($partition_049_i|0)==0;
     var $60=$59?$predictor_order:0;
     var $__i3=((($5)-($60))|0);
     var $61=($5|0)==($60|0);
     do {
      if ($61) {
       var $74=1;var $residual_sample_1_lcssa52_i=$residual_sample_050_i;
      } else {
       var $partition_sample_042_i=0;var $residual_sample_143_i=$residual_sample_050_i;var $rmax_044_i=0;
       while(1) {
        var $rmax_044_i;
        var $residual_sample_143_i;
        var $partition_sample_042_i;
        var $62=((($residual_sample_143_i)+(1))|0);
        var $63=(($residual+($residual_sample_143_i<<2))|0);
        var $64=HEAP32[(($63)>>2)];
        var $_lobit_i=$64>>31;
        var $_pn_i=$_lobit_i^$64;
        var $rmax_1_i=$_pn_i|$rmax_044_i;
        var $65=((($partition_sample_042_i)+(1))|0);
        var $66=($65>>>0)<($__i3>>>0);
        if ($66) {
         var $partition_sample_042_i=$65;var $residual_sample_143_i=$62;var $rmax_044_i=$rmax_1_i;
        } else {
         break;
        }
       }
       var $68=((($residual_sample_050_i)+($5))|0);
       var $69=((($68)-($60))|0);
       var $70=($rmax_1_i|0)==0;
       if ($70) {
        var $74=1;var $residual_sample_1_lcssa52_i=$69;
        break;
       }
       var $72=_llvm_ctlz_i32($rmax_1_i,1);
       var $73=(((33)-($72))|0);
       var $74=$73;var $residual_sample_1_lcssa52_i=$69;
      }
     } while(0);
     var $residual_sample_1_lcssa52_i;
     var $74;
     var $75=(($raw_bits_per_partition+($partition_049_i<<2))|0);
     HEAP32[(($75)>>2)]=$74;
     var $76=((($partition_049_i)+(1))|0);
     var $77=($76>>>0)<($6>>>0);
     if ($77) {
      var $partition_049_i=$76;var $residual_sample_050_i=$residual_sample_1_lcssa52_i;
     } else {
      var $to_partition_1_ph_i=$6;
      break;
     }
    }
   } else {
    var $to_partition_1_ph_i=0;
   }
   var $to_partition_1_ph_i;
   if ($13) {
    break;
   } else {
    var $to_partition_139_i=$to_partition_1_ph_i;var $from_partition_040_i=0;var $partition_order_041_i=$partition_order_046_i;
   }
   while(1) {
    var $partition_order_041_i;
    var $from_partition_040_i;
    var $to_partition_139_i;
    var $100=1<<$partition_order_041_i;
    var $101=($100>>>0)>1;
    var $umax_i=$101?$100:1;
    var $to_partition_235_i=$to_partition_139_i;var $from_partition_136_i=$from_partition_040_i;var $i_037_i=0;
    while(1) {
     var $i_037_i;
     var $from_partition_136_i;
     var $to_partition_235_i;
     var $103=(($raw_bits_per_partition+($from_partition_136_i<<2))|0);
     var $104=HEAP32[(($103)>>2)];
     var $105=$from_partition_136_i|1;
     var $106=(($raw_bits_per_partition+($105<<2))|0);
     var $107=HEAP32[(($106)>>2)];
     var $108=($104>>>0)>($107>>>0);
     var $_34_i=$108?$104:$107;
     var $109=(($raw_bits_per_partition+($to_partition_235_i<<2))|0);
     HEAP32[(($109)>>2)]=$_34_i;
     var $110=((($from_partition_136_i)+(2))|0);
     var $111=((($to_partition_235_i)+(1))|0);
     var $112=((($i_037_i)+(1))|0);
     var $113=($112>>>0)<($100>>>0);
     if ($113) {
      var $to_partition_235_i=$111;var $from_partition_136_i=$110;var $i_037_i=$112;
     } else {
      break;
     }
    }
    var $78=$umax_i<<1;
    var $79=((($umax_i)+($to_partition_139_i))|0);
    var $80=((($78)+($from_partition_040_i))|0);
    var $partition_order_0_i4=((($partition_order_041_i)-(1))|0);
    var $81=($partition_order_0_i4|0)<($4|0);
    if ($81) {
     break;
    } else {
     var $to_partition_139_i=$79;var $from_partition_040_i=$80;var $partition_order_041_i=$partition_order_0_i4;
    }
   }
  }
 } while(0);
 var $82=($2|0)<($4|0);
 L7827: do {
  if ($82) {
   var $best_residual_bits_0_lcssa=0;var $best_parameters_index_0_lcssa=0;var $best_partition_order_0_lcssa=0;
  } else {
   var $83=HEAP32[((10488)>>2)];
   var $84=HEAP32[((10512)>>2)];
   var $85=((($84)+($83))|0);
   var $86=HEAP32[((10504)>>2)];
   var $87=((($rice_parameter)+(1))|0);
   var $88=(Math_imul($87,$residual_samples)|0);
   var $89=($rice_parameter|0)==0;
   var $90=$residual_samples>>>1;
   var $91=((($88)-($90))|0);
   var $92=((($91)+($86))|0);
   var $93=($do_escape_coding|0)==0;
   var $94=HEAP32[((10528)>>2)];
   var $95=HEAP32[((10496)>>2)];
   var $96=((($95)+($94))|0);
   var $97=((($rice_parameter)-(1))|0);
   var $98$0=$97;
   var $98$1=0;
   var $99=((($rice_parameter_limit)-(1))|0);
   var $best_residual_bits_023=0;var $best_parameters_index_024=0;var $best_partition_order_025=0;var $partition_order_026=$2;var $sum_027=0;
   while(1) {
    var $sum_027;
    var $partition_order_026;
    var $best_partition_order_025;
    var $best_parameters_index_024;
    var $best_residual_bits_023;
    var $115=(($raw_bits_per_partition+($sum_027<<2))|0);
    var $116=($best_parameters_index_024|0)==0;
    var $117=($116&1);
    var $118=(($private_+11716+((($117)*(12))&-1))|0);
    var $119=($partition_order_026>>>0)<6;
    var $120=$119?6:$partition_order_026;
    var $121=_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($118,$120);
    var $122=(($118)|0);
    var $123=HEAP32[(($122)>>2)];
    var $124=(($private_+11716+((($117)*(12))&-1)+4)|0);
    var $125=HEAP32[(($124)>>2)];
    var $126=($partition_order_026|0)==0;
    if ($126) {
     var $127=(($abs_residual_partition_sums+($sum_027<<3))|0);
     var $ld$10$0=(($127)|0);
     var $128$0=HEAP32[(($ld$10$0)>>2)];
     var $ld$11$1=(($127+4)|0);
     var $128$1=HEAP32[(($ld$11$1)>>2)];
     var $129$0=_bitshift64Lshr($128$0,$128$1,$98$0);var $129$1=tempRet0;
     var $130$0=($128$0<<1)|(0>>>31);
     var $130$1=($128$1<<1)|($128$0>>>31);
     var $_sink$0=$89?$130$0:$129$0;
     var $_sink$1=$89?$130$1:$129$1;
     var $extract_t$0=$_sink$0;
     var $extract_t=$extract_t$0;
     var $131=((($92)+($extract_t))|0);
     var $132=($131|0)==-1;
     var $_suggested_rice_parameter_i=$132?0:$rice_parameter;
     do {
      if ($93) {
       var $best_partition_bits_1_i=$131;var $best_rice_parameter_1_i=$_suggested_rice_parameter_i;
      } else {
       var $134=HEAP32[(($115)>>2)];
       var $135=(Math_imul($134,$residual_samples)|0);
       var $136=((($96)+($135))|0);
       var $137=($136>>>0)>($131>>>0);
       if ($137) {
        HEAP32[(($125)>>2)]=0;
        var $best_partition_bits_1_i=$131;var $best_rice_parameter_1_i=$_suggested_rice_parameter_i;
        break;
       } else {
        HEAP32[(($125)>>2)]=$134;
        var $best_partition_bits_1_i=$136;var $best_rice_parameter_1_i=0;
        break;
       }
      }
     } while(0);
     var $best_rice_parameter_1_i;
     var $best_partition_bits_1_i;
     HEAP32[(($123)>>2)]=$best_rice_parameter_1_i;
     var $141=((($best_partition_bits_1_i)+($85))|0);
     var $residual_bits_0_load79_ph=$141;var $_pre_phi=1;
    } else {
     var $143=1<<$partition_order_026;
     var $144=$1>>>($partition_order_026>>>0);
     var $145=($144>>>0)>($predictor_order>>>0);
     if ($145) {
      var $best_rice_parameter_215_us_i=0;var $bits__016_us_i=$85;var $partition_017_us_i=0;
     } else {
      var $best_residual_bits_0_lcssa=$best_residual_bits_023;var $best_parameters_index_0_lcssa=$best_parameters_index_024;var $best_partition_order_0_lcssa=$best_partition_order_025;
      break L7827;
     }
     while(1) {
      var $partition_017_us_i;
      var $bits__016_us_i;
      var $best_rice_parameter_215_us_i;
      var $146=($partition_017_us_i|0)==0;
      var $147=$146?$predictor_order:0;
      var $__i=((($144)-($147))|0);
      var $_sum=((($partition_017_us_i)+($sum_027))|0);
      var $148=(($abs_residual_partition_sums+($_sum<<3))|0);
      var $ld$12$0=(($148)|0);
      var $149$0=HEAP32[(($ld$12$0)>>2)];
      var $ld$13$1=(($148+4)|0);
      var $149$1=HEAP32[(($ld$13$1)>>2)];
      var $150$0=$__i;
      var $150$1=0;
      var $151=(($150$1>>>0) < ($149$1>>>0)) | (((($150$1>>>0) == ($149$1>>>0) & ($150$0>>>0) <  ($149$0>>>0))));
      if ($151) {
       var $rice_parameter_011_us_i=0;var $k_012_us_i$1=$150$1;var $k_012_us_i$0=$150$0;
       while(1) {
        var $k_012_us_i$0;
        var $k_012_us_i$1;
        var $rice_parameter_011_us_i;
        var $181=((($rice_parameter_011_us_i)+(1))|0);
        var $182$0=($k_012_us_i$0<<1)|(0>>>31);
        var $182$1=($k_012_us_i$1<<1)|($k_012_us_i$0>>>31);
        var $183=(($182$1>>>0) < ($149$1>>>0)) | (((($182$1>>>0) == ($149$1>>>0) & ($182$0>>>0) <  ($149$0>>>0))));
        if ($183) {
         var $rice_parameter_011_us_i=$181;var $k_012_us_i$1=$182$1;var $k_012_us_i$0=$182$0;
        } else {
         var $rice_parameter_0_lcssa_us_i=$181;
         break;
        }
       }
      } else {
       var $rice_parameter_0_lcssa_us_i=0;
      }
      var $rice_parameter_0_lcssa_us_i;
      var $152=($rice_parameter_0_lcssa_us_i>>>0)<($rice_parameter_limit>>>0);
      var $rice_parameter_0__us_i=$152?$rice_parameter_0_lcssa_us_i:$99;
      var $153=((($rice_parameter_0__us_i)+(1))|0);
      var $154=(Math_imul($153,$__i)|0);
      var $155=($rice_parameter_0__us_i|0)==0;
      if ($155) {
       var $161$0=($149$0<<1)|(0>>>31);
       var $161$1=($149$1<<1)|($149$0>>>31);
       var $extract_t46$0=$161$0;
       var $extract_t46=$extract_t46$0;
       var $_sink44_off0=$extract_t46;
      } else {
       var $157=((($rice_parameter_0__us_i)-(1))|0);
       var $158$0=$157;
       var $158$1=0;
       var $159$0=_bitshift64Lshr($149$0,$149$1,$158$0);var $159$1=tempRet0;
       var $extract_t45$0=$159$0;
       var $extract_t45=$extract_t45$0;
       var $_sink44_off0=$extract_t45;
      }
      var $_sink44_off0;
      var $162=$__i>>>1;
      var $163=((($86)-($162))|0);
      var $164=((($163)+($154))|0);
      var $165=((($164)+($_sink44_off0))|0);
      var $166=($165|0)==-1;
      var $best_rice_parameter_3_us_i=$166?$best_rice_parameter_215_us_i:$rice_parameter_0__us_i;
      do {
       if ($93) {
        var $best_partition_bits_3_us_i=$165;var $best_rice_parameter_4_us_i=$best_rice_parameter_3_us_i;
       } else {
        var $168=(($raw_bits_per_partition+($_sum<<2))|0);
        var $169=HEAP32[(($168)>>2)];
        var $170=(Math_imul($169,$__i)|0);
        var $171=((($96)+($170))|0);
        var $172=($171>>>0)>($165>>>0);
        var $173=(($125+($partition_017_us_i<<2))|0);
        if ($172) {
         HEAP32[(($173)>>2)]=0;
         var $best_partition_bits_3_us_i=$165;var $best_rice_parameter_4_us_i=$best_rice_parameter_3_us_i;
         break;
        } else {
         HEAP32[(($173)>>2)]=$169;
         var $best_partition_bits_3_us_i=$171;var $best_rice_parameter_4_us_i=0;
         break;
        }
       }
      } while(0);
      var $best_rice_parameter_4_us_i;
      var $best_partition_bits_3_us_i;
      var $177=(($123+($partition_017_us_i<<2))|0);
      HEAP32[(($177)>>2)]=$best_rice_parameter_4_us_i;
      var $178=((($best_partition_bits_3_us_i)+($bits__016_us_i))|0);
      var $179=((($partition_017_us_i)+(1))|0);
      var $180=($179>>>0)<($143>>>0);
      if ($180) {
       var $best_rice_parameter_215_us_i=$best_rice_parameter_4_us_i;var $bits__016_us_i=$178;var $partition_017_us_i=$179;
      } else {
       var $residual_bits_0_load79_ph=$178;var $_pre_phi=$143;
       break;
      }
     }
    }
    var $_pre_phi;
    var $residual_bits_0_load79_ph;
    var $184=((($sum_027)+($_pre_phi))|0);
    var $185=($best_residual_bits_023|0)==0;
    var $186=($residual_bits_0_load79_ph>>>0)<($best_residual_bits_023>>>0);
    var $or_cond=$185|$186;
    var $best_residual_bits_1=$or_cond?$residual_bits_0_load79_ph:$best_residual_bits_023;
    var $best_parameters_index_1=$or_cond?$117:$best_parameters_index_024;
    var $best_partition_order_1=$or_cond?$partition_order_026:$best_partition_order_025;
    var $187=((($partition_order_026)-(1))|0);
    var $188=($187|0)<($4|0);
    if ($188) {
     var $best_residual_bits_0_lcssa=$best_residual_bits_1;var $best_parameters_index_0_lcssa=$best_parameters_index_1;var $best_partition_order_0_lcssa=$best_partition_order_1;
     break;
    } else {
     var $best_residual_bits_023=$best_residual_bits_1;var $best_parameters_index_024=$best_parameters_index_1;var $best_partition_order_025=$best_partition_order_1;var $partition_order_026=$187;var $sum_027=$184;
    }
   }
  }
 } while(0);
 var $best_partition_order_0_lcssa;
 var $best_parameters_index_0_lcssa;
 var $best_residual_bits_0_lcssa;
 var $189=(($best_ecm+4)|0);
 HEAP32[(($189)>>2)]=$best_partition_order_0_lcssa;
 var $190=(($best_ecm+8)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=($best_partition_order_0_lcssa>>>0)<6;
 var $193=$192?6:$best_partition_order_0_lcssa;
 var $194=_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($191,$193);
 var $195=(($191)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=$196;
 var $198=(($private_+11716+((($best_parameters_index_0_lcssa)*(12))&-1))|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=$199;
 var $201=1<<$best_partition_order_0_lcssa;
 var $202=$201<<2;
 (_memcpy($197, $200, $202)|0);
 if ($56) {
  var $204=(($191+4)|0);
  var $205=HEAP32[(($204)>>2)];
  var $206=$205;
  var $207=(($private_+11716+((($best_parameters_index_0_lcssa)*(12))&-1)+4)|0);
  var $208=HEAP32[(($207)>>2)];
  var $209=$208;
  (_memcpy($206, $209, $202)|0);
 }
 var $210=HEAP32[((10520)>>2)];
 var $partition_0=0;
 while(1) {
  var $partition_0;
  var $212=($partition_0>>>0)<($201>>>0);
  if (!($212)) {
   label = 5906;
   break;
  }
  var $214=HEAP32[(($195)>>2)];
  var $215=(($214+($partition_0<<2))|0);
  var $216=HEAP32[(($215)>>2)];
  var $217=($216>>>0)<($210>>>0);
  var $218=((($partition_0)+(1))|0);
  if ($217) {
   var $partition_0=$218;
  } else {
   break;
  }
 }
 if (label == 5906) {
  return $best_residual_bits_0_lcssa;
 }
 var $220=(($best_ecm)|0);
 HEAP32[(($220)>>2)]=1;
 return $best_residual_bits_0_lcssa;
}
function _file_read_callback_214($encoder,$buffer,$bytes,$client_data){
 var label=0;
 var $1=HEAP32[(($bytes)>>2)];
 var $2=(($encoder+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+7288)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_fread($buffer,1,$1,$5);
 HEAP32[(($bytes)>>2)]=$6;
 var $7=($6|0)==0;
 do {
  if ($7) {
   var $9=HEAP32[(($2)>>2)];
   var $10=(($9+7288)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=_feof($11);
   var $13=($12|0)==0;
   if (!($13)) {
    var $_0=1;
    var $_0;
    return $_0;
   }
   var $15=HEAP32[(($2)>>2)];
   var $16=(($15+7288)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=_ferror($17);
   var $19=($18|0)==0;
   if ($19) {
    break;
   } else {
    var $_0=2;
   }
   var $_0;
   return $_0;
  }
 } while(0);
 var $_0=0;
 var $_0;
 return $_0;
}
function _file_write_callback_($encoder,$buffer,$bytes,$samples,$current_frame,$client_data){
 var label=0;
 var $1=(($encoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+7288)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_fwrite($buffer,1,$bytes,$4);
 var $6=($5|0)==($bytes|0);
 if (!($6)) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $8=HEAP32[(($1)>>2)];
 var $9=(($8+7276)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($samples|0)!=0;
 var $not_=($10|0)!=0;
 var $_=$11&$not_;
 if (!($_)) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $13=(($8+7296)|0);
 var $ld$0$0=(($13)|0);
 var $14$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($13+4)|0);
 var $14$1=HEAP32[(($ld$1$1)>>2)];
 var $15$0=$bytes;
 var $15$1=0;
 var $16$0=_i64Add($14$0,$14$1,$15$0,$15$1);var $16$1=tempRet0;
 var $17=(($8+7304)|0);
 var $ld$2$0=(($17)|0);
 var $18$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($17+4)|0);
 var $18$1=HEAP32[(($ld$3$1)>>2)];
 var $19$0=$samples;
 var $19$1=0;
 var $20$0=_i64Add($18$0,$18$1,$19$0,$19$1);var $20$1=tempRet0;
 var $21=(($8+7312)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 var $24=(($8+7316)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($8+7280)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$10]($encoder,$16$0,$16$1,$20$0,$20$1,$23,$25,$27);
 var $_0=0;
 var $_0;
 return $_0;
}
function _file_seek_callback_215($encoder,$absolute_byte_offset$0,$absolute_byte_offset$1,$client_data){
 var label=0;
 var $1=(($encoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+7288)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5$0=$absolute_byte_offset$0;
 var $5=$5$0;
 var $6=_fseek($4,$5,0);
 var $_lobit=$6>>>31;
 return $_lobit;
}
function _file_tell_callback_216($encoder,$absolute_byte_offset,$client_data){
 var label=0;
 var $1=(($encoder+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+7288)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_ftell($4);
 var $6=($5|0)<0;
 if ($6) {
  var $_0=1;
  var $_0;
  return $_0;
 }
 var $8$0=$5;
 var $8$1=(((($5|0)<0))|0)?-1:0;
 var $st$0$0=(($absolute_byte_offset)|0);
 HEAP32[(($st$0$0)>>2)]=$8$0;
 var $st$1$1=(($absolute_byte_offset+4)|0);
 HEAP32[(($st$1$1)>>2)]=$8$1;
 var $_0=0;
 var $_0;
 return $_0;
}
function _verify_read_callback_($decoder,$buffer,$bytes,$client_data){
 var label=0;
 var $1=(($client_data+4)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+11804)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($3+11752)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if (!($8)) {
  HEAP32[(($bytes)>>2)]=4;
  var $10=$buffer;
  var $11=((((HEAPU8[(9872)])|(HEAPU8[(9873)]<<8)|(HEAPU8[(9874)]<<16)|(HEAPU8[(9875)]<<24))|0));
  tempBigInt=$11;HEAP8[($10)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($10)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($10)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($10)+(3))|0)]=tempBigInt&0xff;
  var $12=HEAP32[(($2)>>2)];
  var $13=(($12+11752)|0);
  HEAP32[(($13)>>2)]=0;
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $15=($5|0)==0;
 if ($15) {
  var $_0=2;
  var $_0;
  return $_0;
 }
 var $17=HEAP32[(($bytes)>>2)];
 var $18=($5>>>0)<($17>>>0);
 if ($18) {
  HEAP32[(($bytes)>>2)]=$5;
  var $_pre=HEAP32[(($2)>>2)];
  var $22=$_pre;var $21=$5;
 } else {
  var $22=$3;var $21=$17;
 }
 var $21;
 var $22;
 var $23=(($22+11796)|0);
 var $24=HEAP32[(($23)>>2)];
 (_memcpy($buffer, $24, $21)|0);
 var $25=HEAP32[(($bytes)>>2)];
 var $26=HEAP32[(($2)>>2)];
 var $27=(($26+11796)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+$25)|0);
 HEAP32[(($27)>>2)]=$29;
 var $30=HEAP32[(($bytes)>>2)];
 var $31=HEAP32[(($2)>>2)];
 var $32=(($31+11804)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=((($33)-($30))|0);
 HEAP32[(($32)>>2)]=$34;
 var $_0=0;
 var $_0;
 return $_0;
}
function _verify_write_callback_($decoder,$frame,$buffer,$client_data){
 var label=0;
 var $1=(($frame+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($frame)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4<<2;
 var $6=(($client_data+4)|0);
 var $7=$6;
 var $channel_0=0;
 while(1) {
  var $channel_0;
  var $9=($channel_0>>>0)<($2>>>0);
  if (!($9)) {
   label = 5944;
   break;
  }
  var $11=(($buffer+($channel_0<<2))|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=$12;
  var $14=HEAP32[(($7)>>2)];
  var $15=(($14+11756+($channel_0<<2))|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  var $18=_memcmp($13,$17,$5);
  var $19=($18|0)==0;
  var $20=((($channel_0)+(1))|0);
  if ($19) {
   var $channel_0=$20;
  } else {
   var $i_0=0;
   label = 5941;
   break;
  }
 }
 if (label == 5944) {
  var $53=HEAP32[(($7)>>2)];
  var $54=(($53+11792)|0);
  var $55=HEAP32[(($54)>>2)];
  var $56=((($55)-($4))|0);
  HEAP32[(($54)>>2)]=$56;
  var $57=($2|0)==0;
  if ($57) {
   var $_0=0;
   var $_0;
   return $_0;
  } else {
   var $channel_146=0;
  }
  while(1) {
   var $channel_146;
   var $58=HEAP32[(($7)>>2)];
   var $59=(($58+11756+($channel_146<<2))|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=$60;
   var $62=(($60+($4<<2))|0);
   var $63=$62;
   var $64=(($58+11792)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$65<<2;
   _memmove($61,$63,$66,4,0);
   var $67=((($channel_146)+(1))|0);
   var $68=($67>>>0)<($2>>>0);
   if ($68) {
    var $channel_146=$67;
   } else {
    var $_0=0;
    break;
   }
  }
  var $_0;
  return $_0;
 }
 else if (label == 5941) {
  while(1) {
   label = 0;
   var $i_0;
   var $21=($i_0>>>0)<($4>>>0);
   if (!($21)) {
    var $got_0=0;var $expect_0=0;var $sample_0=0;
    break;
   }
   var $23=(($12+($i_0<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($16+($i_0<<2))|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=($24|0)==($26|0);
   var $28=((($i_0)+(1))|0);
   if ($27) {
    var $i_0=$28;
    label = 5941;
   } else {
    var $got_0=$24;var $expect_0=$26;var $sample_0=$i_0;
    break;
   }
  }
  var $sample_0;
  var $expect_0;
  var $got_0;
  var $30=(($frame+24)|0);
  var $ld$0$0=(($30)|0);
  var $31$0=HEAP32[(($ld$0$0)>>2)];
  var $ld$1$1=(($30+4)|0);
  var $31$1=HEAP32[(($ld$1$1)>>2)];
  var $32$0=$sample_0;
  var $32$1=0;
  var $33$0=_i64Add($31$0,$31$1,$32$0,$32$1);var $33$1=tempRet0;
  var $34=(($14+11808)|0);
  var $st$2$0=(($34)|0);
  HEAP32[(($st$2$0)>>2)]=$33$0;
  var $st$3$1=(($34+4)|0);
  HEAP32[(($st$3$1)>>2)]=$33$1;
  var $ld$4$0=(($30)|0);
  var $35$0=HEAP32[(($ld$4$0)>>2)];
  var $ld$5$1=(($30+4)|0);
  var $35$1=HEAP32[(($ld$5$1)>>2)];
  var $36$0=$4;
  var $36$1=0;
  var $37$0=___udivdi3($35$0,$35$1,$36$0,$36$1);var $37$1=tempRet0;
  var $38$0=$37$0;
  var $38=$38$0;
  var $39=HEAP32[(($7)>>2)];
  var $40=(($39+11816)|0);
  HEAP32[(($40)>>2)]=$38;
  var $41=HEAP32[(($7)>>2)];
  var $42=(($41+11820)|0);
  HEAP32[(($42)>>2)]=$channel_0;
  var $43=HEAP32[(($7)>>2)];
  var $44=(($43+11824)|0);
  HEAP32[(($44)>>2)]=$sample_0;
  var $45=HEAP32[(($7)>>2)];
  var $46=(($45+11828)|0);
  HEAP32[(($46)>>2)]=$expect_0;
  var $47=HEAP32[(($7)>>2)];
  var $48=(($47+11832)|0);
  HEAP32[(($48)>>2)]=$got_0;
  var $49=$client_data;
  var $50=HEAP32[(($49)>>2)];
  var $51=(($50)|0);
  HEAP32[(($51)>>2)]=4;
  var $_0=1;
  var $_0;
  return $_0;
 }
}
function _verify_metadata_callback_($decoder,$metadata,$client_data){
 var label=0;
 return;
}
function _verify_error_callback_($decoder,$status,$client_data){
 var label=0;
 var $1=$client_data;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2)|0);
 HEAP32[(($3)>>2)]=3;
 return;
}
function _FLAC__window_bartlett($window,$L){
 var label=0;
 var $1=((($L)-(1))|0);
 var $2=$L&1;
 var $3=($2|0)==0;
 if ($3) {
  var $8=(((($L|0))/(2))&-1);
  var $9=((($8)-(1))|0);
  var $10=($9|0)<0;
  if ($10) {
   var $n_2_lcssa=0;
  } else {
   var $11=($1|0);
   var $n_231=0;
   while(1) {
    var $n_231;
    var $33=($n_231|0);
    var $34=($33)*(2);
    var $35=($34)/($11);
    var $36=(($window+($n_231<<2))|0);
    HEAPF32[(($36)>>2)]=$35;
    var $37=((($n_231)+(1))|0);
    var $38=($37|0)>($9|0);
    if ($38) {
     var $n_2_lcssa=$8;
     break;
    } else {
     var $n_231=$37;
    }
   }
  }
  var $n_2_lcssa;
  var $30=($n_2_lcssa|0)>($1|0);
  if ($30) {
   return;
  }
  var $31=($1|0);
  var $n_329=$n_2_lcssa;
  while(1) {
   var $n_329;
   var $40=((($1)-($n_329))|0);
   var $41=($40|0);
   var $42=($41)*(2);
   var $43=($42)/($31);
   var $44=(2)-($43);
   var $45=(($window+($n_329<<2))|0);
   HEAPF32[(($45)>>2)]=$44;
   var $46=((($n_329)+(1))|0);
   var $47=($46|0)>($1|0);
   if ($47) {
    break;
   } else {
    var $n_329=$46;
   }
  }
  return;
 }
 var $4=(((($1|0))/(2))&-1);
 var $5=($L|0)<0;
 if ($5) {
  var $n_0_lcssa=0;
 } else {
  var $6=($1|0);
  var $7=($1|0)>1;
  var $n_038=0;
  while(1) {
   var $n_038;
   var $16=($n_038|0);
   var $17=($16)*(2);
   var $18=($17)/($6);
   var $19=(($window+($n_038<<2))|0);
   HEAPF32[(($19)>>2)]=$18;
   var $20=((($n_038)+(1))|0);
   var $21=($20|0)>($4|0);
   if ($21) {
    break;
   } else {
    var $n_038=$20;
   }
  }
  var $_op=((($4)+(1))|0);
  var $12=$7?$_op:1;
  var $n_0_lcssa=$12;
 }
 var $n_0_lcssa;
 var $13=($n_0_lcssa|0)>($1|0);
 if ($13) {
  return;
 }
 var $14=($1|0);
 var $n_135=$n_0_lcssa;
 while(1) {
  var $n_135;
  var $23=($n_135|0);
  var $24=($23)*(2);
  var $25=($24)/($14);
  var $26=(2)-($25);
  var $27=(($window+($n_135<<2))|0);
  HEAPF32[(($27)>>2)]=$26;
  var $28=((($n_135)+(1))|0);
  var $29=($28|0)>($1|0);
  if ($29) {
   break;
  } else {
   var $n_135=$28;
  }
 }
 return;
}
function _FLAC__window_bartlett_hann($window,$L){
 var label=0;
 var $1=($L|0)>0;
 if (!($1)) {
  return;
 }
 var $2=((($L)-(1))|0);
 var $3=($2|0);
 var $n_08=0;
 while(1) {
  var $n_08;
  var $5=($n_08|0);
  var $6=($5)/($3);
  var $7=($6)+((0.5));
  var $8=$7;
  var $fabsf=Math_abs($7);
  var $9=$fabsf;
  var $10=($9)*((0.47999998927116394));
  var $11=((0.6200000047683716))-($10);
  var $12=($8)*((6.283185307179586));
  var $13=Math_cos($12);
  var $14=($13)*((0.3799999952316284));
  var $15=($14)+($11);
  var $16=$15;
  var $17=(($window+($n_08<<2))|0);
  HEAPF32[(($17)>>2)]=$16;
  var $18=((($n_08)+(1))|0);
  var $19=($18|0)<($L|0);
  if ($19) {
   var $n_08=$18;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__window_blackman($window,$L){
 var label=0;
 var $1=($L|0)>0;
 if (!($1)) {
  return;
 }
 var $2=((($L)-(1))|0);
 var $3=($2|0);
 var $n_08=0;
 while(1) {
  var $n_08;
  var $5=($n_08|0);
  var $6=($5)*((6.283185307179586));
  var $7=($6)/($3);
  var $8=Math_cos($7);
  var $9=($8)*((0.5));
  var $10=((0.41999998688697815))-($9);
  var $11=($5)*((12.566370614359172));
  var $12=($11)/($3);
  var $13=Math_cos($12);
  var $14=($13)*((0.07999999821186066));
  var $15=($10)+($14);
  var $16=$15;
  var $17=(($window+($n_08<<2))|0);
  HEAPF32[(($17)>>2)]=$16;
  var $18=((($n_08)+(1))|0);
  var $19=($18|0)<($L|0);
  if ($19) {
   var $n_08=$18;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__window_blackman_harris_4term_92db_sidelobe($window,$L){
 var label=0;
 var $1=((($L)-(1))|0);
 var $2=($1|0)<0;
 if ($2) {
  return;
 }
 var $3=($1|0);
 var $n_010=0;
 while(1) {
  var $n_010;
  var $5=($n_010|0);
  var $6=($5)*((6.283185307179586));
  var $7=($6)/($3);
  var $8=Math_cos($7);
  var $9=($8)*((0.488290011882782));
  var $10=((0.35874998569488525))-($9);
  var $11=($5)*((12.566370614359172));
  var $12=($11)/($3);
  var $13=Math_cos($12);
  var $14=($13)*((0.14127999544143677));
  var $15=($10)+($14);
  var $16=($5)*((18.84955592153876));
  var $17=($16)/($3);
  var $18=Math_cos($17);
  var $19=($18)*((0.011680000461637974));
  var $20=($15)-($19);
  var $21=$20;
  var $22=(($window+($n_010<<2))|0);
  HEAPF32[(($22)>>2)]=$21;
  var $23=((($n_010)+(1))|0);
  var $24=($23|0)>($1|0);
  if ($24) {
   break;
  } else {
   var $n_010=$23;
  }
 }
 return;
}
function _FLAC__window_connes($window,$L){
 var label=0;
 var $1=((($L)-(1))|0);
 var $2=($1|0);
 var $3=($2)*((0.5));
 var $4=($1|0)<0;
 if ($4) {
  return;
 } else {
  var $n_010=0;
 }
 while(1) {
  var $n_010;
  var $5=($n_010|0);
  var $6=($5)-($3);
  var $7=($6)/($3);
  var $8=($7)*($7);
  var $9=(1)-($8);
  var $10=($9)*($9);
  var $11=$10;
  var $12=(($window+($n_010<<2))|0);
  HEAPF32[(($12)>>2)]=$11;
  var $13=((($n_010)+(1))|0);
  var $14=($13|0)>($1|0);
  if ($14) {
   break;
  } else {
   var $n_010=$13;
  }
 }
 return;
}
function _FLAC__window_flattop($window,$L){
 var label=0;
 var $1=($L|0)>0;
 if (!($1)) {
  return;
 }
 var $2=((($L)-(1))|0);
 var $3=($2|0);
 var $n_012=0;
 while(1) {
  var $n_012;
  var $5=($n_012|0);
  var $6=($5)*((6.283185307179586));
  var $7=($6)/($3);
  var $8=Math_cos($7);
  var $9=($8)*((1.9299999475479126));
  var $10=(1)-($9);
  var $11=($5)*((12.566370614359172));
  var $12=($11)/($3);
  var $13=Math_cos($12);
  var $14=($13)*((1.2899999618530273));
  var $15=($10)+($14);
  var $16=($5)*((18.84955592153876));
  var $17=($16)/($3);
  var $18=Math_cos($17);
  var $19=($18)*((0.3880000114440918));
  var $20=($15)-($19);
  var $21=($5)*((25.132741228718345));
  var $22=($21)/($3);
  var $23=Math_cos($22);
  var $24=($23)*((0.03220000118017197));
  var $25=($20)+($24);
  var $26=$25;
  var $27=(($window+($n_012<<2))|0);
  HEAPF32[(($27)>>2)]=$26;
  var $28=((($n_012)+(1))|0);
  var $29=($28|0)<($L|0);
  if ($29) {
   var $n_012=$28;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__window_gauss($window,$L,$stddev){
 var label=0;
 var $1=((($L)-(1))|0);
 var $2=($1|0);
 var $3=($2)*((0.5));
 var $4=($1|0)<0;
 if ($4) {
  return;
 }
 var $5=$stddev;
 var $6=($5)*($3);
 var $n_09=0;
 while(1) {
  var $n_09;
  var $8=($n_09|0);
  var $9=($8)-($3);
  var $10=($9)/($6);
  var $11=($10)*((-0.5));
  var $12=($10)*($11);
  var $13=Math_exp($12);
  var $14=$13;
  var $15=(($window+($n_09<<2))|0);
  HEAPF32[(($15)>>2)]=$14;
  var $16=((($n_09)+(1))|0);
  var $17=($16|0)>($1|0);
  if ($17) {
   break;
  } else {
   var $n_09=$16;
  }
 }
 return;
}
function _FLAC__window_hamming($window,$L){
 var label=0;
 var $1=($L|0)>0;
 if (!($1)) {
  return;
 }
 var $2=((($L)-(1))|0);
 var $3=($2|0);
 var $n_06=0;
 while(1) {
  var $n_06;
  var $5=($n_06|0);
  var $6=($5)*((6.283185307179586));
  var $7=($6)/($3);
  var $8=Math_cos($7);
  var $9=($8)*((0.46000000834465027));
  var $10=((0.5400000214576721))-($9);
  var $11=$10;
  var $12=(($window+($n_06<<2))|0);
  HEAPF32[(($12)>>2)]=$11;
  var $13=((($n_06)+(1))|0);
  var $14=($13|0)<($L|0);
  if ($14) {
   var $n_06=$13;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__window_hann($window,$L){
 var label=0;
 var $1=($L|0)>0;
 if (!($1)) {
  return;
 }
 var $2=((($L)-(1))|0);
 var $3=($2|0);
 var $n_06=0;
 while(1) {
  var $n_06;
  var $5=($n_06|0);
  var $6=($5)*((6.283185307179586));
  var $7=($6)/($3);
  var $8=Math_cos($7);
  var $9=($8)*((0.5));
  var $10=((0.5))-($9);
  var $11=$10;
  var $12=(($window+($n_06<<2))|0);
  HEAPF32[(($12)>>2)]=$11;
  var $13=((($n_06)+(1))|0);
  var $14=($13|0)<($L|0);
  if ($14) {
   var $n_06=$13;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__window_kaiser_bessel($window,$L){
 var label=0;
 var $1=($L|0)>0;
 if (!($1)) {
  return;
 }
 var $2=((($L)-(1))|0);
 var $3=($2|0);
 var $n_010=0;
 while(1) {
  var $n_010;
  var $5=($n_010|0);
  var $6=($5)*((6.283185307179586));
  var $7=($6)/($3);
  var $8=Math_cos($7);
  var $9=($8)*((0.49799999594688416));
  var $10=((0.4020000100135803))-($9);
  var $11=($5)*((12.566370614359172));
  var $12=($11)/($3);
  var $13=Math_cos($12);
  var $14=($13)*((0.09799999743700027));
  var $15=($10)+($14);
  var $16=($5)*((18.84955592153876));
  var $17=($16)/($3);
  var $18=Math_cos($17);
  var $19=($18)*((0.0010000000474974513));
  var $20=($15)-($19);
  var $21=$20;
  var $22=(($window+($n_010<<2))|0);
  HEAPF32[(($22)>>2)]=$21;
  var $23=((($n_010)+(1))|0);
  var $24=($23|0)<($L|0);
  if ($24) {
   var $n_010=$23;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__window_nuttall($window,$L){
 var label=0;
 var $1=($L|0)>0;
 if (!($1)) {
  return;
 }
 var $2=((($L)-(1))|0);
 var $3=($2|0);
 var $n_010=0;
 while(1) {
  var $n_010;
  var $5=($n_010|0);
  var $6=($5)*((6.283185307179586));
  var $7=($6)/($3);
  var $8=Math_cos($7);
  var $9=($8)*((0.48917749524116516));
  var $10=((0.36358189582824707))-($9);
  var $11=($5)*((12.566370614359172));
  var $12=($11)/($3);
  var $13=Math_cos($12);
  var $14=($13)*((0.13659949600696564));
  var $15=($10)+($14);
  var $16=($5)*((18.84955592153876));
  var $17=($16)/($3);
  var $18=Math_cos($17);
  var $19=($18)*((0.010641099885106087));
  var $20=($15)-($19);
  var $21=$20;
  var $22=(($window+($n_010<<2))|0);
  HEAPF32[(($22)>>2)]=$21;
  var $23=((($n_010)+(1))|0);
  var $24=($23|0)<($L|0);
  if ($24) {
   var $n_010=$23;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__window_rectangle($window,$L){
 var label=0;
 var $1=($L|0)>0;
 if ($1) {
  var $n_04=0;
 } else {
  return;
 }
 while(1) {
  var $n_04;
  var $2=(($window+($n_04<<2))|0);
  HEAPF32[(($2)>>2)]=1;
  var $3=((($n_04)+(1))|0);
  var $4=($3|0)<($L|0);
  if ($4) {
   var $n_04=$3;
  } else {
   break;
  }
 }
 return;
}
function _FLAC__window_triangle($window,$L){
 var label=0;
 var $1=$L&1;
 var $2=($1|0)==0;
 if ($2) {
  var $6=(((($L|0))/(2))&-1);
  var $7=($L|0)<2;
  if ($7) {
   var $n_2_lcssa=1;
  } else {
   var $8=($L|0);
   var $9=($L|0)>3;
   var $n_232=1;
   while(1) {
    var $n_232;
    var $37=($n_232|0);
    var $38=($37)*(2);
    var $39=($38)/($8);
    var $40=((($n_232)-(1))|0);
    var $41=(($window+($40<<2))|0);
    HEAPF32[(($41)>>2)]=$39;
    var $42=((($n_232)+(1))|0);
    var $43=($42|0)>($6|0);
    if ($43) {
     break;
    } else {
     var $n_232=$42;
    }
   }
   var $_op=((($6)+(1))|0);
   var $33=$9?$_op:2;
   var $n_2_lcssa=$33;
  }
  var $n_2_lcssa;
  var $34=($n_2_lcssa|0)>($L|0);
  if ($34) {
   return;
  }
  var $35=($L|0);
  var $n_330=$n_2_lcssa;
  while(1) {
   var $n_330;
   var $45=((($L)-($n_330))|0);
   var $46=$45<<1;
   var $47=($46|0);
   var $48=($47)+(1);
   var $49=($48)/($35);
   var $50=((($n_330)-(1))|0);
   var $51=(($window+($50<<2))|0);
   HEAPF32[(($51)>>2)]=$49;
   var $52=((($n_330)+(1))|0);
   var $53=($52|0)>($L|0);
   if ($53) {
    break;
   } else {
    var $n_330=$52;
   }
  }
  return;
 } else {
  var $3=($L|0)<1;
  if ($3) {
   var $n_0_lcssa=1;
  } else {
   var $4=($L|0);
   var $5=($4)+(1);
   var $n_039=1;
   while(1) {
    var $n_039;
    var $15=($n_039|0);
    var $16=($15)*(2);
    var $17=($16)/($5);
    var $18=((($n_039)-(1))|0);
    var $19=(($window+($18<<2))|0);
    HEAPF32[(($19)>>2)]=$17;
    var $20=((($n_039)+(1))|0);
    var $21=($20|0)>($L|0);
    if ($21) {
     break;
    } else {
     var $n_039=$20;
    }
   }
   var $10=((($L)+(1))|0);
   var $n_0_lcssa=$10;
  }
  var $n_0_lcssa;
  var $11=($n_0_lcssa|0)>($L|0);
  if ($11) {
   return;
  }
  var $12=($L|0);
  var $13=($12)+(1);
  var $n_136=$n_0_lcssa;
  while(1) {
   var $n_136;
   var $23=((($L)-($n_136))|0);
   var $24=$23<<1;
   var $25=((($24)+(2))|0);
   var $26=($25|0);
   var $27=((-.0))-($26);
   var $28=($27)/($13);
   var $29=((($n_136)-(1))|0);
   var $30=(($window+($29<<2))|0);
   HEAPF32[(($30)>>2)]=$28;
   var $31=((($n_136)+(1))|0);
   var $32=($31|0)>($L|0);
   if ($32) {
    break;
   } else {
    var $n_136=$31;
   }
  }
  return;
 }
}
function _FLAC__window_tukey($window,$L,$p){
 var label=0;
 var $1=$p>0;
 if (!($1)) {
  var $3=($L|0)>0;
  if ($3) {
   var $n_04_i=0;
  } else {
   return;
  }
  while(1) {
   var $n_04_i;
   var $4=(($window+($n_04_i<<2))|0);
   HEAPF32[(($4)>>2)]=1;
   var $5=((($n_04_i)+(1))|0);
   var $6=($5|0)<($L|0);
   if ($6) {
    var $n_04_i=$5;
   } else {
    break;
   }
  }
  return;
 }
 var $8=$p<1;
 if (!($8)) {
  var $10=($L|0)>0;
  if (!($10)) {
   return;
  }
  var $11=((($L)-(1))|0);
  var $12=($11|0);
  var $n_06_i=0;
  while(1) {
   var $n_06_i;
   var $14=($n_06_i|0);
   var $15=($14)*((6.283185307179586));
   var $16=($15)/($12);
   var $17=Math_cos($16);
   var $18=($17)*((0.5));
   var $19=((0.5))-($18);
   var $20=$19;
   var $21=(($window+($n_06_i<<2))|0);
   HEAPF32[(($21)>>2)]=$20;
   var $22=((($n_06_i)+(1))|0);
   var $23=($22|0)<($L|0);
   if ($23) {
    var $n_06_i=$22;
   } else {
    break;
   }
  }
  return;
 }
 var $25=($p)*((0.5));
 var $26=($L|0);
 var $27=($26)*($25);
 var $28=(($27)&-1);
 var $29=((($28)-(1))|0);
 var $30=($L|0)>0;
 if ($30) {
  var $n_04_i23=0;
  while(1) {
   var $n_04_i23;
   var $31=(($window+($n_04_i23<<2))|0);
   HEAPF32[(($31)>>2)]=1;
   var $32=((($n_04_i23)+(1))|0);
   var $33=($32|0)<($L|0);
   if ($33) {
    var $n_04_i23=$32;
   } else {
    break;
   }
  }
 }
 var $34=($29|0)>0;
 if (!($34)) {
  return;
 }
 var $35=($29|0);
 var $_neg=(((1)-($28))|0);
 var $36=((($L)-(1))|0);
 var $37=((($36)+($_neg))|0);
 var $n_027=0;
 while(1) {
  var $n_027;
  var $39=($n_027|0);
  var $40=($39)*((3.141592653589793));
  var $41=($40)/($35);
  var $42=Math_cos($41);
  var $43=($42)*((0.5));
  var $44=((0.5))-($43);
  var $45=$44;
  var $46=(($window+($n_027<<2))|0);
  HEAPF32[(($46)>>2)]=$45;
  var $47=((($n_027)+($29))|0);
  var $48=($47|0);
  var $49=($48)*((3.141592653589793));
  var $50=($49)/($35);
  var $51=Math_cos($50);
  var $52=($51)*((0.5));
  var $53=((0.5))-($52);
  var $54=$53;
  var $55=((($37)+($n_027))|0);
  var $56=(($window+($55<<2))|0);
  HEAPF32[(($56)>>2)]=$54;
  var $57=((($n_027)+(1))|0);
  var $58=($57|0)>($29|0);
  if ($58) {
   break;
  } else {
   var $n_027=$57;
  }
 }
 return;
}
function _FLAC__window_welch($window,$L){
 var label=0;
 var $1=((($L)-(1))|0);
 var $2=($1|0);
 var $3=($2)*((0.5));
 var $4=($1|0)<0;
 if ($4) {
  return;
 } else {
  var $n_08=0;
 }
 while(1) {
  var $n_08;
  var $5=($n_08|0);
  var $6=($5)-($3);
  var $7=($6)/($3);
  var $8=($7)*($7);
  var $9=(1)-($8);
  var $10=$9;
  var $11=(($window+($n_08<<2))|0);
  HEAPF32[(($11)>>2)]=$10;
  var $12=((($n_08)+(1))|0);
  var $13=($12|0)>($1|0);
  if ($13) {
   break;
  } else {
   var $n_08=$12;
  }
 }
 return;
}
function _malloc($bytes){
 var label=0;
 var $1=($bytes>>>0)<245;
 do {
  if ($1) {
   var $3=($bytes>>>0)<11;
   if ($3) {
    var $8=16;
   } else {
    var $5=((($bytes)+(11))|0);
    var $6=$5&-8;
    var $8=$6;
   }
   var $8;
   var $9=$8>>>3;
   var $10=HEAP32[((10640)>>2)];
   var $11=$10>>>($9>>>0);
   var $12=$11&3;
   var $13=($12|0)==0;
   if (!($13)) {
    var $15=$11&1;
    var $16=$15^1;
    var $17=((($16)+($9))|0);
    var $18=$17<<1;
    var $19=((10680+($18<<2))|0);
    var $20=$19;
    var $_sum111=((($18)+(2))|0);
    var $21=((10680+($_sum111<<2))|0);
    var $22=HEAP32[(($21)>>2)];
    var $23=(($22+8)|0);
    var $24=HEAP32[(($23)>>2)];
    var $25=($20|0)==($24|0);
    do {
     if ($25) {
      var $27=1<<$17;
      var $28=$27^-1;
      var $29=$10&$28;
      HEAP32[((10640)>>2)]=$29;
     } else {
      var $31=$24;
      var $32=HEAP32[((10656)>>2)];
      var $33=($31>>>0)<($32>>>0);
      if ($33) {
       _abort();
      }
      var $35=(($24+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=($36|0)==($22|0);
      if ($37) {
       HEAP32[(($35)>>2)]=$20;
       HEAP32[(($21)>>2)]=$24;
       break;
      } else {
       _abort();
      }
     }
    } while(0);
    var $40=$17<<3;
    var $41=$40|3;
    var $42=(($22+4)|0);
    HEAP32[(($42)>>2)]=$41;
    var $43=$22;
    var $_sum113114=$40|4;
    var $44=(($43+$_sum113114)|0);
    var $45=$44;
    var $46=HEAP32[(($45)>>2)];
    var $47=$46|1;
    HEAP32[(($45)>>2)]=$47;
    var $48=$23;
    var $mem_0=$48;
    var $mem_0;
    return $mem_0;
   }
   var $50=HEAP32[((10648)>>2)];
   var $51=($8>>>0)>($50>>>0);
   if (!($51)) {
    var $nb_0=$8;
    break;
   }
   var $53=($11|0)==0;
   if (!($53)) {
    var $55=$11<<$9;
    var $56=2<<$9;
    var $57=(((-$56))|0);
    var $58=$56|$57;
    var $59=$55&$58;
    var $60=(((-$59))|0);
    var $61=$59&$60;
    var $62=((($61)-(1))|0);
    var $63=$62>>>12;
    var $64=$63&16;
    var $65=$62>>>($64>>>0);
    var $66=$65>>>5;
    var $67=$66&8;
    var $68=$67|$64;
    var $69=$65>>>($67>>>0);
    var $70=$69>>>2;
    var $71=$70&4;
    var $72=$68|$71;
    var $73=$69>>>($71>>>0);
    var $74=$73>>>1;
    var $75=$74&2;
    var $76=$72|$75;
    var $77=$73>>>($75>>>0);
    var $78=$77>>>1;
    var $79=$78&1;
    var $80=$76|$79;
    var $81=$77>>>($79>>>0);
    var $82=((($80)+($81))|0);
    var $83=$82<<1;
    var $84=((10680+($83<<2))|0);
    var $85=$84;
    var $_sum104=((($83)+(2))|0);
    var $86=((10680+($_sum104<<2))|0);
    var $87=HEAP32[(($86)>>2)];
    var $88=(($87+8)|0);
    var $89=HEAP32[(($88)>>2)];
    var $90=($85|0)==($89|0);
    do {
     if ($90) {
      var $92=1<<$82;
      var $93=$92^-1;
      var $94=$10&$93;
      HEAP32[((10640)>>2)]=$94;
     } else {
      var $96=$89;
      var $97=HEAP32[((10656)>>2)];
      var $98=($96>>>0)<($97>>>0);
      if ($98) {
       _abort();
      }
      var $100=(($89+12)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=($101|0)==($87|0);
      if ($102) {
       HEAP32[(($100)>>2)]=$85;
       HEAP32[(($86)>>2)]=$89;
       break;
      } else {
       _abort();
      }
     }
    } while(0);
    var $105=$82<<3;
    var $106=((($105)-($8))|0);
    var $107=$8|3;
    var $108=(($87+4)|0);
    HEAP32[(($108)>>2)]=$107;
    var $109=$87;
    var $110=(($109+$8)|0);
    var $111=$110;
    var $112=$106|1;
    var $_sum106107=$8|4;
    var $113=(($109+$_sum106107)|0);
    var $114=$113;
    HEAP32[(($114)>>2)]=$112;
    var $115=(($109+$105)|0);
    var $116=$115;
    HEAP32[(($116)>>2)]=$106;
    var $117=HEAP32[((10648)>>2)];
    var $118=($117|0)==0;
    if (!($118)) {
     var $120=HEAP32[((10660)>>2)];
     var $121=$117>>>3;
     var $122=$121<<1;
     var $123=((10680+($122<<2))|0);
     var $124=$123;
     var $125=HEAP32[((10640)>>2)];
     var $126=1<<$121;
     var $127=$125&$126;
     var $128=($127|0)==0;
     do {
      if ($128) {
       var $130=$125|$126;
       HEAP32[((10640)>>2)]=$130;
       var $_sum109_pre=((($122)+(2))|0);
       var $_pre=((10680+($_sum109_pre<<2))|0);
       var $F4_0=$124;var $_pre_phi=$_pre;
      } else {
       var $_sum110=((($122)+(2))|0);
       var $132=((10680+($_sum110<<2))|0);
       var $133=HEAP32[(($132)>>2)];
       var $134=$133;
       var $135=HEAP32[((10656)>>2)];
       var $136=($134>>>0)<($135>>>0);
       if (!($136)) {
        var $F4_0=$133;var $_pre_phi=$132;
        break;
       }
       _abort();
      }
     } while(0);
     var $_pre_phi;
     var $F4_0;
     HEAP32[(($_pre_phi)>>2)]=$120;
     var $139=(($F4_0+12)|0);
     HEAP32[(($139)>>2)]=$120;
     var $140=(($120+8)|0);
     HEAP32[(($140)>>2)]=$F4_0;
     var $141=(($120+12)|0);
     HEAP32[(($141)>>2)]=$124;
    }
    HEAP32[((10648)>>2)]=$106;
    HEAP32[((10660)>>2)]=$111;
    var $143=$88;
    var $mem_0=$143;
    var $mem_0;
    return $mem_0;
   }
   var $145=HEAP32[((10644)>>2)];
   var $146=($145|0)==0;
   if ($146) {
    var $nb_0=$8;
    break;
   }
   var $148=(((-$145))|0);
   var $149=$145&$148;
   var $150=((($149)-(1))|0);
   var $151=$150>>>12;
   var $152=$151&16;
   var $153=$150>>>($152>>>0);
   var $154=$153>>>5;
   var $155=$154&8;
   var $156=$155|$152;
   var $157=$153>>>($155>>>0);
   var $158=$157>>>2;
   var $159=$158&4;
   var $160=$156|$159;
   var $161=$157>>>($159>>>0);
   var $162=$161>>>1;
   var $163=$162&2;
   var $164=$160|$163;
   var $165=$161>>>($163>>>0);
   var $166=$165>>>1;
   var $167=$166&1;
   var $168=$164|$167;
   var $169=$165>>>($167>>>0);
   var $170=((($168)+($169))|0);
   var $171=((10944+($170<<2))|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($172+4)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=$174&-8;
   var $176=((($175)-($8))|0);
   var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;
   while(1) {
    var $rsize_0_i;
    var $v_0_i;
    var $t_0_i;
    var $178=(($t_0_i+16)|0);
    var $179=HEAP32[(($178)>>2)];
    var $180=($179|0)==0;
    if ($180) {
     var $182=(($t_0_i+20)|0);
     var $183=HEAP32[(($182)>>2)];
     var $184=($183|0)==0;
     if ($184) {
      break;
     } else {
      var $185=$183;
     }
    } else {
     var $185=$179;
    }
    var $185;
    var $186=(($185+4)|0);
    var $187=HEAP32[(($186)>>2)];
    var $188=$187&-8;
    var $189=((($188)-($8))|0);
    var $190=($189>>>0)<($rsize_0_i>>>0);
    var $_rsize_0_i=$190?$189:$rsize_0_i;
    var $_v_0_i=$190?$185:$v_0_i;
    var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;
   }
   var $192=$v_0_i;
   var $193=HEAP32[((10656)>>2)];
   var $194=($192>>>0)<($193>>>0);
   if ($194) {
    _abort();
   }
   var $196=(($192+$8)|0);
   var $197=$196;
   var $198=($192>>>0)<($196>>>0);
   if (!($198)) {
    _abort();
   }
   var $200=(($v_0_i+24)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($v_0_i+12)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=($203|0)==($v_0_i|0);
   do {
    if ($204) {
     var $220=(($v_0_i+20)|0);
     var $221=HEAP32[(($220)>>2)];
     var $222=($221|0)==0;
     if ($222) {
      var $224=(($v_0_i+16)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=($225|0)==0;
      if ($226) {
       var $R_1_i=0;
       break;
      } else {
       var $R_0_i=$225;var $RP_0_i=$224;
      }
     } else {
      var $R_0_i=$221;var $RP_0_i=$220;
     }
     while(1) {
      var $RP_0_i;
      var $R_0_i;
      var $227=(($R_0_i+20)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=($228|0)==0;
      if (!($229)) {
       var $R_0_i=$228;var $RP_0_i=$227;
       continue;
      }
      var $231=(($R_0_i+16)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=($232|0)==0;
      if ($233) {
       break;
      } else {
       var $R_0_i=$232;var $RP_0_i=$231;
      }
     }
     var $235=$RP_0_i;
     var $236=($235>>>0)<($193>>>0);
     if ($236) {
      _abort();
     } else {
      HEAP32[(($RP_0_i)>>2)]=0;
      var $R_1_i=$R_0_i;
      break;
     }
    } else {
     var $206=(($v_0_i+8)|0);
     var $207=HEAP32[(($206)>>2)];
     var $208=$207;
     var $209=($208>>>0)<($193>>>0);
     if ($209) {
      _abort();
     }
     var $211=(($207+12)|0);
     var $212=HEAP32[(($211)>>2)];
     var $213=($212|0)==($v_0_i|0);
     if (!($213)) {
      _abort();
     }
     var $215=(($203+8)|0);
     var $216=HEAP32[(($215)>>2)];
     var $217=($216|0)==($v_0_i|0);
     if ($217) {
      HEAP32[(($211)>>2)]=$203;
      HEAP32[(($215)>>2)]=$207;
      var $R_1_i=$203;
      break;
     } else {
      _abort();
     }
    }
   } while(0);
   var $R_1_i;
   var $240=($201|0)==0;
   L8163: do {
    if (!($240)) {
     var $242=(($v_0_i+28)|0);
     var $243=HEAP32[(($242)>>2)];
     var $244=((10944+($243<<2))|0);
     var $245=HEAP32[(($244)>>2)];
     var $246=($v_0_i|0)==($245|0);
     do {
      if ($246) {
       HEAP32[(($244)>>2)]=$R_1_i;
       var $cond_i=($R_1_i|0)==0;
       if (!($cond_i)) {
        break;
       }
       var $248=HEAP32[(($242)>>2)];
       var $249=1<<$248;
       var $250=$249^-1;
       var $251=HEAP32[((10644)>>2)];
       var $252=$251&$250;
       HEAP32[((10644)>>2)]=$252;
       break L8163;
      } else {
       var $254=$201;
       var $255=HEAP32[((10656)>>2)];
       var $256=($254>>>0)<($255>>>0);
       if ($256) {
        _abort();
       }
       var $258=(($201+16)|0);
       var $259=HEAP32[(($258)>>2)];
       var $260=($259|0)==($v_0_i|0);
       if ($260) {
        HEAP32[(($258)>>2)]=$R_1_i;
       } else {
        var $263=(($201+20)|0);
        HEAP32[(($263)>>2)]=$R_1_i;
       }
       var $266=($R_1_i|0)==0;
       if ($266) {
        break L8163;
       }
      }
     } while(0);
     var $268=$R_1_i;
     var $269=HEAP32[((10656)>>2)];
     var $270=($268>>>0)<($269>>>0);
     if ($270) {
      _abort();
     }
     var $272=(($R_1_i+24)|0);
     HEAP32[(($272)>>2)]=$201;
     var $273=(($v_0_i+16)|0);
     var $274=HEAP32[(($273)>>2)];
     var $275=($274|0)==0;
     do {
      if (!($275)) {
       var $277=$274;
       var $278=HEAP32[((10656)>>2)];
       var $279=($277>>>0)<($278>>>0);
       if ($279) {
        _abort();
       } else {
        var $281=(($R_1_i+16)|0);
        HEAP32[(($281)>>2)]=$274;
        var $282=(($274+24)|0);
        HEAP32[(($282)>>2)]=$R_1_i;
        break;
       }
      }
     } while(0);
     var $285=(($v_0_i+20)|0);
     var $286=HEAP32[(($285)>>2)];
     var $287=($286|0)==0;
     if ($287) {
      break;
     }
     var $289=$286;
     var $290=HEAP32[((10656)>>2)];
     var $291=($289>>>0)<($290>>>0);
     if ($291) {
      _abort();
     } else {
      var $293=(($R_1_i+20)|0);
      HEAP32[(($293)>>2)]=$286;
      var $294=(($286+24)|0);
      HEAP32[(($294)>>2)]=$R_1_i;
      break;
     }
    }
   } while(0);
   var $298=($rsize_0_i>>>0)<16;
   if ($298) {
    var $300=((($rsize_0_i)+($8))|0);
    var $301=$300|3;
    var $302=(($v_0_i+4)|0);
    HEAP32[(($302)>>2)]=$301;
    var $_sum4_i=((($300)+(4))|0);
    var $303=(($192+$_sum4_i)|0);
    var $304=$303;
    var $305=HEAP32[(($304)>>2)];
    var $306=$305|1;
    HEAP32[(($304)>>2)]=$306;
   } else {
    var $308=$8|3;
    var $309=(($v_0_i+4)|0);
    HEAP32[(($309)>>2)]=$308;
    var $310=$rsize_0_i|1;
    var $_sum_i137=$8|4;
    var $311=(($192+$_sum_i137)|0);
    var $312=$311;
    HEAP32[(($312)>>2)]=$310;
    var $_sum1_i=((($rsize_0_i)+($8))|0);
    var $313=(($192+$_sum1_i)|0);
    var $314=$313;
    HEAP32[(($314)>>2)]=$rsize_0_i;
    var $315=HEAP32[((10648)>>2)];
    var $316=($315|0)==0;
    if (!($316)) {
     var $318=HEAP32[((10660)>>2)];
     var $319=$315>>>3;
     var $320=$319<<1;
     var $321=((10680+($320<<2))|0);
     var $322=$321;
     var $323=HEAP32[((10640)>>2)];
     var $324=1<<$319;
     var $325=$323&$324;
     var $326=($325|0)==0;
     do {
      if ($326) {
       var $328=$323|$324;
       HEAP32[((10640)>>2)]=$328;
       var $_sum2_pre_i=((($320)+(2))|0);
       var $_pre_i=((10680+($_sum2_pre_i<<2))|0);
       var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;
      } else {
       var $_sum3_i=((($320)+(2))|0);
       var $330=((10680+($_sum3_i<<2))|0);
       var $331=HEAP32[(($330)>>2)];
       var $332=$331;
       var $333=HEAP32[((10656)>>2)];
       var $334=($332>>>0)<($333>>>0);
       if (!($334)) {
        var $F1_0_i=$331;var $_pre_phi_i=$330;
        break;
       }
       _abort();
      }
     } while(0);
     var $_pre_phi_i;
     var $F1_0_i;
     HEAP32[(($_pre_phi_i)>>2)]=$318;
     var $337=(($F1_0_i+12)|0);
     HEAP32[(($337)>>2)]=$318;
     var $338=(($318+8)|0);
     HEAP32[(($338)>>2)]=$F1_0_i;
     var $339=(($318+12)|0);
     HEAP32[(($339)>>2)]=$322;
    }
    HEAP32[((10648)>>2)]=$rsize_0_i;
    HEAP32[((10660)>>2)]=$197;
   }
   var $342=(($v_0_i+8)|0);
   var $343=$342;
   var $344=($342|0)==0;
   if ($344) {
    var $nb_0=$8;
    break;
   } else {
    var $mem_0=$343;
   }
   var $mem_0;
   return $mem_0;
  } else {
   var $346=($bytes>>>0)>4294967231;
   if ($346) {
    var $nb_0=-1;
    break;
   }
   var $348=((($bytes)+(11))|0);
   var $349=$348&-8;
   var $350=HEAP32[((10644)>>2)];
   var $351=($350|0)==0;
   if ($351) {
    var $nb_0=$349;
    break;
   }
   var $353=(((-$349))|0);
   var $354=$348>>>8;
   var $355=($354|0)==0;
   do {
    if ($355) {
     var $idx_0_i=0;
    } else {
     var $357=($349>>>0)>16777215;
     if ($357) {
      var $idx_0_i=31;
      break;
     }
     var $359=((($354)+(1048320))|0);
     var $360=$359>>>16;
     var $361=$360&8;
     var $362=$354<<$361;
     var $363=((($362)+(520192))|0);
     var $364=$363>>>16;
     var $365=$364&4;
     var $366=$365|$361;
     var $367=$362<<$365;
     var $368=((($367)+(245760))|0);
     var $369=$368>>>16;
     var $370=$369&2;
     var $371=$366|$370;
     var $372=(((14)-($371))|0);
     var $373=$367<<$370;
     var $374=$373>>>15;
     var $375=((($372)+($374))|0);
     var $376=$375<<1;
     var $377=((($375)+(7))|0);
     var $378=$349>>>($377>>>0);
     var $379=$378&1;
     var $380=$379|$376;
     var $idx_0_i=$380;
    }
   } while(0);
   var $idx_0_i;
   var $382=((10944+($idx_0_i<<2))|0);
   var $383=HEAP32[(($382)>>2)];
   var $384=($383|0)==0;
   L8211: do {
    if ($384) {
     var $v_2_i=0;var $rsize_2_i=$353;var $t_1_i=0;
    } else {
     var $386=($idx_0_i|0)==31;
     if ($386) {
      var $391=0;
     } else {
      var $388=$idx_0_i>>>1;
      var $389=(((25)-($388))|0);
      var $391=$389;
     }
     var $391;
     var $392=$349<<$391;
     var $v_0_i118=0;var $rsize_0_i117=$353;var $t_0_i116=$383;var $sizebits_0_i=$392;var $rst_0_i=0;
     while(1) {
      var $rst_0_i;
      var $sizebits_0_i;
      var $t_0_i116;
      var $rsize_0_i117;
      var $v_0_i118;
      var $394=(($t_0_i116+4)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=$395&-8;
      var $397=((($396)-($349))|0);
      var $398=($397>>>0)<($rsize_0_i117>>>0);
      if ($398) {
       var $400=($396|0)==($349|0);
       if ($400) {
        var $v_2_i=$t_0_i116;var $rsize_2_i=$397;var $t_1_i=$t_0_i116;
        break L8211;
       } else {
        var $v_1_i=$t_0_i116;var $rsize_1_i=$397;
       }
      } else {
       var $v_1_i=$v_0_i118;var $rsize_1_i=$rsize_0_i117;
      }
      var $rsize_1_i;
      var $v_1_i;
      var $402=(($t_0_i116+20)|0);
      var $403=HEAP32[(($402)>>2)];
      var $404=$sizebits_0_i>>>31;
      var $405=(($t_0_i116+16+($404<<2))|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=($403|0)==0;
      var $408=($403|0)==($406|0);
      var $or_cond_i=$407|$408;
      var $rst_1_i=$or_cond_i?$rst_0_i:$403;
      var $409=($406|0)==0;
      var $410=$sizebits_0_i<<1;
      if ($409) {
       var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;
       break;
      } else {
       var $v_0_i118=$v_1_i;var $rsize_0_i117=$rsize_1_i;var $t_0_i116=$406;var $sizebits_0_i=$410;var $rst_0_i=$rst_1_i;
      }
     }
    }
   } while(0);
   var $t_1_i;
   var $rsize_2_i;
   var $v_2_i;
   var $411=($t_1_i|0)==0;
   var $412=($v_2_i|0)==0;
   var $or_cond21_i=$411&$412;
   if ($or_cond21_i) {
    var $414=2<<$idx_0_i;
    var $415=(((-$414))|0);
    var $416=$414|$415;
    var $417=$350&$416;
    var $418=($417|0)==0;
    if ($418) {
     var $nb_0=$349;
     break;
    }
    var $420=(((-$417))|0);
    var $421=$417&$420;
    var $422=((($421)-(1))|0);
    var $423=$422>>>12;
    var $424=$423&16;
    var $425=$422>>>($424>>>0);
    var $426=$425>>>5;
    var $427=$426&8;
    var $428=$427|$424;
    var $429=$425>>>($427>>>0);
    var $430=$429>>>2;
    var $431=$430&4;
    var $432=$428|$431;
    var $433=$429>>>($431>>>0);
    var $434=$433>>>1;
    var $435=$434&2;
    var $436=$432|$435;
    var $437=$433>>>($435>>>0);
    var $438=$437>>>1;
    var $439=$438&1;
    var $440=$436|$439;
    var $441=$437>>>($439>>>0);
    var $442=((($440)+($441))|0);
    var $443=((10944+($442<<2))|0);
    var $444=HEAP32[(($443)>>2)];
    var $t_2_ph_i=$444;
   } else {
    var $t_2_ph_i=$t_1_i;
   }
   var $t_2_ph_i;
   var $445=($t_2_ph_i|0)==0;
   if ($445) {
    var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;
   } else {
    var $t_228_i=$t_2_ph_i;var $rsize_329_i=$rsize_2_i;var $v_330_i=$v_2_i;
    while(1) {
     var $v_330_i;
     var $rsize_329_i;
     var $t_228_i;
     var $446=(($t_228_i+4)|0);
     var $447=HEAP32[(($446)>>2)];
     var $448=$447&-8;
     var $449=((($448)-($349))|0);
     var $450=($449>>>0)<($rsize_329_i>>>0);
     var $_rsize_3_i=$450?$449:$rsize_329_i;
     var $t_2_v_3_i=$450?$t_228_i:$v_330_i;
     var $451=(($t_228_i+16)|0);
     var $452=HEAP32[(($451)>>2)];
     var $453=($452|0)==0;
     if (!($453)) {
      var $t_228_i=$452;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;
      continue;
     }
     var $454=(($t_228_i+20)|0);
     var $455=HEAP32[(($454)>>2)];
     var $456=($455|0)==0;
     if ($456) {
      var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;
      break;
     } else {
      var $t_228_i=$455;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;
     }
    }
   }
   var $v_3_lcssa_i;
   var $rsize_3_lcssa_i;
   var $457=($v_3_lcssa_i|0)==0;
   if ($457) {
    var $nb_0=$349;
    break;
   }
   var $459=HEAP32[((10648)>>2)];
   var $460=((($459)-($349))|0);
   var $461=($rsize_3_lcssa_i>>>0)<($460>>>0);
   if (!($461)) {
    var $nb_0=$349;
    break;
   }
   var $463=$v_3_lcssa_i;
   var $464=HEAP32[((10656)>>2)];
   var $465=($463>>>0)<($464>>>0);
   if ($465) {
    _abort();
   }
   var $467=(($463+$349)|0);
   var $468=$467;
   var $469=($463>>>0)<($467>>>0);
   if (!($469)) {
    _abort();
   }
   var $471=(($v_3_lcssa_i+24)|0);
   var $472=HEAP32[(($471)>>2)];
   var $473=(($v_3_lcssa_i+12)|0);
   var $474=HEAP32[(($473)>>2)];
   var $475=($474|0)==($v_3_lcssa_i|0);
   do {
    if ($475) {
     var $491=(($v_3_lcssa_i+20)|0);
     var $492=HEAP32[(($491)>>2)];
     var $493=($492|0)==0;
     if ($493) {
      var $495=(($v_3_lcssa_i+16)|0);
      var $496=HEAP32[(($495)>>2)];
      var $497=($496|0)==0;
      if ($497) {
       var $R_1_i122=0;
       break;
      } else {
       var $R_0_i120=$496;var $RP_0_i119=$495;
      }
     } else {
      var $R_0_i120=$492;var $RP_0_i119=$491;
     }
     while(1) {
      var $RP_0_i119;
      var $R_0_i120;
      var $498=(($R_0_i120+20)|0);
      var $499=HEAP32[(($498)>>2)];
      var $500=($499|0)==0;
      if (!($500)) {
       var $R_0_i120=$499;var $RP_0_i119=$498;
       continue;
      }
      var $502=(($R_0_i120+16)|0);
      var $503=HEAP32[(($502)>>2)];
      var $504=($503|0)==0;
      if ($504) {
       break;
      } else {
       var $R_0_i120=$503;var $RP_0_i119=$502;
      }
     }
     var $506=$RP_0_i119;
     var $507=($506>>>0)<($464>>>0);
     if ($507) {
      _abort();
     } else {
      HEAP32[(($RP_0_i119)>>2)]=0;
      var $R_1_i122=$R_0_i120;
      break;
     }
    } else {
     var $477=(($v_3_lcssa_i+8)|0);
     var $478=HEAP32[(($477)>>2)];
     var $479=$478;
     var $480=($479>>>0)<($464>>>0);
     if ($480) {
      _abort();
     }
     var $482=(($478+12)|0);
     var $483=HEAP32[(($482)>>2)];
     var $484=($483|0)==($v_3_lcssa_i|0);
     if (!($484)) {
      _abort();
     }
     var $486=(($474+8)|0);
     var $487=HEAP32[(($486)>>2)];
     var $488=($487|0)==($v_3_lcssa_i|0);
     if ($488) {
      HEAP32[(($482)>>2)]=$474;
      HEAP32[(($486)>>2)]=$478;
      var $R_1_i122=$474;
      break;
     } else {
      _abort();
     }
    }
   } while(0);
   var $R_1_i122;
   var $511=($472|0)==0;
   L8261: do {
    if (!($511)) {
     var $513=(($v_3_lcssa_i+28)|0);
     var $514=HEAP32[(($513)>>2)];
     var $515=((10944+($514<<2))|0);
     var $516=HEAP32[(($515)>>2)];
     var $517=($v_3_lcssa_i|0)==($516|0);
     do {
      if ($517) {
       HEAP32[(($515)>>2)]=$R_1_i122;
       var $cond_i123=($R_1_i122|0)==0;
       if (!($cond_i123)) {
        break;
       }
       var $519=HEAP32[(($513)>>2)];
       var $520=1<<$519;
       var $521=$520^-1;
       var $522=HEAP32[((10644)>>2)];
       var $523=$522&$521;
       HEAP32[((10644)>>2)]=$523;
       break L8261;
      } else {
       var $525=$472;
       var $526=HEAP32[((10656)>>2)];
       var $527=($525>>>0)<($526>>>0);
       if ($527) {
        _abort();
       }
       var $529=(($472+16)|0);
       var $530=HEAP32[(($529)>>2)];
       var $531=($530|0)==($v_3_lcssa_i|0);
       if ($531) {
        HEAP32[(($529)>>2)]=$R_1_i122;
       } else {
        var $534=(($472+20)|0);
        HEAP32[(($534)>>2)]=$R_1_i122;
       }
       var $537=($R_1_i122|0)==0;
       if ($537) {
        break L8261;
       }
      }
     } while(0);
     var $539=$R_1_i122;
     var $540=HEAP32[((10656)>>2)];
     var $541=($539>>>0)<($540>>>0);
     if ($541) {
      _abort();
     }
     var $543=(($R_1_i122+24)|0);
     HEAP32[(($543)>>2)]=$472;
     var $544=(($v_3_lcssa_i+16)|0);
     var $545=HEAP32[(($544)>>2)];
     var $546=($545|0)==0;
     do {
      if (!($546)) {
       var $548=$545;
       var $549=HEAP32[((10656)>>2)];
       var $550=($548>>>0)<($549>>>0);
       if ($550) {
        _abort();
       } else {
        var $552=(($R_1_i122+16)|0);
        HEAP32[(($552)>>2)]=$545;
        var $553=(($545+24)|0);
        HEAP32[(($553)>>2)]=$R_1_i122;
        break;
       }
      }
     } while(0);
     var $556=(($v_3_lcssa_i+20)|0);
     var $557=HEAP32[(($556)>>2)];
     var $558=($557|0)==0;
     if ($558) {
      break;
     }
     var $560=$557;
     var $561=HEAP32[((10656)>>2)];
     var $562=($560>>>0)<($561>>>0);
     if ($562) {
      _abort();
     } else {
      var $564=(($R_1_i122+20)|0);
      HEAP32[(($564)>>2)]=$557;
      var $565=(($557+24)|0);
      HEAP32[(($565)>>2)]=$R_1_i122;
      break;
     }
    }
   } while(0);
   var $569=($rsize_3_lcssa_i>>>0)<16;
   do {
    if ($569) {
     var $571=((($rsize_3_lcssa_i)+($349))|0);
     var $572=$571|3;
     var $573=(($v_3_lcssa_i+4)|0);
     HEAP32[(($573)>>2)]=$572;
     var $_sum19_i=((($571)+(4))|0);
     var $574=(($463+$_sum19_i)|0);
     var $575=$574;
     var $576=HEAP32[(($575)>>2)];
     var $577=$576|1;
     HEAP32[(($575)>>2)]=$577;
    } else {
     var $579=$349|3;
     var $580=(($v_3_lcssa_i+4)|0);
     HEAP32[(($580)>>2)]=$579;
     var $581=$rsize_3_lcssa_i|1;
     var $_sum_i125136=$349|4;
     var $582=(($463+$_sum_i125136)|0);
     var $583=$582;
     HEAP32[(($583)>>2)]=$581;
     var $_sum1_i126=((($rsize_3_lcssa_i)+($349))|0);
     var $584=(($463+$_sum1_i126)|0);
     var $585=$584;
     HEAP32[(($585)>>2)]=$rsize_3_lcssa_i;
     var $586=$rsize_3_lcssa_i>>>3;
     var $587=($rsize_3_lcssa_i>>>0)<256;
     if ($587) {
      var $589=$586<<1;
      var $590=((10680+($589<<2))|0);
      var $591=$590;
      var $592=HEAP32[((10640)>>2)];
      var $593=1<<$586;
      var $594=$592&$593;
      var $595=($594|0)==0;
      do {
       if ($595) {
        var $597=$592|$593;
        HEAP32[((10640)>>2)]=$597;
        var $_sum15_pre_i=((($589)+(2))|0);
        var $_pre_i127=((10680+($_sum15_pre_i<<2))|0);
        var $F5_0_i=$591;var $_pre_phi_i128=$_pre_i127;
       } else {
        var $_sum18_i=((($589)+(2))|0);
        var $599=((10680+($_sum18_i<<2))|0);
        var $600=HEAP32[(($599)>>2)];
        var $601=$600;
        var $602=HEAP32[((10656)>>2)];
        var $603=($601>>>0)<($602>>>0);
        if (!($603)) {
         var $F5_0_i=$600;var $_pre_phi_i128=$599;
         break;
        }
        _abort();
       }
      } while(0);
      var $_pre_phi_i128;
      var $F5_0_i;
      HEAP32[(($_pre_phi_i128)>>2)]=$468;
      var $606=(($F5_0_i+12)|0);
      HEAP32[(($606)>>2)]=$468;
      var $_sum16_i=((($349)+(8))|0);
      var $607=(($463+$_sum16_i)|0);
      var $608=$607;
      HEAP32[(($608)>>2)]=$F5_0_i;
      var $_sum17_i=((($349)+(12))|0);
      var $609=(($463+$_sum17_i)|0);
      var $610=$609;
      HEAP32[(($610)>>2)]=$591;
      break;
     }
     var $612=$467;
     var $613=$rsize_3_lcssa_i>>>8;
     var $614=($613|0)==0;
     do {
      if ($614) {
       var $I7_0_i=0;
      } else {
       var $616=($rsize_3_lcssa_i>>>0)>16777215;
       if ($616) {
        var $I7_0_i=31;
        break;
       }
       var $618=((($613)+(1048320))|0);
       var $619=$618>>>16;
       var $620=$619&8;
       var $621=$613<<$620;
       var $622=((($621)+(520192))|0);
       var $623=$622>>>16;
       var $624=$623&4;
       var $625=$624|$620;
       var $626=$621<<$624;
       var $627=((($626)+(245760))|0);
       var $628=$627>>>16;
       var $629=$628&2;
       var $630=$625|$629;
       var $631=(((14)-($630))|0);
       var $632=$626<<$629;
       var $633=$632>>>15;
       var $634=((($631)+($633))|0);
       var $635=$634<<1;
       var $636=((($634)+(7))|0);
       var $637=$rsize_3_lcssa_i>>>($636>>>0);
       var $638=$637&1;
       var $639=$638|$635;
       var $I7_0_i=$639;
      }
     } while(0);
     var $I7_0_i;
     var $641=((10944+($I7_0_i<<2))|0);
     var $_sum2_i=((($349)+(28))|0);
     var $642=(($463+$_sum2_i)|0);
     var $643=$642;
     HEAP32[(($643)>>2)]=$I7_0_i;
     var $_sum3_i129=((($349)+(16))|0);
     var $644=(($463+$_sum3_i129)|0);
     var $_sum4_i130=((($349)+(20))|0);
     var $645=(($463+$_sum4_i130)|0);
     var $646=$645;
     HEAP32[(($646)>>2)]=0;
     var $647=$644;
     HEAP32[(($647)>>2)]=0;
     var $648=HEAP32[((10644)>>2)];
     var $649=1<<$I7_0_i;
     var $650=$648&$649;
     var $651=($650|0)==0;
     if ($651) {
      var $653=$648|$649;
      HEAP32[((10644)>>2)]=$653;
      HEAP32[(($641)>>2)]=$612;
      var $654=$641;
      var $_sum5_i=((($349)+(24))|0);
      var $655=(($463+$_sum5_i)|0);
      var $656=$655;
      HEAP32[(($656)>>2)]=$654;
      var $_sum6_i=((($349)+(12))|0);
      var $657=(($463+$_sum6_i)|0);
      var $658=$657;
      HEAP32[(($658)>>2)]=$612;
      var $_sum7_i=((($349)+(8))|0);
      var $659=(($463+$_sum7_i)|0);
      var $660=$659;
      HEAP32[(($660)>>2)]=$612;
      break;
     }
     var $662=HEAP32[(($641)>>2)];
     var $663=($I7_0_i|0)==31;
     if ($663) {
      var $668=0;
     } else {
      var $665=$I7_0_i>>>1;
      var $666=(((25)-($665))|0);
      var $668=$666;
     }
     var $668;
     var $669=$rsize_3_lcssa_i<<$668;
     var $K12_0_i=$669;var $T_0_i=$662;
     while(1) {
      var $T_0_i;
      var $K12_0_i;
      var $671=(($T_0_i+4)|0);
      var $672=HEAP32[(($671)>>2)];
      var $673=$672&-8;
      var $674=($673|0)==($rsize_3_lcssa_i|0);
      if ($674) {
       break;
      }
      var $676=$K12_0_i>>>31;
      var $677=(($T_0_i+16+($676<<2))|0);
      var $678=HEAP32[(($677)>>2)];
      var $679=($678|0)==0;
      var $680=$K12_0_i<<1;
      if ($679) {
       label = 6229;
       break;
      } else {
       var $K12_0_i=$680;var $T_0_i=$678;
      }
     }
     if (label == 6229) {
      var $682=$677;
      var $683=HEAP32[((10656)>>2)];
      var $684=($682>>>0)<($683>>>0);
      if ($684) {
       _abort();
      } else {
       HEAP32[(($677)>>2)]=$612;
       var $_sum12_i=((($349)+(24))|0);
       var $686=(($463+$_sum12_i)|0);
       var $687=$686;
       HEAP32[(($687)>>2)]=$T_0_i;
       var $_sum13_i=((($349)+(12))|0);
       var $688=(($463+$_sum13_i)|0);
       var $689=$688;
       HEAP32[(($689)>>2)]=$612;
       var $_sum14_i=((($349)+(8))|0);
       var $690=(($463+$_sum14_i)|0);
       var $691=$690;
       HEAP32[(($691)>>2)]=$612;
       break;
      }
     }
     var $694=(($T_0_i+8)|0);
     var $695=HEAP32[(($694)>>2)];
     var $696=$T_0_i;
     var $697=HEAP32[((10656)>>2)];
     var $698=($696>>>0)<($697>>>0);
     if ($698) {
      _abort();
     }
     var $700=$695;
     var $701=($700>>>0)<($697>>>0);
     if ($701) {
      _abort();
     } else {
      var $703=(($695+12)|0);
      HEAP32[(($703)>>2)]=$612;
      HEAP32[(($694)>>2)]=$612;
      var $_sum9_i=((($349)+(8))|0);
      var $704=(($463+$_sum9_i)|0);
      var $705=$704;
      HEAP32[(($705)>>2)]=$695;
      var $_sum10_i=((($349)+(12))|0);
      var $706=(($463+$_sum10_i)|0);
      var $707=$706;
      HEAP32[(($707)>>2)]=$T_0_i;
      var $_sum11_i=((($349)+(24))|0);
      var $708=(($463+$_sum11_i)|0);
      var $709=$708;
      HEAP32[(($709)>>2)]=0;
      break;
     }
    }
   } while(0);
   var $711=(($v_3_lcssa_i+8)|0);
   var $712=$711;
   var $713=($711|0)==0;
   if ($713) {
    var $nb_0=$349;
    break;
   } else {
    var $mem_0=$712;
   }
   var $mem_0;
   return $mem_0;
  }
 } while(0);
 var $nb_0;
 var $714=HEAP32[((10648)>>2)];
 var $715=($nb_0>>>0)>($714>>>0);
 if (!($715)) {
  var $717=((($714)-($nb_0))|0);
  var $718=HEAP32[((10660)>>2)];
  var $719=($717>>>0)>15;
  if ($719) {
   var $721=$718;
   var $722=(($721+$nb_0)|0);
   var $723=$722;
   HEAP32[((10660)>>2)]=$723;
   HEAP32[((10648)>>2)]=$717;
   var $724=$717|1;
   var $_sum102=((($nb_0)+(4))|0);
   var $725=(($721+$_sum102)|0);
   var $726=$725;
   HEAP32[(($726)>>2)]=$724;
   var $727=(($721+$714)|0);
   var $728=$727;
   HEAP32[(($728)>>2)]=$717;
   var $729=$nb_0|3;
   var $730=(($718+4)|0);
   HEAP32[(($730)>>2)]=$729;
  } else {
   HEAP32[((10648)>>2)]=0;
   HEAP32[((10660)>>2)]=0;
   var $732=$714|3;
   var $733=(($718+4)|0);
   HEAP32[(($733)>>2)]=$732;
   var $734=$718;
   var $_sum101=((($714)+(4))|0);
   var $735=(($734+$_sum101)|0);
   var $736=$735;
   var $737=HEAP32[(($736)>>2)];
   var $738=$737|1;
   HEAP32[(($736)>>2)]=$738;
  }
  var $740=(($718+8)|0);
  var $741=$740;
  var $mem_0=$741;
  var $mem_0;
  return $mem_0;
 }
 var $743=HEAP32[((10652)>>2)];
 var $744=($nb_0>>>0)<($743>>>0);
 if ($744) {
  var $746=((($743)-($nb_0))|0);
  HEAP32[((10652)>>2)]=$746;
  var $747=HEAP32[((10664)>>2)];
  var $748=$747;
  var $749=(($748+$nb_0)|0);
  var $750=$749;
  HEAP32[((10664)>>2)]=$750;
  var $751=$746|1;
  var $_sum=((($nb_0)+(4))|0);
  var $752=(($748+$_sum)|0);
  var $753=$752;
  HEAP32[(($753)>>2)]=$751;
  var $754=$nb_0|3;
  var $755=(($747+4)|0);
  HEAP32[(($755)>>2)]=$754;
  var $756=(($747+8)|0);
  var $757=$756;
  var $mem_0=$757;
  var $mem_0;
  return $mem_0;
 }
 var $759=HEAP32[((10576)>>2)];
 var $760=($759|0)==0;
 do {
  if ($760) {
   var $762=_sysconf(30);
   var $763=((($762)-(1))|0);
   var $764=$763&$762;
   var $765=($764|0)==0;
   if ($765) {
    HEAP32[((10584)>>2)]=$762;
    HEAP32[((10580)>>2)]=$762;
    HEAP32[((10588)>>2)]=-1;
    HEAP32[((10592)>>2)]=-1;
    HEAP32[((10596)>>2)]=0;
    HEAP32[((11084)>>2)]=0;
    var $767=_time(0);
    var $768=$767&-16;
    var $769=$768^1431655768;
    HEAP32[((10576)>>2)]=$769;
    break;
   } else {
    _abort();
   }
  }
 } while(0);
 var $771=((($nb_0)+(48))|0);
 var $772=HEAP32[((10584)>>2)];
 var $773=((($nb_0)+(47))|0);
 var $774=((($772)+($773))|0);
 var $775=(((-$772))|0);
 var $776=$774&$775;
 var $777=($776>>>0)>($nb_0>>>0);
 if (!($777)) {
  var $mem_0=0;
  var $mem_0;
  return $mem_0;
 }
 var $779=HEAP32[((11080)>>2)];
 var $780=($779|0)==0;
 do {
  if (!($780)) {
   var $782=HEAP32[((11072)>>2)];
   var $783=((($782)+($776))|0);
   var $784=($783>>>0)<=($782>>>0);
   var $785=($783>>>0)>($779>>>0);
   var $or_cond1_i=$784|$785;
   if ($or_cond1_i) {
    var $mem_0=0;
   } else {
    break;
   }
   var $mem_0;
   return $mem_0;
  }
 } while(0);
 var $787=HEAP32[((11084)>>2)];
 var $788=$787&4;
 var $789=($788|0)==0;
 L8353: do {
  if ($789) {
   var $791=HEAP32[((10664)>>2)];
   var $792=($791|0)==0;
   L8355: do {
    if ($792) {
     label = 6259;
    } else {
     var $794=$791;
     var $sp_0_i_i=11088;
     while(1) {
      var $sp_0_i_i;
      var $796=(($sp_0_i_i)|0);
      var $797=HEAP32[(($796)>>2)];
      var $798=($797>>>0)>($794>>>0);
      if (!($798)) {
       var $800=(($sp_0_i_i+4)|0);
       var $801=HEAP32[(($800)>>2)];
       var $802=(($797+$801)|0);
       var $803=($802>>>0)>($794>>>0);
       if ($803) {
        break;
       }
      }
      var $805=(($sp_0_i_i+8)|0);
      var $806=HEAP32[(($805)>>2)];
      var $807=($806|0)==0;
      if ($807) {
       label = 6259;
       break L8355;
      } else {
       var $sp_0_i_i=$806;
      }
     }
     var $808=($sp_0_i_i|0)==0;
     if ($808) {
      label = 6259;
      break;
     }
     var $838=HEAP32[((10652)>>2)];
     var $839=((($774)-($838))|0);
     var $840=$839&$775;
     var $841=($840>>>0)<2147483647;
     if (!($841)) {
      var $tsize_0303639_i=0;
      break;
     }
     var $843=_sbrk($840);
     var $844=HEAP32[(($796)>>2)];
     var $845=HEAP32[(($800)>>2)];
     var $846=(($844+$845)|0);
     var $847=($843|0)==($846|0);
     var $_3_i=$847?$840:0;
     var $_4_i=$847?$843:-1;
     var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$843;var $ssize_1_i=$840;
     label = 6268;
    }
   } while(0);
   do {
    if (label == 6259) {
     var $809=_sbrk(0);
     var $810=($809|0)==-1;
     if ($810) {
      var $tsize_0303639_i=0;
      break;
     }
     var $812=$809;
     var $813=HEAP32[((10580)>>2)];
     var $814=((($813)-(1))|0);
     var $815=$814&$812;
     var $816=($815|0)==0;
     if ($816) {
      var $ssize_0_i=$776;
     } else {
      var $818=((($814)+($812))|0);
      var $819=(((-$813))|0);
      var $820=$818&$819;
      var $821=((($776)-($812))|0);
      var $822=((($821)+($820))|0);
      var $ssize_0_i=$822;
     }
     var $ssize_0_i;
     var $824=HEAP32[((11072)>>2)];
     var $825=((($824)+($ssize_0_i))|0);
     var $826=($ssize_0_i>>>0)>($nb_0>>>0);
     var $827=($ssize_0_i>>>0)<2147483647;
     var $or_cond_i131=$826&$827;
     if (!($or_cond_i131)) {
      var $tsize_0303639_i=0;
      break;
     }
     var $829=HEAP32[((11080)>>2)];
     var $830=($829|0)==0;
     if (!($830)) {
      var $832=($825>>>0)<=($824>>>0);
      var $833=($825>>>0)>($829>>>0);
      var $or_cond2_i=$832|$833;
      if ($or_cond2_i) {
       var $tsize_0303639_i=0;
       break;
      }
     }
     var $835=_sbrk($ssize_0_i);
     var $836=($835|0)==($809|0);
     var $ssize_0__i=$836?$ssize_0_i:0;
     var $__i=$836?$809:-1;
     var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$835;var $ssize_1_i=$ssize_0_i;
     label = 6268;
    }
   } while(0);
   L8375: do {
    if (label == 6268) {
     var $ssize_1_i;
     var $br_0_i;
     var $tsize_0_i;
     var $tbase_0_i;
     var $849=(((-$ssize_1_i))|0);
     var $850=($tbase_0_i|0)==-1;
     if (!($850)) {
      var $tsize_244_i=$tsize_0_i;var $tbase_245_i=$tbase_0_i;
      label = 6279;
      break L8353;
     }
     var $852=($br_0_i|0)!=-1;
     var $853=($ssize_1_i>>>0)<2147483647;
     var $or_cond5_i=$852&$853;
     var $854=($ssize_1_i>>>0)<($771>>>0);
     var $or_cond6_i=$or_cond5_i&$854;
     do {
      if ($or_cond6_i) {
       var $856=HEAP32[((10584)>>2)];
       var $857=((($773)-($ssize_1_i))|0);
       var $858=((($857)+($856))|0);
       var $859=(((-$856))|0);
       var $860=$858&$859;
       var $861=($860>>>0)<2147483647;
       if (!($861)) {
        var $ssize_2_i=$ssize_1_i;
        break;
       }
       var $863=_sbrk($860);
       var $864=($863|0)==-1;
       if ($864) {
        var $868=_sbrk($849);
        var $tsize_0303639_i=$tsize_0_i;
        break L8375;
       } else {
        var $866=((($860)+($ssize_1_i))|0);
        var $ssize_2_i=$866;
        break;
       }
      } else {
       var $ssize_2_i=$ssize_1_i;
      }
     } while(0);
     var $ssize_2_i;
     var $870=($br_0_i|0)==-1;
     if ($870) {
      var $tsize_0303639_i=$tsize_0_i;
     } else {
      var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_0_i;
      label = 6279;
      break L8353;
     }
    }
   } while(0);
   var $tsize_0303639_i;
   var $871=HEAP32[((11084)>>2)];
   var $872=$871|4;
   HEAP32[((11084)>>2)]=$872;
   var $tsize_1_i=$tsize_0303639_i;
   label = 6276;
  } else {
   var $tsize_1_i=0;
   label = 6276;
  }
 } while(0);
 do {
  if (label == 6276) {
   var $tsize_1_i;
   var $874=($776>>>0)<2147483647;
   if (!($874)) {
    break;
   }
   var $876=_sbrk($776);
   var $877=_sbrk(0);
   var $notlhs_i=($876|0)!=-1;
   var $notrhs_i=($877|0)!=-1;
   var $or_cond8_not_i=$notrhs_i&$notlhs_i;
   var $878=($876>>>0)<($877>>>0);
   var $or_cond9_i=$or_cond8_not_i&$878;
   if (!($or_cond9_i)) {
    break;
   }
   var $879=$877;
   var $880=$876;
   var $881=((($879)-($880))|0);
   var $882=((($nb_0)+(40))|0);
   var $883=($881>>>0)>($882>>>0);
   var $_tsize_1_i=$883?$881:$tsize_1_i;
   var $_tbase_1_i=$883?$876:-1;
   var $884=($_tbase_1_i|0)==-1;
   if (!($884)) {
    var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$_tbase_1_i;
    label = 6279;
   }
  }
 } while(0);
 do {
  if (label == 6279) {
   var $tbase_245_i;
   var $tsize_244_i;
   var $885=HEAP32[((11072)>>2)];
   var $886=((($885)+($tsize_244_i))|0);
   HEAP32[((11072)>>2)]=$886;
   var $887=HEAP32[((11076)>>2)];
   var $888=($886>>>0)>($887>>>0);
   if ($888) {
    HEAP32[((11076)>>2)]=$886;
   }
   var $890=HEAP32[((10664)>>2)];
   var $891=($890|0)==0;
   L8395: do {
    if ($891) {
     var $893=HEAP32[((10656)>>2)];
     var $894=($893|0)==0;
     var $895=($tbase_245_i>>>0)<($893>>>0);
     var $or_cond10_i=$894|$895;
     if ($or_cond10_i) {
      HEAP32[((10656)>>2)]=$tbase_245_i;
     }
     HEAP32[((11088)>>2)]=$tbase_245_i;
     HEAP32[((11092)>>2)]=$tsize_244_i;
     HEAP32[((11100)>>2)]=0;
     var $897=HEAP32[((10576)>>2)];
     HEAP32[((10676)>>2)]=$897;
     HEAP32[((10672)>>2)]=-1;
     var $i_02_i_i=0;
     while(1) {
      var $i_02_i_i;
      var $899=$i_02_i_i<<1;
      var $900=((10680+($899<<2))|0);
      var $901=$900;
      var $_sum_i_i=((($899)+(3))|0);
      var $902=((10680+($_sum_i_i<<2))|0);
      HEAP32[(($902)>>2)]=$901;
      var $_sum1_i_i=((($899)+(2))|0);
      var $903=((10680+($_sum1_i_i<<2))|0);
      HEAP32[(($903)>>2)]=$901;
      var $904=((($i_02_i_i)+(1))|0);
      var $905=($904>>>0)<32;
      if ($905) {
       var $i_02_i_i=$904;
      } else {
       break;
      }
     }
     var $906=((($tsize_244_i)-(40))|0);
     var $907=(($tbase_245_i+8)|0);
     var $908=$907;
     var $909=$908&7;
     var $910=($909|0)==0;
     if ($910) {
      var $914=0;
     } else {
      var $912=(((-$908))|0);
      var $913=$912&7;
      var $914=$913;
     }
     var $914;
     var $915=(($tbase_245_i+$914)|0);
     var $916=$915;
     var $917=((($906)-($914))|0);
     HEAP32[((10664)>>2)]=$916;
     HEAP32[((10652)>>2)]=$917;
     var $918=$917|1;
     var $_sum_i14_i=((($914)+(4))|0);
     var $919=(($tbase_245_i+$_sum_i14_i)|0);
     var $920=$919;
     HEAP32[(($920)>>2)]=$918;
     var $_sum2_i_i=((($tsize_244_i)-(36))|0);
     var $921=(($tbase_245_i+$_sum2_i_i)|0);
     var $922=$921;
     HEAP32[(($922)>>2)]=40;
     var $923=HEAP32[((10592)>>2)];
     HEAP32[((10668)>>2)]=$923;
    } else {
     var $sp_067_i=11088;
     while(1) {
      var $sp_067_i;
      var $924=(($sp_067_i)|0);
      var $925=HEAP32[(($924)>>2)];
      var $926=(($sp_067_i+4)|0);
      var $927=HEAP32[(($926)>>2)];
      var $928=(($925+$927)|0);
      var $929=($tbase_245_i|0)==($928|0);
      if ($929) {
       label = 6291;
       break;
      }
      var $931=(($sp_067_i+8)|0);
      var $932=HEAP32[(($931)>>2)];
      var $933=($932|0)==0;
      if ($933) {
       break;
      } else {
       var $sp_067_i=$932;
      }
     }
     do {
      if (label == 6291) {
       var $934=(($sp_067_i+12)|0);
       var $935=HEAP32[(($934)>>2)];
       var $936=$935&8;
       var $937=($936|0)==0;
       if (!($937)) {
        break;
       }
       var $939=$890;
       var $940=($939>>>0)>=($925>>>0);
       var $941=($939>>>0)<($tbase_245_i>>>0);
       var $or_cond47_i=$940&$941;
       if (!($or_cond47_i)) {
        break;
       }
       var $943=((($927)+($tsize_244_i))|0);
       HEAP32[(($926)>>2)]=$943;
       var $944=HEAP32[((10664)>>2)];
       var $945=HEAP32[((10652)>>2)];
       var $946=((($945)+($tsize_244_i))|0);
       var $947=$944;
       var $948=(($944+8)|0);
       var $949=$948;
       var $950=$949&7;
       var $951=($950|0)==0;
       if ($951) {
        var $955=0;
       } else {
        var $953=(((-$949))|0);
        var $954=$953&7;
        var $955=$954;
       }
       var $955;
       var $956=(($947+$955)|0);
       var $957=$956;
       var $958=((($946)-($955))|0);
       HEAP32[((10664)>>2)]=$957;
       HEAP32[((10652)>>2)]=$958;
       var $959=$958|1;
       var $_sum_i18_i=((($955)+(4))|0);
       var $960=(($947+$_sum_i18_i)|0);
       var $961=$960;
       HEAP32[(($961)>>2)]=$959;
       var $_sum2_i19_i=((($946)+(4))|0);
       var $962=(($947+$_sum2_i19_i)|0);
       var $963=$962;
       HEAP32[(($963)>>2)]=40;
       var $964=HEAP32[((10592)>>2)];
       HEAP32[((10668)>>2)]=$964;
       break L8395;
      }
     } while(0);
     var $965=HEAP32[((10656)>>2)];
     var $966=($tbase_245_i>>>0)<($965>>>0);
     if ($966) {
      HEAP32[((10656)>>2)]=$tbase_245_i;
     }
     var $968=(($tbase_245_i+$tsize_244_i)|0);
     var $sp_160_i=11088;
     while(1) {
      var $sp_160_i;
      var $970=(($sp_160_i)|0);
      var $971=HEAP32[(($970)>>2)];
      var $972=($971|0)==($968|0);
      if ($972) {
       label = 6301;
       break;
      }
      var $974=(($sp_160_i+8)|0);
      var $975=HEAP32[(($974)>>2)];
      var $976=($975|0)==0;
      if ($976) {
       break;
      } else {
       var $sp_160_i=$975;
      }
     }
     do {
      if (label == 6301) {
       var $977=(($sp_160_i+12)|0);
       var $978=HEAP32[(($977)>>2)];
       var $979=$978&8;
       var $980=($979|0)==0;
       if (!($980)) {
        break;
       }
       HEAP32[(($970)>>2)]=$tbase_245_i;
       var $982=(($sp_160_i+4)|0);
       var $983=HEAP32[(($982)>>2)];
       var $984=((($983)+($tsize_244_i))|0);
       HEAP32[(($982)>>2)]=$984;
       var $985=(($tbase_245_i+8)|0);
       var $986=$985;
       var $987=$986&7;
       var $988=($987|0)==0;
       if ($988) {
        var $993=0;
       } else {
        var $990=(((-$986))|0);
        var $991=$990&7;
        var $993=$991;
       }
       var $993;
       var $994=(($tbase_245_i+$993)|0);
       var $_sum93_i=((($tsize_244_i)+(8))|0);
       var $995=(($tbase_245_i+$_sum93_i)|0);
       var $996=$995;
       var $997=$996&7;
       var $998=($997|0)==0;
       if ($998) {
        var $1003=0;
       } else {
        var $1000=(((-$996))|0);
        var $1001=$1000&7;
        var $1003=$1001;
       }
       var $1003;
       var $_sum94_i=((($1003)+($tsize_244_i))|0);
       var $1004=(($tbase_245_i+$_sum94_i)|0);
       var $1005=$1004;
       var $1006=$1004;
       var $1007=$994;
       var $1008=((($1006)-($1007))|0);
       var $_sum_i21_i=((($993)+($nb_0))|0);
       var $1009=(($tbase_245_i+$_sum_i21_i)|0);
       var $1010=$1009;
       var $1011=((($1008)-($nb_0))|0);
       var $1012=$nb_0|3;
       var $_sum1_i22_i=((($993)+(4))|0);
       var $1013=(($tbase_245_i+$_sum1_i22_i)|0);
       var $1014=$1013;
       HEAP32[(($1014)>>2)]=$1012;
       var $1015=HEAP32[((10664)>>2)];
       var $1016=($1005|0)==($1015|0);
       do {
        if ($1016) {
         var $1018=HEAP32[((10652)>>2)];
         var $1019=((($1018)+($1011))|0);
         HEAP32[((10652)>>2)]=$1019;
         HEAP32[((10664)>>2)]=$1010;
         var $1020=$1019|1;
         var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
         var $1021=(($tbase_245_i+$_sum46_i_i)|0);
         var $1022=$1021;
         HEAP32[(($1022)>>2)]=$1020;
        } else {
         var $1024=HEAP32[((10660)>>2)];
         var $1025=($1005|0)==($1024|0);
         if ($1025) {
          var $1027=HEAP32[((10648)>>2)];
          var $1028=((($1027)+($1011))|0);
          HEAP32[((10648)>>2)]=$1028;
          HEAP32[((10660)>>2)]=$1010;
          var $1029=$1028|1;
          var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
          var $1030=(($tbase_245_i+$_sum44_i_i)|0);
          var $1031=$1030;
          HEAP32[(($1031)>>2)]=$1029;
          var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
          var $1032=(($tbase_245_i+$_sum45_i_i)|0);
          var $1033=$1032;
          HEAP32[(($1033)>>2)]=$1028;
          break;
         }
         var $_sum2_i23_i=((($tsize_244_i)+(4))|0);
         var $_sum95_i=((($_sum2_i23_i)+($1003))|0);
         var $1035=(($tbase_245_i+$_sum95_i)|0);
         var $1036=$1035;
         var $1037=HEAP32[(($1036)>>2)];
         var $1038=$1037&3;
         var $1039=($1038|0)==1;
         if ($1039) {
          var $1041=$1037&-8;
          var $1042=$1037>>>3;
          var $1043=($1037>>>0)<256;
          L8430: do {
           if ($1043) {
            var $_sum3940_i_i=$1003|8;
            var $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);
            var $1045=(($tbase_245_i+$_sum105_i)|0);
            var $1046=$1045;
            var $1047=HEAP32[(($1046)>>2)];
            var $_sum41_i_i=((($tsize_244_i)+(12))|0);
            var $_sum106_i=((($_sum41_i_i)+($1003))|0);
            var $1048=(($tbase_245_i+$_sum106_i)|0);
            var $1049=$1048;
            var $1050=HEAP32[(($1049)>>2)];
            var $1051=$1042<<1;
            var $1052=((10680+($1051<<2))|0);
            var $1053=$1052;
            var $1054=($1047|0)==($1053|0);
            do {
             if (!($1054)) {
              var $1056=$1047;
              var $1057=HEAP32[((10656)>>2)];
              var $1058=($1056>>>0)<($1057>>>0);
              if ($1058) {
               _abort();
              }
              var $1060=(($1047+12)|0);
              var $1061=HEAP32[(($1060)>>2)];
              var $1062=($1061|0)==($1005|0);
              if ($1062) {
               break;
              }
              _abort();
             }
            } while(0);
            var $1063=($1050|0)==($1047|0);
            if ($1063) {
             var $1065=1<<$1042;
             var $1066=$1065^-1;
             var $1067=HEAP32[((10640)>>2)];
             var $1068=$1067&$1066;
             HEAP32[((10640)>>2)]=$1068;
             break;
            }
            var $1070=($1050|0)==($1053|0);
            do {
             if ($1070) {
              var $_pre56_i_i=(($1050+8)|0);
              var $_pre_phi57_i_i=$_pre56_i_i;
             } else {
              var $1072=$1050;
              var $1073=HEAP32[((10656)>>2)];
              var $1074=($1072>>>0)<($1073>>>0);
              if ($1074) {
               _abort();
              }
              var $1076=(($1050+8)|0);
              var $1077=HEAP32[(($1076)>>2)];
              var $1078=($1077|0)==($1005|0);
              if ($1078) {
               var $_pre_phi57_i_i=$1076;
               break;
              }
              _abort();
             }
            } while(0);
            var $_pre_phi57_i_i;
            var $1079=(($1047+12)|0);
            HEAP32[(($1079)>>2)]=$1050;
            HEAP32[(($_pre_phi57_i_i)>>2)]=$1047;
           } else {
            var $1081=$1004;
            var $_sum34_i_i=$1003|24;
            var $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
            var $1082=(($tbase_245_i+$_sum96_i)|0);
            var $1083=$1082;
            var $1084=HEAP32[(($1083)>>2)];
            var $_sum5_i_i=((($tsize_244_i)+(12))|0);
            var $_sum97_i=((($_sum5_i_i)+($1003))|0);
            var $1085=(($tbase_245_i+$_sum97_i)|0);
            var $1086=$1085;
            var $1087=HEAP32[(($1086)>>2)];
            var $1088=($1087|0)==($1081|0);
            do {
             if ($1088) {
              var $_sum67_i_i=$1003|16;
              var $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
              var $1106=(($tbase_245_i+$_sum103_i)|0);
              var $1107=$1106;
              var $1108=HEAP32[(($1107)>>2)];
              var $1109=($1108|0)==0;
              if ($1109) {
               var $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
               var $1111=(($tbase_245_i+$_sum104_i)|0);
               var $1112=$1111;
               var $1113=HEAP32[(($1112)>>2)];
               var $1114=($1113|0)==0;
               if ($1114) {
                var $R_1_i_i=0;
                break;
               } else {
                var $R_0_i_i=$1113;var $RP_0_i_i=$1112;
               }
              } else {
               var $R_0_i_i=$1108;var $RP_0_i_i=$1107;
              }
              while(1) {
               var $RP_0_i_i;
               var $R_0_i_i;
               var $1115=(($R_0_i_i+20)|0);
               var $1116=HEAP32[(($1115)>>2)];
               var $1117=($1116|0)==0;
               if (!($1117)) {
                var $R_0_i_i=$1116;var $RP_0_i_i=$1115;
                continue;
               }
               var $1119=(($R_0_i_i+16)|0);
               var $1120=HEAP32[(($1119)>>2)];
               var $1121=($1120|0)==0;
               if ($1121) {
                break;
               } else {
                var $R_0_i_i=$1120;var $RP_0_i_i=$1119;
               }
              }
              var $1123=$RP_0_i_i;
              var $1124=HEAP32[((10656)>>2)];
              var $1125=($1123>>>0)<($1124>>>0);
              if ($1125) {
               _abort();
              } else {
               HEAP32[(($RP_0_i_i)>>2)]=0;
               var $R_1_i_i=$R_0_i_i;
               break;
              }
             } else {
              var $_sum3637_i_i=$1003|8;
              var $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);
              var $1090=(($tbase_245_i+$_sum98_i)|0);
              var $1091=$1090;
              var $1092=HEAP32[(($1091)>>2)];
              var $1093=$1092;
              var $1094=HEAP32[((10656)>>2)];
              var $1095=($1093>>>0)<($1094>>>0);
              if ($1095) {
               _abort();
              }
              var $1097=(($1092+12)|0);
              var $1098=HEAP32[(($1097)>>2)];
              var $1099=($1098|0)==($1081|0);
              if (!($1099)) {
               _abort();
              }
              var $1101=(($1087+8)|0);
              var $1102=HEAP32[(($1101)>>2)];
              var $1103=($1102|0)==($1081|0);
              if ($1103) {
               HEAP32[(($1097)>>2)]=$1087;
               HEAP32[(($1101)>>2)]=$1092;
               var $R_1_i_i=$1087;
               break;
              } else {
               _abort();
              }
             }
            } while(0);
            var $R_1_i_i;
            var $1129=($1084|0)==0;
            if ($1129) {
             break;
            }
            var $_sum31_i_i=((($tsize_244_i)+(28))|0);
            var $_sum99_i=((($_sum31_i_i)+($1003))|0);
            var $1131=(($tbase_245_i+$_sum99_i)|0);
            var $1132=$1131;
            var $1133=HEAP32[(($1132)>>2)];
            var $1134=((10944+($1133<<2))|0);
            var $1135=HEAP32[(($1134)>>2)];
            var $1136=($1081|0)==($1135|0);
            do {
             if ($1136) {
              HEAP32[(($1134)>>2)]=$R_1_i_i;
              var $cond_i_i=($R_1_i_i|0)==0;
              if (!($cond_i_i)) {
               break;
              }
              var $1138=HEAP32[(($1132)>>2)];
              var $1139=1<<$1138;
              var $1140=$1139^-1;
              var $1141=HEAP32[((10644)>>2)];
              var $1142=$1141&$1140;
              HEAP32[((10644)>>2)]=$1142;
              break L8430;
             } else {
              var $1144=$1084;
              var $1145=HEAP32[((10656)>>2)];
              var $1146=($1144>>>0)<($1145>>>0);
              if ($1146) {
               _abort();
              }
              var $1148=(($1084+16)|0);
              var $1149=HEAP32[(($1148)>>2)];
              var $1150=($1149|0)==($1081|0);
              if ($1150) {
               HEAP32[(($1148)>>2)]=$R_1_i_i;
              } else {
               var $1153=(($1084+20)|0);
               HEAP32[(($1153)>>2)]=$R_1_i_i;
              }
              var $1156=($R_1_i_i|0)==0;
              if ($1156) {
               break L8430;
              }
             }
            } while(0);
            var $1158=$R_1_i_i;
            var $1159=HEAP32[((10656)>>2)];
            var $1160=($1158>>>0)<($1159>>>0);
            if ($1160) {
             _abort();
            }
            var $1162=(($R_1_i_i+24)|0);
            HEAP32[(($1162)>>2)]=$1084;
            var $_sum3233_i_i=$1003|16;
            var $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);
            var $1163=(($tbase_245_i+$_sum100_i)|0);
            var $1164=$1163;
            var $1165=HEAP32[(($1164)>>2)];
            var $1166=($1165|0)==0;
            do {
             if (!($1166)) {
              var $1168=$1165;
              var $1169=HEAP32[((10656)>>2)];
              var $1170=($1168>>>0)<($1169>>>0);
              if ($1170) {
               _abort();
              } else {
               var $1172=(($R_1_i_i+16)|0);
               HEAP32[(($1172)>>2)]=$1165;
               var $1173=(($1165+24)|0);
               HEAP32[(($1173)>>2)]=$R_1_i_i;
               break;
              }
             }
            } while(0);
            var $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
            var $1176=(($tbase_245_i+$_sum101_i)|0);
            var $1177=$1176;
            var $1178=HEAP32[(($1177)>>2)];
            var $1179=($1178|0)==0;
            if ($1179) {
             break;
            }
            var $1181=$1178;
            var $1182=HEAP32[((10656)>>2)];
            var $1183=($1181>>>0)<($1182>>>0);
            if ($1183) {
             _abort();
            } else {
             var $1185=(($R_1_i_i+20)|0);
             HEAP32[(($1185)>>2)]=$1178;
             var $1186=(($1178+24)|0);
             HEAP32[(($1186)>>2)]=$R_1_i_i;
             break;
            }
           }
          } while(0);
          var $_sum9_i_i=$1041|$1003;
          var $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
          var $1190=(($tbase_245_i+$_sum102_i)|0);
          var $1191=$1190;
          var $1192=((($1041)+($1011))|0);
          var $oldfirst_0_i_i=$1191;var $qsize_0_i_i=$1192;
         } else {
          var $oldfirst_0_i_i=$1005;var $qsize_0_i_i=$1011;
         }
         var $qsize_0_i_i;
         var $oldfirst_0_i_i;
         var $1194=(($oldfirst_0_i_i+4)|0);
         var $1195=HEAP32[(($1194)>>2)];
         var $1196=$1195&-2;
         HEAP32[(($1194)>>2)]=$1196;
         var $1197=$qsize_0_i_i|1;
         var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
         var $1198=(($tbase_245_i+$_sum10_i_i)|0);
         var $1199=$1198;
         HEAP32[(($1199)>>2)]=$1197;
         var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
         var $1200=(($tbase_245_i+$_sum11_i_i)|0);
         var $1201=$1200;
         HEAP32[(($1201)>>2)]=$qsize_0_i_i;
         var $1202=$qsize_0_i_i>>>3;
         var $1203=($qsize_0_i_i>>>0)<256;
         if ($1203) {
          var $1205=$1202<<1;
          var $1206=((10680+($1205<<2))|0);
          var $1207=$1206;
          var $1208=HEAP32[((10640)>>2)];
          var $1209=1<<$1202;
          var $1210=$1208&$1209;
          var $1211=($1210|0)==0;
          do {
           if ($1211) {
            var $1213=$1208|$1209;
            HEAP32[((10640)>>2)]=$1213;
            var $_sum27_pre_i_i=((($1205)+(2))|0);
            var $_pre_i24_i=((10680+($_sum27_pre_i_i<<2))|0);
            var $F4_0_i_i=$1207;var $_pre_phi_i25_i=$_pre_i24_i;
           } else {
            var $_sum30_i_i=((($1205)+(2))|0);
            var $1215=((10680+($_sum30_i_i<<2))|0);
            var $1216=HEAP32[(($1215)>>2)];
            var $1217=$1216;
            var $1218=HEAP32[((10656)>>2)];
            var $1219=($1217>>>0)<($1218>>>0);
            if (!($1219)) {
             var $F4_0_i_i=$1216;var $_pre_phi_i25_i=$1215;
             break;
            }
            _abort();
           }
          } while(0);
          var $_pre_phi_i25_i;
          var $F4_0_i_i;
          HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
          var $1222=(($F4_0_i_i+12)|0);
          HEAP32[(($1222)>>2)]=$1010;
          var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
          var $1223=(($tbase_245_i+$_sum28_i_i)|0);
          var $1224=$1223;
          HEAP32[(($1224)>>2)]=$F4_0_i_i;
          var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
          var $1225=(($tbase_245_i+$_sum29_i_i)|0);
          var $1226=$1225;
          HEAP32[(($1226)>>2)]=$1207;
          break;
         }
         var $1228=$1009;
         var $1229=$qsize_0_i_i>>>8;
         var $1230=($1229|0)==0;
         do {
          if ($1230) {
           var $I7_0_i_i=0;
          } else {
           var $1232=($qsize_0_i_i>>>0)>16777215;
           if ($1232) {
            var $I7_0_i_i=31;
            break;
           }
           var $1234=((($1229)+(1048320))|0);
           var $1235=$1234>>>16;
           var $1236=$1235&8;
           var $1237=$1229<<$1236;
           var $1238=((($1237)+(520192))|0);
           var $1239=$1238>>>16;
           var $1240=$1239&4;
           var $1241=$1240|$1236;
           var $1242=$1237<<$1240;
           var $1243=((($1242)+(245760))|0);
           var $1244=$1243>>>16;
           var $1245=$1244&2;
           var $1246=$1241|$1245;
           var $1247=(((14)-($1246))|0);
           var $1248=$1242<<$1245;
           var $1249=$1248>>>15;
           var $1250=((($1247)+($1249))|0);
           var $1251=$1250<<1;
           var $1252=((($1250)+(7))|0);
           var $1253=$qsize_0_i_i>>>($1252>>>0);
           var $1254=$1253&1;
           var $1255=$1254|$1251;
           var $I7_0_i_i=$1255;
          }
         } while(0);
         var $I7_0_i_i;
         var $1257=((10944+($I7_0_i_i<<2))|0);
         var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
         var $1258=(($tbase_245_i+$_sum12_i26_i)|0);
         var $1259=$1258;
         HEAP32[(($1259)>>2)]=$I7_0_i_i;
         var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
         var $1260=(($tbase_245_i+$_sum13_i_i)|0);
         var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
         var $1261=(($tbase_245_i+$_sum14_i_i)|0);
         var $1262=$1261;
         HEAP32[(($1262)>>2)]=0;
         var $1263=$1260;
         HEAP32[(($1263)>>2)]=0;
         var $1264=HEAP32[((10644)>>2)];
         var $1265=1<<$I7_0_i_i;
         var $1266=$1264&$1265;
         var $1267=($1266|0)==0;
         if ($1267) {
          var $1269=$1264|$1265;
          HEAP32[((10644)>>2)]=$1269;
          HEAP32[(($1257)>>2)]=$1228;
          var $1270=$1257;
          var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
          var $1271=(($tbase_245_i+$_sum15_i_i)|0);
          var $1272=$1271;
          HEAP32[(($1272)>>2)]=$1270;
          var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
          var $1273=(($tbase_245_i+$_sum16_i_i)|0);
          var $1274=$1273;
          HEAP32[(($1274)>>2)]=$1228;
          var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
          var $1275=(($tbase_245_i+$_sum17_i_i)|0);
          var $1276=$1275;
          HEAP32[(($1276)>>2)]=$1228;
          break;
         }
         var $1278=HEAP32[(($1257)>>2)];
         var $1279=($I7_0_i_i|0)==31;
         if ($1279) {
          var $1284=0;
         } else {
          var $1281=$I7_0_i_i>>>1;
          var $1282=(((25)-($1281))|0);
          var $1284=$1282;
         }
         var $1284;
         var $1285=$qsize_0_i_i<<$1284;
         var $K8_0_i_i=$1285;var $T_0_i27_i=$1278;
         while(1) {
          var $T_0_i27_i;
          var $K8_0_i_i;
          var $1287=(($T_0_i27_i+4)|0);
          var $1288=HEAP32[(($1287)>>2)];
          var $1289=$1288&-8;
          var $1290=($1289|0)==($qsize_0_i_i|0);
          if ($1290) {
           break;
          }
          var $1292=$K8_0_i_i>>>31;
          var $1293=(($T_0_i27_i+16+($1292<<2))|0);
          var $1294=HEAP32[(($1293)>>2)];
          var $1295=($1294|0)==0;
          var $1296=$K8_0_i_i<<1;
          if ($1295) {
           label = 6374;
           break;
          } else {
           var $K8_0_i_i=$1296;var $T_0_i27_i=$1294;
          }
         }
         if (label == 6374) {
          var $1298=$1293;
          var $1299=HEAP32[((10656)>>2)];
          var $1300=($1298>>>0)<($1299>>>0);
          if ($1300) {
           _abort();
          } else {
           HEAP32[(($1293)>>2)]=$1228;
           var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
           var $1302=(($tbase_245_i+$_sum24_i_i)|0);
           var $1303=$1302;
           HEAP32[(($1303)>>2)]=$T_0_i27_i;
           var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
           var $1304=(($tbase_245_i+$_sum25_i_i)|0);
           var $1305=$1304;
           HEAP32[(($1305)>>2)]=$1228;
           var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
           var $1306=(($tbase_245_i+$_sum26_i_i)|0);
           var $1307=$1306;
           HEAP32[(($1307)>>2)]=$1228;
           break;
          }
         }
         var $1310=(($T_0_i27_i+8)|0);
         var $1311=HEAP32[(($1310)>>2)];
         var $1312=$T_0_i27_i;
         var $1313=HEAP32[((10656)>>2)];
         var $1314=($1312>>>0)<($1313>>>0);
         if ($1314) {
          _abort();
         }
         var $1316=$1311;
         var $1317=($1316>>>0)<($1313>>>0);
         if ($1317) {
          _abort();
         } else {
          var $1319=(($1311+12)|0);
          HEAP32[(($1319)>>2)]=$1228;
          HEAP32[(($1310)>>2)]=$1228;
          var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
          var $1320=(($tbase_245_i+$_sum21_i_i)|0);
          var $1321=$1320;
          HEAP32[(($1321)>>2)]=$1311;
          var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
          var $1322=(($tbase_245_i+$_sum22_i_i)|0);
          var $1323=$1322;
          HEAP32[(($1323)>>2)]=$T_0_i27_i;
          var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
          var $1324=(($tbase_245_i+$_sum23_i_i)|0);
          var $1325=$1324;
          HEAP32[(($1325)>>2)]=0;
          break;
         }
        }
       } while(0);
       var $_sum1819_i_i=$993|8;
       var $1326=(($tbase_245_i+$_sum1819_i_i)|0);
       var $mem_0=$1326;
       var $mem_0;
       return $mem_0;
      }
     } while(0);
     var $1327=$890;
     var $sp_0_i_i_i=11088;
     while(1) {
      var $sp_0_i_i_i;
      var $1329=(($sp_0_i_i_i)|0);
      var $1330=HEAP32[(($1329)>>2)];
      var $1331=($1330>>>0)>($1327>>>0);
      if (!($1331)) {
       var $1333=(($sp_0_i_i_i+4)|0);
       var $1334=HEAP32[(($1333)>>2)];
       var $1335=(($1330+$1334)|0);
       var $1336=($1335>>>0)>($1327>>>0);
       if ($1336) {
        break;
       }
      }
      var $1338=(($sp_0_i_i_i+8)|0);
      var $1339=HEAP32[(($1338)>>2)];
      var $sp_0_i_i_i=$1339;
     }
     var $_sum_i15_i=((($1334)-(47))|0);
     var $_sum1_i16_i=((($1334)-(39))|0);
     var $1340=(($1330+$_sum1_i16_i)|0);
     var $1341=$1340;
     var $1342=$1341&7;
     var $1343=($1342|0)==0;
     if ($1343) {
      var $1348=0;
     } else {
      var $1345=(((-$1341))|0);
      var $1346=$1345&7;
      var $1348=$1346;
     }
     var $1348;
     var $_sum2_i17_i=((($_sum_i15_i)+($1348))|0);
     var $1349=(($1330+$_sum2_i17_i)|0);
     var $1350=(($890+16)|0);
     var $1351=$1350;
     var $1352=($1349>>>0)<($1351>>>0);
     var $1353=$1352?$1327:$1349;
     var $1354=(($1353+8)|0);
     var $1355=$1354;
     var $1356=((($tsize_244_i)-(40))|0);
     var $1357=(($tbase_245_i+8)|0);
     var $1358=$1357;
     var $1359=$1358&7;
     var $1360=($1359|0)==0;
     if ($1360) {
      var $1364=0;
     } else {
      var $1362=(((-$1358))|0);
      var $1363=$1362&7;
      var $1364=$1363;
     }
     var $1364;
     var $1365=(($tbase_245_i+$1364)|0);
     var $1366=$1365;
     var $1367=((($1356)-($1364))|0);
     HEAP32[((10664)>>2)]=$1366;
     HEAP32[((10652)>>2)]=$1367;
     var $1368=$1367|1;
     var $_sum_i_i_i=((($1364)+(4))|0);
     var $1369=(($tbase_245_i+$_sum_i_i_i)|0);
     var $1370=$1369;
     HEAP32[(($1370)>>2)]=$1368;
     var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
     var $1371=(($tbase_245_i+$_sum2_i_i_i)|0);
     var $1372=$1371;
     HEAP32[(($1372)>>2)]=40;
     var $1373=HEAP32[((10592)>>2)];
     HEAP32[((10668)>>2)]=$1373;
     var $1374=(($1353+4)|0);
     var $1375=$1374;
     HEAP32[(($1375)>>2)]=27;
     HEAP32[(($1354)>>2)]=HEAP32[((11088)>>2)];HEAP32[((($1354)+(4))>>2)]=HEAP32[((11092)>>2)];HEAP32[((($1354)+(8))>>2)]=HEAP32[((11096)>>2)];HEAP32[((($1354)+(12))>>2)]=HEAP32[((11100)>>2)];
     HEAP32[((11088)>>2)]=$tbase_245_i;
     HEAP32[((11092)>>2)]=$tsize_244_i;
     HEAP32[((11100)>>2)]=0;
     HEAP32[((11096)>>2)]=$1355;
     var $1376=(($1353+28)|0);
     var $1377=$1376;
     HEAP32[(($1377)>>2)]=7;
     var $1378=(($1353+32)|0);
     var $1379=($1378>>>0)<($1335>>>0);
     if ($1379) {
      var $1380=$1377;
      while(1) {
       var $1380;
       var $1381=(($1380+4)|0);
       HEAP32[(($1381)>>2)]=7;
       var $1382=(($1380+8)|0);
       var $1383=$1382;
       var $1384=($1383>>>0)<($1335>>>0);
       if ($1384) {
        var $1380=$1381;
       } else {
        break;
       }
      }
     }
     var $1385=($1353|0)==($1327|0);
     if ($1385) {
      break;
     }
     var $1387=$1353;
     var $1388=$890;
     var $1389=((($1387)-($1388))|0);
     var $1390=(($1327+$1389)|0);
     var $_sum3_i_i=((($1389)+(4))|0);
     var $1391=(($1327+$_sum3_i_i)|0);
     var $1392=$1391;
     var $1393=HEAP32[(($1392)>>2)];
     var $1394=$1393&-2;
     HEAP32[(($1392)>>2)]=$1394;
     var $1395=$1389|1;
     var $1396=(($890+4)|0);
     HEAP32[(($1396)>>2)]=$1395;
     var $1397=$1390;
     HEAP32[(($1397)>>2)]=$1389;
     var $1398=$1389>>>3;
     var $1399=($1389>>>0)<256;
     if ($1399) {
      var $1401=$1398<<1;
      var $1402=((10680+($1401<<2))|0);
      var $1403=$1402;
      var $1404=HEAP32[((10640)>>2)];
      var $1405=1<<$1398;
      var $1406=$1404&$1405;
      var $1407=($1406|0)==0;
      do {
       if ($1407) {
        var $1409=$1404|$1405;
        HEAP32[((10640)>>2)]=$1409;
        var $_sum11_pre_i_i=((($1401)+(2))|0);
        var $_pre_i_i=((10680+($_sum11_pre_i_i<<2))|0);
        var $F_0_i_i=$1403;var $_pre_phi_i_i=$_pre_i_i;
       } else {
        var $_sum12_i_i=((($1401)+(2))|0);
        var $1411=((10680+($_sum12_i_i<<2))|0);
        var $1412=HEAP32[(($1411)>>2)];
        var $1413=$1412;
        var $1414=HEAP32[((10656)>>2)];
        var $1415=($1413>>>0)<($1414>>>0);
        if (!($1415)) {
         var $F_0_i_i=$1412;var $_pre_phi_i_i=$1411;
         break;
        }
        _abort();
       }
      } while(0);
      var $_pre_phi_i_i;
      var $F_0_i_i;
      HEAP32[(($_pre_phi_i_i)>>2)]=$890;
      var $1418=(($F_0_i_i+12)|0);
      HEAP32[(($1418)>>2)]=$890;
      var $1419=(($890+8)|0);
      HEAP32[(($1419)>>2)]=$F_0_i_i;
      var $1420=(($890+12)|0);
      HEAP32[(($1420)>>2)]=$1403;
      break;
     }
     var $1422=$890;
     var $1423=$1389>>>8;
     var $1424=($1423|0)==0;
     do {
      if ($1424) {
       var $I1_0_i_i=0;
      } else {
       var $1426=($1389>>>0)>16777215;
       if ($1426) {
        var $I1_0_i_i=31;
        break;
       }
       var $1428=((($1423)+(1048320))|0);
       var $1429=$1428>>>16;
       var $1430=$1429&8;
       var $1431=$1423<<$1430;
       var $1432=((($1431)+(520192))|0);
       var $1433=$1432>>>16;
       var $1434=$1433&4;
       var $1435=$1434|$1430;
       var $1436=$1431<<$1434;
       var $1437=((($1436)+(245760))|0);
       var $1438=$1437>>>16;
       var $1439=$1438&2;
       var $1440=$1435|$1439;
       var $1441=(((14)-($1440))|0);
       var $1442=$1436<<$1439;
       var $1443=$1442>>>15;
       var $1444=((($1441)+($1443))|0);
       var $1445=$1444<<1;
       var $1446=((($1444)+(7))|0);
       var $1447=$1389>>>($1446>>>0);
       var $1448=$1447&1;
       var $1449=$1448|$1445;
       var $I1_0_i_i=$1449;
      }
     } while(0);
     var $I1_0_i_i;
     var $1451=((10944+($I1_0_i_i<<2))|0);
     var $1452=(($890+28)|0);
     var $I1_0_c_i_i=$I1_0_i_i;
     HEAP32[(($1452)>>2)]=$I1_0_c_i_i;
     var $1453=(($890+20)|0);
     HEAP32[(($1453)>>2)]=0;
     var $1454=(($890+16)|0);
     HEAP32[(($1454)>>2)]=0;
     var $1455=HEAP32[((10644)>>2)];
     var $1456=1<<$I1_0_i_i;
     var $1457=$1455&$1456;
     var $1458=($1457|0)==0;
     if ($1458) {
      var $1460=$1455|$1456;
      HEAP32[((10644)>>2)]=$1460;
      HEAP32[(($1451)>>2)]=$1422;
      var $1461=(($890+24)|0);
      var $_c_i_i=$1451;
      HEAP32[(($1461)>>2)]=$_c_i_i;
      var $1462=(($890+12)|0);
      HEAP32[(($1462)>>2)]=$890;
      var $1463=(($890+8)|0);
      HEAP32[(($1463)>>2)]=$890;
      break;
     }
     var $1465=HEAP32[(($1451)>>2)];
     var $1466=($I1_0_i_i|0)==31;
     if ($1466) {
      var $1471=0;
     } else {
      var $1468=$I1_0_i_i>>>1;
      var $1469=(((25)-($1468))|0);
      var $1471=$1469;
     }
     var $1471;
     var $1472=$1389<<$1471;
     var $K2_0_i_i=$1472;var $T_0_i_i=$1465;
     while(1) {
      var $T_0_i_i;
      var $K2_0_i_i;
      var $1474=(($T_0_i_i+4)|0);
      var $1475=HEAP32[(($1474)>>2)];
      var $1476=$1475&-8;
      var $1477=($1476|0)==($1389|0);
      if ($1477) {
       break;
      }
      var $1479=$K2_0_i_i>>>31;
      var $1480=(($T_0_i_i+16+($1479<<2))|0);
      var $1481=HEAP32[(($1480)>>2)];
      var $1482=($1481|0)==0;
      var $1483=$K2_0_i_i<<1;
      if ($1482) {
       label = 6409;
       break;
      } else {
       var $K2_0_i_i=$1483;var $T_0_i_i=$1481;
      }
     }
     if (label == 6409) {
      var $1485=$1480;
      var $1486=HEAP32[((10656)>>2)];
      var $1487=($1485>>>0)<($1486>>>0);
      if ($1487) {
       _abort();
      } else {
       HEAP32[(($1480)>>2)]=$1422;
       var $1489=(($890+24)|0);
       var $T_0_c8_i_i=$T_0_i_i;
       HEAP32[(($1489)>>2)]=$T_0_c8_i_i;
       var $1490=(($890+12)|0);
       HEAP32[(($1490)>>2)]=$890;
       var $1491=(($890+8)|0);
       HEAP32[(($1491)>>2)]=$890;
       break;
      }
     }
     var $1494=(($T_0_i_i+8)|0);
     var $1495=HEAP32[(($1494)>>2)];
     var $1496=$T_0_i_i;
     var $1497=HEAP32[((10656)>>2)];
     var $1498=($1496>>>0)<($1497>>>0);
     if ($1498) {
      _abort();
     }
     var $1500=$1495;
     var $1501=($1500>>>0)<($1497>>>0);
     if ($1501) {
      _abort();
     } else {
      var $1503=(($1495+12)|0);
      HEAP32[(($1503)>>2)]=$1422;
      HEAP32[(($1494)>>2)]=$1422;
      var $1504=(($890+8)|0);
      var $_c7_i_i=$1495;
      HEAP32[(($1504)>>2)]=$_c7_i_i;
      var $1505=(($890+12)|0);
      var $T_0_c_i_i=$T_0_i_i;
      HEAP32[(($1505)>>2)]=$T_0_c_i_i;
      var $1506=(($890+24)|0);
      HEAP32[(($1506)>>2)]=0;
      break;
     }
    }
   } while(0);
   var $1507=HEAP32[((10652)>>2)];
   var $1508=($1507>>>0)>($nb_0>>>0);
   if (!($1508)) {
    break;
   }
   var $1510=((($1507)-($nb_0))|0);
   HEAP32[((10652)>>2)]=$1510;
   var $1511=HEAP32[((10664)>>2)];
   var $1512=$1511;
   var $1513=(($1512+$nb_0)|0);
   var $1514=$1513;
   HEAP32[((10664)>>2)]=$1514;
   var $1515=$1510|1;
   var $_sum_i134=((($nb_0)+(4))|0);
   var $1516=(($1512+$_sum_i134)|0);
   var $1517=$1516;
   HEAP32[(($1517)>>2)]=$1515;
   var $1518=$nb_0|3;
   var $1519=(($1511+4)|0);
   HEAP32[(($1519)>>2)]=$1518;
   var $1520=(($1511+8)|0);
   var $1521=$1520;
   var $mem_0=$1521;
   var $mem_0;
   return $mem_0;
  }
 } while(0);
 var $1522=___errno_location();
 HEAP32[(($1522)>>2)]=12;
 var $mem_0=0;
 var $mem_0;
 return $mem_0;
}
Module["_malloc"] = _malloc;
function _free($mem){
 var label=0;
 var $1=($mem|0)==0;
 if ($1) {
  return;
 }
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((10656)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if ($6) {
  _abort();
 }
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if ($12) {
  _abort();
 }
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 L8612: do {
  if ($18) {
   var $20=$3;
   var $21=HEAP32[(($20)>>2)];
   var $22=($11|0)==0;
   if ($22) {
    return;
   }
   var $_sum232=(((-8)-($21))|0);
   var $24=(($mem+$_sum232)|0);
   var $25=$24;
   var $26=((($21)+($14))|0);
   var $27=($24>>>0)<($5>>>0);
   if ($27) {
    _abort();
   }
   var $29=HEAP32[((10660)>>2)];
   var $30=($25|0)==($29|0);
   if ($30) {
    var $_sum233=((($14)-(4))|0);
    var $176=(($mem+$_sum233)|0);
    var $177=$176;
    var $178=HEAP32[(($177)>>2)];
    var $179=$178&3;
    var $180=($179|0)==3;
    if (!($180)) {
     var $p_0=$25;var $psize_0=$26;
     break;
    }
    HEAP32[((10648)>>2)]=$26;
    var $182=HEAP32[(($177)>>2)];
    var $183=$182&-2;
    HEAP32[(($177)>>2)]=$183;
    var $184=$26|1;
    var $_sum264=((($_sum232)+(4))|0);
    var $185=(($mem+$_sum264)|0);
    var $186=$185;
    HEAP32[(($186)>>2)]=$184;
    var $187=$15;
    HEAP32[(($187)>>2)]=$26;
    return;
   }
   var $32=$21>>>3;
   var $33=($21>>>0)<256;
   if ($33) {
    var $_sum276=((($_sum232)+(8))|0);
    var $35=(($mem+$_sum276)|0);
    var $36=$35;
    var $37=HEAP32[(($36)>>2)];
    var $_sum277=((($_sum232)+(12))|0);
    var $38=(($mem+$_sum277)|0);
    var $39=$38;
    var $40=HEAP32[(($39)>>2)];
    var $41=$32<<1;
    var $42=((10680+($41<<2))|0);
    var $43=$42;
    var $44=($37|0)==($43|0);
    do {
     if (!($44)) {
      var $46=$37;
      var $47=($46>>>0)<($5>>>0);
      if ($47) {
       _abort();
      }
      var $49=(($37+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=($50|0)==($25|0);
      if ($51) {
       break;
      }
      _abort();
     }
    } while(0);
    var $52=($40|0)==($37|0);
    if ($52) {
     var $54=1<<$32;
     var $55=$54^-1;
     var $56=HEAP32[((10640)>>2)];
     var $57=$56&$55;
     HEAP32[((10640)>>2)]=$57;
     var $p_0=$25;var $psize_0=$26;
     break;
    }
    var $59=($40|0)==($43|0);
    do {
     if ($59) {
      var $_pre305=(($40+8)|0);
      var $_pre_phi306=$_pre305;
     } else {
      var $61=$40;
      var $62=($61>>>0)<($5>>>0);
      if ($62) {
       _abort();
      }
      var $64=(($40+8)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=($65|0)==($25|0);
      if ($66) {
       var $_pre_phi306=$64;
       break;
      }
      _abort();
     }
    } while(0);
    var $_pre_phi306;
    var $67=(($37+12)|0);
    HEAP32[(($67)>>2)]=$40;
    HEAP32[(($_pre_phi306)>>2)]=$37;
    var $p_0=$25;var $psize_0=$26;
    break;
   }
   var $69=$24;
   var $_sum266=((($_sum232)+(24))|0);
   var $70=(($mem+$_sum266)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $_sum267=((($_sum232)+(12))|0);
   var $73=(($mem+$_sum267)|0);
   var $74=$73;
   var $75=HEAP32[(($74)>>2)];
   var $76=($75|0)==($69|0);
   do {
    if ($76) {
     var $_sum269=((($_sum232)+(20))|0);
     var $93=(($mem+$_sum269)|0);
     var $94=$93;
     var $95=HEAP32[(($94)>>2)];
     var $96=($95|0)==0;
     if ($96) {
      var $_sum268=((($_sum232)+(16))|0);
      var $98=(($mem+$_sum268)|0);
      var $99=$98;
      var $100=HEAP32[(($99)>>2)];
      var $101=($100|0)==0;
      if ($101) {
       var $R_1=0;
       break;
      } else {
       var $R_0=$100;var $RP_0=$99;
      }
     } else {
      var $R_0=$95;var $RP_0=$94;
     }
     while(1) {
      var $RP_0;
      var $R_0;
      var $102=(($R_0+20)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=($103|0)==0;
      if (!($104)) {
       var $R_0=$103;var $RP_0=$102;
       continue;
      }
      var $106=(($R_0+16)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=($107|0)==0;
      if ($108) {
       break;
      } else {
       var $R_0=$107;var $RP_0=$106;
      }
     }
     var $110=$RP_0;
     var $111=($110>>>0)<($5>>>0);
     if ($111) {
      _abort();
     } else {
      HEAP32[(($RP_0)>>2)]=0;
      var $R_1=$R_0;
      break;
     }
    } else {
     var $_sum273=((($_sum232)+(8))|0);
     var $78=(($mem+$_sum273)|0);
     var $79=$78;
     var $80=HEAP32[(($79)>>2)];
     var $81=$80;
     var $82=($81>>>0)<($5>>>0);
     if ($82) {
      _abort();
     }
     var $84=(($80+12)|0);
     var $85=HEAP32[(($84)>>2)];
     var $86=($85|0)==($69|0);
     if (!($86)) {
      _abort();
     }
     var $88=(($75+8)|0);
     var $89=HEAP32[(($88)>>2)];
     var $90=($89|0)==($69|0);
     if ($90) {
      HEAP32[(($84)>>2)]=$75;
      HEAP32[(($88)>>2)]=$80;
      var $R_1=$75;
      break;
     } else {
      _abort();
     }
    }
   } while(0);
   var $R_1;
   var $115=($72|0)==0;
   if ($115) {
    var $p_0=$25;var $psize_0=$26;
    break;
   }
   var $_sum270=((($_sum232)+(28))|0);
   var $117=(($mem+$_sum270)|0);
   var $118=$117;
   var $119=HEAP32[(($118)>>2)];
   var $120=((10944+($119<<2))|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=($69|0)==($121|0);
   do {
    if ($122) {
     HEAP32[(($120)>>2)]=$R_1;
     var $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     var $124=HEAP32[(($118)>>2)];
     var $125=1<<$124;
     var $126=$125^-1;
     var $127=HEAP32[((10644)>>2)];
     var $128=$127&$126;
     HEAP32[((10644)>>2)]=$128;
     var $p_0=$25;var $psize_0=$26;
     break L8612;
    } else {
     var $130=$72;
     var $131=HEAP32[((10656)>>2)];
     var $132=($130>>>0)<($131>>>0);
     if ($132) {
      _abort();
     }
     var $134=(($72+16)|0);
     var $135=HEAP32[(($134)>>2)];
     var $136=($135|0)==($69|0);
     if ($136) {
      HEAP32[(($134)>>2)]=$R_1;
     } else {
      var $139=(($72+20)|0);
      HEAP32[(($139)>>2)]=$R_1;
     }
     var $142=($R_1|0)==0;
     if ($142) {
      var $p_0=$25;var $psize_0=$26;
      break L8612;
     }
    }
   } while(0);
   var $144=$R_1;
   var $145=HEAP32[((10656)>>2)];
   var $146=($144>>>0)<($145>>>0);
   if ($146) {
    _abort();
   }
   var $148=(($R_1+24)|0);
   HEAP32[(($148)>>2)]=$72;
   var $_sum271=((($_sum232)+(16))|0);
   var $149=(($mem+$_sum271)|0);
   var $150=$149;
   var $151=HEAP32[(($150)>>2)];
   var $152=($151|0)==0;
   do {
    if (!($152)) {
     var $154=$151;
     var $155=HEAP32[((10656)>>2)];
     var $156=($154>>>0)<($155>>>0);
     if ($156) {
      _abort();
     } else {
      var $158=(($R_1+16)|0);
      HEAP32[(($158)>>2)]=$151;
      var $159=(($151+24)|0);
      HEAP32[(($159)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   var $_sum272=((($_sum232)+(20))|0);
   var $162=(($mem+$_sum272)|0);
   var $163=$162;
   var $164=HEAP32[(($163)>>2)];
   var $165=($164|0)==0;
   if ($165) {
    var $p_0=$25;var $psize_0=$26;
    break;
   }
   var $167=$164;
   var $168=HEAP32[((10656)>>2)];
   var $169=($167>>>0)<($168>>>0);
   if ($169) {
    _abort();
   } else {
    var $171=(($R_1+20)|0);
    HEAP32[(($171)>>2)]=$164;
    var $172=(($164+24)|0);
    HEAP32[(($172)>>2)]=$R_1;
    var $p_0=$25;var $psize_0=$26;
    break;
   }
  } else {
   var $p_0=$4;var $psize_0=$14;
  }
 } while(0);
 var $psize_0;
 var $p_0;
 var $189=$p_0;
 var $190=($189>>>0)<($15>>>0);
 if (!($190)) {
  _abort();
 }
 var $_sum263=((($14)-(4))|0);
 var $192=(($mem+$_sum263)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&1;
 var $phitmp=($195|0)==0;
 if ($phitmp) {
  _abort();
 }
 var $197=$194&2;
 var $198=($197|0)==0;
 do {
  if ($198) {
   var $200=HEAP32[((10664)>>2)];
   var $201=($16|0)==($200|0);
   if ($201) {
    var $203=HEAP32[((10652)>>2)];
    var $204=((($203)+($psize_0))|0);
    HEAP32[((10652)>>2)]=$204;
    HEAP32[((10664)>>2)]=$p_0;
    var $205=$204|1;
    var $206=(($p_0+4)|0);
    HEAP32[(($206)>>2)]=$205;
    var $207=HEAP32[((10660)>>2)];
    var $208=($p_0|0)==($207|0);
    if (!($208)) {
     return;
    }
    HEAP32[((10660)>>2)]=0;
    HEAP32[((10648)>>2)]=0;
    return;
   }
   var $211=HEAP32[((10660)>>2)];
   var $212=($16|0)==($211|0);
   if ($212) {
    var $214=HEAP32[((10648)>>2)];
    var $215=((($214)+($psize_0))|0);
    HEAP32[((10648)>>2)]=$215;
    HEAP32[((10660)>>2)]=$p_0;
    var $216=$215|1;
    var $217=(($p_0+4)|0);
    HEAP32[(($217)>>2)]=$216;
    var $218=(($189+$215)|0);
    var $219=$218;
    HEAP32[(($219)>>2)]=$215;
    return;
   }
   var $221=$194&-8;
   var $222=((($221)+($psize_0))|0);
   var $223=$194>>>3;
   var $224=($194>>>0)<256;
   L8715: do {
    if ($224) {
     var $226=(($mem+$14)|0);
     var $227=$226;
     var $228=HEAP32[(($227)>>2)];
     var $_sum257258=$14|4;
     var $229=(($mem+$_sum257258)|0);
     var $230=$229;
     var $231=HEAP32[(($230)>>2)];
     var $232=$223<<1;
     var $233=((10680+($232<<2))|0);
     var $234=$233;
     var $235=($228|0)==($234|0);
     do {
      if (!($235)) {
       var $237=$228;
       var $238=HEAP32[((10656)>>2)];
       var $239=($237>>>0)<($238>>>0);
       if ($239) {
        _abort();
       }
       var $241=(($228+12)|0);
       var $242=HEAP32[(($241)>>2)];
       var $243=($242|0)==($16|0);
       if ($243) {
        break;
       }
       _abort();
      }
     } while(0);
     var $244=($231|0)==($228|0);
     if ($244) {
      var $246=1<<$223;
      var $247=$246^-1;
      var $248=HEAP32[((10640)>>2)];
      var $249=$248&$247;
      HEAP32[((10640)>>2)]=$249;
      break;
     }
     var $251=($231|0)==($234|0);
     do {
      if ($251) {
       var $_pre303=(($231+8)|0);
       var $_pre_phi304=$_pre303;
      } else {
       var $253=$231;
       var $254=HEAP32[((10656)>>2)];
       var $255=($253>>>0)<($254>>>0);
       if ($255) {
        _abort();
       }
       var $257=(($231+8)|0);
       var $258=HEAP32[(($257)>>2)];
       var $259=($258|0)==($16|0);
       if ($259) {
        var $_pre_phi304=$257;
        break;
       }
       _abort();
      }
     } while(0);
     var $_pre_phi304;
     var $260=(($228+12)|0);
     HEAP32[(($260)>>2)]=$231;
     HEAP32[(($_pre_phi304)>>2)]=$228;
    } else {
     var $262=$15;
     var $_sum235=((($14)+(16))|0);
     var $263=(($mem+$_sum235)|0);
     var $264=$263;
     var $265=HEAP32[(($264)>>2)];
     var $_sum236237=$14|4;
     var $266=(($mem+$_sum236237)|0);
     var $267=$266;
     var $268=HEAP32[(($267)>>2)];
     var $269=($268|0)==($262|0);
     do {
      if ($269) {
       var $_sum239=((($14)+(12))|0);
       var $287=(($mem+$_sum239)|0);
       var $288=$287;
       var $289=HEAP32[(($288)>>2)];
       var $290=($289|0)==0;
       if ($290) {
        var $_sum238=((($14)+(8))|0);
        var $292=(($mem+$_sum238)|0);
        var $293=$292;
        var $294=HEAP32[(($293)>>2)];
        var $295=($294|0)==0;
        if ($295) {
         var $R7_1=0;
         break;
        } else {
         var $R7_0=$294;var $RP9_0=$293;
        }
       } else {
        var $R7_0=$289;var $RP9_0=$288;
       }
       while(1) {
        var $RP9_0;
        var $R7_0;
        var $296=(($R7_0+20)|0);
        var $297=HEAP32[(($296)>>2)];
        var $298=($297|0)==0;
        if (!($298)) {
         var $R7_0=$297;var $RP9_0=$296;
         continue;
        }
        var $300=(($R7_0+16)|0);
        var $301=HEAP32[(($300)>>2)];
        var $302=($301|0)==0;
        if ($302) {
         break;
        } else {
         var $R7_0=$301;var $RP9_0=$300;
        }
       }
       var $304=$RP9_0;
       var $305=HEAP32[((10656)>>2)];
       var $306=($304>>>0)<($305>>>0);
       if ($306) {
        _abort();
       } else {
        HEAP32[(($RP9_0)>>2)]=0;
        var $R7_1=$R7_0;
        break;
       }
      } else {
       var $271=(($mem+$14)|0);
       var $272=$271;
       var $273=HEAP32[(($272)>>2)];
       var $274=$273;
       var $275=HEAP32[((10656)>>2)];
       var $276=($274>>>0)<($275>>>0);
       if ($276) {
        _abort();
       }
       var $278=(($273+12)|0);
       var $279=HEAP32[(($278)>>2)];
       var $280=($279|0)==($262|0);
       if (!($280)) {
        _abort();
       }
       var $282=(($268+8)|0);
       var $283=HEAP32[(($282)>>2)];
       var $284=($283|0)==($262|0);
       if ($284) {
        HEAP32[(($278)>>2)]=$268;
        HEAP32[(($282)>>2)]=$273;
        var $R7_1=$268;
        break;
       } else {
        _abort();
       }
      }
     } while(0);
     var $R7_1;
     var $310=($265|0)==0;
     if ($310) {
      break;
     }
     var $_sum250=((($14)+(20))|0);
     var $312=(($mem+$_sum250)|0);
     var $313=$312;
     var $314=HEAP32[(($313)>>2)];
     var $315=((10944+($314<<2))|0);
     var $316=HEAP32[(($315)>>2)];
     var $317=($262|0)==($316|0);
     do {
      if ($317) {
       HEAP32[(($315)>>2)]=$R7_1;
       var $cond298=($R7_1|0)==0;
       if (!($cond298)) {
        break;
       }
       var $319=HEAP32[(($313)>>2)];
       var $320=1<<$319;
       var $321=$320^-1;
       var $322=HEAP32[((10644)>>2)];
       var $323=$322&$321;
       HEAP32[((10644)>>2)]=$323;
       break L8715;
      } else {
       var $325=$265;
       var $326=HEAP32[((10656)>>2)];
       var $327=($325>>>0)<($326>>>0);
       if ($327) {
        _abort();
       }
       var $329=(($265+16)|0);
       var $330=HEAP32[(($329)>>2)];
       var $331=($330|0)==($262|0);
       if ($331) {
        HEAP32[(($329)>>2)]=$R7_1;
       } else {
        var $334=(($265+20)|0);
        HEAP32[(($334)>>2)]=$R7_1;
       }
       var $337=($R7_1|0)==0;
       if ($337) {
        break L8715;
       }
      }
     } while(0);
     var $339=$R7_1;
     var $340=HEAP32[((10656)>>2)];
     var $341=($339>>>0)<($340>>>0);
     if ($341) {
      _abort();
     }
     var $343=(($R7_1+24)|0);
     HEAP32[(($343)>>2)]=$265;
     var $_sum251=((($14)+(8))|0);
     var $344=(($mem+$_sum251)|0);
     var $345=$344;
     var $346=HEAP32[(($345)>>2)];
     var $347=($346|0)==0;
     do {
      if (!($347)) {
       var $349=$346;
       var $350=HEAP32[((10656)>>2)];
       var $351=($349>>>0)<($350>>>0);
       if ($351) {
        _abort();
       } else {
        var $353=(($R7_1+16)|0);
        HEAP32[(($353)>>2)]=$346;
        var $354=(($346+24)|0);
        HEAP32[(($354)>>2)]=$R7_1;
        break;
       }
      }
     } while(0);
     var $_sum252=((($14)+(12))|0);
     var $357=(($mem+$_sum252)|0);
     var $358=$357;
     var $359=HEAP32[(($358)>>2)];
     var $360=($359|0)==0;
     if ($360) {
      break;
     }
     var $362=$359;
     var $363=HEAP32[((10656)>>2)];
     var $364=($362>>>0)<($363>>>0);
     if ($364) {
      _abort();
     } else {
      var $366=(($R7_1+20)|0);
      HEAP32[(($366)>>2)]=$359;
      var $367=(($359+24)|0);
      HEAP32[(($367)>>2)]=$R7_1;
      break;
     }
    }
   } while(0);
   var $371=$222|1;
   var $372=(($p_0+4)|0);
   HEAP32[(($372)>>2)]=$371;
   var $373=(($189+$222)|0);
   var $374=$373;
   HEAP32[(($374)>>2)]=$222;
   var $375=HEAP32[((10660)>>2)];
   var $376=($p_0|0)==($375|0);
   if (!($376)) {
    var $psize_1=$222;
    break;
   }
   HEAP32[((10648)>>2)]=$222;
   return;
  } else {
   var $379=$194&-2;
   HEAP32[(($193)>>2)]=$379;
   var $380=$psize_0|1;
   var $381=(($p_0+4)|0);
   HEAP32[(($381)>>2)]=$380;
   var $382=(($189+$psize_0)|0);
   var $383=$382;
   HEAP32[(($383)>>2)]=$psize_0;
   var $psize_1=$psize_0;
  }
 } while(0);
 var $psize_1;
 var $385=$psize_1>>>3;
 var $386=($psize_1>>>0)<256;
 if ($386) {
  var $388=$385<<1;
  var $389=((10680+($388<<2))|0);
  var $390=$389;
  var $391=HEAP32[((10640)>>2)];
  var $392=1<<$385;
  var $393=$391&$392;
  var $394=($393|0)==0;
  do {
   if ($394) {
    var $396=$391|$392;
    HEAP32[((10640)>>2)]=$396;
    var $_sum248_pre=((($388)+(2))|0);
    var $_pre=((10680+($_sum248_pre<<2))|0);
    var $F16_0=$390;var $_pre_phi=$_pre;
   } else {
    var $_sum249=((($388)+(2))|0);
    var $398=((10680+($_sum249<<2))|0);
    var $399=HEAP32[(($398)>>2)];
    var $400=$399;
    var $401=HEAP32[((10656)>>2)];
    var $402=($400>>>0)<($401>>>0);
    if (!($402)) {
     var $F16_0=$399;var $_pre_phi=$398;
     break;
    }
    _abort();
   }
  } while(0);
  var $_pre_phi;
  var $F16_0;
  HEAP32[(($_pre_phi)>>2)]=$p_0;
  var $405=(($F16_0+12)|0);
  HEAP32[(($405)>>2)]=$p_0;
  var $406=(($p_0+8)|0);
  HEAP32[(($406)>>2)]=$F16_0;
  var $407=(($p_0+12)|0);
  HEAP32[(($407)>>2)]=$390;
  return;
 }
 var $409=$p_0;
 var $410=$psize_1>>>8;
 var $411=($410|0)==0;
 do {
  if ($411) {
   var $I18_0=0;
  } else {
   var $413=($psize_1>>>0)>16777215;
   if ($413) {
    var $I18_0=31;
    break;
   }
   var $415=((($410)+(1048320))|0);
   var $416=$415>>>16;
   var $417=$416&8;
   var $418=$410<<$417;
   var $419=((($418)+(520192))|0);
   var $420=$419>>>16;
   var $421=$420&4;
   var $422=$421|$417;
   var $423=$418<<$421;
   var $424=((($423)+(245760))|0);
   var $425=$424>>>16;
   var $426=$425&2;
   var $427=$422|$426;
   var $428=(((14)-($427))|0);
   var $429=$423<<$426;
   var $430=$429>>>15;
   var $431=((($428)+($430))|0);
   var $432=$431<<1;
   var $433=((($431)+(7))|0);
   var $434=$psize_1>>>($433>>>0);
   var $435=$434&1;
   var $436=$435|$432;
   var $I18_0=$436;
  }
 } while(0);
 var $I18_0;
 var $438=((10944+($I18_0<<2))|0);
 var $439=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[((10644)>>2)];
 var $443=1<<$I18_0;
 var $444=$442&$443;
 var $445=($444|0)==0;
 do {
  if ($445) {
   var $447=$442|$443;
   HEAP32[((10644)>>2)]=$447;
   HEAP32[(($438)>>2)]=$409;
   var $448=(($p_0+24)|0);
   var $_c=$438;
   HEAP32[(($448)>>2)]=$_c;
   var $449=(($p_0+12)|0);
   HEAP32[(($449)>>2)]=$p_0;
   var $450=(($p_0+8)|0);
   HEAP32[(($450)>>2)]=$p_0;
  } else {
   var $452=HEAP32[(($438)>>2)];
   var $453=($I18_0|0)==31;
   if ($453) {
    var $458=0;
   } else {
    var $455=$I18_0>>>1;
    var $456=(((25)-($455))|0);
    var $458=$456;
   }
   var $458;
   var $459=$psize_1<<$458;
   var $K19_0=$459;var $T_0=$452;
   while(1) {
    var $T_0;
    var $K19_0;
    var $461=(($T_0+4)|0);
    var $462=HEAP32[(($461)>>2)];
    var $463=$462&-8;
    var $464=($463|0)==($psize_1|0);
    if ($464) {
     break;
    }
    var $466=$K19_0>>>31;
    var $467=(($T_0+16+($466<<2))|0);
    var $468=HEAP32[(($467)>>2)];
    var $469=($468|0)==0;
    var $470=$K19_0<<1;
    if ($469) {
     label = 6586;
     break;
    } else {
     var $K19_0=$470;var $T_0=$468;
    }
   }
   if (label == 6586) {
    var $472=$467;
    var $473=HEAP32[((10656)>>2)];
    var $474=($472>>>0)<($473>>>0);
    if ($474) {
     _abort();
    } else {
     HEAP32[(($467)>>2)]=$409;
     var $476=(($p_0+24)|0);
     var $T_0_c245=$T_0;
     HEAP32[(($476)>>2)]=$T_0_c245;
     var $477=(($p_0+12)|0);
     HEAP32[(($477)>>2)]=$p_0;
     var $478=(($p_0+8)|0);
     HEAP32[(($478)>>2)]=$p_0;
     break;
    }
   }
   var $481=(($T_0+8)|0);
   var $482=HEAP32[(($481)>>2)];
   var $483=$T_0;
   var $484=HEAP32[((10656)>>2)];
   var $485=($483>>>0)<($484>>>0);
   if ($485) {
    _abort();
   }
   var $487=$482;
   var $488=($487>>>0)<($484>>>0);
   if ($488) {
    _abort();
   } else {
    var $490=(($482+12)|0);
    HEAP32[(($490)>>2)]=$409;
    HEAP32[(($481)>>2)]=$409;
    var $491=(($p_0+8)|0);
    var $_c244=$482;
    HEAP32[(($491)>>2)]=$_c244;
    var $492=(($p_0+12)|0);
    var $T_0_c=$T_0;
    HEAP32[(($492)>>2)]=$T_0_c;
    var $493=(($p_0+24)|0);
    HEAP32[(($493)>>2)]=0;
    break;
   }
  }
 } while(0);
 var $495=HEAP32[((10672)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((10672)>>2)]=$496;
 var $497=($496|0)==0;
 if ($497) {
  var $sp_0_in_i=11096;
 } else {
  return;
 }
 while(1) {
  var $sp_0_in_i;
  var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
  var $498=($sp_0_i|0)==0;
  var $499=(($sp_0_i+8)|0);
  if ($498) {
   break;
  } else {
   var $sp_0_in_i=$499;
  }
 }
 HEAP32[((10672)>>2)]=-1;
 return;
}
Module["_free"] = _free;
function _calloc($n_elements,$elem_size){
 var label=0;
 var $1=($n_elements|0)==0;
 do {
  if ($1) {
   var $req_0=0;
  } else {
   var $3=(Math_imul($elem_size,$n_elements)|0);
   var $4=$elem_size|$n_elements;
   var $5=($4>>>0)>65535;
   if (!($5)) {
    var $req_0=$3;
    break;
   }
   var $7=(((($3>>>0))/(($n_elements>>>0)))&-1);
   var $8=($7|0)==($elem_size|0);
   var $_=$8?$3:-1;
   var $req_0=$_;
  }
 } while(0);
 var $req_0;
 var $10=_malloc($req_0);
 var $11=($10|0)==0;
 if ($11) {
  return $10;
 }
 var $13=((($10)-(4))|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=$15&3;
 var $17=($16|0)==0;
 if ($17) {
  return $10;
 }
 _memset($10, 0, $req_0);
 return $10;
}
Module["_calloc"] = _calloc;
function _realloc($oldmem,$bytes){
 var label=0;
 var $1=($oldmem|0)==0;
 if ($1) {
  var $3=_malloc($bytes);
  var $mem_0=$3;
  var $mem_0;
  return $mem_0;
 }
 var $5=($bytes>>>0)>4294967231;
 if ($5) {
  var $7=___errno_location();
  HEAP32[(($7)>>2)]=12;
  var $mem_0=0;
  var $mem_0;
  return $mem_0;
 }
 var $9=($bytes>>>0)<11;
 if ($9) {
  var $14=16;
 } else {
  var $11=((($bytes)+(11))|0);
  var $12=$11&-8;
  var $14=$12;
 }
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=$15;
 var $17=_try_realloc_chunk($16,$14);
 var $18=($17|0)==0;
 if (!($18)) {
  var $20=(($17+8)|0);
  var $21=$20;
  var $mem_0=$21;
  var $mem_0;
  return $mem_0;
 }
 var $23=_malloc($bytes);
 var $24=($23|0)==0;
 if ($24) {
  var $mem_0=0;
  var $mem_0;
  return $mem_0;
 }
 var $26=((($oldmem)-(4))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=$28&3;
 var $31=($30|0)==0;
 var $32=$31?8:4;
 var $33=((($29)-($32))|0);
 var $34=($33>>>0)<($bytes>>>0);
 var $35=$34?$33:$bytes;
 (_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;
 var $mem_0;
 return $mem_0;
}
Module["_realloc"] = _realloc;
function _try_realloc_chunk($p,$nb){
 var label=0;
 var $1=(($p+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&-8;
 var $4=$p;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=HEAP32[((10656)>>2)];
 var $8=($4>>>0)<($7>>>0);
 if ($8) {
  _abort();
 }
 var $10=$2&3;
 var $11=($10|0)!=1;
 var $12=($4>>>0)<($5>>>0);
 var $or_cond=$11&$12;
 if (!($or_cond)) {
  _abort();
 }
 var $_sum3334=$3|4;
 var $14=(($4+$_sum3334)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&1;
 var $phitmp=($17|0)==0;
 if ($phitmp) {
  _abort();
 }
 var $19=($10|0)==0;
 if ($19) {
  var $21=($nb>>>0)<256;
  if ($21) {
   var $newp_0=0;
   var $newp_0;
   return $newp_0;
  }
  var $23=((($nb)+(4))|0);
  var $24=($3>>>0)<($23>>>0);
  do {
   if (!($24)) {
    var $26=((($3)-($nb))|0);
    var $27=HEAP32[((10584)>>2)];
    var $28=$27<<1;
    var $29=($26>>>0)>($28>>>0);
    if ($29) {
     break;
    } else {
     var $newp_0=$p;
    }
    var $newp_0;
    return $newp_0;
   }
  } while(0);
  var $newp_0=0;
  var $newp_0;
  return $newp_0;
 }
 var $32=($3>>>0)<($nb>>>0);
 if (!($32)) {
  var $34=((($3)-($nb))|0);
  var $35=($34>>>0)>15;
  if (!($35)) {
   var $newp_0=$p;
   var $newp_0;
   return $newp_0;
  }
  var $37=(($4+$nb)|0);
  var $38=$37;
  var $39=$2&1;
  var $40=$39|$nb;
  var $41=$40|2;
  HEAP32[(($1)>>2)]=$41;
  var $_sum29=((($nb)+(4))|0);
  var $42=(($4+$_sum29)|0);
  var $43=$42;
  var $44=$34|3;
  HEAP32[(($43)>>2)]=$44;
  var $45=HEAP32[(($15)>>2)];
  var $46=$45|1;
  HEAP32[(($15)>>2)]=$46;
  _dispose_chunk($38,$34);
  var $newp_0=$p;
  var $newp_0;
  return $newp_0;
 }
 var $48=HEAP32[((10664)>>2)];
 var $49=($6|0)==($48|0);
 if ($49) {
  var $51=HEAP32[((10652)>>2)];
  var $52=((($51)+($3))|0);
  var $53=($52>>>0)>($nb>>>0);
  if (!($53)) {
   var $newp_0=0;
   var $newp_0;
   return $newp_0;
  }
  var $55=((($52)-($nb))|0);
  var $56=(($4+$nb)|0);
  var $57=$56;
  var $58=$2&1;
  var $59=$58|$nb;
  var $60=$59|2;
  HEAP32[(($1)>>2)]=$60;
  var $_sum28=((($nb)+(4))|0);
  var $61=(($4+$_sum28)|0);
  var $62=$61;
  var $63=$55|1;
  HEAP32[(($62)>>2)]=$63;
  HEAP32[((10664)>>2)]=$57;
  HEAP32[((10652)>>2)]=$55;
  var $newp_0=$p;
  var $newp_0;
  return $newp_0;
 }
 var $65=HEAP32[((10660)>>2)];
 var $66=($6|0)==($65|0);
 if ($66) {
  var $68=HEAP32[((10648)>>2)];
  var $69=((($68)+($3))|0);
  var $70=($69>>>0)<($nb>>>0);
  if ($70) {
   var $newp_0=0;
   var $newp_0;
   return $newp_0;
  }
  var $72=((($69)-($nb))|0);
  var $73=($72>>>0)>15;
  if ($73) {
   var $75=(($4+$nb)|0);
   var $76=$75;
   var $77=(($4+$69)|0);
   var $78=$2&1;
   var $79=$78|$nb;
   var $80=$79|2;
   HEAP32[(($1)>>2)]=$80;
   var $_sum25=((($nb)+(4))|0);
   var $81=(($4+$_sum25)|0);
   var $82=$81;
   var $83=$72|1;
   HEAP32[(($82)>>2)]=$83;
   var $84=$77;
   HEAP32[(($84)>>2)]=$72;
   var $_sum26=((($69)+(4))|0);
   var $85=(($4+$_sum26)|0);
   var $86=$85;
   var $87=HEAP32[(($86)>>2)];
   var $88=$87&-2;
   HEAP32[(($86)>>2)]=$88;
   var $storemerge=$76;var $storemerge27=$72;
  } else {
   var $90=$2&1;
   var $91=$90|$69;
   var $92=$91|2;
   HEAP32[(($1)>>2)]=$92;
   var $_sum23=((($69)+(4))|0);
   var $93=(($4+$_sum23)|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=$95|1;
   HEAP32[(($94)>>2)]=$96;
   var $storemerge=0;var $storemerge27=0;
  }
  var $storemerge27;
  var $storemerge;
  HEAP32[((10648)>>2)]=$storemerge27;
  HEAP32[((10660)>>2)]=$storemerge;
  var $newp_0=$p;
  var $newp_0;
  return $newp_0;
 }
 var $99=$16&2;
 var $100=($99|0)==0;
 if (!($100)) {
  var $newp_0=0;
  var $newp_0;
  return $newp_0;
 }
 var $102=$16&-8;
 var $103=((($102)+($3))|0);
 var $104=($103>>>0)<($nb>>>0);
 if ($104) {
  var $newp_0=0;
  var $newp_0;
  return $newp_0;
 }
 var $106=((($103)-($nb))|0);
 var $107=$16>>>3;
 var $108=($16>>>0)<256;
 L8913: do {
  if ($108) {
   var $_sum17=((($3)+(8))|0);
   var $110=(($4+$_sum17)|0);
   var $111=$110;
   var $112=HEAP32[(($111)>>2)];
   var $_sum18=((($3)+(12))|0);
   var $113=(($4+$_sum18)|0);
   var $114=$113;
   var $115=HEAP32[(($114)>>2)];
   var $116=$107<<1;
   var $117=((10680+($116<<2))|0);
   var $118=$117;
   var $119=($112|0)==($118|0);
   do {
    if (!($119)) {
     var $121=$112;
     var $122=($121>>>0)<($7>>>0);
     if ($122) {
      _abort();
     }
     var $124=(($112+12)|0);
     var $125=HEAP32[(($124)>>2)];
     var $126=($125|0)==($6|0);
     if ($126) {
      break;
     }
     _abort();
    }
   } while(0);
   var $127=($115|0)==($112|0);
   if ($127) {
    var $129=1<<$107;
    var $130=$129^-1;
    var $131=HEAP32[((10640)>>2)];
    var $132=$131&$130;
    HEAP32[((10640)>>2)]=$132;
    break;
   }
   var $134=($115|0)==($118|0);
   do {
    if ($134) {
     var $_pre=(($115+8)|0);
     var $_pre_phi=$_pre;
    } else {
     var $136=$115;
     var $137=($136>>>0)<($7>>>0);
     if ($137) {
      _abort();
     }
     var $139=(($115+8)|0);
     var $140=HEAP32[(($139)>>2)];
     var $141=($140|0)==($6|0);
     if ($141) {
      var $_pre_phi=$139;
      break;
     }
     _abort();
    }
   } while(0);
   var $_pre_phi;
   var $142=(($112+12)|0);
   HEAP32[(($142)>>2)]=$115;
   HEAP32[(($_pre_phi)>>2)]=$112;
  } else {
   var $144=$5;
   var $_sum=((($3)+(24))|0);
   var $145=(($4+$_sum)|0);
   var $146=$145;
   var $147=HEAP32[(($146)>>2)];
   var $_sum2=((($3)+(12))|0);
   var $148=(($4+$_sum2)|0);
   var $149=$148;
   var $150=HEAP32[(($149)>>2)];
   var $151=($150|0)==($144|0);
   do {
    if ($151) {
     var $_sum4=((($3)+(20))|0);
     var $168=(($4+$_sum4)|0);
     var $169=$168;
     var $170=HEAP32[(($169)>>2)];
     var $171=($170|0)==0;
     if ($171) {
      var $_sum3=((($3)+(16))|0);
      var $173=(($4+$_sum3)|0);
      var $174=$173;
      var $175=HEAP32[(($174)>>2)];
      var $176=($175|0)==0;
      if ($176) {
       var $R_1=0;
       break;
      } else {
       var $R_0=$175;var $RP_0=$174;
      }
     } else {
      var $R_0=$170;var $RP_0=$169;
     }
     while(1) {
      var $RP_0;
      var $R_0;
      var $177=(($R_0+20)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=($178|0)==0;
      if (!($179)) {
       var $R_0=$178;var $RP_0=$177;
       continue;
      }
      var $181=(($R_0+16)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=($182|0)==0;
      if ($183) {
       break;
      } else {
       var $R_0=$182;var $RP_0=$181;
      }
     }
     var $185=$RP_0;
     var $186=($185>>>0)<($7>>>0);
     if ($186) {
      _abort();
     } else {
      HEAP32[(($RP_0)>>2)]=0;
      var $R_1=$R_0;
      break;
     }
    } else {
     var $_sum14=((($3)+(8))|0);
     var $153=(($4+$_sum14)|0);
     var $154=$153;
     var $155=HEAP32[(($154)>>2)];
     var $156=$155;
     var $157=($156>>>0)<($7>>>0);
     if ($157) {
      _abort();
     }
     var $159=(($155+12)|0);
     var $160=HEAP32[(($159)>>2)];
     var $161=($160|0)==($144|0);
     if (!($161)) {
      _abort();
     }
     var $163=(($150+8)|0);
     var $164=HEAP32[(($163)>>2)];
     var $165=($164|0)==($144|0);
     if ($165) {
      HEAP32[(($159)>>2)]=$150;
      HEAP32[(($163)>>2)]=$155;
      var $R_1=$150;
      break;
     } else {
      _abort();
     }
    }
   } while(0);
   var $R_1;
   var $190=($147|0)==0;
   if ($190) {
    break;
   }
   var $_sum11=((($3)+(28))|0);
   var $192=(($4+$_sum11)|0);
   var $193=$192;
   var $194=HEAP32[(($193)>>2)];
   var $195=((10944+($194<<2))|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=($144|0)==($196|0);
   do {
    if ($197) {
     HEAP32[(($195)>>2)]=$R_1;
     var $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     var $199=HEAP32[(($193)>>2)];
     var $200=1<<$199;
     var $201=$200^-1;
     var $202=HEAP32[((10644)>>2)];
     var $203=$202&$201;
     HEAP32[((10644)>>2)]=$203;
     break L8913;
    } else {
     var $205=$147;
     var $206=HEAP32[((10656)>>2)];
     var $207=($205>>>0)<($206>>>0);
     if ($207) {
      _abort();
     }
     var $209=(($147+16)|0);
     var $210=HEAP32[(($209)>>2)];
     var $211=($210|0)==($144|0);
     if ($211) {
      HEAP32[(($209)>>2)]=$R_1;
     } else {
      var $214=(($147+20)|0);
      HEAP32[(($214)>>2)]=$R_1;
     }
     var $217=($R_1|0)==0;
     if ($217) {
      break L8913;
     }
    }
   } while(0);
   var $219=$R_1;
   var $220=HEAP32[((10656)>>2)];
   var $221=($219>>>0)<($220>>>0);
   if ($221) {
    _abort();
   }
   var $223=(($R_1+24)|0);
   HEAP32[(($223)>>2)]=$147;
   var $_sum12=((($3)+(16))|0);
   var $224=(($4+$_sum12)|0);
   var $225=$224;
   var $226=HEAP32[(($225)>>2)];
   var $227=($226|0)==0;
   do {
    if (!($227)) {
     var $229=$226;
     var $230=HEAP32[((10656)>>2)];
     var $231=($229>>>0)<($230>>>0);
     if ($231) {
      _abort();
     } else {
      var $233=(($R_1+16)|0);
      HEAP32[(($233)>>2)]=$226;
      var $234=(($226+24)|0);
      HEAP32[(($234)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   var $_sum13=((($3)+(20))|0);
   var $237=(($4+$_sum13)|0);
   var $238=$237;
   var $239=HEAP32[(($238)>>2)];
   var $240=($239|0)==0;
   if ($240) {
    break;
   }
   var $242=$239;
   var $243=HEAP32[((10656)>>2)];
   var $244=($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
   } else {
    var $246=(($R_1+20)|0);
    HEAP32[(($246)>>2)]=$239;
    var $247=(($239+24)|0);
    HEAP32[(($247)>>2)]=$R_1;
    break;
   }
  }
 } while(0);
 var $251=($106>>>0)<16;
 if ($251) {
  var $253=HEAP32[(($1)>>2)];
  var $254=$253&1;
  var $255=$103|$254;
  var $256=$255|2;
  HEAP32[(($1)>>2)]=$256;
  var $_sum910=$103|4;
  var $257=(($4+$_sum910)|0);
  var $258=$257;
  var $259=HEAP32[(($258)>>2)];
  var $260=$259|1;
  HEAP32[(($258)>>2)]=$260;
  var $newp_0=$p;
  var $newp_0;
  return $newp_0;
 } else {
  var $262=(($4+$nb)|0);
  var $263=$262;
  var $264=HEAP32[(($1)>>2)];
  var $265=$264&1;
  var $266=$265|$nb;
  var $267=$266|2;
  HEAP32[(($1)>>2)]=$267;
  var $_sum5=((($nb)+(4))|0);
  var $268=(($4+$_sum5)|0);
  var $269=$268;
  var $270=$106|3;
  HEAP32[(($269)>>2)]=$270;
  var $_sum78=$103|4;
  var $271=(($4+$_sum78)|0);
  var $272=$271;
  var $273=HEAP32[(($272)>>2)];
  var $274=$273|1;
  HEAP32[(($272)>>2)]=$274;
  _dispose_chunk($263,$106);
  var $newp_0=$p;
  var $newp_0;
  return $newp_0;
 }
}
function _realloc_in_place($oldmem,$bytes){
 var label=0;
 var $1=($oldmem|0)==0;
 if ($1) {
  return 0;
 }
 var $3=($bytes>>>0)>4294967231;
 if ($3) {
  var $5=___errno_location();
  HEAP32[(($5)>>2)]=12;
  return 0;
 }
 var $7=($bytes>>>0)<11;
 if ($7) {
  var $12=16;
 } else {
  var $9=((($bytes)+(11))|0);
  var $10=$9&-8;
  var $12=$10;
 }
 var $12;
 var $13=((($oldmem)-(8))|0);
 var $14=$13;
 var $15=_try_realloc_chunk($14,$12);
 var $16=($15|0)==($14|0);
 var $oldmem_=$16?$oldmem:0;
 return $oldmem_;
}
function _memalign($alignment,$bytes){
 var label=0;
 var $1=($alignment>>>0)<9;
 if ($1) {
  var $3=_malloc($bytes);
  var $_0=$3;
  var $_0;
  return $_0;
 } else {
  var $5=_internal_memalign($alignment,$bytes);
  var $_0=$5;
  var $_0;
  return $_0;
 }
}
function _internal_memalign($alignment,$bytes){
 var label=0;
 var $1=($alignment>>>0)<16;
 var $_alignment=$1?16:$alignment;
 var $2=((($_alignment)-(1))|0);
 var $3=$2&$_alignment;
 var $4=($3|0)==0;
 if ($4) {
  var $_1=$_alignment;
 } else {
  var $a_0=16;
  while(1) {
   var $a_0;
   var $5=($a_0>>>0)<($_alignment>>>0);
   var $6=$a_0<<1;
   if ($5) {
    var $a_0=$6;
   } else {
    var $_1=$a_0;
    break;
   }
  }
 }
 var $_1;
 var $7=(((-64)-($_1))|0);
 var $8=($7>>>0)>($bytes>>>0);
 if (!($8)) {
  var $10=___errno_location();
  HEAP32[(($10)>>2)]=12;
  var $mem_0=0;
  var $mem_0;
  return $mem_0;
 }
 var $12=($bytes>>>0)<11;
 if ($12) {
  var $17=16;
 } else {
  var $14=((($bytes)+(11))|0);
  var $15=$14&-8;
  var $17=$15;
 }
 var $17;
 var $18=((($_1)+(12))|0);
 var $19=((($18)+($17))|0);
 var $20=_malloc($19);
 var $21=($20|0)==0;
 if ($21) {
  var $mem_0=0;
  var $mem_0;
  return $mem_0;
 }
 var $23=((($20)-(8))|0);
 var $24=$23;
 var $25=$20;
 var $26=((($_1)-(1))|0);
 var $27=$25&$26;
 var $28=($27|0)==0;
 do {
  if ($28) {
   var $p_0=$24;
  } else {
   var $30=(($20+$26)|0);
   var $31=$30;
   var $32=(((-$_1))|0);
   var $33=$31&$32;
   var $34=$33;
   var $35=((($34)-(8))|0);
   var $36=$35;
   var $37=$23;
   var $38=((($36)-($37))|0);
   var $39=($38>>>0)>15;
   if ($39) {
    var $43=$35;
   } else {
    var $_sum3=((($_1)-(8))|0);
    var $41=(($34+$_sum3)|0);
    var $43=$41;
   }
   var $43;
   var $44=$43;
   var $45=$43;
   var $46=((($45)-($37))|0);
   var $47=((($20)-(4))|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=$49&-8;
   var $51=((($50)-($46))|0);
   var $52=$49&3;
   var $53=($52|0)==0;
   if ($53) {
    var $55=$23;
    var $56=HEAP32[(($55)>>2)];
    var $57=((($56)+($46))|0);
    var $58=$43;
    HEAP32[(($58)>>2)]=$57;
    var $59=(($43+4)|0);
    var $60=$59;
    HEAP32[(($60)>>2)]=$51;
    var $p_0=$44;
    break;
   } else {
    var $62=(($43+4)|0);
    var $63=$62;
    var $64=HEAP32[(($63)>>2)];
    var $65=$64&1;
    var $66=$51|$65;
    var $67=$66|2;
    HEAP32[(($63)>>2)]=$67;
    var $_sum4=((($51)+(4))|0);
    var $68=(($43+$_sum4)|0);
    var $69=$68;
    var $70=HEAP32[(($69)>>2)];
    var $71=$70|1;
    HEAP32[(($69)>>2)]=$71;
    var $72=HEAP32[(($48)>>2)];
    var $73=$72&1;
    var $74=$46|$73;
    var $75=$74|2;
    HEAP32[(($48)>>2)]=$75;
    var $_sum6=((($46)-(4))|0);
    var $76=(($20+$_sum6)|0);
    var $77=$76;
    var $78=HEAP32[(($77)>>2)];
    var $79=$78|1;
    HEAP32[(($77)>>2)]=$79;
    _dispose_chunk($24,$46);
    var $p_0=$44;
    break;
   }
  }
 } while(0);
 var $p_0;
 var $81=(($p_0+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$82&3;
 var $84=($83|0)==0;
 do {
  if (!($84)) {
   var $86=$82&-8;
   var $87=((($17)+(16))|0);
   var $88=($86>>>0)>($87>>>0);
   if (!($88)) {
    break;
   }
   var $90=((($86)-($17))|0);
   var $91=$p_0;
   var $92=(($91+$17)|0);
   var $93=$92;
   var $94=$82&1;
   var $95=$17|$94;
   var $96=$95|2;
   HEAP32[(($81)>>2)]=$96;
   var $_sum1=$17|4;
   var $97=(($91+$_sum1)|0);
   var $98=$97;
   var $99=$90|3;
   HEAP32[(($98)>>2)]=$99;
   var $_sum2=$86|4;
   var $100=(($91+$_sum2)|0);
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=$102|1;
   HEAP32[(($101)>>2)]=$103;
   _dispose_chunk($93,$90);
  }
 } while(0);
 var $105=(($p_0+8)|0);
 var $106=$105;
 var $mem_0=$106;
 var $mem_0;
 return $mem_0;
}
function _posix_memalign($pp,$alignment,$bytes){
 var label=0;
 var $1=($alignment|0)==8;
 do {
  if ($1) {
   var $3=_malloc($bytes);
   var $mem_0=$3;
  } else {
   var $5=$alignment>>>2;
   var $6=$alignment&3;
   var $7=($6|0)!=0;
   var $8=($5|0)==0;
   var $or_cond=$7|$8;
   if ($or_cond) {
    var $_0=22;
    var $_0;
    return $_0;
   }
   var $10=((($5)+(1073741823))|0);
   var $11=$10&$5;
   var $12=($11|0)==0;
   if (!($12)) {
    var $_0=22;
    var $_0;
    return $_0;
   }
   var $14=(((-64)-($alignment))|0);
   var $15=($14>>>0)<($bytes>>>0);
   if ($15) {
    var $_0=12;
    var $_0;
    return $_0;
   } else {
    var $17=($alignment>>>0)<16;
    var $_alignment=$17?16:$alignment;
    var $18=_internal_memalign($_alignment,$bytes);
    var $mem_0=$18;
    break;
   }
  }
 } while(0);
 var $mem_0;
 var $20=($mem_0|0)==0;
 if ($20) {
  var $_0=12;
  var $_0;
  return $_0;
 }
 HEAP32[(($pp)>>2)]=$mem_0;
 var $_0=0;
 var $_0;
 return $_0;
}
function _valloc($bytes){
 var label=0;
 var $1=HEAP32[((10576)>>2)];
 var $2=($1|0)==0;
 if (!($2)) {
  var $13=HEAP32[((10580)>>2)];
  var $14=_memalign($13,$bytes);
  return $14;
 }
 var $4=_sysconf(30);
 var $5=((($4)-(1))|0);
 var $6=$5&$4;
 var $7=($6|0)==0;
 if (!($7)) {
  _abort();
 }
 HEAP32[((10584)>>2)]=$4;
 HEAP32[((10580)>>2)]=$4;
 HEAP32[((10588)>>2)]=-1;
 HEAP32[((10592)>>2)]=-1;
 HEAP32[((10596)>>2)]=0;
 HEAP32[((11084)>>2)]=0;
 var $9=_time(0);
 var $10=$9&-16;
 var $11=$10^1431655768;
 HEAP32[((10576)>>2)]=$11;
 var $13=HEAP32[((10580)>>2)];
 var $14=_memalign($13,$bytes);
 return $14;
}
function _pvalloc($bytes){
 var label=0;
 var $1=HEAP32[((10576)>>2)];
 var $2=($1|0)==0;
 do {
  if ($2) {
   var $4=_sysconf(30);
   var $5=((($4)-(1))|0);
   var $6=$5&$4;
   var $7=($6|0)==0;
   if ($7) {
    HEAP32[((10584)>>2)]=$4;
    HEAP32[((10580)>>2)]=$4;
    HEAP32[((10588)>>2)]=-1;
    HEAP32[((10592)>>2)]=-1;
    HEAP32[((10596)>>2)]=0;
    HEAP32[((11084)>>2)]=0;
    var $9=_time(0);
    var $10=$9&-16;
    var $11=$10^1431655768;
    HEAP32[((10576)>>2)]=$11;
    break;
   } else {
    _abort();
   }
  }
 } while(0);
 var $13=HEAP32[((10580)>>2)];
 var $14=((($bytes)-(1))|0);
 var $15=((($14)+($13))|0);
 var $16=(((-$13))|0);
 var $17=$15&$16;
 var $18=_memalign($13,$17);
 return $18;
}
function _independent_calloc($n_elements,$elem_size,$chunks){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 var $sz=sp;
 HEAP32[(($sz)>>2)]=$elem_size;
 var $1=_ialloc($n_elements,$sz,3,$chunks);
 STACKTOP=sp;return $1;
}
function _ialloc($n_elements,$sizes,$opts,$chunks){
 var label=0;
 var $1=HEAP32[((10576)>>2)];
 var $2=($1|0)==0;
 do {
  if ($2) {
   var $4=_sysconf(30);
   var $5=((($4)-(1))|0);
   var $6=$5&$4;
   var $7=($6|0)==0;
   if ($7) {
    HEAP32[((10584)>>2)]=$4;
    HEAP32[((10580)>>2)]=$4;
    HEAP32[((10588)>>2)]=-1;
    HEAP32[((10592)>>2)]=-1;
    HEAP32[((10596)>>2)]=0;
    HEAP32[((11084)>>2)]=0;
    var $9=_time(0);
    var $10=$9&-16;
    var $11=$10^1431655768;
    HEAP32[((10576)>>2)]=$11;
    break;
   } else {
    _abort();
   }
  }
 } while(0);
 var $13=($chunks|0)==0;
 var $14=($n_elements|0)==0;
 do {
  if ($13) {
   if ($14) {
    var $18=_malloc(0);
    var $19=$18;
    var $_0=$19;
    var $_0;
    return $_0;
   } else {
    var $21=$n_elements<<2;
    var $22=($21>>>0)<11;
    if ($22) {
     var $marray_0=0;var $array_size_0=16;
     break;
    }
    var $24=((($21)+(11))|0);
    var $25=$24&-8;
    var $marray_0=0;var $array_size_0=$25;
    break;
   }
  } else {
   if ($14) {
    var $_0=$chunks;
   } else {
    var $marray_0=$chunks;var $array_size_0=0;
    break;
   }
   var $_0;
   return $_0;
  }
 } while(0);
 var $array_size_0;
 var $marray_0;
 var $27=$opts&1;
 var $28=($27|0)==0;
 do {
  if ($28) {
   if ($14) {
    var $element_size_0=0;var $contents_size_1=0;
    break;
   } else {
    var $contents_size_07=0;var $i_08=0;
   }
   while(1) {
    var $i_08;
    var $contents_size_07;
    var $38=(($sizes+($i_08<<2))|0);
    var $39=HEAP32[(($38)>>2)];
    var $40=($39>>>0)<11;
    if ($40) {
     var $45=16;
    } else {
     var $42=((($39)+(11))|0);
     var $43=$42&-8;
     var $45=$43;
    }
    var $45;
    var $46=((($45)+($contents_size_07))|0);
    var $47=((($i_08)+(1))|0);
    var $48=($47|0)==($n_elements|0);
    if ($48) {
     var $element_size_0=0;var $contents_size_1=$46;
     break;
    } else {
     var $contents_size_07=$46;var $i_08=$47;
    }
   }
  } else {
   var $30=HEAP32[(($sizes)>>2)];
   var $31=($30>>>0)<11;
   if ($31) {
    var $36=16;
   } else {
    var $33=((($30)+(11))|0);
    var $34=$33&-8;
    var $36=$34;
   }
   var $36;
   var $37=(Math_imul($36,$n_elements)|0);
   var $element_size_0=$36;var $contents_size_1=$37;
  }
 } while(0);
 var $contents_size_1;
 var $element_size_0;
 var $49=((($array_size_0)-(4))|0);
 var $50=((($49)+($contents_size_1))|0);
 var $51=_malloc($50);
 var $52=($51|0)==0;
 if ($52) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $54=((($51)-(8))|0);
 var $55=((($51)-(4))|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=$57&-8;
 var $59=$opts&2;
 var $60=($59|0)==0;
 if (!($60)) {
  var $62=(((-4)-($array_size_0))|0);
  var $63=((($62)+($58))|0);
  _memset($51, 0, $63);
 }
 var $65=($marray_0|0)==0;
 if ($65) {
  var $67=((($58)-($contents_size_1))|0);
  var $68=(($51+$contents_size_1)|0);
  var $69=$68;
  var $70=$67|3;
  var $_sum2=((($contents_size_1)-(4))|0);
  var $71=(($51+$_sum2)|0);
  var $72=$71;
  HEAP32[(($72)>>2)]=$70;
  var $marray_1=$69;var $remainder_size_0=$contents_size_1;
 } else {
  var $marray_1=$marray_0;var $remainder_size_0=$58;
 }
 var $remainder_size_0;
 var $marray_1;
 HEAP32[(($marray_1)>>2)]=$51;
 var $74=((($n_elements)-(1))|0);
 var $75=($74|0)==0;
 L9106: do {
  if ($75) {
   var $p_0_in_lcssa=$54;var $remainder_size_1_lcssa=$remainder_size_0;
  } else {
   var $76=($element_size_0|0)==0;
   if ($76) {
    var $p_0_in3_us=$54;var $remainder_size_14_us=$remainder_size_0;var $i_15_us=0;
   } else {
    var $p_0_in3=$54;var $remainder_size_14=$remainder_size_0;var $i_15=0;
    while(1) {
     var $i_15;
     var $remainder_size_14;
     var $p_0_in3;
     var $94=((($remainder_size_14)-($element_size_0))|0);
     var $95=$element_size_0|3;
     var $96=(($p_0_in3+4)|0);
     var $97=$96;
     HEAP32[(($97)>>2)]=$95;
     var $98=(($p_0_in3+$element_size_0)|0);
     var $99=((($i_15)+(1))|0);
     var $_sum=((($element_size_0)+(8))|0);
     var $100=(($p_0_in3+$_sum)|0);
     var $101=(($marray_1+($99<<2))|0);
     HEAP32[(($101)>>2)]=$100;
     var $102=($99|0)==($74|0);
     if ($102) {
      var $p_0_in_lcssa=$98;var $remainder_size_1_lcssa=$94;
      break L9106;
     } else {
      var $p_0_in3=$98;var $remainder_size_14=$94;var $i_15=$99;
     }
    }
   }
   while(1) {
    var $i_15_us;
    var $remainder_size_14_us;
    var $p_0_in3_us;
    var $77=(($sizes+($i_15_us<<2))|0);
    var $78=HEAP32[(($77)>>2)];
    var $79=($78>>>0)<11;
    if ($79) {
     var $size_0_us=16;
    } else {
     var $81=((($78)+(11))|0);
     var $82=$81&-8;
     var $size_0_us=$82;
    }
    var $size_0_us;
    var $84=((($remainder_size_14_us)-($size_0_us))|0);
    var $85=$size_0_us|3;
    var $86=(($p_0_in3_us+4)|0);
    var $87=$86;
    HEAP32[(($87)>>2)]=$85;
    var $88=(($p_0_in3_us+$size_0_us)|0);
    var $89=((($i_15_us)+(1))|0);
    var $_sum11=((($size_0_us)+(8))|0);
    var $90=(($p_0_in3_us+$_sum11)|0);
    var $91=(($marray_1+($89<<2))|0);
    HEAP32[(($91)>>2)]=$90;
    var $92=($89|0)==($74|0);
    if ($92) {
     var $p_0_in_lcssa=$88;var $remainder_size_1_lcssa=$84;
     break;
    } else {
     var $p_0_in3_us=$88;var $remainder_size_14_us=$84;var $i_15_us=$89;
    }
   }
  }
 } while(0);
 var $remainder_size_1_lcssa;
 var $p_0_in_lcssa;
 var $103=$remainder_size_1_lcssa|3;
 var $104=(($p_0_in_lcssa+4)|0);
 var $105=$104;
 HEAP32[(($105)>>2)]=$103;
 var $_0=$marray_1;
 var $_0;
 return $_0;
}
function _independent_comalloc($n_elements,$sizes,$chunks){
 var label=0;
 var $1=_ialloc($n_elements,$sizes,0,$chunks);
 return $1;
}
function _bulk_free($array,$nelem){
 var label=0;
 var $1=(($array+($nelem<<2))|0);
 var $2=($nelem|0)==0;
 if ($2) {
  return 0;
 } else {
  var $a_07_i=$array;
 }
 L9122: while(1) {
  var $a_07_i;
  var $3=HEAP32[(($a_07_i)>>2)];
  var $4=($3|0)==0;
  L9124: do {
   if ($4) {
    var $_pre_i=(($a_07_i+4)|0);
    var $_pre_phi_i=$_pre_i;
   } else {
    var $6=((($3)-(8))|0);
    var $7=$6;
    var $8=((($3)-(4))|0);
    var $9=$8;
    var $10=HEAP32[(($9)>>2)];
    var $11=$10&-8;
    HEAP32[(($a_07_i)>>2)]=0;
    var $12=HEAP32[((10656)>>2)];
    var $13=($6>>>0)<($12>>>0);
    if ($13) {
     label = 6862;
     break L9122;
    }
    var $15=HEAP32[(($9)>>2)];
    var $16=$15&3;
    var $17=($16|0)==1;
    if ($17) {
     label = 6863;
     break L9122;
    }
    var $19=(($a_07_i+4)|0);
    var $20=((($15)-(8))|0);
    var $_sum_i=$20&-8;
    var $21=($19|0)==($1|0);
    do {
     if (!($21)) {
      var $23=HEAP32[(($19)>>2)];
      var $_sum2_i=((($_sum_i)+(8))|0);
      var $24=(($3+$_sum2_i)|0);
      var $25=($23|0)==($24|0);
      if (!($25)) {
       break;
      }
      var $_sum34_i=$_sum_i|4;
      var $27=(($3+$_sum34_i)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29&-8;
      var $31=((($30)+($11))|0);
      var $32=$15&1;
      var $33=$32|$31;
      var $34=$33|2;
      HEAP32[(($9)>>2)]=$34;
      var $_sum6_i=((($31)-(4))|0);
      var $35=(($3+$_sum6_i)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37|1;
      HEAP32[(($36)>>2)]=$38;
      HEAP32[(($19)>>2)]=$3;
      var $_pre_phi_i=$19;
      break L9124;
     }
    } while(0);
    _dispose_chunk($7,$11);
    var $_pre_phi_i=$19;
   }
  } while(0);
  var $_pre_phi_i;
  var $41=($_pre_phi_i|0)==($1|0);
  if ($41) {
   label = 6864;
   break;
  } else {
   var $a_07_i=$_pre_phi_i;
  }
 }
 if (label == 6862) {
  _abort();
 }
 else if (label == 6864) {
  return 0;
 }
 else if (label == 6863) {
  _abort();
 }
}
function _malloc_trim($pad){
 var label=0;
 var $1=HEAP32[((10576)>>2)];
 var $2=($1|0)==0;
 do {
  if ($2) {
   var $4=_sysconf(30);
   var $5=((($4)-(1))|0);
   var $6=$5&$4;
   var $7=($6|0)==0;
   if ($7) {
    HEAP32[((10584)>>2)]=$4;
    HEAP32[((10580)>>2)]=$4;
    HEAP32[((10588)>>2)]=-1;
    HEAP32[((10592)>>2)]=-1;
    HEAP32[((10596)>>2)]=0;
    HEAP32[((11084)>>2)]=0;
    var $9=_time(0);
    var $10=$9&-16;
    var $11=$10^1431655768;
    HEAP32[((10576)>>2)]=$11;
    break;
   } else {
    _abort();
   }
  }
 } while(0);
 var $13=($pad>>>0)<4294967232;
 if (!($13)) {
  var $released_2_i=0;
  var $released_2_i;
  return $released_2_i;
 }
 var $15=HEAP32[((10664)>>2)];
 var $16=($15|0)==0;
 if ($16) {
  var $released_2_i=0;
  var $released_2_i;
  return $released_2_i;
 }
 var $18=((($pad)+(40))|0);
 var $19=HEAP32[((10652)>>2)];
 var $20=($19>>>0)>($18>>>0);
 do {
  if ($20) {
   var $22=HEAP32[((10584)>>2)];
   var $23=(((-41)-($pad))|0);
   var $24=((($23)+($19))|0);
   var $25=((($24)+($22))|0);
   var $26=(((($25>>>0))/(($22>>>0)))&-1);
   var $27=((($26)-(1))|0);
   var $28=(Math_imul($27,$22)|0);
   var $29=$15;
   var $sp_0_i_i=11088;
   while(1) {
    var $sp_0_i_i;
    var $31=(($sp_0_i_i)|0);
    var $32=HEAP32[(($31)>>2)];
    var $33=($32>>>0)>($29>>>0);
    if (!($33)) {
     var $35=(($sp_0_i_i+4)|0);
     var $36=HEAP32[(($35)>>2)];
     var $37=(($32+$36)|0);
     var $38=($37>>>0)>($29>>>0);
     if ($38) {
      var $_0_i_i=$sp_0_i_i;
      break;
     }
    }
    var $40=(($sp_0_i_i+8)|0);
    var $41=HEAP32[(($40)>>2)];
    var $42=($41|0)==0;
    if ($42) {
     var $_0_i_i=0;
     break;
    } else {
     var $sp_0_i_i=$41;
    }
   }
   var $_0_i_i;
   var $43=(($_0_i_i+12)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$44&8;
   var $46=($45|0)==0;
   if (!($46)) {
    break;
   }
   var $48=_sbrk(0);
   var $49=(($_0_i_i)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($_0_i_i+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($50+$52)|0);
   var $54=($48|0)==($53|0);
   if (!($54)) {
    break;
   }
   var $56=(((-2147483648)-($22))|0);
   var $57=($28>>>0)>2147483646;
   var $__i=$57?$56:$28;
   var $58=(((-$__i))|0);
   var $59=_sbrk($58);
   var $60=_sbrk(0);
   var $61=($59|0)!=-1;
   var $62=($60>>>0)<($48>>>0);
   var $or_cond_i=$61&$62;
   if (!($or_cond_i)) {
    break;
   }
   var $64=$48;
   var $65=$60;
   var $66=((($64)-($65))|0);
   var $67=($48|0)==($60|0);
   if ($67) {
    break;
   }
   var $69=HEAP32[(($51)>>2)];
   var $70=((($69)-($66))|0);
   HEAP32[(($51)>>2)]=$70;
   var $71=HEAP32[((11072)>>2)];
   var $72=((($71)-($66))|0);
   HEAP32[((11072)>>2)]=$72;
   var $73=HEAP32[((10664)>>2)];
   var $74=HEAP32[((10652)>>2)];
   var $75=((($74)-($66))|0);
   var $76=$73;
   var $77=(($73+8)|0);
   var $78=$77;
   var $79=$78&7;
   var $80=($79|0)==0;
   if ($80) {
    var $85=0;
   } else {
    var $82=(((-$78))|0);
    var $83=$82&7;
    var $85=$83;
   }
   var $85;
   var $86=(($76+$85)|0);
   var $87=$86;
   var $88=((($75)-($85))|0);
   HEAP32[((10664)>>2)]=$87;
   HEAP32[((10652)>>2)]=$88;
   var $89=$88|1;
   var $_sum_i_i=((($85)+(4))|0);
   var $90=(($76+$_sum_i_i)|0);
   var $91=$90;
   HEAP32[(($91)>>2)]=$89;
   var $_sum2_i_i=((($75)+(4))|0);
   var $92=(($76+$_sum2_i_i)|0);
   var $93=$92;
   HEAP32[(($93)>>2)]=40;
   var $94=HEAP32[((10592)>>2)];
   HEAP32[((10668)>>2)]=$94;
   var $released_2_i=1;
   var $released_2_i;
   return $released_2_i;
  }
 } while(0);
 var $95=HEAP32[((10652)>>2)];
 var $96=HEAP32[((10668)>>2)];
 var $97=($95>>>0)>($96>>>0);
 if (!($97)) {
  var $released_2_i=0;
  var $released_2_i;
  return $released_2_i;
 }
 HEAP32[((10668)>>2)]=-1;
 var $released_2_i=0;
 var $released_2_i;
 return $released_2_i;
}
function _malloc_footprint(){
 var label=0;
 var $1=HEAP32[((11072)>>2)];
 return $1;
}
function _malloc_max_footprint(){
 var label=0;
 var $1=HEAP32[((11076)>>2)];
 return $1;
}
function _malloc_footprint_limit(){
 var label=0;
 var $1=HEAP32[((11080)>>2)];
 var $2=($1|0)==0;
 var $3=$2?-1:$1;
 return $3;
}
function _malloc_set_footprint_limit($bytes){
 var label=0;
 var $1=($bytes|0)==-1;
 if ($1) {
  var $result_0=0;
 } else {
  var $3=HEAP32[((10584)>>2)];
  var $4=((($bytes)-(1))|0);
  var $5=((($4)+($3))|0);
  var $6=(((-$3))|0);
  var $7=$5&$6;
  var $result_0=$7;
 }
 var $result_0;
 HEAP32[((11080)>>2)]=$result_0;
 return $result_0;
}
function _mallinfo($agg_result){
 var label=0;
 var $1=HEAP32[((10576)>>2)];
 var $2=($1|0)==0;
 do {
  if ($2) {
   var $4=_sysconf(30);
   var $5=((($4)-(1))|0);
   var $6=$5&$4;
   var $7=($6|0)==0;
   if ($7) {
    HEAP32[((10584)>>2)]=$4;
    HEAP32[((10580)>>2)]=$4;
    HEAP32[((10588)>>2)]=-1;
    HEAP32[((10592)>>2)]=-1;
    HEAP32[((10596)>>2)]=0;
    HEAP32[((11084)>>2)]=0;
    var $9=_time(0);
    var $10=$9&-16;
    var $11=$10^1431655768;
    HEAP32[((10576)>>2)]=$11;
    break;
   } else {
    _abort();
   }
  }
 } while(0);
 var $13=HEAP32[((10664)>>2)];
 var $14=($13|0)==0;
 if ($14) {
  var $nm_sroa_8_0_i=0;var $nm_sroa_0_0_i=0;var $nm_sroa_1_0_i=0;var $nm_sroa_3_0_i=0;var $nm_sroa_4_0_i=0;var $nm_sroa_6_0_i=0;var $nm_sroa_7_0_i=0;
 } else {
  var $16=HEAP32[((10652)>>2)];
  var $17=((($16)+(40))|0);
  var $nfree_08_i=1;var $mfree_09_i=$17;var $sum_010_i=$17;var $s_011_i=11088;
  while(1) {
   var $s_011_i;
   var $sum_010_i;
   var $mfree_09_i;
   var $nfree_08_i;
   var $19=(($s_011_i)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+8)|0);
   var $22=$21;
   var $23=$22&7;
   var $24=($23|0)==0;
   if ($24) {
    var $28=0;
   } else {
    var $26=(((-$22))|0);
    var $27=$26&7;
    var $28=$27;
   }
   var $28;
   var $29=(($20+$28)|0);
   var $30=(($s_011_i+4)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($20+$31)|0);
   var $nfree_12_i=$nfree_08_i;var $mfree_13_i=$mfree_09_i;var $sum_14_i=$sum_010_i;var $q_0_in5_i=$29;
   while(1) {
    var $q_0_in5_i;
    var $sum_14_i;
    var $mfree_13_i;
    var $nfree_12_i;
    var $q_0_i=$q_0_in5_i;
    var $34=($q_0_in5_i>>>0)>=($32>>>0);
    var $35=($q_0_i|0)==($13|0);
    var $or_cond_i=$34|$35;
    if ($or_cond_i) {
     var $nfree_1_lcssa_i=$nfree_12_i;var $mfree_1_lcssa_i=$mfree_13_i;var $sum_1_lcssa_i=$sum_14_i;
     break;
    }
    var $37=(($q_0_in5_i+4)|0);
    var $38=$37;
    var $39=HEAP32[(($38)>>2)];
    var $40=($39|0)==7;
    if ($40) {
     var $nfree_1_lcssa_i=$nfree_12_i;var $mfree_1_lcssa_i=$mfree_13_i;var $sum_1_lcssa_i=$sum_14_i;
     break;
    }
    var $42=$39&-8;
    var $43=((($42)+($sum_14_i))|0);
    var $44=$39&3;
    var $45=($44|0)==1;
    if ($45) {
     var $47=((($42)+($mfree_13_i))|0);
     var $48=((($nfree_12_i)+(1))|0);
     var $mfree_2_i=$47;var $nfree_2_i=$48;
    } else {
     var $mfree_2_i=$mfree_13_i;var $nfree_2_i=$nfree_12_i;
    }
    var $nfree_2_i;
    var $mfree_2_i;
    var $50=(($q_0_in5_i+$42)|0);
    var $51=($50>>>0)<($20>>>0);
    if ($51) {
     var $nfree_1_lcssa_i=$nfree_2_i;var $mfree_1_lcssa_i=$mfree_2_i;var $sum_1_lcssa_i=$43;
     break;
    } else {
     var $nfree_12_i=$nfree_2_i;var $mfree_13_i=$mfree_2_i;var $sum_14_i=$43;var $q_0_in5_i=$50;
    }
   }
   var $sum_1_lcssa_i;
   var $mfree_1_lcssa_i;
   var $nfree_1_lcssa_i;
   var $52=(($s_011_i+8)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=($53|0)==0;
   if ($54) {
    break;
   } else {
    var $nfree_08_i=$nfree_1_lcssa_i;var $mfree_09_i=$mfree_1_lcssa_i;var $sum_010_i=$sum_1_lcssa_i;var $s_011_i=$53;
   }
  }
  var $56=HEAP32[((11072)>>2)];
  var $57=((($56)-($sum_1_lcssa_i))|0);
  var $58=HEAP32[((11076)>>2)];
  var $59=((($56)-($mfree_1_lcssa_i))|0);
  var $nm_sroa_8_0_i=$16;var $nm_sroa_0_0_i=$sum_1_lcssa_i;var $nm_sroa_1_0_i=$nfree_1_lcssa_i;var $nm_sroa_3_0_i=$57;var $nm_sroa_4_0_i=$58;var $nm_sroa_6_0_i=$59;var $nm_sroa_7_0_i=$mfree_1_lcssa_i;
 }
 var $nm_sroa_7_0_i;
 var $nm_sroa_6_0_i;
 var $nm_sroa_4_0_i;
 var $nm_sroa_3_0_i;
 var $nm_sroa_1_0_i;
 var $nm_sroa_0_0_i;
 var $nm_sroa_8_0_i;
 var $nm_sroa_0_0__idx_i=(($agg_result)|0);
 HEAP32[(($nm_sroa_0_0__idx_i)>>2)]=$nm_sroa_0_0_i;
 var $nm_sroa_1_4__idx24_i=(($agg_result+4)|0);
 HEAP32[(($nm_sroa_1_4__idx24_i)>>2)]=$nm_sroa_1_0_i;
 var $nm_sroa_2_8__idx_i=(($agg_result+8)|0);
 var $60=$nm_sroa_2_8__idx_i;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($60)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($60+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $nm_sroa_3_16__idx26_i=(($agg_result+16)|0);
 HEAP32[(($nm_sroa_3_16__idx26_i)>>2)]=$nm_sroa_3_0_i;
 var $nm_sroa_4_20__idx27_i=(($agg_result+20)|0);
 HEAP32[(($nm_sroa_4_20__idx27_i)>>2)]=$nm_sroa_4_0_i;
 var $nm_sroa_5_24__idx28_i=(($agg_result+24)|0);
 HEAP32[(($nm_sroa_5_24__idx28_i)>>2)]=0;
 var $nm_sroa_6_28__idx29_i=(($agg_result+28)|0);
 HEAP32[(($nm_sroa_6_28__idx29_i)>>2)]=$nm_sroa_6_0_i;
 var $nm_sroa_7_32__idx30_i=(($agg_result+32)|0);
 HEAP32[(($nm_sroa_7_32__idx30_i)>>2)]=$nm_sroa_7_0_i;
 var $nm_sroa_8_36__idx31_i=(($agg_result+36)|0);
 HEAP32[(($nm_sroa_8_36__idx31_i)>>2)]=$nm_sroa_8_0_i;
 return;
}
function _malloc_stats(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=HEAP32[((10576)>>2)];
 var $2=($1|0)==0;
 do {
  if ($2) {
   var $4=_sysconf(30);
   var $5=((($4)-(1))|0);
   var $6=$5&$4;
   var $7=($6|0)==0;
   if ($7) {
    HEAP32[((10584)>>2)]=$4;
    HEAP32[((10580)>>2)]=$4;
    HEAP32[((10588)>>2)]=-1;
    HEAP32[((10592)>>2)]=-1;
    HEAP32[((10596)>>2)]=0;
    HEAP32[((11084)>>2)]=0;
    var $9=_time(0);
    var $10=$9&-16;
    var $11=$10^1431655768;
    HEAP32[((10576)>>2)]=$11;
    break;
   } else {
    _abort();
   }
  }
 } while(0);
 var $13=HEAP32[((10664)>>2)];
 var $14=($13|0)==0;
 if ($14) {
  var $used_3_i=0;var $fp_0_i=0;var $maxfp_0_i=0;
 } else {
  var $16=HEAP32[((11076)>>2)];
  var $17=HEAP32[((11072)>>2)];
  var $18=HEAP32[((10652)>>2)];
  var $_neg2_i=((($17)-(40))|0);
  var $19=((($_neg2_i)-($18))|0);
  var $used_05_i=$19;var $s_06_i=11088;
  while(1) {
   var $s_06_i;
   var $used_05_i;
   var $21=(($s_06_i)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+8)|0);
   var $24=$23;
   var $25=$24&7;
   var $26=($25|0)==0;
   if ($26) {
    var $30=0;
   } else {
    var $28=(((-$24))|0);
    var $29=$28&7;
    var $30=$29;
   }
   var $30;
   var $31=(($22+$30)|0);
   var $32=(($s_06_i+4)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($22+$33)|0);
   var $used_13_i=$used_05_i;var $q_0_in4_i=$31;
   while(1) {
    var $q_0_in4_i;
    var $used_13_i;
    var $q_0_i=$q_0_in4_i;
    var $36=($q_0_in4_i>>>0)>=($34>>>0);
    var $37=($q_0_i|0)==($13|0);
    var $or_cond_i=$36|$37;
    if ($or_cond_i) {
     var $used_1_lcssa_i=$used_13_i;
     break;
    }
    var $39=(($q_0_in4_i+4)|0);
    var $40=$39;
    var $41=HEAP32[(($40)>>2)];
    var $42=($41|0)==7;
    if ($42) {
     var $used_1_lcssa_i=$used_13_i;
     break;
    }
    var $43=$41&3;
    var $44=($43|0)==1;
    var $45=$41&-8;
    var $46=$44?$45:0;
    var $used_2_i=((($used_13_i)-($46))|0);
    var $47=(($q_0_in4_i+$45)|0);
    var $48=($47>>>0)<($22>>>0);
    if ($48) {
     var $used_1_lcssa_i=$used_2_i;
     break;
    } else {
     var $used_13_i=$used_2_i;var $q_0_in4_i=$47;
    }
   }
   var $used_1_lcssa_i;
   var $49=(($s_06_i+8)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=($50|0)==0;
   if ($51) {
    var $used_3_i=$used_1_lcssa_i;var $fp_0_i=$17;var $maxfp_0_i=$16;
    break;
   } else {
    var $used_05_i=$used_1_lcssa_i;var $s_06_i=$50;
   }
  }
 }
 var $maxfp_0_i;
 var $fp_0_i;
 var $used_3_i;
 var $52=HEAP32[((_stderr)>>2)];
 var $53=_fprintf($52,4728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$maxfp_0_i,tempVarArgs)); STACKTOP=tempVarArgs;
 var $54=_fprintf($52,7120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$fp_0_i,tempVarArgs)); STACKTOP=tempVarArgs;
 var $55=_fprintf($52,5080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$used_3_i,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}
function _mallopt($param_number,$value){
 var label=0;
 var $1=HEAP32[((10576)>>2)];
 var $2=($1|0)==0;
 do {
  if ($2) {
   var $4=_sysconf(30);
   var $5=((($4)-(1))|0);
   var $6=$5&$4;
   var $7=($6|0)==0;
   if ($7) {
    HEAP32[((10584)>>2)]=$4;
    HEAP32[((10580)>>2)]=$4;
    HEAP32[((10588)>>2)]=-1;
    HEAP32[((10592)>>2)]=-1;
    HEAP32[((10596)>>2)]=0;
    HEAP32[((11084)>>2)]=0;
    var $9=_time(0);
    var $10=$9&-16;
    var $11=$10^1431655768;
    HEAP32[((10576)>>2)]=$11;
    break;
   } else {
    _abort();
   }
  }
 } while(0);
 if (($param_number|0)==-1) {
  HEAP32[((10592)>>2)]=$value;
  var $_0_i=1;
  var $_0_i;
  return $_0_i;
 } else if (($param_number|0)==-3) {
  HEAP32[((10588)>>2)]=$value;
  var $_0_i=1;
  var $_0_i;
  return $_0_i;
 } else if (($param_number|0)==-2) {
  var $15=HEAP32[((10580)>>2)];
  var $16=($15>>>0)>($value>>>0);
  if ($16) {
   var $_0_i=0;
   var $_0_i;
   return $_0_i;
  }
  var $18=((($value)-(1))|0);
  var $19=$18&$value;
  var $20=($19|0)==0;
  if (!($20)) {
   var $_0_i=0;
   var $_0_i;
   return $_0_i;
  }
  HEAP32[((10584)>>2)]=$value;
  var $_0_i=1;
  var $_0_i;
  return $_0_i;
 } else {
  var $_0_i=0;
  var $_0_i;
  return $_0_i;
 }
}
function _malloc_usable_size($mem){
 var label=0;
 var $1=($mem|0)==0;
 if ($1) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $3=((($mem)-(4))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&3;
 var $7=($6|0)==1;
 if ($7) {
  var $_0=0;
  var $_0;
  return $_0;
 }
 var $9=$5&-8;
 var $10=($6|0)==0;
 var $11=$10?8:4;
 var $12=((($9)-($11))|0);
 var $_0=$12;
 var $_0;
 return $_0;
}
function _dispose_chunk($p,$psize){
 var label=0;
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 L9253: do {
  if ($7) {
   var $9=(($p)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$5&3;
   var $12=($11|0)==0;
   if ($12) {
    return;
   }
   var $14=(((-$10))|0);
   var $15=(($1+$14)|0);
   var $16=$15;
   var $17=((($10)+($psize))|0);
   var $18=HEAP32[((10656)>>2)];
   var $19=($15>>>0)<($18>>>0);
   if ($19) {
    _abort();
   }
   var $21=HEAP32[((10660)>>2)];
   var $22=($16|0)==($21|0);
   if ($22) {
    var $_sum=((($psize)+(4))|0);
    var $168=(($1+$_sum)|0);
    var $169=$168;
    var $170=HEAP32[(($169)>>2)];
    var $171=$170&3;
    var $172=($171|0)==3;
    if (!($172)) {
     var $_0=$16;var $_0277=$17;
     break;
    }
    HEAP32[((10648)>>2)]=$17;
    var $174=HEAP32[(($169)>>2)];
    var $175=$174&-2;
    HEAP32[(($169)>>2)]=$175;
    var $176=$17|1;
    var $_sum24=(((4)-($10))|0);
    var $177=(($1+$_sum24)|0);
    var $178=$177;
    HEAP32[(($178)>>2)]=$176;
    var $179=$2;
    HEAP32[(($179)>>2)]=$17;
    return;
   }
   var $24=$10>>>3;
   var $25=($10>>>0)<256;
   if ($25) {
    var $_sum35=(((8)-($10))|0);
    var $27=(($1+$_sum35)|0);
    var $28=$27;
    var $29=HEAP32[(($28)>>2)];
    var $_sum36=(((12)-($10))|0);
    var $30=(($1+$_sum36)|0);
    var $31=$30;
    var $32=HEAP32[(($31)>>2)];
    var $33=$24<<1;
    var $34=((10680+($33<<2))|0);
    var $35=$34;
    var $36=($29|0)==($35|0);
    do {
     if (!($36)) {
      var $38=$29;
      var $39=($38>>>0)<($18>>>0);
      if ($39) {
       _abort();
      }
      var $41=(($29+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=($42|0)==($16|0);
      if ($43) {
       break;
      }
      _abort();
     }
    } while(0);
    var $44=($32|0)==($29|0);
    if ($44) {
     var $46=1<<$24;
     var $47=$46^-1;
     var $48=HEAP32[((10640)>>2)];
     var $49=$48&$47;
     HEAP32[((10640)>>2)]=$49;
     var $_0=$16;var $_0277=$17;
     break;
    }
    var $51=($32|0)==($35|0);
    do {
     if ($51) {
      var $_pre62=(($32+8)|0);
      var $_pre_phi63=$_pre62;
     } else {
      var $53=$32;
      var $54=($53>>>0)<($18>>>0);
      if ($54) {
       _abort();
      }
      var $56=(($32+8)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=($57|0)==($16|0);
      if ($58) {
       var $_pre_phi63=$56;
       break;
      }
      _abort();
     }
    } while(0);
    var $_pre_phi63;
    var $59=(($29+12)|0);
    HEAP32[(($59)>>2)]=$32;
    HEAP32[(($_pre_phi63)>>2)]=$29;
    var $_0=$16;var $_0277=$17;
    break;
   }
   var $61=$15;
   var $_sum26=(((24)-($10))|0);
   var $62=(($1+$_sum26)|0);
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $_sum27=(((12)-($10))|0);
   var $65=(($1+$_sum27)|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=($67|0)==($61|0);
   do {
    if ($68) {
     var $_sum28=(((16)-($10))|0);
     var $_sum29=((($_sum28)+(4))|0);
     var $85=(($1+$_sum29)|0);
     var $86=$85;
     var $87=HEAP32[(($86)>>2)];
     var $88=($87|0)==0;
     if ($88) {
      var $90=(($1+$_sum28)|0);
      var $91=$90;
      var $92=HEAP32[(($91)>>2)];
      var $93=($92|0)==0;
      if ($93) {
       var $R_1=0;
       break;
      } else {
       var $R_0=$92;var $RP_0=$91;
      }
     } else {
      var $R_0=$87;var $RP_0=$86;
     }
     while(1) {
      var $RP_0;
      var $R_0;
      var $94=(($R_0+20)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=($95|0)==0;
      if (!($96)) {
       var $R_0=$95;var $RP_0=$94;
       continue;
      }
      var $98=(($R_0+16)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=($99|0)==0;
      if ($100) {
       break;
      } else {
       var $R_0=$99;var $RP_0=$98;
      }
     }
     var $102=$RP_0;
     var $103=($102>>>0)<($18>>>0);
     if ($103) {
      _abort();
     } else {
      HEAP32[(($RP_0)>>2)]=0;
      var $R_1=$R_0;
      break;
     }
    } else {
     var $_sum33=(((8)-($10))|0);
     var $70=(($1+$_sum33)|0);
     var $71=$70;
     var $72=HEAP32[(($71)>>2)];
     var $73=$72;
     var $74=($73>>>0)<($18>>>0);
     if ($74) {
      _abort();
     }
     var $76=(($72+12)|0);
     var $77=HEAP32[(($76)>>2)];
     var $78=($77|0)==($61|0);
     if (!($78)) {
      _abort();
     }
     var $80=(($67+8)|0);
     var $81=HEAP32[(($80)>>2)];
     var $82=($81|0)==($61|0);
     if ($82) {
      HEAP32[(($76)>>2)]=$67;
      HEAP32[(($80)>>2)]=$72;
      var $R_1=$67;
      break;
     } else {
      _abort();
     }
    }
   } while(0);
   var $R_1;
   var $107=($64|0)==0;
   if ($107) {
    var $_0=$16;var $_0277=$17;
    break;
   }
   var $_sum30=(((28)-($10))|0);
   var $109=(($1+$_sum30)|0);
   var $110=$109;
   var $111=HEAP32[(($110)>>2)];
   var $112=((10944+($111<<2))|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=($61|0)==($113|0);
   do {
    if ($114) {
     HEAP32[(($112)>>2)]=$R_1;
     var $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     var $116=HEAP32[(($110)>>2)];
     var $117=1<<$116;
     var $118=$117^-1;
     var $119=HEAP32[((10644)>>2)];
     var $120=$119&$118;
     HEAP32[((10644)>>2)]=$120;
     var $_0=$16;var $_0277=$17;
     break L9253;
    } else {
     var $122=$64;
     var $123=HEAP32[((10656)>>2)];
     var $124=($122>>>0)<($123>>>0);
     if ($124) {
      _abort();
     }
     var $126=(($64+16)|0);
     var $127=HEAP32[(($126)>>2)];
     var $128=($127|0)==($61|0);
     if ($128) {
      HEAP32[(($126)>>2)]=$R_1;
     } else {
      var $131=(($64+20)|0);
      HEAP32[(($131)>>2)]=$R_1;
     }
     var $134=($R_1|0)==0;
     if ($134) {
      var $_0=$16;var $_0277=$17;
      break L9253;
     }
    }
   } while(0);
   var $136=$R_1;
   var $137=HEAP32[((10656)>>2)];
   var $138=($136>>>0)<($137>>>0);
   if ($138) {
    _abort();
   }
   var $140=(($R_1+24)|0);
   HEAP32[(($140)>>2)]=$64;
   var $_sum31=(((16)-($10))|0);
   var $141=(($1+$_sum31)|0);
   var $142=$141;
   var $143=HEAP32[(($142)>>2)];
   var $144=($143|0)==0;
   do {
    if (!($144)) {
     var $146=$143;
     var $147=HEAP32[((10656)>>2)];
     var $148=($146>>>0)<($147>>>0);
     if ($148) {
      _abort();
     } else {
      var $150=(($R_1+16)|0);
      HEAP32[(($150)>>2)]=$143;
      var $151=(($143+24)|0);
      HEAP32[(($151)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   var $_sum32=((($_sum31)+(4))|0);
   var $154=(($1+$_sum32)|0);
   var $155=$154;
   var $156=HEAP32[(($155)>>2)];
   var $157=($156|0)==0;
   if ($157) {
    var $_0=$16;var $_0277=$17;
    break;
   }
   var $159=$156;
   var $160=HEAP32[((10656)>>2)];
   var $161=($159>>>0)<($160>>>0);
   if ($161) {
    _abort();
   } else {
    var $163=(($R_1+20)|0);
    HEAP32[(($163)>>2)]=$156;
    var $164=(($156+24)|0);
    HEAP32[(($164)>>2)]=$R_1;
    var $_0=$16;var $_0277=$17;
    break;
   }
  } else {
   var $_0=$p;var $_0277=$psize;
  }
 } while(0);
 var $_0277;
 var $_0;
 var $181=HEAP32[((10656)>>2)];
 var $182=($2>>>0)<($181>>>0);
 if ($182) {
  _abort();
 }
 var $_sum1=((($psize)+(4))|0);
 var $184=(($1+$_sum1)|0);
 var $185=$184;
 var $186=HEAP32[(($185)>>2)];
 var $187=$186&2;
 var $188=($187|0)==0;
 do {
  if ($188) {
   var $190=HEAP32[((10664)>>2)];
   var $191=($3|0)==($190|0);
   if ($191) {
    var $193=HEAP32[((10652)>>2)];
    var $194=((($193)+($_0277))|0);
    HEAP32[((10652)>>2)]=$194;
    HEAP32[((10664)>>2)]=$_0;
    var $195=$194|1;
    var $196=(($_0+4)|0);
    HEAP32[(($196)>>2)]=$195;
    var $197=HEAP32[((10660)>>2)];
    var $198=($_0|0)==($197|0);
    if (!($198)) {
     return;
    }
    HEAP32[((10660)>>2)]=0;
    HEAP32[((10648)>>2)]=0;
    return;
   }
   var $201=HEAP32[((10660)>>2)];
   var $202=($3|0)==($201|0);
   if ($202) {
    var $204=HEAP32[((10648)>>2)];
    var $205=((($204)+($_0277))|0);
    HEAP32[((10648)>>2)]=$205;
    HEAP32[((10660)>>2)]=$_0;
    var $206=$205|1;
    var $207=(($_0+4)|0);
    HEAP32[(($207)>>2)]=$206;
    var $208=$_0;
    var $209=(($208+$205)|0);
    var $210=$209;
    HEAP32[(($210)>>2)]=$205;
    return;
   }
   var $212=$186&-8;
   var $213=((($212)+($_0277))|0);
   var $214=$186>>>3;
   var $215=($186>>>0)<256;
   L9353: do {
    if ($215) {
     var $_sum20=((($psize)+(8))|0);
     var $217=(($1+$_sum20)|0);
     var $218=$217;
     var $219=HEAP32[(($218)>>2)];
     var $_sum21=((($psize)+(12))|0);
     var $220=(($1+$_sum21)|0);
     var $221=$220;
     var $222=HEAP32[(($221)>>2)];
     var $223=$214<<1;
     var $224=((10680+($223<<2))|0);
     var $225=$224;
     var $226=($219|0)==($225|0);
     do {
      if (!($226)) {
       var $228=$219;
       var $229=($228>>>0)<($181>>>0);
       if ($229) {
        _abort();
       }
       var $231=(($219+12)|0);
       var $232=HEAP32[(($231)>>2)];
       var $233=($232|0)==($3|0);
       if ($233) {
        break;
       }
       _abort();
      }
     } while(0);
     var $234=($222|0)==($219|0);
     if ($234) {
      var $236=1<<$214;
      var $237=$236^-1;
      var $238=HEAP32[((10640)>>2)];
      var $239=$238&$237;
      HEAP32[((10640)>>2)]=$239;
      break;
     }
     var $241=($222|0)==($225|0);
     do {
      if ($241) {
       var $_pre60=(($222+8)|0);
       var $_pre_phi61=$_pre60;
      } else {
       var $243=$222;
       var $244=($243>>>0)<($181>>>0);
       if ($244) {
        _abort();
       }
       var $246=(($222+8)|0);
       var $247=HEAP32[(($246)>>2)];
       var $248=($247|0)==($3|0);
       if ($248) {
        var $_pre_phi61=$246;
        break;
       }
       _abort();
      }
     } while(0);
     var $_pre_phi61;
     var $249=(($219+12)|0);
     HEAP32[(($249)>>2)]=$222;
     HEAP32[(($_pre_phi61)>>2)]=$219;
    } else {
     var $251=$2;
     var $_sum2=((($psize)+(24))|0);
     var $252=(($1+$_sum2)|0);
     var $253=$252;
     var $254=HEAP32[(($253)>>2)];
     var $_sum3=((($psize)+(12))|0);
     var $255=(($1+$_sum3)|0);
     var $256=$255;
     var $257=HEAP32[(($256)>>2)];
     var $258=($257|0)==($251|0);
     do {
      if ($258) {
       var $_sum5=((($psize)+(20))|0);
       var $275=(($1+$_sum5)|0);
       var $276=$275;
       var $277=HEAP32[(($276)>>2)];
       var $278=($277|0)==0;
       if ($278) {
        var $_sum4=((($psize)+(16))|0);
        var $280=(($1+$_sum4)|0);
        var $281=$280;
        var $282=HEAP32[(($281)>>2)];
        var $283=($282|0)==0;
        if ($283) {
         var $R7_1=0;
         break;
        } else {
         var $R7_0=$282;var $RP9_0=$281;
        }
       } else {
        var $R7_0=$277;var $RP9_0=$276;
       }
       while(1) {
        var $RP9_0;
        var $R7_0;
        var $284=(($R7_0+20)|0);
        var $285=HEAP32[(($284)>>2)];
        var $286=($285|0)==0;
        if (!($286)) {
         var $R7_0=$285;var $RP9_0=$284;
         continue;
        }
        var $288=(($R7_0+16)|0);
        var $289=HEAP32[(($288)>>2)];
        var $290=($289|0)==0;
        if ($290) {
         break;
        } else {
         var $R7_0=$289;var $RP9_0=$288;
        }
       }
       var $292=$RP9_0;
       var $293=($292>>>0)<($181>>>0);
       if ($293) {
        _abort();
       } else {
        HEAP32[(($RP9_0)>>2)]=0;
        var $R7_1=$R7_0;
        break;
       }
      } else {
       var $_sum18=((($psize)+(8))|0);
       var $260=(($1+$_sum18)|0);
       var $261=$260;
       var $262=HEAP32[(($261)>>2)];
       var $263=$262;
       var $264=($263>>>0)<($181>>>0);
       if ($264) {
        _abort();
       }
       var $266=(($262+12)|0);
       var $267=HEAP32[(($266)>>2)];
       var $268=($267|0)==($251|0);
       if (!($268)) {
        _abort();
       }
       var $270=(($257+8)|0);
       var $271=HEAP32[(($270)>>2)];
       var $272=($271|0)==($251|0);
       if ($272) {
        HEAP32[(($266)>>2)]=$257;
        HEAP32[(($270)>>2)]=$262;
        var $R7_1=$257;
        break;
       } else {
        _abort();
       }
      }
     } while(0);
     var $R7_1;
     var $297=($254|0)==0;
     if ($297) {
      break;
     }
     var $_sum15=((($psize)+(28))|0);
     var $299=(($1+$_sum15)|0);
     var $300=$299;
     var $301=HEAP32[(($300)>>2)];
     var $302=((10944+($301<<2))|0);
     var $303=HEAP32[(($302)>>2)];
     var $304=($251|0)==($303|0);
     do {
      if ($304) {
       HEAP32[(($302)>>2)]=$R7_1;
       var $cond53=($R7_1|0)==0;
       if (!($cond53)) {
        break;
       }
       var $306=HEAP32[(($300)>>2)];
       var $307=1<<$306;
       var $308=$307^-1;
       var $309=HEAP32[((10644)>>2)];
       var $310=$309&$308;
       HEAP32[((10644)>>2)]=$310;
       break L9353;
      } else {
       var $312=$254;
       var $313=HEAP32[((10656)>>2)];
       var $314=($312>>>0)<($313>>>0);
       if ($314) {
        _abort();
       }
       var $316=(($254+16)|0);
       var $317=HEAP32[(($316)>>2)];
       var $318=($317|0)==($251|0);
       if ($318) {
        HEAP32[(($316)>>2)]=$R7_1;
       } else {
        var $321=(($254+20)|0);
        HEAP32[(($321)>>2)]=$R7_1;
       }
       var $324=($R7_1|0)==0;
       if ($324) {
        break L9353;
       }
      }
     } while(0);
     var $326=$R7_1;
     var $327=HEAP32[((10656)>>2)];
     var $328=($326>>>0)<($327>>>0);
     if ($328) {
      _abort();
     }
     var $330=(($R7_1+24)|0);
     HEAP32[(($330)>>2)]=$254;
     var $_sum16=((($psize)+(16))|0);
     var $331=(($1+$_sum16)|0);
     var $332=$331;
     var $333=HEAP32[(($332)>>2)];
     var $334=($333|0)==0;
     do {
      if (!($334)) {
       var $336=$333;
       var $337=HEAP32[((10656)>>2)];
       var $338=($336>>>0)<($337>>>0);
       if ($338) {
        _abort();
       } else {
        var $340=(($R7_1+16)|0);
        HEAP32[(($340)>>2)]=$333;
        var $341=(($333+24)|0);
        HEAP32[(($341)>>2)]=$R7_1;
        break;
       }
      }
     } while(0);
     var $_sum17=((($psize)+(20))|0);
     var $344=(($1+$_sum17)|0);
     var $345=$344;
     var $346=HEAP32[(($345)>>2)];
     var $347=($346|0)==0;
     if ($347) {
      break;
     }
     var $349=$346;
     var $350=HEAP32[((10656)>>2)];
     var $351=($349>>>0)<($350>>>0);
     if ($351) {
      _abort();
     } else {
      var $353=(($R7_1+20)|0);
      HEAP32[(($353)>>2)]=$346;
      var $354=(($346+24)|0);
      HEAP32[(($354)>>2)]=$R7_1;
      break;
     }
    }
   } while(0);
   var $358=$213|1;
   var $359=(($_0+4)|0);
   HEAP32[(($359)>>2)]=$358;
   var $360=$_0;
   var $361=(($360+$213)|0);
   var $362=$361;
   HEAP32[(($362)>>2)]=$213;
   var $363=HEAP32[((10660)>>2)];
   var $364=($_0|0)==($363|0);
   if (!($364)) {
    var $_1=$213;
    break;
   }
   HEAP32[((10648)>>2)]=$213;
   return;
  } else {
   var $367=$186&-2;
   HEAP32[(($185)>>2)]=$367;
   var $368=$_0277|1;
   var $369=(($_0+4)|0);
   HEAP32[(($369)>>2)]=$368;
   var $370=$_0;
   var $371=(($370+$_0277)|0);
   var $372=$371;
   HEAP32[(($372)>>2)]=$_0277;
   var $_1=$_0277;
  }
 } while(0);
 var $_1;
 var $374=$_1>>>3;
 var $375=($_1>>>0)<256;
 if ($375) {
  var $377=$374<<1;
  var $378=((10680+($377<<2))|0);
  var $379=$378;
  var $380=HEAP32[((10640)>>2)];
  var $381=1<<$374;
  var $382=$380&$381;
  var $383=($382|0)==0;
  do {
   if ($383) {
    var $385=$380|$381;
    HEAP32[((10640)>>2)]=$385;
    var $_sum13_pre=((($377)+(2))|0);
    var $_pre=((10680+($_sum13_pre<<2))|0);
    var $F16_0=$379;var $_pre_phi=$_pre;
   } else {
    var $_sum14=((($377)+(2))|0);
    var $387=((10680+($_sum14<<2))|0);
    var $388=HEAP32[(($387)>>2)];
    var $389=$388;
    var $390=HEAP32[((10656)>>2)];
    var $391=($389>>>0)<($390>>>0);
    if (!($391)) {
     var $F16_0=$388;var $_pre_phi=$387;
     break;
    }
    _abort();
   }
  } while(0);
  var $_pre_phi;
  var $F16_0;
  HEAP32[(($_pre_phi)>>2)]=$_0;
  var $394=(($F16_0+12)|0);
  HEAP32[(($394)>>2)]=$_0;
  var $395=(($_0+8)|0);
  HEAP32[(($395)>>2)]=$F16_0;
  var $396=(($_0+12)|0);
  HEAP32[(($396)>>2)]=$379;
  return;
 }
 var $398=$_0;
 var $399=$_1>>>8;
 var $400=($399|0)==0;
 do {
  if ($400) {
   var $I19_0=0;
  } else {
   var $402=($_1>>>0)>16777215;
   if ($402) {
    var $I19_0=31;
    break;
   }
   var $404=((($399)+(1048320))|0);
   var $405=$404>>>16;
   var $406=$405&8;
   var $407=$399<<$406;
   var $408=((($407)+(520192))|0);
   var $409=$408>>>16;
   var $410=$409&4;
   var $411=$410|$406;
   var $412=$407<<$410;
   var $413=((($412)+(245760))|0);
   var $414=$413>>>16;
   var $415=$414&2;
   var $416=$411|$415;
   var $417=(((14)-($416))|0);
   var $418=$412<<$415;
   var $419=$418>>>15;
   var $420=((($417)+($419))|0);
   var $421=$420<<1;
   var $422=((($420)+(7))|0);
   var $423=$_1>>>($422>>>0);
   var $424=$423&1;
   var $425=$424|$421;
   var $I19_0=$425;
  }
 } while(0);
 var $I19_0;
 var $427=((10944+($I19_0<<2))|0);
 var $428=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($428)>>2)]=$I19_0_c;
 var $429=(($_0+20)|0);
 HEAP32[(($429)>>2)]=0;
 var $430=(($_0+16)|0);
 HEAP32[(($430)>>2)]=0;
 var $431=HEAP32[((10644)>>2)];
 var $432=1<<$I19_0;
 var $433=$431&$432;
 var $434=($433|0)==0;
 if ($434) {
  var $436=$431|$432;
  HEAP32[((10644)>>2)]=$436;
  HEAP32[(($427)>>2)]=$398;
  var $437=(($_0+24)|0);
  var $_c=$427;
  HEAP32[(($437)>>2)]=$_c;
  var $438=(($_0+12)|0);
  HEAP32[(($438)>>2)]=$_0;
  var $439=(($_0+8)|0);
  HEAP32[(($439)>>2)]=$_0;
  return;
 }
 var $441=HEAP32[(($427)>>2)];
 var $442=($I19_0|0)==31;
 if ($442) {
  var $447=0;
 } else {
  var $444=$I19_0>>>1;
  var $445=(((25)-($444))|0);
  var $447=$445;
 }
 var $447;
 var $448=$_1<<$447;
 var $K20_0=$448;var $T_0=$441;
 while(1) {
  var $T_0;
  var $K20_0;
  var $450=(($T_0+4)|0);
  var $451=HEAP32[(($450)>>2)];
  var $452=$451&-8;
  var $453=($452|0)==($_1|0);
  if ($453) {
   break;
  }
  var $455=$K20_0>>>31;
  var $456=(($T_0+16+($455<<2))|0);
  var $457=HEAP32[(($456)>>2)];
  var $458=($457|0)==0;
  var $459=$K20_0<<1;
  if ($458) {
   label = 7078;
   break;
  } else {
   var $K20_0=$459;var $T_0=$457;
  }
 }
 if (label == 7078) {
  var $461=$456;
  var $462=HEAP32[((10656)>>2)];
  var $463=($461>>>0)<($462>>>0);
  if ($463) {
   _abort();
  }
  HEAP32[(($456)>>2)]=$398;
  var $465=(($_0+24)|0);
  var $T_0_c10=$T_0;
  HEAP32[(($465)>>2)]=$T_0_c10;
  var $466=(($_0+12)|0);
  HEAP32[(($466)>>2)]=$_0;
  var $467=(($_0+8)|0);
  HEAP32[(($467)>>2)]=$_0;
  return;
 }
 var $470=(($T_0+8)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$T_0;
 var $473=HEAP32[((10656)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if ($474) {
  _abort();
 }
 var $476=$471;
 var $477=($476>>>0)<($473>>>0);
 if ($477) {
  _abort();
 }
 var $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$398;
 HEAP32[(($470)>>2)]=$398;
 var $480=(($_0+8)|0);
 var $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 var $481=(($_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($481)>>2)]=$T_0_c;
 var $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 return;
}
function __Znwj($size){
 var label=0;
 var $1=($size|0)==0;
 var $_size=$1?1:$size;
 while(1) {
  var $3=_malloc($_size);
  var $4=($3|0)==0;
  if (!($4)) {
   label = 7122;
   break;
  }
  var $6=(tempValue=HEAP32[((11120)>>2)],HEAP32[((11120)>>2)]=tempValue+0,tempValue);
  var $7=($6|0)==0;
  if ($7) {
   break;
  }
  var $9=$6;
  FUNCTION_TABLE[$9]();
 }
 if (label == 7122) {
  return $3;
 }
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=7936;
 ___cxa_throw($16,8064,(40));
}
function __ZSt15get_new_handlerv(){
 var label=0;
 var $1=(tempValue=HEAP32[((11120)>>2)],HEAP32[((11120)>>2)]=tempValue+0,tempValue);
 var $2=$1;
 return $2;
}
function __ZnwjRKSt9nothrow_t($size,$0){
 var label=0;
 var $2=__Znwj($size);
 var $p_0=$2;
 var $p_0;
 return $p_0;
}
function __Znaj($size){
 var label=0;
 var $1=__Znwj($size);
 return $1;
}
function __ZnajRKSt9nothrow_t($size,$0){
 var label=0;
 var $2=__Znaj($size);
 var $p_0=$2;
 var $p_0;
 return $p_0;
}
function __ZdlPv($ptr){
 var label=0;
 var $1=($ptr|0)==0;
 if ($1) {
  return;
 }
 _free($ptr);
 return;
}
function __ZdlPvRKSt9nothrow_t($ptr,$0){
 var label=0;
 __ZdlPv($ptr);
 return;
}
function __ZdaPv($ptr){
 var label=0;
 __ZdlPv($ptr);
 return;
}
function __ZdaPvRKSt9nothrow_t($ptr,$0){
 var label=0;
 __ZdaPv($ptr);
 return;
}
function __ZSt15set_new_handlerPFvvE($handler){
 var label=0;
 var $1=$handler;
 var $2=(tempValue=HEAP32[((11120)>>2)],HEAP32[((11120)>>2)]=$1,tempValue);
 var $3=$2;
 return $3;
}
function __ZNSt9bad_allocC2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7936;
 return;
}
function __ZNSt9bad_allocD0Ev($this){
 var label=0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt9bad_allocD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;
 return 3272;
}
function __ZNSt20bad_array_new_lengthC2Ev($this){
 var label=0;
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7968;
 return;
}
function __ZNSt20bad_array_new_lengthD0Ev($this){
 var label=0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNKSt20bad_array_new_length4whatEv($this){
 var label=0;
 return 6648;
}
function __ZSt17__throw_bad_allocv(){
 var label=0;
 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 HEAP32[(($2)>>2)]=7936;
 ___cxa_throw($1,8064,(40));
}
function _getopt($nargc,$nargv,$options){
 var label=0;
 var $1=_getopt_internal($nargc,$nargv,$options,0,0,0);
 return $1;
}
function _getopt_internal($nargc,$nargv,$options,$long_options,$idx,$flags){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=($options|0)==0;
 if ($1) {
  var $_059=-1;
  var $_059;
  STACKTOP=sp;return $_059;
 }
 var $3=HEAP32[((176)>>2)];
 var $4=($3|0)==0;
 if ($4) {
  HEAP32[((10560)>>2)]=1;
  HEAP32[((176)>>2)]=1;
  var $11=1;var $10=1;
  label = 7161;
 } else {
  var $_pre110=HEAP32[((10560)>>2)];
  var $6=HEAP32[((296)>>2)];
  var $7=($6|0)==-1;
  var $8=($_pre110|0)!=0;
  var $or_cond=$7|$8;
  if ($or_cond) {
   var $11=$_pre110;var $10=$3;
   label = 7161;
  } else {
   var $18=$6;var $17=$_pre110;var $16=$3;
  }
 }
 if (label == 7161) {
  var $10;
  var $11;
  var $12=_getenv(1568);
  var $13=($12|0)!=0;
  var $14=($13&1);
  HEAP32[((296)>>2)]=$14;
  var $18=$14;var $17=$11;var $16=$10;
 }
 var $16;
 var $17;
 var $18;
 var $19=HEAP8[($options)];
 var $20=(($19<<24)>>24)==45;
 if ($20) {
  var $21=$flags|2;
  var $_0119=$21;
  label = 7165;
 } else {
  var $23=($18|0)!=0;
  var $24=(($19<<24)>>24)==43;
  var $or_cond61=$23|$24;
  var $25=$flags&-2;
  var $_flags=$or_cond61?$25:$flags;
  var $cond=(($19<<24)>>24)==43;
  if ($cond) {
   var $_0119=$_flags;
   label = 7165;
  } else {
   var $_060=$options;var $_0120=$_flags;
  }
 }
 if (label == 7165) {
  var $_0119;
  var $27=(($options+1)|0);
  var $_060=$27;var $_0120=$_0119;
 }
 var $_0120;
 var $_060;
 HEAP32[((10568)>>2)]=0;
 var $29=($17|0)==0;
 if ($29) {
  var $32=$16;
  label = 7169;
 } else {
  HEAP32[((200)>>2)]=-1;
  HEAP32[((192)>>2)]=-1;
  var $31=$16;var $_pr=$17;
  label = 7168;
 }
 while(1) {
  if (label == 7169) {
   label = 0;
   var $32;
   var $33=HEAP32[((160)>>2)];
   var $34=HEAP8[($33)];
   var $35=(($34<<24)>>24)==0;
   if ($35) {
    var $37=$32;
   } else {
    var $187=$33;var $186=$32;
    break;
   }
  }
  else if (label == 7168) {
   label = 0;
   var $_pr;
   var $31;
   var $phitmp=($_pr|0)==0;
   if ($phitmp) {
    var $32=$31;
    label = 7169;
    continue;
   } else {
    var $37=$31;
   }
  }
  var $37;
  HEAP32[((10560)>>2)]=0;
  var $38=($37|0)<($nargc|0);
  if (!($38)) {
   label = 7171;
   break;
  }
  var $77=(($nargv+($37<<2))|0);
  var $78=HEAP32[(($77)>>2)];
  HEAP32[((160)>>2)]=$78;
  var $79=HEAP8[($78)];
  var $80=(($79<<24)>>24)==45;
  if ($80) {
   var $82=(($78+1)|0);
   var $83=HEAP8[($82)];
   var $84=(($83<<24)>>24)==0;
   if (!($84)) {
    label = 7203;
    break;
   }
   var $86=_strchr($_060,45);
   var $87=($86|0)==0;
   if (!($87)) {
    label = 7203;
    break;
   }
  }
  HEAP32[((160)>>2)]=10632;
  var $89=$_0120&2;
  var $90=($89|0)==0;
  if (!($90)) {
   label = 7188;
   break;
  }
  var $95=$_0120&1;
  var $96=($95|0)==0;
  if ($96) {
   var $_059=-1;
   label = 7276;
   break;
  }
  var $98=HEAP32[((192)>>2)];
  var $99=($98|0)==-1;
  do {
   if ($99) {
    HEAP32[((192)>>2)]=$37;
    var $134=$37;var $_pr_pre=0;
   } else {
    var $102=HEAP32[((200)>>2)];
    var $103=($102|0)==-1;
    if ($103) {
     var $134=$37;var $_pr_pre=0;
     break;
    }
    var $105=((($102)-($98))|0);
    var $106=((($37)-($102))|0);
    var $107=(((($105|0))%(($106|0)))&-1);
    var $108=($107|0)==0;
    if ($108) {
     var $_0_lcssa_i_i66=$106;
    } else {
     var $_06_i_i64=$106;var $c_07_i_i63=$107;
     while(1) {
      var $c_07_i_i63;
      var $_06_i_i64;
      var $109=(((($_06_i_i64|0))%(($c_07_i_i63|0)))&-1);
      var $110=($109|0)==0;
      if ($110) {
       var $_0_lcssa_i_i66=$c_07_i_i63;
       break;
      } else {
       var $_06_i_i64=$c_07_i_i63;var $c_07_i_i63=$109;
      }
     }
    }
    var $_0_lcssa_i_i66;
    var $111=((($37)-($98))|0);
    var $112=(((($111|0))/(($_0_lcssa_i_i66|0)))&-1);
    var $113=($_0_lcssa_i_i66|0)>0;
    do {
     if ($113) {
      var $114=($112|0)>0;
      var $115=(((-$105))|0);
      if ($114) {
       var $i_026_us_i73=0;
      } else {
       var $130=$37;var $129=$102;var $128=$98;var $_pr_pre_pre=0;
       break;
      }
      while(1) {
       var $i_026_us_i73;
       var $126=((($i_026_us_i73)+($102))|0);
       var $127=(($nargv+($126<<2))|0);
       var $_pre_i74=HEAP32[(($127)>>2)];
       var $j_024_us_i70=0;var $pos_025_us_i69=$126;var $120=$_pre_i74;
       while(1) {
        var $120;
        var $pos_025_us_i69;
        var $j_024_us_i70;
        var $121=($pos_025_us_i69|0)<($102|0);
        var $pos_1_p_us_i71=$121?$106:$115;
        var $pos_1_us_i72=((($pos_1_p_us_i71)+($pos_025_us_i69))|0);
        var $122=(($nargv+($pos_1_us_i72<<2))|0);
        var $123=HEAP32[(($122)>>2)];
        HEAP32[(($122)>>2)]=$120;
        HEAP32[(($127)>>2)]=$123;
        var $124=((($j_024_us_i70)+(1))|0);
        var $125=($124|0)<($112|0);
        if ($125) {
         var $j_024_us_i70=$124;var $pos_025_us_i69=$pos_1_us_i72;var $120=$123;
        } else {
         break;
        }
       }
       var $117=((($i_026_us_i73)+(1))|0);
       var $118=($117|0)<($_0_lcssa_i_i66|0);
       if ($118) {
        var $i_026_us_i73=$117;
       } else {
        break;
       }
      }
      var $_pre96=HEAP32[((176)>>2)];
      var $_pre97=HEAP32[((200)>>2)];
      var $_pre98=HEAP32[((192)>>2)];
      var $_pr_pre_pre_pre=HEAP32[((10560)>>2)];
      var $130=$_pre96;var $129=$_pre97;var $128=$_pre98;var $_pr_pre_pre=$_pr_pre_pre_pre;
     } else {
      var $130=$37;var $129=$102;var $128=$98;var $_pr_pre_pre=0;
     }
    } while(0);
    var $_pr_pre_pre;
    var $128;
    var $129;
    var $130;
    var $131=((($130)-($129))|0);
    var $132=((($131)+($128))|0);
    HEAP32[((192)>>2)]=$132;
    HEAP32[((200)>>2)]=-1;
    var $134=$130;var $_pr_pre=$_pr_pre_pre;
   }
  } while(0);
  var $_pr_pre;
  var $134;
  var $135=((($134)+(1))|0);
  HEAP32[((176)>>2)]=$135;
  var $31=$135;var $_pr=$_pr_pre;
  label = 7168;
 }
 do {
  if (label == 7171) {
   HEAP32[((160)>>2)]=10632;
   var $40=HEAP32[((200)>>2)];
   var $41=($40|0)==-1;
   var $42=HEAP32[((192)>>2)];
   do {
    if ($41) {
     var $73=($42|0)==-1;
     if ($73) {
      break;
     }
     HEAP32[((176)>>2)]=$42;
    } else {
     var $44=((($40)-($42))|0);
     var $45=((($37)-($40))|0);
     var $46=(((($44|0))%(($45|0)))&-1);
     var $47=($46|0)==0;
     if ($47) {
      var $_0_lcssa_i_i=$45;
     } else {
      var $_06_i_i=$45;var $c_07_i_i=$46;
      while(1) {
       var $c_07_i_i;
       var $_06_i_i;
       var $48=(((($_06_i_i|0))%(($c_07_i_i|0)))&-1);
       var $49=($48|0)==0;
       if ($49) {
        var $_0_lcssa_i_i=$c_07_i_i;
        break;
       } else {
        var $_06_i_i=$c_07_i_i;var $c_07_i_i=$48;
       }
      }
     }
     var $_0_lcssa_i_i;
     var $50=((($37)-($42))|0);
     var $51=(((($50|0))/(($_0_lcssa_i_i|0)))&-1);
     var $52=($_0_lcssa_i_i|0)>0;
     do {
      if ($52) {
       var $53=($51|0)>0;
       var $54=(((-$44))|0);
       if ($53) {
        var $i_026_us_i=0;
       } else {
        var $69=$40;var $68=$42;var $67=$37;
        break;
       }
       while(1) {
        var $i_026_us_i;
        var $65=((($i_026_us_i)+($40))|0);
        var $66=(($nargv+($65<<2))|0);
        var $_pre_i=HEAP32[(($66)>>2)];
        var $j_024_us_i=0;var $pos_025_us_i=$65;var $59=$_pre_i;
        while(1) {
         var $59;
         var $pos_025_us_i;
         var $j_024_us_i;
         var $60=($pos_025_us_i|0)<($40|0);
         var $pos_1_p_us_i=$60?$45:$54;
         var $pos_1_us_i=((($pos_1_p_us_i)+($pos_025_us_i))|0);
         var $61=(($nargv+($pos_1_us_i<<2))|0);
         var $62=HEAP32[(($61)>>2)];
         HEAP32[(($61)>>2)]=$59;
         HEAP32[(($66)>>2)]=$62;
         var $63=((($j_024_us_i)+(1))|0);
         var $64=($63|0)<($51|0);
         if ($64) {
          var $j_024_us_i=$63;var $pos_025_us_i=$pos_1_us_i;var $59=$62;
         } else {
          break;
         }
        }
        var $56=((($i_026_us_i)+(1))|0);
        var $57=($56|0)<($_0_lcssa_i_i|0);
        if ($57) {
         var $i_026_us_i=$56;
        } else {
         break;
        }
       }
       var $_pre99=HEAP32[((200)>>2)];
       var $_pre100=HEAP32[((192)>>2)];
       var $_pre101=HEAP32[((176)>>2)];
       var $69=$_pre99;var $68=$_pre100;var $67=$_pre101;
      } else {
       var $69=$40;var $68=$42;var $67=$37;
      }
     } while(0);
     var $67;
     var $68;
     var $69;
     var $70=((($68)-($69))|0);
     var $71=((($70)+($67))|0);
     HEAP32[((176)>>2)]=$71;
    }
   } while(0);
   HEAP32[((200)>>2)]=-1;
   HEAP32[((192)>>2)]=-1;
   var $_059=-1;
   var $_059;
   STACKTOP=sp;return $_059;
  }
  else if (label == 7276) {
   var $_059;
   STACKTOP=sp;return $_059;
  }
  else if (label == 7188) {
   var $92=((($37)+(1))|0);
   HEAP32[((176)>>2)]=$92;
   var $93=HEAP32[(($77)>>2)];
   HEAP32[((10568)>>2)]=$93;
   var $_059=1;
   var $_059;
   STACKTOP=sp;return $_059;
  }
  else if (label == 7203) {
   var $136=HEAP32[((192)>>2)];
   var $137=($136|0)!=-1;
   var $138=HEAP32[((200)>>2)];
   var $139=($138|0)==-1;
   var $or_cond3=$137&$139;
   if ($or_cond3) {
    HEAP32[((200)>>2)]=$37;
    var $_pre=HEAP8[($82)];
    var $143=$_pre;var $142=$37;
   } else {
    var $143=$83;var $142=$138;
   }
   var $142;
   var $143;
   var $144=(($143<<24)>>24)==0;
   if ($144) {
    var $187=$78;var $186=$37;
    break;
   }
   HEAP32[((160)>>2)]=$82;
   var $146=HEAP8[($82)];
   var $147=(($146<<24)>>24)==45;
   if (!($147)) {
    var $187=$82;var $186=$37;
    break;
   }
   var $149=(($78+2)|0);
   var $150=HEAP8[($149)];
   var $151=(($150<<24)>>24)==0;
   if (!($151)) {
    var $187=$82;var $186=$37;
    break;
   }
   var $153=((($37)+(1))|0);
   HEAP32[((176)>>2)]=$153;
   HEAP32[((160)>>2)]=10632;
   var $154=($142|0)==-1;
   if (!($154)) {
    var $156=((($142)-($136))|0);
    var $157=((($153)-($142))|0);
    var $158=(((($156|0))%(($157|0)))&-1);
    var $159=($158|0)==0;
    if ($159) {
     var $_0_lcssa_i_i80=$157;
    } else {
     var $_06_i_i78=$157;var $c_07_i_i77=$158;
     while(1) {
      var $c_07_i_i77;
      var $_06_i_i78;
      var $160=(((($_06_i_i78|0))%(($c_07_i_i77|0)))&-1);
      var $161=($160|0)==0;
      if ($161) {
       var $_0_lcssa_i_i80=$c_07_i_i77;
       break;
      } else {
       var $_06_i_i78=$c_07_i_i77;var $c_07_i_i77=$160;
      }
     }
    }
    var $_0_lcssa_i_i80;
    var $162=((($153)-($136))|0);
    var $163=(((($162|0))/(($_0_lcssa_i_i80|0)))&-1);
    var $164=($_0_lcssa_i_i80|0)>0;
    do {
     if ($164) {
      var $165=($163|0)>0;
      var $166=(((-$156))|0);
      if ($165) {
       var $i_026_us_i87=0;
      } else {
       var $181=$142;var $180=$136;var $179=$153;
       break;
      }
      while(1) {
       var $i_026_us_i87;
       var $177=((($i_026_us_i87)+($142))|0);
       var $178=(($nargv+($177<<2))|0);
       var $_pre_i88=HEAP32[(($178)>>2)];
       var $j_024_us_i84=0;var $pos_025_us_i83=$177;var $171=$_pre_i88;
       while(1) {
        var $171;
        var $pos_025_us_i83;
        var $j_024_us_i84;
        var $172=($pos_025_us_i83|0)<($142|0);
        var $pos_1_p_us_i85=$172?$157:$166;
        var $pos_1_us_i86=((($pos_1_p_us_i85)+($pos_025_us_i83))|0);
        var $173=(($nargv+($pos_1_us_i86<<2))|0);
        var $174=HEAP32[(($173)>>2)];
        HEAP32[(($173)>>2)]=$171;
        HEAP32[(($178)>>2)]=$174;
        var $175=((($j_024_us_i84)+(1))|0);
        var $176=($175|0)<($163|0);
        if ($176) {
         var $j_024_us_i84=$175;var $pos_025_us_i83=$pos_1_us_i86;var $171=$174;
        } else {
         break;
        }
       }
       var $168=((($i_026_us_i87)+(1))|0);
       var $169=($168|0)<($_0_lcssa_i_i80|0);
       if ($169) {
        var $i_026_us_i87=$168;
       } else {
        break;
       }
      }
      var $_pre93=HEAP32[((200)>>2)];
      var $_pre94=HEAP32[((192)>>2)];
      var $_pre95=HEAP32[((176)>>2)];
      var $181=$_pre93;var $180=$_pre94;var $179=$_pre95;
     } else {
      var $181=$142;var $180=$136;var $179=$153;
     }
    } while(0);
    var $179;
    var $180;
    var $181;
    var $182=((($180)-($181))|0);
    var $183=((($182)+($179))|0);
    HEAP32[((176)>>2)]=$183;
   }
   HEAP32[((200)>>2)]=-1;
   HEAP32[((192)>>2)]=-1;
   var $_059=-1;
   var $_059;
   STACKTOP=sp;return $_059;
  }
 } while(0);
 var $186;
 var $187;
 var $188=($long_options|0)!=0;
 L9594: do {
  if ($188) {
   var $190=(($nargv+($186<<2))|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=($187|0)==($191|0);
   if ($192) {
    var $209=$187;
    break;
   }
   var $194=HEAP8[($187)];
   var $195=(($194<<24)>>24)==45;
   do {
    if ($195) {
     var $200=(($187+1)|0);
     HEAP32[((160)>>2)]=$200;
     var $short_too_0=0;
    } else {
     var $197=$_0120&4;
     var $198=($197|0)==0;
     if ($198) {
      var $209=$187;
      break L9594;
     }
     var $cond125=(($194<<24)>>24)==58;
     if ($cond125) {
      var $short_too_0=0;
      break;
     }
     var $202=(($194<<24)>>24);
     var $203=_strchr($_060,$202);
     var $not_=($203|0)!=0;
     var $_=($not_&1);
     var $short_too_0=$_;
    }
   } while(0);
   var $short_too_0;
   var $205=_parse_long_options($nargv,$_060,$long_options,$idx,$short_too_0);
   var $206=($205|0)==-1;
   if ($206) {
    var $_pre113=HEAP32[((160)>>2)];
    var $209=$_pre113;
    break;
   }
   HEAP32[((160)>>2)]=10632;
   var $_059=$205;
   var $_059;
   STACKTOP=sp;return $_059;
  } else {
   var $209=$187;
  }
 } while(0);
 var $209;
 var $210=(($209+1)|0);
 HEAP32[((160)>>2)]=$210;
 var $211=HEAP8[($209)];
 var $212=(($211<<24)>>24);
 if ((($211<<24)>>24)==45) {
  var $214=HEAP8[($210)];
  var $215=(($214<<24)>>24)==0;
  if ($215) {
   label = 7231;
  }
 } else if ((($211<<24)>>24)==58) {
  label = 7234;
 } else {
  label = 7231;
 }
 do {
  if (label == 7231) {
   var $217=_strchr($_060,$212);
   var $218=($217|0)==0;
   if ($218) {
    var $220=(($211<<24)>>24)==45;
    if (!($220)) {
     label = 7234;
     break;
    }
    var $_pre115=HEAP8[($210)];
    var $221=(($_pre115<<24)>>24)==0;
    if ($221) {
     var $_059=-1;
    } else {
     break;
    }
    var $_059;
    STACKTOP=sp;return $_059;
   }
   var $234=(($211<<24)>>24)==87;
   var $or_cond62=$188&$234;
   var $235=(($217+1)|0);
   var $236=HEAP8[($235)];
   var $237=(($236<<24)>>24)==59;
   var $or_cond126=$or_cond62&$237;
   if ($or_cond126) {
    var $239=HEAP8[($210)];
    var $240=(($239<<24)>>24)==0;
    do {
     if ($240) {
      var $242=HEAP32[((176)>>2)];
      var $243=((($242)+(1))|0);
      HEAP32[((176)>>2)]=$243;
      var $244=($243|0)<($nargc|0);
      if ($244) {
       var $257=(($nargv+($243<<2))|0);
       var $258=HEAP32[(($257)>>2)];
       HEAP32[((160)>>2)]=$258;
       break;
      }
      HEAP32[((160)>>2)]=10632;
      var $246=HEAP32[((184)>>2)];
      var $247=($246|0)==0;
      do {
       if (!($247)) {
        var $249=HEAP8[($_060)];
        var $250=(($249<<24)>>24)==58;
        if ($250) {
         break;
        }
        __warnx(48,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$212,tempVarArgs)); STACKTOP=tempVarArgs;
       }
      } while(0);
      HEAP32[((168)>>2)]=$212;
      var $253=HEAP8[($_060)];
      var $254=(($253<<24)>>24)==58;
      var $255=$254?58:63;
      var $_059=$255;
      var $_059;
      STACKTOP=sp;return $_059;
     }
    } while(0);
    var $260=_parse_long_options($nargv,$_060,$long_options,$idx,0);
    HEAP32[((160)>>2)]=10632;
    var $_059=$260;
    var $_059;
    STACKTOP=sp;return $_059;
   }
   var $261=(($236<<24)>>24)==58;
   if (!($261)) {
    var $263=HEAP8[($210)];
    var $264=(($263<<24)>>24)==0;
    if (!($264)) {
     var $_059=$212;
     var $_059;
     STACKTOP=sp;return $_059;
    }
    var $266=HEAP32[((176)>>2)];
    var $267=((($266)+(1))|0);
    HEAP32[((176)>>2)]=$267;
    var $_059=$212;
    var $_059;
    STACKTOP=sp;return $_059;
   }
   HEAP32[((10568)>>2)]=0;
   var $269=HEAP8[($210)];
   var $270=(($269<<24)>>24)==0;
   do {
    if ($270) {
     var $273=(($217+2)|0);
     var $274=HEAP8[($273)];
     var $275=(($274<<24)>>24)==58;
     if ($275) {
      break;
     }
     var $277=HEAP32[((176)>>2)];
     var $278=((($277)+(1))|0);
     HEAP32[((176)>>2)]=$278;
     var $279=($278|0)<($nargc|0);
     if ($279) {
      var $292=(($nargv+($278<<2))|0);
      var $293=HEAP32[(($292)>>2)];
      HEAP32[((10568)>>2)]=$293;
      break;
     }
     HEAP32[((160)>>2)]=10632;
     var $281=HEAP32[((184)>>2)];
     var $282=($281|0)==0;
     do {
      if (!($282)) {
       var $284=HEAP8[($_060)];
       var $285=(($284<<24)>>24)==58;
       if ($285) {
        break;
       }
       __warnx(48,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$212,tempVarArgs)); STACKTOP=tempVarArgs;
      }
     } while(0);
     HEAP32[((168)>>2)]=$212;
     var $288=HEAP8[($_060)];
     var $289=(($288<<24)>>24)==58;
     var $290=$289?58:63;
     var $_059=$290;
     var $_059;
     STACKTOP=sp;return $_059;
    } else {
     HEAP32[((10568)>>2)]=$210;
    }
   } while(0);
   HEAP32[((160)>>2)]=10632;
   var $294=HEAP32[((176)>>2)];
   var $295=((($294)+(1))|0);
   HEAP32[((176)>>2)]=$295;
   var $_059=$212;
   var $_059;
   STACKTOP=sp;return $_059;
  }
 } while(0);
 do {
  if (label == 7234) {
   var $_pr123_pr=HEAP8[($210)];
   var $222=(($_pr123_pr<<24)>>24)==0;
   if (!($222)) {
    break;
   }
   var $224=HEAP32[((176)>>2)];
   var $225=((($224)+(1))|0);
   HEAP32[((176)>>2)]=$225;
  }
 } while(0);
 var $226=HEAP32[((184)>>2)];
 var $227=($226|0)==0;
 do {
  if (!($227)) {
   var $229=HEAP8[($_060)];
   var $230=(($229<<24)>>24)==58;
   if ($230) {
    break;
   }
   __warnx(272,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$212,tempVarArgs)); STACKTOP=tempVarArgs;
  }
 } while(0);
 HEAP32[((168)>>2)]=$212;
 var $_059=63;
 var $_059;
 STACKTOP=sp;return $_059;
}
function _getopt_long($nargc,$nargv,$options,$long_options,$idx){
 var label=0;
 var $1=_getopt_internal($nargc,$nargv,$options,$long_options,$idx,1);
 return $1;
}
function _getopt_long_only($nargc,$nargv,$options,$long_options,$idx){
 var label=0;
 var $1=_getopt_internal($nargc,$nargv,$options,$long_options,$idx,5);
 return $1;
}
function _parse_long_options($nargv,$options,$long_options,$idx,$short_too){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=HEAP32[((160)>>2)];
 var $2=HEAP32[((176)>>2)];
 var $3=((($2)+(1))|0);
 HEAP32[((176)>>2)]=$3;
 var $4=_strchr($1,61);
 var $5=($4|0)==0;
 if ($5) {
  var $12=_strlen($1);
  var $current_argv_len_0=$12;var $has_equal_0=0;
 } else {
  var $7=$4;
  var $8=$1;
  var $9=((($7)-($8))|0);
  var $10=(($4+1)|0);
  var $current_argv_len_0=$9;var $has_equal_0=$10;
 }
 var $has_equal_0;
 var $current_argv_len_0;
 var $14=(($long_options)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 L9669: do {
  if (!($16)) {
   var $17=($short_too|0)!=0;
   var $18=($current_argv_len_0|0)==1;
   var $or_cond63=$17&$18;
   L9671: do {
    if ($or_cond63) {
     var $i_065_us=0;var $19=$15;
     while(1) {
      var $19;
      var $i_065_us;
      var $lhsc=HEAP8[($1)];
      var $rhsc=HEAP8[($19)];
      var $20=(($lhsc<<24)>>24)==(($rhsc<<24)>>24);
      if ($20) {
       var $22=_strlen($19);
       var $23=($22|0)==1;
       if ($23) {
        var $match_2=$i_065_us;
        break L9671;
       }
      }
      var $25=((($i_065_us)+(1))|0);
      var $26=(($long_options+($25<<4))|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=($27|0)==0;
      if ($28) {
       break L9669;
      } else {
       var $i_065_us=$25;var $19=$27;
      }
     }
    } else {
     var $i_065=0;var $match_066=-1;var $29=$15;
     while(1) {
      var $29;
      var $match_066;
      var $i_065;
      var $30=_strncmp($1,$29,$current_argv_len_0);
      var $31=($30|0)==0;
      if ($31) {
       var $33=_strlen($29);
       var $34=($33|0)==($current_argv_len_0|0);
       if ($34) {
        var $match_2=$i_065;
        break L9671;
       }
       var $36=($match_066|0)==-1;
       if ($36) {
        var $match_1=$i_065;
       } else {
        break;
       }
      } else {
       var $match_1=$match_066;
      }
      var $match_1;
      var $45=((($i_065)+(1))|0);
      var $46=(($long_options+($45<<4))|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=($47|0)==0;
      if ($48) {
       var $match_2=$match_1;
       break L9671;
      } else {
       var $i_065=$45;var $match_066=$match_1;var $29=$47;
      }
     }
     var $37=HEAP32[((184)>>2)];
     var $38=($37|0)==0;
     do {
      if (!($38)) {
       var $40=HEAP8[($options)];
       var $41=(($40<<24)>>24)==58;
       if ($41) {
        break;
       }
       __warnx(664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$current_argv_len_0,HEAP32[(((tempVarArgs)+(8))>>2)]=$1,tempVarArgs)); STACKTOP=tempVarArgs;
      }
     } while(0);
     HEAP32[((168)>>2)]=0;
     var $_0=63;
     var $_0;
     STACKTOP=sp;return $_0;
    }
   } while(0);
   var $match_2;
   var $49=($match_2|0)==-1;
   if ($49) {
    break;
   }
   var $51=(($long_options+($match_2<<4)+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=($52|0)!=0;
   var $54=($has_equal_0|0)==0;
   var $or_cond64=$53|$54;
   if (!($or_cond64)) {
    var $56=HEAP32[((184)>>2)];
    var $57=($56|0)==0;
    do {
     if (!($57)) {
      var $59=HEAP8[($options)];
      var $60=(($59<<24)>>24)==58;
      if ($60) {
       break;
      }
      __warnx(208,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$current_argv_len_0,HEAP32[(((tempVarArgs)+(8))>>2)]=$1,tempVarArgs)); STACKTOP=tempVarArgs;
     }
    } while(0);
    var $63=(($long_options+($match_2<<4)+8)|0);
    var $64=HEAP32[(($63)>>2)];
    var $65=($64|0)==0;
    if ($65) {
     var $67=(($long_options+($match_2<<4)+12)|0);
     var $68=HEAP32[(($67)>>2)];
     var $storemerge62=$68;
    } else {
     var $storemerge62=0;
    }
    var $storemerge62;
    HEAP32[((168)>>2)]=$storemerge62;
    var $70=HEAP8[($options)];
    var $71=(($70<<24)>>24)==58;
    var $72=$71?58:63;
    var $_0=$72;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $_off=((($52)-(1))|0);
   var $switch=($_off>>>0)<2;
   do {
    if ($switch) {
     if (!($54)) {
      HEAP32[((10568)>>2)]=$has_equal_0;
      break;
     }
     var $77=($52|0)==1;
     if (!($77)) {
      break;
     }
     var $79=((($2)+(2))|0);
     HEAP32[((176)>>2)]=$79;
     var $80=(($nargv+($3<<2))|0);
     var $81=HEAP32[(($80)>>2)];
     HEAP32[((10568)>>2)]=$81;
    }
   } while(0);
   var $82=HEAP32[(($51)>>2)];
   var $83=($82|0)==1;
   var $84=HEAP32[((10568)>>2)];
   var $85=($84|0)==0;
   var $or_cond=$83&$85;
   if (!($or_cond)) {
    var $116=($idx|0)==0;
    if (!($116)) {
     HEAP32[(($idx)>>2)]=$match_2;
    }
    var $119=(($long_options+($match_2<<4)+8)|0);
    var $120=HEAP32[(($119)>>2)];
    var $121=($120|0)==0;
    var $122=(($long_options+($match_2<<4)+12)|0);
    var $123=HEAP32[(($122)>>2)];
    if ($121) {
     var $_0=$123;
     var $_0;
     STACKTOP=sp;return $_0;
    }
    HEAP32[(($120)>>2)]=$123;
    var $_0=0;
    var $_0;
    STACKTOP=sp;return $_0;
   }
   var $87=HEAP32[((184)>>2)];
   var $88=($87|0)==0;
   do {
    if (!($88)) {
     var $90=HEAP8[($options)];
     var $91=(($90<<24)>>24)==58;
     if ($91) {
      break;
     }
     __warnx(8,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$1,tempVarArgs)); STACKTOP=tempVarArgs;
    }
   } while(0);
   var $94=(($long_options+($match_2<<4)+8)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=($95|0)==0;
   if ($96) {
    var $98=(($long_options+($match_2<<4)+12)|0);
    var $99=HEAP32[(($98)>>2)];
    var $storemerge=$99;
   } else {
    var $storemerge=0;
   }
   var $storemerge;
   HEAP32[((168)>>2)]=$storemerge;
   var $100=HEAP32[((176)>>2)];
   var $101=((($100)-(1))|0);
   HEAP32[((176)>>2)]=$101;
   var $102=HEAP8[($options)];
   var $103=(($102<<24)>>24)==58;
   var $104=$103?58:63;
   var $_0=$104;
   var $_0;
   STACKTOP=sp;return $_0;
  }
 } while(0);
 var $105=($short_too|0)==0;
 if (!($105)) {
  HEAP32[((176)>>2)]=$2;
  var $_0=-1;
  var $_0;
  STACKTOP=sp;return $_0;
 }
 var $108=HEAP32[((184)>>2)];
 var $109=($108|0)==0;
 do {
  if (!($109)) {
   var $111=HEAP8[($options)];
   var $112=(($111<<24)>>24)==58;
   if ($112) {
    break;
   }
   __warnx(248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$1,tempVarArgs)); STACKTOP=tempVarArgs;
  }
 } while(0);
 HEAP32[((168)>>2)]=0;
 var $_0=63;
 var $_0;
 STACKTOP=sp;return $_0;
}
function __err($eval,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=__verr($eval,$fmt,$1);
 STACKTOP=sp;return;
}
function __errx($eval,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=__verrx($eval,$fmt,$1);
 STACKTOP=sp;return;
}
function __warn($fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=__vwarn($fmt,$1);
 STACKTOP=sp;return;
}
function __warnx($fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=__vwarnx($fmt,$1);
 STACKTOP=sp;return;
}
function __verr($eval,$fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=___errno_location();
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP32[((_stderr)>>2)];
 var $4=HEAP32[((___progname)>>2)];
 var $5=_fprintf($3,752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$4,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=($fmt|0)==0;
 if (!($6)) {
  var $8=_vfprintf($3,$fmt,$ap);
  var $9=_fwrite(7600,2,1,$3);
 }
 var $11=_strerror($2);
 var $12=_fprintf($3,5456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$11,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit($eval);
}
function __verrx($eval,$fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=HEAP32[((_stderr)>>2)];
 var $2=HEAP32[((___progname)>>2)];
 var $3=_fprintf($1,6472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=($fmt|0)==0;
 if ($4) {
  var $fputc=_fputc(10,$1);
  _exit($eval);
 }
 var $6=_vfprintf($1,$fmt,$ap);
 var $fputc=_fputc(10,$1);
 _exit($eval);
}
function __vwarn($fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=___errno_location();
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP32[((_stderr)>>2)];
 var $4=HEAP32[((___progname)>>2)];
 var $5=_fprintf($3,5880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$4,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=($fmt|0)==0;
 if (!($6)) {
  var $8=_vfprintf($3,$fmt,$ap);
  var $9=_fwrite(7296,2,1,$3);
 }
 var $11=_strerror($2);
 var $12=_fprintf($3,5208,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$11,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}
function __vwarnx($fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;
 var $1=HEAP32[((_stderr)>>2)];
 var $2=HEAP32[((___progname)>>2)];
 var $3=_fprintf($1,4920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=($fmt|0)==0;
 if ($4) {
  var $fputc=_fputc(10,$1);
  STACKTOP=sp;return;
 }
 var $6=_vfprintf($1,$fmt,$ap);
 var $fputc=_fputc(10,$1);
 STACKTOP=sp;return;
}
function _strtod($string,$endPtr){
 var label=0;
 var $p_0=$string;
 while(1) {
  var $p_0;
  var $2=HEAP8[($p_0)];
  var $3=(($2<<24)>>24);
  var $4=_isspace($3);
  var $5=($4|0)==0;
  var $6=(($p_0+1)|0);
  if ($5) {
   break;
  } else {
   var $p_0=$6;
  }
 }
 var $8=HEAP8[($p_0)];
 if ((($8<<24)>>24)==45) {
  var $p_2=$6;var $sign_0=1;
 } else if ((($8<<24)>>24)==43) {
  var $p_2=$6;var $sign_0=0;
 } else {
  var $p_2=$p_0;var $sign_0=0;
 }
 var $sign_0;
 var $p_2;
 var $decPt_0=-1;var $mantSize_0=0;var $p_3=$p_2;
 while(1) {
  var $p_3;
  var $mantSize_0;
  var $decPt_0;
  var $13=HEAP8[($p_3)];
  var $14=(($13<<24)>>24);
  var $isdigittmp=((($14)-(48))|0);
  var $isdigit=($isdigittmp>>>0)<10;
  if ($isdigit) {
   var $decPt_1=$decPt_0;
  } else {
   var $16=(($13<<24)>>24)!=46;
   var $17=($decPt_0|0)>-1;
   var $or_cond=$16|$17;
   if ($or_cond) {
    break;
   } else {
    var $decPt_1=$mantSize_0;
   }
  }
  var $decPt_1;
  var $19=(($p_3+1)|0);
  var $20=((($mantSize_0)+(1))|0);
  var $decPt_0=$decPt_1;var $mantSize_0=$20;var $p_3=$19;
 }
 var $22=(((-$mantSize_0))|0);
 var $23=(($p_3+$22)|0);
 var $24=($decPt_0|0)<0;
 var $not_=$24^1;
 var $25=(($not_<<31)>>31);
 var $mantSize_1=((($25)+($mantSize_0))|0);
 var $decPt_2=$24?$mantSize_0:$decPt_0;
 var $26=($mantSize_1|0)>18;
 var $27=(((-$mantSize_1))|0);
 var $fracExp_0_p=$26?-18:$27;
 var $fracExp_0=((($fracExp_0_p)+($decPt_2))|0);
 var $mantSize_2=$26?18:$mantSize_1;
 var $28=($mantSize_2|0)==0;
 do {
  if ($28) {
   var $p_11=$string;var $fraction_0=0;
  } else {
   var $29=($mantSize_2|0)>9;
   if ($29) {
    var $p_483=$23;var $mantSize_384=$mantSize_2;var $frac1_085=0;
    while(1) {
     var $frac1_085;
     var $mantSize_384;
     var $p_483;
     var $31=HEAP8[($p_483)];
     var $32=(($p_483+1)|0);
     var $33=(($31<<24)>>24)==46;
     if ($33) {
      var $35=HEAP8[($32)];
      var $36=(($p_483+2)|0);
      var $c_0_in=$35;var $p_5=$36;
     } else {
      var $c_0_in=$31;var $p_5=$32;
     }
     var $p_5;
     var $c_0_in;
     var $c_0=(($c_0_in<<24)>>24);
     var $38=((($frac1_085)*(10))&-1);
     var $39=((($38)-(48))|0);
     var $40=((($39)+($c_0))|0);
     var $41=((($mantSize_384)-(1))|0);
     var $42=($41|0)>9;
     if ($42) {
      var $p_483=$p_5;var $mantSize_384=$41;var $frac1_085=$40;
     } else {
      break;
     }
    }
    var $phitmp=($40|0);
    var $phitmp90=($phitmp)*(1000000000);
    var $frac1_0_lcssa97=$phitmp90;var $mantSize_3_lcssa98=9;var $p_4_lcssa99=$p_5;
    label = 7366;
   } else {
    var $30=($mantSize_2|0)>0;
    if ($30) {
     var $frac1_0_lcssa97=0;var $mantSize_3_lcssa98=$mantSize_2;var $p_4_lcssa99=$23;
     label = 7366;
    } else {
     var $frac2_0_lcssa=0;var $frac1_0_lcssa96=0;
    }
   }
   if (label == 7366) {
    var $p_4_lcssa99;
    var $mantSize_3_lcssa98;
    var $frac1_0_lcssa97;
    var $p_676=$p_4_lcssa99;var $mantSize_477=$mantSize_3_lcssa98;var $frac2_078=0;
    while(1) {
     var $frac2_078;
     var $mantSize_477;
     var $p_676;
     var $44=HEAP8[($p_676)];
     var $45=(($p_676+1)|0);
     var $46=(($44<<24)>>24)==46;
     if ($46) {
      var $48=HEAP8[($45)];
      var $49=(($p_676+2)|0);
      var $c_1_in=$48;var $p_7=$49;
     } else {
      var $c_1_in=$44;var $p_7=$45;
     }
     var $p_7;
     var $c_1_in;
     var $c_1=(($c_1_in<<24)>>24);
     var $51=((($frac2_078)*(10))&-1);
     var $52=((($51)-(48))|0);
     var $53=((($52)+($c_1))|0);
     var $54=((($mantSize_477)-(1))|0);
     var $55=($54|0)>0;
     if ($55) {
      var $p_676=$p_7;var $mantSize_477=$54;var $frac2_078=$53;
     } else {
      break;
     }
    }
    var $phitmp91=($53|0);
    var $frac2_0_lcssa=$phitmp91;var $frac1_0_lcssa96=$frac1_0_lcssa97;
   }
   var $frac1_0_lcssa96;
   var $frac2_0_lcssa;
   var $57=($frac1_0_lcssa96)+($frac2_0_lcssa);
   do {
    if ((($13<<24)>>24)==69|(($13<<24)>>24)==101) {
     var $59=(($p_3+1)|0);
     var $60=HEAP8[($59)];
     if ((($60<<24)>>24)==45) {
      var $62=(($p_3+2)|0);
      var $p_9_ph=$62;var $expSign_0_ph=1;
     } else if ((($60<<24)>>24)==43) {
      var $64=(($p_3+2)|0);
      var $p_9_ph=$64;var $expSign_0_ph=0;
     } else {
      var $p_9_ph=$59;var $expSign_0_ph=0;
     }
     var $expSign_0_ph;
     var $p_9_ph;
     var $65=HEAP8[($p_9_ph)];
     var $66=(($65<<24)>>24);
     var $isdigittmp6268=((($66)-(48))|0);
     var $isdigit6369=($isdigittmp6268>>>0)<10;
     if ($isdigit6369) {
      var $p_970=$p_9_ph;var $exp_071=0;var $67=$65;
     } else {
      var $exp_1=0;var $p_10=$p_9_ph;var $expSign_1=$expSign_0_ph;
      break;
     }
     while(1) {
      var $67;
      var $exp_071;
      var $p_970;
      var $68=((($exp_071)*(10))&-1);
      var $69=(($67<<24)>>24);
      var $70=((($68)-(48))|0);
      var $71=((($70)+($69))|0);
      var $72=(($p_970+1)|0);
      var $73=HEAP8[($72)];
      var $74=(($73<<24)>>24);
      var $isdigittmp62=((($74)-(48))|0);
      var $isdigit63=($isdigittmp62>>>0)<10;
      if ($isdigit63) {
       var $p_970=$72;var $exp_071=$71;var $67=$73;
      } else {
       var $exp_1=$71;var $p_10=$72;var $expSign_1=$expSign_0_ph;
       break;
      }
     }
    } else {
     var $exp_1=0;var $p_10=$p_3;var $expSign_1=0;
    }
   } while(0);
   var $expSign_1;
   var $p_10;
   var $exp_1;
   var $75=($expSign_1|0)==0;
   var $76=(((-$exp_1))|0);
   var $exp_2_p=$75?$exp_1:$76;
   var $exp_2=((($fracExp_0)+($exp_2_p))|0);
   var $77=($exp_2|0)<0;
   var $78=(((-$exp_2))|0);
   var $exp_3=$77?$78:$exp_2;
   var $79=($exp_3|0)>511;
   if ($79) {
    var $80=___errno_location();
    HEAP32[(($80)>>2)]=34;
    var $dblExp_064=1;var $d_065=88;var $exp_566=511;
    label = 7383;
   } else {
    var $81=($exp_3|0)==0;
    if ($81) {
     var $dblExp_0_lcssa=1;
    } else {
     var $dblExp_064=1;var $d_065=88;var $exp_566=$exp_3;
     label = 7383;
    }
   }
   if (label == 7383) {
    while(1) {
     label = 0;
     var $exp_566;
     var $d_065;
     var $dblExp_064;
     var $82=$exp_566&1;
     var $83=($82|0)==0;
     if ($83) {
      var $dblExp_1=$dblExp_064;
     } else {
      var $85=HEAPF64[(($d_065)>>3)];
      var $86=($dblExp_064)*($85);
      var $dblExp_1=$86;
     }
     var $dblExp_1;
     var $88=$exp_566>>1;
     var $89=(($d_065+8)|0);
     var $90=($88|0)==0;
     if ($90) {
      var $dblExp_0_lcssa=$dblExp_1;
      break;
     } else {
      var $dblExp_064=$dblExp_1;var $d_065=$89;var $exp_566=$88;
      label = 7383;
     }
    }
   }
   var $dblExp_0_lcssa;
   var $91=($exp_2|0)>-1;
   if ($91) {
    var $95=($57)*($dblExp_0_lcssa);
    var $p_11=$p_10;var $fraction_0=$95;
    break;
   } else {
    var $93=($57)/($dblExp_0_lcssa);
    var $p_11=$p_10;var $fraction_0=$93;
    break;
   }
  }
 } while(0);
 var $fraction_0;
 var $p_11;
 var $97=($endPtr|0)==0;
 if (!($97)) {
  HEAP32[(($endPtr)>>2)]=$p_11;
 }
 var $100=($sign_0|0)==0;
 if ($100) {
  var $_0=$fraction_0;
  var $_0;
  return $_0;
 }
 var $102=((-.0))-($fraction_0);
 var $_0=$102;
 var $_0;
 return $_0;
}
function _strtold($nptr,$endptr){
 var label=0;
 var $1=_strtod($nptr,$endptr);
 return $1;
}
function _strtof($nptr,$endptr){
 var label=0;
 var $1=_strtod($nptr,$endptr);
 var $2=$1;
 return $2;
}
function _strtod_l($nptr,$endptr,$loc){
 var label=0;
 var $1=_strtod($nptr,$endptr);
 return $1;
}
function _strtold_l($nptr,$endptr,$loc){
 var label=0;
 var $1=_strtod($nptr,$endptr);
 return $1;
}
function _atof($str){
 var label=0;
 var $1=_strtod($str,0);
 return $1;
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
// libflac function wrappers

var READSIZE = 4096;

return {
    _module: Module, 
    FLAC__stream_encoder_set_verify: Module.cwrap('FLAC__stream_encoder_set_verify', 'number', [ 'number' ]),
    FLAC__stream_encoder_set_compression_level: Module.cwrap('FLAC__stream_encoder_set_compression_level', 'number', [ 'number', 'number' ]),
    /* ... */
    
    // FLAC__StreamEncoder* init_libflac(unsigned sample_rate, unsigned channels, unsigned bps, unsigned compression_level, unsigned total_samples);
    init_libflac: function(sample_rate, channels, bps, compression_level, total_samples){
        var ok = true;
        var encoder = Module.ccall('FLAC__stream_encoder_new', 'number', [ ], [ ]);
        ok &= Module.ccall('FLAC__stream_encoder_set_verify', 'number', ['number', 'number'], [ encoder, true ]);
        ok &= Module.ccall('FLAC__stream_encoder_set_compression_level', 'number', ['number', 'number'], [ encoder, compression_level ]);
        ok &= Module.ccall('FLAC__stream_encoder_set_channels', 'number', ['number', 'number'], [ encoder, channels ]);
        ok &= Module.ccall('FLAC__stream_encoder_set_bits_per_sample', 'number', ['number', 'number'], [ encoder, bps ]);
        ok &= Module.ccall('FLAC__stream_encoder_set_sample_rate', 'number', ['number', 'number'], [ encoder, sample_rate ]);
        ok &= Module.ccall('FLAC__stream_encoder_set_total_samples_estimate', 'number', ['number', 'number'], [ encoder, total_samples ]);
        if (ok){
            return encoder;
        }
        return 0;
    },
    init_encoder_stream: function(encoder, write_callback_fn, client_data){
        client_data = client_data|0;
        var callback_fn_ptr = Runtime.addFunction(function(p_encoder, buffer, bytes, samples, current_frame, p_client_data){
            var arraybuf = new ArrayBuffer(buffer);
            var retdata = new Uint8Array(bytes);
            retdata.set(HEAPU8.subarray(buffer, buffer + bytes));
            // write_callback_fn(retdata, bytes, p_client_data);
            write_callback_fn(retdata, bytes, samples, current_frame, p_client_data);
        });
		var init_status = Module.ccall('FLAC__stream_encoder_init_stream', 'number', ['number', 'number', 'number', 'number', 'number', 'number'], [encoder, callback_fn_ptr, 0, 0, 0, client_data]);
        // FLAC__STREAM_ENCODER_INIT_STATUS_OK = 0
        // if( init_status != 0){
            // return false;
        // }
        // return true;
        return init_status;
    },
    encode_buffer_pcm_as_flac: function(encoder, buffer, channels, no_items){
        // get the length of the data in bytes
        var numBytes = buffer.length * buffer.BYTES_PER_ELEMENT;
        // console.log("DEBUG numBytes: " + numBytes);
        // malloc enough space for the data
        var ptr = Module._malloc(numBytes);
        // get a bytes-wise view on the newly allocated buffer
        var heapBytes= new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
        // console.log("DEBUG heapBytes: " + heapBytes);
        // copy data into heapBytes
        heapBytes.set(new Uint8Array(buffer.buffer));
        // return Module.ccall('FLAC__stream_encoder_process_interleaved', 'number', ['number', 'number', 'number'], [encoder, heapBytes.byteOffset, buffer.length]);
        return Module.ccall('FLAC__stream_encoder_process_interleaved', 'number', ['number', 'number', 'number'], [encoder, heapBytes.byteOffset, no_items]);
    },
    FLAC__stream_encoder_init_file: Module.cwrap('FLAC__stream_encoder_init_file', 'number', [ 'number', 'number', 'number', 'number' ]),
    FLAC__stream_encoder_finish: Module.cwrap('FLAC__stream_encoder_finish', 'number', [ 'number' ]),
    FLAC__stream_encoder_delete: Module.cwrap('FLAC__stream_encoder_delete', 'number', [ 'number' ])

};
})();

if (typeof self !== "undefined" && self !== null){
    self.Flac = Flac; // make Flac accessible to other webworker scripts.
}
